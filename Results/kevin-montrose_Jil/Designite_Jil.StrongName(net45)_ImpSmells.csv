Implementation smell,Namespace,Class,File,Method,Description
Long Method,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The method has 109 lines of code.
Long Method,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The method has 131 lines of code.
Long Method,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,FindRecursiveTypes,The method has 106 lines of code.
Long Method,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has 147 lines of code.
Long Method,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has 147 lines of code.
Long Method,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The method has 2223 lines of code.
Long Method,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The method has 2223 lines of code.
Long Method,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,_InnerTryBinaryOperation,The method has 286 lines of code.
Long Method,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,The method has 496 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadEncodedStringWithBuffer,The method has 104 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The method has 125 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleTimeSpan,The method has 106 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The method has 324 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The method has 297 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DayOfWeek,The method has 195 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTime,The method has 126 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTimeOffset,The method has 127 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The method has 282 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The method has 281 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateWithOffset,The method has 145 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601TimeSpan,The method has 104 lines of code.
Long Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The method has 104 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadNumber,The method has 113 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadList,The method has 133 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadDictionary,The method has 137 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadObjectAutomata,The method has 151 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAndSetDiscriminantUnion,The method has 163 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadObjectDictionaryLookup,The method has 160 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAnonymousObjectDictionaryLookup,The method has 148 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAnonymousObjectAutomata,The method has 118 lines of code.
Long Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,Build,The method has 113 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithBuffer,The method has 104 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The method has 142 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The method has 121 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The method has 125 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpan,The method has 123 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The method has 100 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The method has 118 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601Date,The method has 123 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffset,The method has 110 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The method has 317 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The method has 310 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The method has 158 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The method has 153 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,The method has 147 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,The method has 148 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The method has 155 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The method has 104 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The method has 183 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The method has 178 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,The method has 165 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArrayThunkReader,The method has 103 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleThunkReader,The method has 101 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,The method has 166 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArrayThunkReader,The method has 102 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleThunkReader,The method has 101 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The method has 176 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArrayThunkReader,The method has 103 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalThunkReader,The method has 101 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The method has 146 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithBufferThunkReader,The method has 104 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The method has 129 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The method has 125 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,The method has 123 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The method has 320 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The method has 326 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The method has 100 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The method has 118 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,The method has 125 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpanThunkReader,The method has 123 lines of code.
Long Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,The method has 111 lines of code.
Long Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMember,The method has 105 lines of code.
Long Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WritePrimitive,The method has 120 lines of code.
Long Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,UnionAwareWriteMembers,The method has 123 lines of code.
Long Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteListFast,The method has 102 lines of code.
Long Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteEnumerable,The method has 116 lines of code.
Long Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDictionaryWithoutNulls,The method has 109 lines of code.
Long Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDictionaryWithNulls,The method has 123 lines of code.
Long Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValueIfNotNull,The method has 176 lines of code.
Long Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValue,The method has 134 lines of code.
Long Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The method has 120 lines of code.
Long Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The method has 112 lines of code.
Long Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The method has 139 lines of code.
Long Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The method has 138 lines of code.
Long Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The method has 111 lines of code.
Long Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The method has 116 lines of code.
Long Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The method has 120 lines of code.
Long Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The method has 132 lines of code.
Long Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The method has 139 lines of code.
Long Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The method has 149 lines of code.
Long Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The method has 103 lines of code.
Long Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The method has 110 lines of code.
Long Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The method has 116 lines of code.
Complex Method,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,Cyclomatic complexity of the method is 9
Complex Method,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,IsAnonymouseClass,Cyclomatic complexity of the method is 15
Complex Method,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,Cyclomatic complexity of the method is 21
Complex Method,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,ConvertType,Cyclomatic complexity of the method is 10
Complex Method,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,JsonEscapeFast,Cyclomatic complexity of the method is 38
Complex Method,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,JsonEscape,Cyclomatic complexity of the method is 39
Complex Method,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,FindChildTypes,Cyclomatic complexity of the method is 18
Complex Method,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,Cyclomatic complexity of the method is 17
Complex Method,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,GetAnonymousNameToConstructorMap_Guess,Cyclomatic complexity of the method is 9
Complex Method,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,FindRecursiveTypes,Cyclomatic complexity of the method is 11
Complex Method,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,FindReusedTypes,Cyclomatic complexity of the method is 12
Complex Method,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,Cyclomatic complexity of the method is 9
Complex Method,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,Cyclomatic complexity of the method is 9
Complex Method,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,CheckUnionLegality,Cyclomatic complexity of the method is 12
Complex Method,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,GetDescriminantCharacters,Cyclomatic complexity of the method is 13
Complex Method,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,Cyclomatic complexity of the method is 320
Complex Method,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,Cyclomatic complexity of the method is 320
Complex Method,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,Cyclomatic complexity of the method is 12
Complex Method,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,Cyclomatic complexity of the method is 12
Complex Method,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,GetHashCode,Cyclomatic complexity of the method is 10
Complex Method,Jil.DeserializeDynamic,DynamicDeserializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,_DeserializeMember,Cyclomatic complexity of the method is 9
Complex Method,Jil.DeserializeDynamic,DynamicDeserializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,DeserializeObject,Cyclomatic complexity of the method is 11
Complex Method,Jil.DeserializeDynamic,DynamicDeserializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,DeserializeNumber,Cyclomatic complexity of the method is 10
Complex Method,Jil.DeserializeDynamic,DynamicDeserializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,_DeserializeMemberThunkReader,Cyclomatic complexity of the method is 9
Complex Method,Jil.DeserializeDynamic,DynamicDeserializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,DeserializeObjectThunkReader,Cyclomatic complexity of the method is 11
Complex Method,Jil.DeserializeDynamic,DynamicDeserializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,DeserializeNumberThunkReader,Cyclomatic complexity of the method is 10
Complex Method,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,_InnerTryBinaryOperation,Cyclomatic complexity of the method is 60
Complex Method,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,_InnerTryUnaryOperation,Cyclomatic complexity of the method is 12
Complex Method,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,_InnerTryGetIndex,Cyclomatic complexity of the method is 10
Complex Method,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,Cyclomatic complexity of the method is 86
Complex Method,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,_InnerTryInvokeMember,Cyclomatic complexity of the method is 8
Complex Method,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,FastNumberToSByte,Cyclomatic complexity of the method is 8
Complex Method,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,FastNumberToShort,Cyclomatic complexity of the method is 8
Complex Method,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,FastNumberToInt,Cyclomatic complexity of the method is 8
Complex Method,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,FastNumberToLong,Cyclomatic complexity of the method is 8
Complex Method,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastDateTime,Cyclomatic complexity of the method is 8
Complex Method,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastDateTimeOffset,Cyclomatic complexity of the method is 8
Complex Method,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,Cyclomatic complexity of the method is 16
Complex Method,Jil.DeserializeDynamic,ArrayEnumeratorWrapper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Enumerators.cs,TryInvokeMember,Cyclomatic complexity of the method is 15
Complex Method,Jil.DeserializeDynamic,ObjectEnumeratorWrapper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Enumerators.cs,TryInvokeMember,Cyclomatic complexity of the method is 15
Complex Method,Jil.DeserializeDynamic,KeyValuePairWrapper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Enumerators.cs,TryInvokeMember,Cyclomatic complexity of the method is 9
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadEncodedStringWithBuffer,Cyclomatic complexity of the method is 29
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,Cyclomatic complexity of the method is 17
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadDouble,Cyclomatic complexity of the method is 11
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULong,Cyclomatic complexity of the method is 9
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,Cyclomatic complexity of the method is 11
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,Cyclomatic complexity of the method is 16
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,Cyclomatic complexity of the method is 23
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleTimeSpan,Cyclomatic complexity of the method is 16
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,Cyclomatic complexity of the method is 50
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,Cyclomatic complexity of the method is 50
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DayOfWeek,Cyclomatic complexity of the method is 33
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTime,Cyclomatic complexity of the method is 14
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTimeOffset,Cyclomatic complexity of the method is 14
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601TimeZoneOffset,Cyclomatic complexity of the method is 15
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,Cyclomatic complexity of the method is 65
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,Cyclomatic complexity of the method is 9
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,Cyclomatic complexity of the method is 53
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateWithOffset,Cyclomatic complexity of the method is 14
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601TimeSpan,Cyclomatic complexity of the method is 20
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadDatePart,Cyclomatic complexity of the method is 15
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,Cyclomatic complexity of the method is 13
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadEncodedStringWithBufferThunkReader,Cyclomatic complexity of the method is 29
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,Cyclomatic complexity of the method is 17
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadDoubleThunkReader,Cyclomatic complexity of the method is 11
Complex Method,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULongThunkReader,Cyclomatic complexity of the method is 9
Complex Method,Jil.Deserialize,EnumLookup<EnumType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\EnumLookup.cs,LoadConstantOfType,Cyclomatic complexity of the method is 9
Complex Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadNumber,Cyclomatic complexity of the method is 20
Complex Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadPrimitive,Cyclomatic complexity of the method is 8
Complex Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,LoadConstantOfType,Cyclomatic complexity of the method is 9
Complex Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadList,Cyclomatic complexity of the method is 11
Complex Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadDictionary,Cyclomatic complexity of the method is 10
Complex Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadObjectAutomata,Cyclomatic complexity of the method is 10
Complex Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAndSetDiscriminantUnion,Cyclomatic complexity of the method is 12
Complex Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadObjectDictionaryLookup,Cyclomatic complexity of the method is 9
Complex Method,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,Build,Cyclomatic complexity of the method is 16
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,Cyclomatic complexity of the method is 9
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipWithLeadChar,Cyclomatic complexity of the method is 18
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipObject,Cyclomatic complexity of the method is 8
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadChar,Cyclomatic complexity of the method is 19
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedString,Cyclomatic complexity of the method is 14
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithCharArray,Cyclomatic complexity of the method is 15
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,Cyclomatic complexity of the method is 13
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithBuffer,Cyclomatic complexity of the method is 29
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,Cyclomatic complexity of the method is 24
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpan,Cyclomatic complexity of the method is 16
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,Cyclomatic complexity of the method is 25
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,Cyclomatic complexity of the method is 32
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123DayOfWeek,Cyclomatic complexity of the method is 23
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadBool,Cyclomatic complexity of the method is 18
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_IsNull,Cyclomatic complexity of the method is 9
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601Date,Cyclomatic complexity of the method is 13
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffset,Cyclomatic complexity of the method is 13
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,Cyclomatic complexity of the method is 65
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,Cyclomatic complexity of the method is 53
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,Cyclomatic complexity of the method is 16
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,Cyclomatic complexity of the method is 9
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpan,Cyclomatic complexity of the method is 18
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadDatePart,Cyclomatic complexity of the method is 15
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,Cyclomatic complexity of the method is 13
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,Cyclomatic complexity of the method is 12
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8,Cyclomatic complexity of the method is 8
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,Cyclomatic complexity of the method is 10
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,Cyclomatic complexity of the method is 8
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,Cyclomatic complexity of the method is 15
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,Cyclomatic complexity of the method is 13
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,Cyclomatic complexity of the method is 25
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,Cyclomatic complexity of the method is 23
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDouble,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArray,Cyclomatic complexity of the method is 19
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,Cyclomatic complexity of the method is 30
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingle,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArray,Cyclomatic complexity of the method is 19
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,Cyclomatic complexity of the method is 30
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimal,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArray,Cyclomatic complexity of the method is 19
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,Cyclomatic complexity of the method is 32
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8ThunkReader,Cyclomatic complexity of the method is 8
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,Cyclomatic complexity of the method is 10
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,Cyclomatic complexity of the method is 8
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,Cyclomatic complexity of the method is 15
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,Cyclomatic complexity of the method is 13
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,Cyclomatic complexity of the method is 25
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,Cyclomatic complexity of the method is 23
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,Cyclomatic complexity of the method is 29
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArrayThunkReader,Cyclomatic complexity of the method is 18
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleThunkReader,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,Cyclomatic complexity of the method is 29
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArrayThunkReader,Cyclomatic complexity of the method is 18
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleThunkReader,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,Cyclomatic complexity of the method is 31
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArrayThunkReader,Cyclomatic complexity of the method is 18
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalThunkReader,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,Cyclomatic complexity of the method is 24
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithCharArrayThunkReader,Cyclomatic complexity of the method is 15
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,Cyclomatic complexity of the method is 13
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithBufferThunkReader,Cyclomatic complexity of the method is 29
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringThunkReader,Cyclomatic complexity of the method is 14
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,Cyclomatic complexity of the method is 9
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,Cyclomatic complexity of the method is 17
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipWithLeadCharThunkReader,Cyclomatic complexity of the method is 18
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadCharThunkReader,Cyclomatic complexity of the method is 19
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipObjectThunkReader,Cyclomatic complexity of the method is 8
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,Cyclomatic complexity of the method is 12
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,Cyclomatic complexity of the method is 13
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,Cyclomatic complexity of the method is 65
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,Cyclomatic complexity of the method is 53
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,Cyclomatic complexity of the method is 16
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,Cyclomatic complexity of the method is 25
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,Cyclomatic complexity of the method is 32
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123DayOfWeekThunkReader,Cyclomatic complexity of the method is 23
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,Cyclomatic complexity of the method is 13
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpanThunkReader,Cyclomatic complexity of the method is 16
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,Cyclomatic complexity of the method is 18
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,Cyclomatic complexity of the method is 13
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadDatePartThunkReader,Cyclomatic complexity of the method is 15
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadBoolThunkReader,Cyclomatic complexity of the method is 18
Complex Method,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_IsNullThunkReader,Cyclomatic complexity of the method is 9
Complex Method,Jil.Deserialize,NameAutomata<T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\NameAutomata.cs,NextChar,Cyclomatic complexity of the method is 10
Complex Method,Jil.Deserialize,SetterLookup<ForType;SerializationNameFormatType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\SetterLookup.cs,GetOrderedSetters,Cyclomatic complexity of the method is 8
Complex Method,Jil.Deserialize,UnionLookup<Config>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\UnionLookup.cs,UnionLookup,Cyclomatic complexity of the method is 17
Complex Method,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,SerializeDynamicObject,Cyclomatic complexity of the method is 13
Complex Method,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,Cyclomatic complexity of the method is 12
Complex Method,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,SerializeInternal,Cyclomatic complexity of the method is 13
Complex Method,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,Cyclomatic complexity of the method is 12
Complex Method,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,Cyclomatic complexity of the method is 12
Complex Method,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,Cyclomatic complexity of the method is 12
Complex Method,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,Cyclomatic complexity of the method is 12
Complex Method,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,Cyclomatic complexity of the method is 12
Complex Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteString,Cyclomatic complexity of the method is 9
Complex Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMember,Cyclomatic complexity of the method is 18
Complex Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteNullable,Cyclomatic complexity of the method is 9
Complex Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WritePrimitive,Cyclomatic complexity of the method is 19
Complex Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteEncodedChar,Cyclomatic complexity of the method is 9
Complex Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,UnionAwareWriteMembers,Cyclomatic complexity of the method is 14
Complex Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMemberIfNonNull,Cyclomatic complexity of the method is 11
Complex Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMemberConditionally,Cyclomatic complexity of the method is 8
Complex Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteEnumerable,Cyclomatic complexity of the method is 9
Complex Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteElement,Cyclomatic complexity of the method is 10
Complex Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDictionaryWithNulls,Cyclomatic complexity of the method is 9
Complex Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValueIfNotNull,Cyclomatic complexity of the method is 19
Complex Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValue,Cyclomatic complexity of the method is 16
Complex Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteEnum,Cyclomatic complexity of the method is 13
Complex Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,Build,Cyclomatic complexity of the method is 8
Complex Method,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,BuildToString,Cyclomatic complexity of the method is 8
Complex Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,Cyclomatic complexity of the method is 10
Complex Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,Cyclomatic complexity of the method is 12
Complex Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,Cyclomatic complexity of the method is 10
Complex Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,Cyclomatic complexity of the method is 12
Complex Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,Cyclomatic complexity of the method is 10
Complex Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,Cyclomatic complexity of the method is 18
Complex Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,Cyclomatic complexity of the method is 10
Complex Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,Cyclomatic complexity of the method is 12
Complex Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,Cyclomatic complexity of the method is 10
Complex Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,Cyclomatic complexity of the method is 12
Complex Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,Cyclomatic complexity of the method is 10
Complex Method,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,Cyclomatic complexity of the method is 12
Complex Method,Jil.Serialize,ThunkWriter,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,IsConstantCommonString,Cyclomatic complexity of the method is 9
Complex Method,Jil.Serialize,ThunkWriter,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,IsConstantFormattingString,Cyclomatic complexity of the method is 25
Complex Method,Jil.Serialize,ThunkWriter,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,IsConstant000EscapeString,Cyclomatic complexity of the method is 12
Complex Method,Jil.Serialize,ThunkWriter,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,IsConstant001EscapeString,Cyclomatic complexity of the method is 17
Complex Method,Jil.Serialize,ThunkWriter,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,IsConstantDaysOfWeek,Cyclomatic complexity of the method is 8
Long Parameter List,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadOp,The method has 7 parameters. Parameters: cil' ix' fieldHandle' opcode' intOperand' longOperand' doubleOperand
Long Parameter List,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The method has 8 parameters. Parameters: op' cil' instrStart' operandStart' advance' constantInt' constantLong' constantDouble
Long Parameter List,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,CheckUnionLegality,The method has 8 parameters. Parameters: dateFormat' memberName' possible' discriminantChars' destinationType' charsetToMember' allowsNull' errorMessage
Long Parameter List,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,Options,The method has 6 parameters. Parameters: prettyPrint' excludeNulls' jsonp' dateFormat' includeInherited' unspecifiedDateTimeKindBehavior
Long Parameter List,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,Options,The method has 7 parameters. Parameters: prettyPrint' excludeNulls' jsonp' dateFormat' includeInherited' unspecifiedDateTimeKindBehavior' serializationNameFormat
Long Parameter List,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,ForFastNumber,The method has 6 parameters. Parameters: neg' a' b' bLen' c' options
Long Parameter List,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The method has 5 parameters. Parameters: firstChar' reader' length' uintRet' ulongRet
Long Parameter List,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601TimeZoneOffset,The method has 6 parameters. Parameters: str' start' stop' hasSeparators' unknownLocalOffset' ts
Long Parameter List,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The method has 5 parameters. Parameters: str' start' stop' hasSeparators' dt
Long Parameter List,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The method has 5 parameters. Parameters: str' start' stop' hasSeparators' ts
Long Parameter List,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadDatePart,The method has 7 parameters. Parameters: str' ix' year' month' week' day' hasTimePart
Long Parameter List,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadPart,The method has 5 parameters. Parameters: str' ix' whole' fraction' fracLen
Long Parameter List,Jil.DeserializeDynamic,ObjectBuilder,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\ObjectBuilder.cs,PutFastNumber,The method has 5 parameters. Parameters: negative' beforeDot' afterDot' afterDotLength' afterE
Long Parameter List,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,InlineDeserializer,The method has 6 parameters. Parameters: optionsType' dateFormat' serializationNameFormat' readingFromString' preferIndirectSerialization' allPrimitivesThroughHelpers
Long Parameter List,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,The method has 5 parameters. Parameters: reader' buffer' start' stop' unknownLocalOffset
Long Parameter List,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadDatePart,The method has 8 parameters. Parameters: reader' str' strLen' ix' year' month' week' day
Long Parameter List,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The method has 5 parameters. Parameters: reader' str' strLen' ix' ticks
Long Parameter List,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadPart,The method has 7 parameters. Parameters: reader' str' strLen' ix' whole' fraction' fracLen
Long Parameter List,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,The method has 5 parameters. Parameters: reader' buffer' start' stop' unknownLocalOffset
Long Parameter List,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The method has 5 parameters. Parameters: reader' str' strLen' ix' ticks
Long Parameter List,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadPartThunkReader,The method has 7 parameters. Parameters: reader' str' strLen' ix' whole' fraction' fracLen
Long Parameter List,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadDatePartThunkReader,The method has 8 parameters. Parameters: reader' str' strLen' ix' year' month' week' day
Long Parameter List,Jil.Deserialize,NameAutomata<T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\NameAutomata.cs,NextChar,The method has 5 parameters. Parameters: readerType' d' nameValues' pos' onMatchChar
Long Parameter List,Jil.Deserialize,NameAutomata<T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\NameAutomata.cs,CreateFold,The method has 8 parameters. Parameters: readerType' names' initialize' doReturn' skipWhitespace' foldMultipleValues' caseSensitive' defaultValue
Long Parameter List,Jil.Deserialize,Data<V>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\NameAutomata.cs,Data,The method has 9 parameters. Parameters: addAction' emit' doReturn' start' failure' local_ch' skipWhitespace' foldMultipleValues' caseSensitive
Long Parameter List,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,SerializeSemiStatically,The method has 5 parameters. Parameters: dynamicMember' stream' val' opts' depth
Long Parameter List,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,SerializeInternal,The method has 5 parameters. Parameters: dynamicMember' stream' obj' opts' depth
Long Parameter List,Jil.SerializeDynamic,RecursiveSerializerCache<T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\RecursiveSerializerCache.cs,_GetFor,The method has 5 parameters. Parameters: prettyPrint' excludeNulls' jsonp' dateFormat' includeInherited
Long Parameter List,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,InlineSerializer,The method has 10 parameters. Parameters: recursionLookupOptionsType' pretty' excludeNulls' jsonp' dateFormat' includeInherited' dateTimeBehavior' serializationNameFormat' callOutOnPossibleDynamic' buildToString
Long Parameter List,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,UnionAwareWriteMembers,The method has 8 parameters. Parameters: objectOnStack' leaveObjectOnStack' onType' members' inLocal' isFirst' firstPass' doWriteMember
Long Parameter List,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValueIfNotNull,The method has 5 parameters. Parameters: dictionaryMember' ontheStack' keyType' elementType' isFirst
Long Parameter List,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteEnumOrPrimitive,The method has 6 parameters. Parameters: member' enumType' requiresQuotes' hasTextWriter' popTextWriter' containedInNullable
Long Parameter List,Jil.Serialize,InlineSerializerHelper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,Build,The method has 9 parameters. Parameters: optionsType' pretty' excludeNulls' jsonp' dateFormat' includeInherited' dateTimeBehavior' serializationNameFormat' exceptionDuringBuild
Long Parameter List,Jil.Serialize,InlineSerializerHelper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,_BuildWithDynamism,The method has 9 parameters. Parameters: dynamicMember' optionsType' pretty' excludeNulls' jsonp' dateFormat' includeInherited' dateTimeBehavior' serializationNameFormat
Long Parameter List,Jil.Serialize,InlineSerializerHelper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,BuildToString,The method has 9 parameters. Parameters: optionsType' pretty' excludeNulls' jsonp' dateFormat' includeInherited' dateTimeBehavior' serializationNameFormat' exceptionDuringBuild
Long Parameter List,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The method has 5 parameters. Parameters: writer' dt' hours' minutes' buffer
Long Parameter List,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteMicrosoftStyleWithOffset,The method has 5 parameters. Parameters: writer' utcTicks' hours' minutes' buffer
Long Parameter List,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The method has 5 parameters. Parameters: writer' dt' hours' minutes' buffer
Long Parameter List,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteMicrosoftStyleWithOffset_ThunkWriter,The method has 5 parameters. Parameters: writer' utcTicks' hours' minutes' buffer
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,Options,The length of the parameter unspecifiedDateTimeKindBehavior is 31.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,Options,The length of the parameter unspecifiedDateTimeKindBehavior is 31.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintExcludeNullsIncludeInherited is 39.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintExcludeNullsCamelCase is 32.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintJSONPIncludeInherited is 32.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintIncludeInheritedUtc is 30.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintIncludeInheritedCamelCase is 36.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ExcludeNullsJSONPIncludeInherited is 33.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ExcludeNullsIncludeInheritedUtc is 31.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ExcludeNullsIncludeInheritedCamelCase is 37.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter JSONPIncludeInheritedCamelCase is 30.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintExcludeNullsJSONPIncludeInherited is 44.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintExcludeNullsJSONPUtc is 31.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintExcludeNullsJSONPCamelCase is 37.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintExcludeNullsIncludeInheritedUtc is 42.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintExcludeNullsIncludeInheritedCamelCase is 48.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintExcludeNullsUtcCamelCase is 35.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintJSONPIncludeInheritedUtc is 35.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintJSONPIncludeInheritedCamelCase is 41.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintIncludeInheritedUtcCamelCase is 39.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ExcludeNullsJSONPIncludeInheritedUtc is 36.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ExcludeNullsJSONPIncludeInheritedCamelCase is 42.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ExcludeNullsIncludeInheritedUtcCamelCase is 40.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter JSONPIncludeInheritedUtcCamelCase is 33.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintExcludeNullsJSONPIncludeInheritedUtc is 47.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintExcludeNullsJSONPIncludeInheritedCamelCase is 53.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintExcludeNullsJSONPUtcCamelCase is 40.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintExcludeNullsIncludeInheritedUtcCamelCase is 51.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintJSONPIncludeInheritedUtcCamelCase is 44.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ExcludeNullsJSONPIncludeInheritedUtcCamelCase is 45.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter PrettyPrintExcludeNullsJSONPIncludeInheritedUtcCamelCase is 56.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintExcludeNulls is 30.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintIncludeInherited is 34.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601ExcludeNullsIncludeInherited is 35.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601IncludeInheritedCamelCase is 32.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintExcludeNullsJSONP is 35.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintExcludeNullsIncludeInherited is 46.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintExcludeNullsUtc is 33.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintExcludeNullsCamelCase is 39.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintJSONPIncludeInherited is 39.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintJSONPCamelCase is 32.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintIncludeInheritedUtc is 37.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintIncludeInheritedCamelCase is 43.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintUtcCamelCase is 30.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601ExcludeNullsJSONPIncludeInherited is 40.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601ExcludeNullsJSONPCamelCase is 33.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601ExcludeNullsIncludeInheritedUtc is 38.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601ExcludeNullsIncludeInheritedCamelCase is 44.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601ExcludeNullsUtcCamelCase is 31.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601JSONPIncludeInheritedUtc is 31.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601JSONPIncludeInheritedCamelCase is 37.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601IncludeInheritedUtcCamelCase is 35.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintExcludeNullsJSONPIncludeInherited is 51.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintExcludeNullsJSONPUtc is 38.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintExcludeNullsJSONPCamelCase is 44.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintExcludeNullsIncludeInheritedUtc is 49.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintExcludeNullsIncludeInheritedCamelCase is 55.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintExcludeNullsUtcCamelCase is 42.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintJSONPIncludeInheritedUtc is 42.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintJSONPIncludeInheritedCamelCase is 48.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintJSONPUtcCamelCase is 35.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintIncludeInheritedUtcCamelCase is 46.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601ExcludeNullsJSONPIncludeInheritedUtc is 43.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601ExcludeNullsJSONPIncludeInheritedCamelCase is 49.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601ExcludeNullsJSONPUtcCamelCase is 36.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601ExcludeNullsIncludeInheritedUtcCamelCase is 47.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601JSONPIncludeInheritedUtcCamelCase is 40.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintExcludeNullsJSONPIncludeInheritedUtc is 54.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintExcludeNullsJSONPIncludeInheritedCamelCase is 60.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase is 47.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintExcludeNullsIncludeInheritedUtcCamelCase is 58.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintJSONPIncludeInheritedUtcCamelCase is 51.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601ExcludeNullsJSONPIncludeInheritedUtcCamelCase is 52.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter ISO8601PrettyPrintExcludeNullsJSONPIncludeInheritedUtcCamelCase is 63.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrint is 37.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochExcludeNulls is 38.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochJSONP is 31.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochIncludeInherited is 42.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochCamelCase is 35.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintExcludeNulls is 49.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintJSONP is 42.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintIncludeInherited is 53.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintUtc is 40.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintCamelCase is 46.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochExcludeNullsJSONP is 43.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochExcludeNullsIncludeInherited is 54.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochExcludeNullsUtc is 41.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochExcludeNullsCamelCase is 47.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochJSONPIncludeInherited is 47.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochJSONPUtc is 34.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochJSONPCamelCase is 40.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochIncludeInheritedUtc is 45.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochIncludeInheritedCamelCase is 51.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochUtcCamelCase is 38.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONP is 54.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInherited is 65.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintExcludeNullsUtc is 52.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintExcludeNullsCamelCase is 58.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintJSONPIncludeInherited is 58.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintJSONPUtc is 45.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintJSONPCamelCase is 51.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintIncludeInheritedUtc is 56.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintIncludeInheritedCamelCase is 62.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintUtcCamelCase is 49.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochExcludeNullsJSONPIncludeInherited is 59.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochExcludeNullsJSONPUtc is 46.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochExcludeNullsJSONPCamelCase is 52.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochExcludeNullsIncludeInheritedUtc is 57.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochExcludeNullsIncludeInheritedCamelCase is 63.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochExcludeNullsUtcCamelCase is 50.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochJSONPIncludeInheritedUtc is 50.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochJSONPIncludeInheritedCamelCase is 56.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochJSONPUtcCamelCase is 43.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochIncludeInheritedUtcCamelCase is 54.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInherited is 70.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPUtc is 57.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPCamelCase is 63.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedUtc is 68.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedCamelCase is 74.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintExcludeNullsUtcCamelCase is 61.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedUtc is 61.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedCamelCase is 67.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintJSONPUtcCamelCase is 54.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintIncludeInheritedUtcCamelCase is 65.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedUtc is 62.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedCamelCase is 68.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochExcludeNullsJSONPUtcCamelCase is 55.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochExcludeNullsIncludeInheritedUtcCamelCase is 66.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochJSONPIncludeInheritedUtcCamelCase is 59.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedUtc is 73.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedCamelCase is 79.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPUtcCamelCase is 66.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedUtcCamelCase is 77.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedUtcCamelCase is 70.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedUtcCamelCase is 71.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter MillisecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedUtcCamelCase is 82.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintExcludeNulls is 30.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintIncludeInherited is 34.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123ExcludeNullsIncludeInherited is 35.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123IncludeInheritedCamelCase is 32.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintExcludeNullsJSONP is 35.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintExcludeNullsIncludeInherited is 46.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintExcludeNullsUtc is 33.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintExcludeNullsCamelCase is 39.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintJSONPIncludeInherited is 39.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintJSONPCamelCase is 32.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintIncludeInheritedUtc is 37.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintIncludeInheritedCamelCase is 43.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintUtcCamelCase is 30.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123ExcludeNullsJSONPIncludeInherited is 40.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123ExcludeNullsJSONPCamelCase is 33.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123ExcludeNullsIncludeInheritedUtc is 38.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123ExcludeNullsIncludeInheritedCamelCase is 44.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123ExcludeNullsUtcCamelCase is 31.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123JSONPIncludeInheritedUtc is 31.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123JSONPIncludeInheritedCamelCase is 37.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123IncludeInheritedUtcCamelCase is 35.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintExcludeNullsJSONPIncludeInherited is 51.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintExcludeNullsJSONPUtc is 38.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintExcludeNullsJSONPCamelCase is 44.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintExcludeNullsIncludeInheritedUtc is 49.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintExcludeNullsIncludeInheritedCamelCase is 55.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintExcludeNullsUtcCamelCase is 42.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintJSONPIncludeInheritedUtc is 42.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintJSONPIncludeInheritedCamelCase is 48.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintJSONPUtcCamelCase is 35.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintIncludeInheritedUtcCamelCase is 46.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123ExcludeNullsJSONPIncludeInheritedUtc is 43.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123ExcludeNullsJSONPIncludeInheritedCamelCase is 49.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123ExcludeNullsJSONPUtcCamelCase is 36.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123ExcludeNullsIncludeInheritedUtcCamelCase is 47.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123JSONPIncludeInheritedUtcCamelCase is 40.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintExcludeNullsJSONPIncludeInheritedUtc is 54.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintExcludeNullsJSONPIncludeInheritedCamelCase is 60.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase is 47.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintExcludeNullsIncludeInheritedUtcCamelCase is 58.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintJSONPIncludeInheritedUtcCamelCase is 51.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123ExcludeNullsJSONPIncludeInheritedUtcCamelCase is 52.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter RFC1123PrettyPrintExcludeNullsJSONPIncludeInheritedUtcCamelCase is 63.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrint is 32.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochExcludeNulls is 33.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochIncludeInherited is 37.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochCamelCase is 30.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintExcludeNulls is 44.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintJSONP is 37.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintIncludeInherited is 48.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintUtc is 35.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintCamelCase is 41.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochExcludeNullsJSONP is 38.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochExcludeNullsIncludeInherited is 49.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochExcludeNullsUtc is 36.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochExcludeNullsCamelCase is 42.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochJSONPIncludeInherited is 42.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochJSONPCamelCase is 35.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochIncludeInheritedUtc is 40.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochIncludeInheritedCamelCase is 46.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochUtcCamelCase is 33.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONP is 49.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInherited is 60.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintExcludeNullsUtc is 47.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintExcludeNullsCamelCase is 53.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintJSONPIncludeInherited is 53.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintJSONPUtc is 40.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintJSONPCamelCase is 46.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintIncludeInheritedUtc is 51.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintIncludeInheritedCamelCase is 57.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintUtcCamelCase is 44.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochExcludeNullsJSONPIncludeInherited is 54.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochExcludeNullsJSONPUtc is 41.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochExcludeNullsJSONPCamelCase is 47.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochExcludeNullsIncludeInheritedUtc is 52.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochExcludeNullsIncludeInheritedCamelCase is 58.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochExcludeNullsUtcCamelCase is 45.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochJSONPIncludeInheritedUtc is 45.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochJSONPIncludeInheritedCamelCase is 51.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochJSONPUtcCamelCase is 38.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochIncludeInheritedUtcCamelCase is 49.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInherited is 65.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPUtc is 52.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPCamelCase is 58.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedUtc is 63.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedCamelCase is 69.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintExcludeNullsUtcCamelCase is 56.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedUtc is 56.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedCamelCase is 62.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintJSONPUtcCamelCase is 49.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintIncludeInheritedUtcCamelCase is 60.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedUtc is 57.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedCamelCase is 63.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochExcludeNullsJSONPUtcCamelCase is 50.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochExcludeNullsIncludeInheritedUtcCamelCase is 61.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochJSONPIncludeInheritedUtcCamelCase is 54.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedUtc is 68.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedCamelCase is 74.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPUtcCamelCase is 61.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintExcludeNullsIncludeInheritedUtcCamelCase is 72.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintJSONPIncludeInheritedUtcCamelCase is 65.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochExcludeNullsJSONPIncludeInheritedUtcCamelCase is 66.
Long Identifier,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,,The length of the parameter SecondsSinceUnixEpochPrettyPrintExcludeNullsJSONPIncludeInheritedUtcCamelCase is 77.
Long Identifier,Jil.Deserialize,AnonymousTypeLookup<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\AnonymousTypeLookup.cs,,The length of the parameter _findConstructorParameterIndex is 30.
Long Identifier,Jil.Deserialize,AnonymousTypeLookup<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\AnonymousTypeLookup.cs,,The length of the parameter _findConstructorParameterIndexThunkReader is 41.
Long Identifier,Jil.Deserialize,DeserializeIndirect,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\DeserializeIndirect.cs,,The length of the parameter DeserializeFromStreamIndirectCache is 34.
Long Identifier,Jil.Deserialize,DeserializeIndirect,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\DeserializeIndirect.cs,,The length of the parameter DeserializeFromStringIndirectCache is 34.
Long Identifier,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,,The length of the parameter DeserializationException_Cons_string_ThunkWriter_bool is 53.
Long Identifier,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,,The length of the parameter DeserializationException_Cons_string_TextReader_bool is 52.
Long Identifier,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,,The length of the parameter ReadEncodedStringWithCharArray is 30.
Long Identifier,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,,The length of the parameter ReadISO8601DateWithOffsetWithCharArray is 38.
Long Identifier,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,,The length of the parameter DiscardMicrosoftTimeZoneOffset is 30.
Long Identifier,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,,The length of the parameter ReadDoubleCharArrayThunkReader is 30.
Long Identifier,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,,The length of the parameter ReadSingleCharArrayThunkReader is 30.
Long Identifier,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,,The length of the parameter ReadDecimalCharArrayThunkReader is 31.
Long Identifier,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,,The length of the parameter ReadEncodedStringWithCharArrayThunkReader is 41.
Long Identifier,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,,The length of the parameter ReadEncodedStringWithBufferThunkReader is 38.
Long Identifier,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,,The length of the parameter DiscardMicrosoftTimeZoneOffsetThunkReader is 41.
Long Identifier,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,,The length of the parameter ReadISO8601DateWithCharArrayThunkReader is 39.
Long Identifier,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,,The length of the parameter ReadISO8601DateWithOffsetWithCharArrayThunkReader is 49.
Long Identifier,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,,The length of the parameter ReadISO8601DateWithOffsetThunkReader is 36.
Long Identifier,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,,The length of the parameter ReadMicrosoftTimeSpanThunkReader is 32.
Long Identifier,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,,The length of the parameter ReadISO8601TimeSpanThunkReader is 30.
Long Identifier,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,,The length of the parameter ReadMicrosoftDateTimeOffsetThunkReader is 38.
Long Identifier,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,,The length of the parameter ThrowNoDefinedValueInEnumThunkReader is 36.
Long Identifier,Jil.Deserialize,Helper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\NameAutomata.cs,,The length of the parameter ExpectUnicodeHexQuadThunkReader is 31.
Long Identifier,Jil.Deserialize,TypeCache<TOptions;T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\TypeCaches.cs,,The length of the parameter ExceptionDuringBuildFromStream is 30.
Long Identifier,Jil.Deserialize,TypeCache<TOptions;T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\TypeCaches.cs,,The length of the parameter ExceptionDuringBuildFromString is 30.
Long Identifier,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,,The length of the parameter GetSemiStaticInlineSerializerForCache is 37.
Long Identifier,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,,The length of the parameter GetSemiStaticInlineSerializerFor is 32.
Long Identifier,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,,The length of the parameter GetSemiStaticSerializerForCache is 31.
Long Identifier,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,,The length of the parameter IDictionaryStringObjectConvertBinder is 36.
Long Identifier,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,,The length of the parameter UseCustomRFC1123DateTimeFormatting is 34.
Long Identifier,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,,The length of the parameter ThunkWriter_WriteCommonConstant is 31.
Long Identifier,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,,The length of the parameter ThunkWriter_WriteFormatingContant is 33.
Long Identifier,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,,The length of the parameter ThunkWriter_WriteValueConstant is 30.
Long Identifier,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,,The length of the parameter ThunkWriter_Write000EscapeConstant is 34.
Long Identifier,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,,The length of the parameter ThunkWriter_Write001EscapeConstant is 34.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter CustomISO8601WithOffsetToString is 31.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter WriteEncodedStringWithQuotesWithNullsInlineUnsafe is 49.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter WriteEncodedStringWithQuotesWithNullsInlineJSONPUnsafe is 54.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter WriteEncodedStringWithNullsInlineJSONPUnsafe is 44.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter WriteEncodedStringWithNullsInlineUnsafe is 39.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter CustomWriteMicrosoftStyleWithOffset is 35.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter CustomISO8601ToString_ThunkWriter is 33.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter CustomISO8601WithOffsetToString_ThunkWriter is 43.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter WriteEncodedStringWithQuotesWithNullsInlineUnsafe_ThunkWriter is 61.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter WriteEncodedStringWithQuotesWithNullsInlineJSONPUnsafe_ThunkWriter is 66.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter WriteEncodedStringWithNullsInlineJSONPUnsafe_ThunkWriter is 56.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter WriteEncodedStringWithNullsInlineUnsafe_ThunkWriter is 51.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter CustomWriteIntUnrolledSigned_ThunkWriter is 40.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter CustomWriteUIntUnrolled_ThunkWriter is 35.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter WriteTimeSpanISO8601_ThunkWriter is 32.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter WriteTimeSpanMicrosoft_ThunkWriter is 34.
Long Identifier,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,,The length of the parameter CustomWriteMicrosoftStyleWithOffset_ThunkWriter is 47.
Long Identifier,Jil.Serialize,ThunkWriterCharArrays,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,,The length of the parameter ConstantString_Formatting_Chars is 31.
Long Identifier,Jil.Serialize,ThunkWriterCharArrays,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,,The length of the parameter ConstantString_000Escape_Chars is 30.
Long Identifier,Jil.Serialize,ThunkWriterCharArrays,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,,The length of the parameter ConstantString_001Escape_Chars is 30.
Long Identifier,Jil.Serialize,TypeCache<TOptions;T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\TypeCaches.cs,,The length of the parameter StringThunkExceptionDuringBuild is 31.
Long Statement,Jil.Common,EnumValues,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\EnumValues.cs,TryParse,The length of the statement  "            var specific = typeof(EnumValues<>).MakeGenericType(enumType).GetMethod("TryParse"' BindingFlags.Public | BindingFlags.Static); " is 127.
Long Statement,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,ShouldConvertEnum,The length of the statement  "            if (!GetEnumUnderlyingPrimitiveInfo(primitiveType' out underlyingSigned' out underlyingSize) || !GetEnumUnderlyingPrimitiveInfo(primitiveType' out targetSigned' out targetSize)) " is 177.
Long Statement,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,ShouldConvertEnum,The length of the statement  "                throw new ConstructionException("Cannot map enum [" + enumType + "] with underlying type [" + primitiveType + "] to [" + convert + "]' convert is not an acceptable integer primitive type"); " is 189.
Long Statement,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,ShouldConvertEnum,The length of the statement  "                throw new ConstructionException("Cannot map enum [" + enumType + "] with underlying type [" + primitiveType + "] to [" + convert + "]' there is a signed/unsigned mismatch"); " is 173.
Long Statement,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,ShouldConvertEnum,The length of the statement  "                throw new ConstructionException("Cannot map enum [" + enumType + "] with underlying type [" + primitiveType + "] to [" + convert + "]' target type is not large enough"); " is 169.
Long Statement,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,IsAnonymouseClass,The length of the statement  "            var compilerGenerated = type.GetTypeInfo().CustomAttributes.Any(a => a.AttributeType == typeof(CompilerGeneratedAttribute));" is 124.
Long Statement,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,IsConstant,The length of the statement  "            var numberOfConstants = instrs.Count(a => ConstantLoadOpCodes.Contains(a.Item1) || a.Item2.HasValue || a.Item3.HasValue || a.Item4.HasValue);" is 141.
Long Statement,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetConstantJSONStringEquivalent,The length of the statement  "            var constInstr = instrs.Single(o => ConstantLoadOpCodes.Contains(o.Item1) || o.Item2.HasValue || o.Item3.HasValue || o.Item4.HasValue);" is 135.
Long Statement,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetPrimitiveWrapperPropertyOrField,The length of the statement  "                throw new ConstructionException("Primitive wrappers can only have 1 declared primitive member' found " + candidateCount + " for " + primitiveWrapperType.Name); " is 159.
Long Statement,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,InvolvedTypes,The length of the statement  "                cur.GetProperties().Where(p => p.GetMethod != null && p.GetMethod.GetParameters().Length == 0).ForEach(p => pending.Push(p.PropertyType));" is 138.
Long Statement,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The length of the statement  "            var simpleTypes = members.Where(m => m.First().ReturnType().IsValueType() && !m.First().ReturnType().IsNullableType() && m.First().ReturnType().IsPrimitiveType()).ToList();" is 172.
Long Statement,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The length of the statement  "            var otherPrimitive = members.Where(m => (m.First().ReturnType().IsPrimitiveType() || m.First().ReturnType().IsNullableType()) && !simpleTypes.Contains(m)).ToList();" is 164.
Long Statement,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The length of the statement  "            var recursive = members.Where(m => recursiveTypes.Contains(m.First().ReturnType()) && !simpleTypes.Contains(m) && !otherPrimitive.Contains(m)).ToList();" is 152.
Long Statement,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The length of the statement  "            var everythingElse = members.Where(m => !simpleTypes.Contains(m) && !otherPrimitive.Contains(m) && !recursive.Contains(m)).ToList();" is 132.
Long Statement,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,PropertyFieldUsage,The length of the statement  "            var props = t.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic).Where(p => p.GetMethod != null && p.GetMethod.GetParameters().Count() == 0);" is 174.
Long Statement,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadOp,The length of the statement  "            fieldHandle = _ReadFieldOperands(opcode' cil' ix' ix + advance' ref advance' out intOperand' out longOperand' out doubleOperand);" is 129.
Long Statement,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,FieldOffsetsInMemory,The length of the statement  "                var cons = t.GetConstructors(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).OrderBy(p => p.GetParameters().Count()).FirstOrDefault();" is 156.
Long Statement,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,GetAnonymousNameToConstructorMap_Guess,The length of the statement  "                throw new ConstructionException("Due to a limitation in .netcore - could not guess property <-> parameter mapping necessary to deserialize an anonymous type"); " is 159.
Long Statement,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,FindRecursiveTypes,The length of the statement  "                foreach (var prop in curType.GetProperties(BindingFlags.Instance | BindingFlags.Public).Where(p => p.GetMethod != null)) " is 120.
Long Statement,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,FindReusedTypes,The length of the statement  "                foreach (var prop in curType.GetProperties(BindingFlags.Instance | BindingFlags.Public).Where(p => p.GetMethod != null)) " is 120.
Long Statement,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,CheckUnionLegality,The length of the statement  "                    errorMessage = "Member [" + member.Name + "] isn't marked as part of a union' but other members share the same Name [" + memberName + "]"; " is 138.
Long Statement,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,CheckUnionLegality,The length of the statement  "                        errorMessage = "Member [" + member.Name + "] has IsUnionType set' but IsUnionType is also set for [" + destinationType.Name + "]"; " is 130.
Long Statement,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,CheckUnionLegality,The length of the statement  "            var ambiguousCharsToMembers = charsToMembers.Where(kv => kv.Value.Count > 1).ToDictionary(kv => kv.Key' kv => new MemberGroup(kv.Value)); " is 137.
Long Statement,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,ToString,The length of the statement  "                    "{{ ShouldPrettyPrint = {0}' ShouldExcludeNulls = {1}' UseDateTimeFormat = {2}' IsJSONP = {3}' ShouldIncludeInherited = {4}' UseUnspecifiedDateTimeKindBehavior = {5}' SerializationNameFormat = {6} }}"' " is 201.
Long Statement,Jil.DeserializeDynamic,DynamicDeserializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,_DeserializeMember,The length of the statement  "            throw new DeserializationException("Expected \"' [' {' n' t' f' -' 0' 1' 2' 3' 4' 5' 6' 7' 8' or 9; found " + (char)c' reader' false);" is 134.
Long Statement,Jil.DeserializeDynamic,DynamicDeserializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,DeserializeNumber,The length of the statement  "                if (next != '-' && !(next >= '0' && next <= '9')) throw new DeserializationException("Expected -' or digit"' reader' next == -1);" is 129.
Long Statement,Jil.DeserializeDynamic,DynamicDeserializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,DeserializeNumber,The length of the statement  "                if (c != '-' && !(c >= '0' || c <= '9')) throw new DeserializationException("Expected -' +' or digit"' reader' c == -1);" is 120.
Long Statement,Jil.DeserializeDynamic,DynamicDeserializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,_DeserializeMemberThunkReader,The length of the statement  "            throw new DeserializationException("Expected \"' [' {' n' t' f' -' 0' 1' 2' 3' 4' 5' 6' 7' 8' or 9; found " + (char)c' ref reader' false); " is 138.
Long Statement,Jil.DeserializeDynamic,DynamicDeserializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,DeserializeStringThunkReader,The length of the statement  "            var str = Methods.ReadEncodedStringWithBufferThunkReader(ref reader' builder.CommonCharBuffer' ref builder.CommonStringBuffer); " is 127.
Long Statement,Jil.DeserializeDynamic,DynamicDeserializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,DeserializeNumberThunkReader,The length of the statement  "                if (next != '-' && !(next >= '0' && next <= '9')) throw new DeserializationException("Expected -' or digit"' ref reader' next == -1); " is 133.
Long Statement,Jil.DeserializeDynamic,DynamicDeserializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,DeserializeNumberThunkReader,The length of the statement  "                if (c != '-' && !(c >= '0' || c <= '9')) throw new DeserializationException("Expected -' +' or digit"' ref reader' c == -1); " is 124.
Long Statement,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,ForFastNumber,The length of the statement  "            return new JsonObject { Type = JsonObjectType.FastNumber' FastNumberNegative = neg' FastNumberPart1 = a' FastNumberPart2 = b' FastNumberPart2Length = bLen' FastNumberPart3 = c' Options = options }; " is 197.
Long Statement,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,NewObject,The length of the statement  "            return new JsonObject { Type = JsonObjectType.Object' Parent = parent' ObjectMembers = new Dictionary<string' JsonObject>() }; " is 126.
Long Statement,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,Put,The length of the statement  "                                throw new DeserializationException($"Tried to add duplicate member \"{MemberPart1.StringValue}\" to an object"' e' false); " is 122.
Long Statement,Jil.DeserializeDynamic,JsonMetaObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Dynamic.cs,BindGetMember,The length of the statement  "                 *          throw new InvalidCastException("Unable to get dynamic member <MemberName> of type <ReturnType> from ["+thisRef+"]"); " is 127.
Long Statement,Jil.DeserializeDynamic,JsonMetaObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Dynamic.cs,BindGetMember,The length of the statement  "                var tryGetMemberCall = Expression.Call(thisEvaled' InnerTryGetMember' Expression.Constant(binder.Name)' Expression.Constant(binder.ReturnType)' res); " is 149.
Long Statement,Jil.DeserializeDynamic,JsonMetaObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Dynamic.cs,BindGetMember,The length of the statement  "                                Expression.Constant("Unable to get dynamic member [" + binder.Name + "] of type [" + binder.ReturnType.FullName + "] from [")' " is 126.
Long Statement,Jil.DeserializeDynamic,JsonMetaObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Dynamic.cs,BindGetIndex,The length of the statement  "                 *          throw new InvalidCastException("Unable to get dynamic index ("+string.Join("' "' indexesRef)+") of type <ReturnType> from ["+thisRef+"]"); " is 149.
Long Statement,Jil.DeserializeDynamic,JsonMetaObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Dynamic.cs,BindGetIndex,The length of the statement  "                var tryGetIndexCall = Expression.Call(thisEvaled' InnerTryGetIndex' Expression.Constant(binder.ReturnType)' indexesRef' res); " is 125.
Long Statement,Jil.DeserializeDynamic,JsonMetaObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Dynamic.cs,BindGetIndex,The length of the statement  "                var retBlock = Expression.Block(new[] { thisEvaled' finalResult' res' indexesRef }' thisAssigned' indexesAssigned' notIf' finalAssign); " is 135.
Long Statement,Jil.DeserializeDynamic,JsonMetaObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Dynamic.cs,BindInvokeMember,The length of the statement  "                 *          throw new InvalidCastException("Unable to invoke dynamic member <MemberName> with args ("+string.Join("' "' argsRef)+") on ["+thisRef+"]"); " is 150.
Long Statement,Jil.DeserializeDynamic,JsonMetaObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Dynamic.cs,BindInvokeMember,The length of the statement  "                var tryInvokeMemberCall = Expression.Call(thisEvaled' InnerTryInvokeMember' Expression.Constant(binder.Name)' argsRef' res); " is 124.
Long Statement,Jil.DeserializeDynamic,JsonMetaObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Dynamic.cs,BindInvokeMember,The length of the statement  "                var retBlock = Expression.Block(new[] { thisEvaled' finalResult' res' argsRef }' thisAssigned' argsAssigned' notIf' finalAssign); " is 129.
Long Statement,Jil.DeserializeDynamic,JsonMetaObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Dynamic.cs,BindUnaryOperation,The length of the statement  "                 *          throw new InvalidCastException("Unable to get dynamic member <MemberName> of type <ReturnType> from ["+thisRef+"]"); " is 127.
Long Statement,Jil.DeserializeDynamic,JsonMetaObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Dynamic.cs,BindUnaryOperation,The length of the statement  "                var tryUnaryOperationCall = Expression.Call(thisEvaled' InnerTryUnaryOperation' Expression.Constant(binder.Operation)' Expression.Constant(binder.ReturnType)' res); " is 164.
Long Statement,Jil.DeserializeDynamic,JsonMetaObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Dynamic.cs,BindUnaryOperation,The length of the statement  "                                Expression.Constant("Unable to perform dynamic unary operation [" + binder.Operation + "] of type [" + binder.ReturnType.FullName + "] from [")' " is 144.
Long Statement,Jil.DeserializeDynamic,JsonMetaObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Dynamic.cs,BindBinaryOperation,The length of the statement  "                var argAssigned = Expression.Assign(argRef' (arg.RuntimeType == null || arg.RuntimeType.IsValueType()) ? Expression.Convert(arg.Expression' typeof(object)) : arg.Expression); " is 174.
Long Statement,Jil.DeserializeDynamic,JsonMetaObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Dynamic.cs,BindBinaryOperation,The length of the statement  "                var tryInvokeMemberCall = Expression.Call(thisEvaled' InnerTryBinaryOperation' Expression.Constant(binder.Operation)' argRef' Expression.Constant(binder.ReturnType)' res); " is 171.
Long Statement,Jil.DeserializeDynamic,JsonMetaObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.Dynamic.cs,BindBinaryOperation,The length of the statement  "                var retBlock = Expression.Block(new[] { thisEvaled' finalResult' res' argRef }' thisAssigned' argAssigned' notIf' finalAssign); " is 127.
Long Statement,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTime,The length of the statement  "            if (!_ParseISO8601TimeZoneOffset(str' zPlusOrMinus.Value + 1' ix' ref hasSeparators' out unknownLocalOffset' out timezoneOffset)) " is 129.
Long Statement,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTimeOffset,The length of the statement  "            if (!_ParseISO8601TimeZoneOffset(str' zPlusOrMinus.Value + 1' ix' ref hasSeparators' out unknownLocalOffset' out timezoneOffset)) " is 129.
Long Statement,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateWithOffset,The length of the statement  "            if (!_ParseISO8601TimeZoneOffset(str' zPlusOrMinus.Value + 1' ix' ref hasSeparators' out unknownLocalOffset' out timezoneOffset)) " is 129.
Long Statement,Jil.Deserialize,AnonymousTypeLookup<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\AnonymousTypeLookup.cs,CreateFindMemberThunkReader,The length of the statement  "                .Select((name' index) => NameAutomata<int>.CreateName(typeof(ThunkReader).MakeByRefType()' name' emit => emit.LoadConstant(index))) " is 131.
Long Statement,Jil.Deserialize,AnonymousTypeLookup<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\AnonymousTypeLookup.cs,CreateFindMemberThunkReader,The length of the statement  "            var ret = NameAutomata<int>.Create<AnonymousTypeLookupThunkReaderDelegate>(typeof(ThunkReader).MakeByRefType()' nameToResults' true' defaultValue: -1); " is 151.
Long Statement,Jil.Deserialize,DeserializeIndirect,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\DeserializeIndirect.cs,DeserializeFromStream,The length of the statement  "                        var emit = Emit.NewDynamicMethod(typeof(object)' new[] { typeof(TextReader)' typeof(Options) }' doVerify: Utils.DoVerify); " is 122.
Long Statement,Jil.Deserialize,DeserializeIndirect,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\DeserializeIndirect.cs,DeserializeFromStream,The length of the statement  "                        DeserializeFromStreamIndirectCache[type] = cached = emit.CreateDelegate<Func<TextReader' Options' object>>(Utils.DelegateOptimizationOptions); " is 142.
Long Statement,Jil.Deserialize,DeserializeIndirect,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\DeserializeIndirect.cs,DeserializeFromString,The length of the statement  "                        DeserializeFromStringIndirectCache[type] = cached = emit.CreateDelegate<Func<string' Options' object>>(Utils.DelegateOptimizationOptions); " is 138.
Long Statement,Jil.Deserialize,EnumLookup<EnumType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\EnumLookup.cs,CreateFindEnum,The length of the statement  "                .Select(name => NameAutomata<EnumType>.CreateName(typeof(TextReader)' name.Item1' emit => LoadConstantOfType(emit' name.Item2' underlyingType)))" is 144.
Long Statement,Jil.Deserialize,EnumLookup<EnumType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\EnumLookup.cs,CreateFindEnumThunkReader,The length of the statement  "                .Select(name => NameAutomata<EnumType>.CreateName(thunkReaderRef' name.Item1' emit => LoadConstantOfType(emit' name.Item2' underlyingType)))" is 140.
Long Statement,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,AddGlobalVariables,The length of the statement  "                (involvedTypes.Contains(typeof(TimeSpan)) && (DateFormat == DateTimeFormat.ISO8601 || DateFormat == DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch)); " is 158.
Long Statement,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadEnum,The length of the statement  "                    throw new ConstructionException(enumType.FullName + " has no values' and cannot be deserialized; add a value' make nullable' or configure to treat as integer"); " is 160.
Long Statement,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadList,The length of the statement  "                if (isSet) Emit.Pop();                          // if it's a set' Add() returns a bool which we need to pop off the stack" is 121.
Long Statement,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadDictionary,The length of the statement  "            if (!(keyIsString || keyIsInteger || keyIsEnum)) throw new ConstructionException("Only dictionaries with strings' integers' or enums for keys can be deserialized");" is 164.
Long Statement,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAndSetDiscriminantUnion,The length of the statement  "            if (!Utils.CheckUnionLegality(DateFormat' memberName' union' out discriminants' out unionTypeIndicator' out charsets' out allowsNull' out errorMessage)) " is 152.
Long Statement,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAndSetDiscriminantUnion,The length of the statement  "            var nullableMembers = discriminants.Where(kv => kv.Value.ReturnType().IsNullableType()).Select(kv => kv.Value).ToList(); " is 120.
Long Statement,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadObjectDictionaryLookup,The length of the statement  "                var setters = (Dictionary<string' MemberInfo[]>)setterLookup.GetMethod("GetSetters"' BindingFlags.Public | BindingFlags.Static).Invoke(null' new object[0]);" is 156.
Long Statement,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAnonymousObjectDictionaryLookup,The length of the statement  "            var propertyMap = (Dictionary<string' Tuple<Type' int>>)setterLookup.GetField("ParametersToTypeAndIndex").GetValue(null);" is 121.
Long Statement,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAnonymousObjectAutomata,The length of the statement  "                findConstructorParameterIndex = setterLookup.GetMethod("FindConstructorParameterIndexThunkReader"' new[] { typeof(ThunkReader).MakeByRefType() }); " is 146.
Long Statement,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAnonymousObjectAutomata,The length of the statement  "            var propertyMap = (Dictionary<string' Tuple<Type' int>>)setterLookup.GetField("ParametersToTypeAndIndex").GetValue(null); " is 121.
Long Statement,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadDynamic,The length of the statement  "                Emit.LoadConstant((byte)SerializationNameFormat.Verbatim);                  // TextReader bool bool bool byte bool byte byte " is 124.
Long Statement,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,Build,The length of the statement  "                if (genTypeDef == typeof(ICollection<>) || genTypeDef == typeof(IEnumerable<>) || genTypeDef == typeof(IReadOnlyList<>)) " is 120.
Long Statement,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,FindAndPrimeIndirectTypes,The length of the statement  "                    loadMtd = typeof(TypeCache<'>).MakeGenericType(OptionsType' primeType).GetMethod("LoadFromString"' BindingFlags.Public | BindingFlags.Static); " is 142.
Long Statement,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,FindAndPrimeIndirectTypes,The length of the statement  "                    loadMtd = typeof(TypeCache<'>).MakeGenericType(OptionsType' primeType).GetMethod("Load"' BindingFlags.Public | BindingFlags.Static); " is 132.
Long Statement,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,BuildFromStringWithNewDelegate,The length of the statement  "            Emit = Emit.NewDynamicMethod(forType' new[] { typeof(ThunkReader).MakeByRefType()' typeof(int) }' doVerify: Utils.DoVerify); " is 124.
Long Statement,Jil.Deserialize,InlineDeserializerHelper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,BuildAlwaysFailsWithFromStream,The length of the statement  "            var stashField = specificTypeCache.GetField("ExceptionDuringBuildFromStream"' BindingFlags.Static | BindingFlags.Public);" is 121.
Long Statement,Jil.Deserialize,InlineDeserializerHelper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,BuildAlwaysFailsWithFromString,The length of the statement  "            var stashField = specificTypeCache.GetField("ExceptionDuringBuildFromString"' BindingFlags.Static | BindingFlags.Public); " is 121.
Long Statement,Jil.Deserialize,InlineDeserializerHelper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,BuildFromStream,The length of the statement  "            var obj = new InlineDeserializer<ReturnType>(optionsType' dateFormat' serializationNameFormat' readingFromString: false' preferIndirectSerialization: false' allPrimitivesThroughHelpers: false);" is 193.
Long Statement,Jil.Deserialize,InlineDeserializerHelper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,BuildFromStream,The length of the statement  "                        obj = new InlineDeserializer<ReturnType>(optionsType' dateFormat' serializationNameFormat' readingFromString: false' preferIndirectSerialization: true' allPrimitivesThroughHelpers: false); " is 188.
Long Statement,Jil.Deserialize,InlineDeserializerHelper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,BuildFromStream,The length of the statement  "                        obj = new InlineDeserializer<ReturnType>(optionsType' dateFormat' serializationNameFormat' readingFromString: false' preferIndirectSerialization: true' allPrimitivesThroughHelpers: true); " is 187.
Long Statement,Jil.Deserialize,InlineDeserializerHelper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,BuildFromString,The length of the statement  "            var obj = new InlineDeserializer<ReturnType>(optionsType' dateFormat' serializationNameFormat' readingFromString: true' preferIndirectSerialization: false' allPrimitivesThroughHelpers: false); " is 192.
Long Statement,Jil.Deserialize,InlineDeserializerHelper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,BuildFromString,The length of the statement  "                        obj = new InlineDeserializer<ReturnType>(optionsType' dateFormat' serializationNameFormat' readingFromString: true' preferIndirectSerialization: true' allPrimitivesThroughHelpers: false); " is 187.
Long Statement,Jil.Deserialize,InlineDeserializerHelper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,BuildFromString,The length of the statement  "                        obj = new InlineDeserializer<ReturnType>(optionsType' dateFormat' serializationNameFormat' readingFromString: true' preferIndirectSerialization: true' allPrimitivesThroughHelpers: true); " is 186.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The length of the statement  "            if (!((a >= '0' && a <= '9') || (a >= 'A' && a <= 'F') || (a >= 'a' && a <= 'f'))) throw new DeserializationException("Expected a hex number"' reader' false);" is 158.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The length of the statement  "            if (!((b >= '0' && b <= '9') || (b >= 'A' && b <= 'F') || (b >= 'a' && b <= 'f'))) throw new DeserializationException("Expected a hex number"' reader' false);" is 158.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadChar,The length of the statement  "                if (!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))) throw new DeserializationException("Expected hex digit"' reader' u == -1);" is 157.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadChar,The length of the statement  "                if (!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))) throw new DeserializationException("Expected hex digit"' reader' u == -1);" is 157.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadChar,The length of the statement  "                if (!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))) throw new DeserializationException("Expected hex digit"' reader' u == -1);" is 157.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadChar,The length of the statement  "                if (!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))) throw new DeserializationException("Expected hex digit"' reader' u == -1);" is 157.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The length of the statement  "            if (ret < char.MinValue || ret > char.MaxValue) throw new DeserializationException("Encoded character out of System.Char range' found: " + ret' reader' false);" is 159.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The length of the statement  "                throw new DeserializationException("RFC1123 DateTime claimed to be [" + (DayOfWeek)dayOfWeek + "]' but really was [" + ret.DayOfWeek + "]"' reader' false);" is 155.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601Date,The length of the statement  "                if (ix == CharBufferSize) throw new DeserializationException("ISO8601 date is too long' expected " + CharBufferSize + " characters or less"' reader' false);" is 156.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601Date,The length of the statement  "                        if (zPlusOrMinus.HasValue) throw new DeserializationException("Unexpected second Z' +' or - in ISO8601 date"' reader' false);" is 125.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601Date,The length of the statement  "            var date = ParseISO8601Date(reader' buffer' 0' tPos ?? ix); // this is in *LOCAL TIME* because that's what the spec says" is 120.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601Date,The length of the statement  "                throw new DeserializationException("ISO8601 date with time and timezone offset could not be represented as a DateTime"' reader' e' false);" is 138.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffset,The length of the statement  "                if (ix == CharBufferSize) throw new DeserializationException("ISO8601 date is too long' expected " + CharBufferSize + " characters or less"' reader' false); " is 156.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffset,The length of the statement  "                        if (zPlusOrMinus.HasValue) throw new DeserializationException("Unexpected second Z' +' or - in ISO8601 date"' reader' false); " is 125.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffset,The length of the statement  "            var date = ParseISO8601Date(reader' buffer' 0' tPos ?? ix); // this is in *LOCAL TIME* because that's what the spec says " is 120.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffset,The length of the statement  "                throw new DeserializationException("ISO8601 date with time and timezone offset could not be represented as a DateTime"' reader' e' false); " is 138.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The length of the statement  "            if (year == 0) throw new DeserializationException("ISO8601 year 0000 cannot be converted to a DateTime"' reader' false);" is 120.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The length of the statement  "                            if (c < '1' || c > '7') throw new DeserializationException("Expected day to be a digit between 1 and 7"' reader' false);" is 120.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The length of the statement  "                            if (c < '1' || c > '7') throw new DeserializationException("Expected day to be a digit between 1 and 7"' reader' false);" is 120.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The length of the statement  "                        if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);" is 122.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The length of the statement  "                        if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);" is 127.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The length of the statement  "                        if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);" is 122.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The length of the statement  "                    if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);" is 127.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The length of the statement  "                    if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);" is 122.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The length of the statement  "                if (hasSeparators.HasValue && !hasSeparators.Value) throw new DeserializationException("Unexpected separator"' reader' false);" is 126.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,The length of the statement  "                if (hasSeparators.HasValue && !hasSeparators.Value) throw new DeserializationException("Unexpected separator in ISO8601 timezone offset"' reader' false);" is 153.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,The length of the statement  "            if (stop - start + 1 < 2) throw new DeserializationException("Not enough character for ISO8601 timezone offset"' reader' false);" is 128.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpan,The length of the statement  "                throw new DeserializationException("Week part of TimeSpan defined along with one or more of year' month' or day"' reader' false); " is 129.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadDatePart,The length of the statement  "                    throw new DeserializationException("Fractional values are not supported in the year' month' day' or week parts of an ISO8601 TimeSpan"' reader' false); " is 151.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The length of the statement  "            if (temp > 23) throw new DeserializationException("Expected hour portion of timezone offset between 0 and 24"' reader' false); " is 126.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The length of the statement  "            if (temp > 59) throw new DeserializationException("Expected minute portion of timezone offset between 0 and 59"' reader' false); " is 128.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,AssertNotFollowedByDigit,The length of the statement  "                throw new DeserializationException(new OverflowException("Number did not end when expected' may overflow")' reader' false); " is 123.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,AssertNotFollowedByDigit,The length of the statement  "                throw new DeserializationException(new OverflowException("Number did not end when expected' may overflow")' ref reader' false);" is 127.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The length of the statement  "            if (ret < char.MinValue || ret > char.MaxValue) throw new DeserializationException("Encoded character out of System.Char range' found: " + ret' ref reader' false);" is 163.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The length of the statement  "            if (!((a >= '0' && a <= '9') || (a >= 'A' && a <= 'F') || (a >= 'a' && a <= 'f'))) throw new DeserializationException("Expected a hex number"' ref reader' false);" is 162.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The length of the statement  "            if (!((b >= '0' && b <= '9') || (b >= 'A' && b <= 'F') || (b >= 'a' && b <= 'f'))) throw new DeserializationException("Expected a hex number"' ref reader' false);" is 162.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadCharThunkReader,The length of the statement  "                if (!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))) throw new DeserializationException("Expected hex digit"' ref reader' u == -1);" is 161.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadCharThunkReader,The length of the statement  "                if (!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))) throw new DeserializationException("Expected hex digit"' ref reader' u == -1);" is 161.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadCharThunkReader,The length of the statement  "                if (!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))) throw new DeserializationException("Expected hex digit"' ref reader' u == -1);" is 161.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadCharThunkReader,The length of the statement  "                if (!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))) throw new DeserializationException("Expected hex digit"' ref reader' u == -1);" is 161.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The length of the statement  "            if (temp > 23) throw new DeserializationException("Expected hour portion of timezone offset between 0 and 24"' ref reader' false);" is 130.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The length of the statement  "            if (temp > 59) throw new DeserializationException("Expected minute portion of timezone offset between 0 and 59"' ref reader' false);" is 132.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,The length of the statement  "                if (c == -1) throw new DeserializationException("Unexpected end of stream while parsing ISO8601 date"' ref reader' true);" is 121.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,The length of the statement  "                if (ix == CharBufferSize) throw new DeserializationException("ISO8601 date is too long' expected " + CharBufferSize + " characters or less"' ref reader' false);" is 160.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,The length of the statement  "                        if (zPlusOrMinus.HasValue) throw new DeserializationException("Unexpected second Z' +' or - in ISO8601 date"' ref reader' false);" is 129.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,The length of the statement  "            var date = ParseISO8601DateThunkReader(ref reader' buffer' 0' tPos ?? ix); // this is in *LOCAL TIME* because that's what the spec says" is 135.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,The length of the statement  "                    throw new DeserializationException("ISO8601 date with time could not be represented as a DateTime"' ref reader' e' false);" is 122.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,The length of the statement  "            var timezoneOffset = ParseISO8601TimeZoneOffsetThunkReader(ref reader' buffer' zPlusOrMinus.Value + 1' ix' out unknownLocalOffset);" is 131.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,The length of the statement  "                throw new DeserializationException("ISO8601 date with time and timezone offset could not be represented as a DateTime"' ref reader' e' false);" is 142.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The length of the statement  "            if (year == 0) throw new DeserializationException("ISO8601 year 0000 cannot be converted to a DateTime"' ref reader' false);" is 124.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The length of the statement  "                            if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' ref reader' false);" is 123.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The length of the statement  "                            if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' ref reader' false);" is 123.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The length of the statement  "                            if (c < '1' || c > '7') throw new DeserializationException("Expected day to be a digit between 1 and 7"' ref reader' false);" is 124.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The length of the statement  "                            if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' ref reader' false);" is 123.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The length of the statement  "                            if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' ref reader' false);" is 123.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The length of the statement  "                            if (c < '1' || c > '7') throw new DeserializationException("Expected day to be a digit between 1 and 7"' ref reader' false);" is 124.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The length of the statement  "                        if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);" is 126.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The length of the statement  "                        if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);" is 131.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The length of the statement  "                        if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);" is 126.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The length of the statement  "                        if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);" is 120.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The length of the statement  "                    if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);" is 131.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The length of the statement  "                    if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);" is 126.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The length of the statement  "                    if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);" is 120.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The length of the statement  "                if (hasSeparators.HasValue && !hasSeparators.Value) throw new DeserializationException("Unexpected separator"' ref reader' false);" is 130.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,The length of the statement  "                if (hasSeparators.HasValue && !hasSeparators.Value) throw new DeserializationException("Unexpected separator in ISO8601 timezone offset"' ref reader' false);" is 157.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,The length of the statement  "            if (stop - start + 1 < 2) throw new DeserializationException("Not enough character for ISO8601 timezone offset"' ref reader' false);" is 132.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The length of the statement  "                throw new DeserializationException("RFC1123 DateTime claimed to be [" + (DayOfWeek)dayOfWeek + "]' but really was [" + ret.DayOfWeek + "]"' ref reader' false);" is 159.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,The length of the statement  "                if (c == -1) throw new DeserializationException("Unexpected end of stream while parsing ISO8601 date"' ref reader' true);" is 121.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,The length of the statement  "                if (ix == CharBufferSize) throw new DeserializationException("ISO8601 date is too long' expected " + CharBufferSize + " characters or less"' ref reader' false);" is 160.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,The length of the statement  "                        if (zPlusOrMinus.HasValue) throw new DeserializationException("Unexpected second Z' +' or - in ISO8601 date"' ref reader' false);" is 129.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,The length of the statement  "            var date = ParseISO8601DateThunkReader(ref reader' buffer' 0' tPos ?? ix); // this is in *LOCAL TIME* because that's what the spec says" is 135.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,The length of the statement  "                    throw new DeserializationException("ISO8601 date with time could not be represented as a DateTime"' ref reader' e' false);" is 122.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,The length of the statement  "            var timezoneOffset = ParseISO8601TimeZoneOffsetThunkReader(ref reader' buffer' zPlusOrMinus.Value + 1' ix' out unknownLocalOffset);" is 131.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,The length of the statement  "                throw new DeserializationException("ISO8601 date with time and timezone offset could not be represented as a DateTime"' ref reader' e' false);" is 142.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,The length of the statement  "            var hasTimePart = ISO8601TimeSpan_ReadDatePartThunkReader(ref reader' str' len' ref ix' out year' out month' out week' out day);" is 128.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,The length of the statement  "                throw new DeserializationException("Week part of TimeSpan defined along with one or more of year' month' or day"' ref reader' false);" is 133.
Long Statement,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadDatePartThunkReader,The length of the statement  "                    throw new DeserializationException("Fractional values are not supported in the year' month' day' or week parts of an ISO8601 TimeSpan"' ref reader' false);" is 155.
Long Statement,Jil.Deserialize,NameAutomata<T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\NameAutomata.cs,NextChar,The length of the statement  "                        throw new ConstructionException("Couldn't build parsing automata' found duplicate terminals for " + string.Join("' "' charGroup.Select(c => c.Name))); " is 150.
Long Statement,Jil.Deserialize,NameAutomata<T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\NameAutomata.cs,CreateFold,The length of the statement  "            var cons = typeof(DeserializationException).GetConstructor(BindingFlags.Instance | BindingFlags.NonPublic' new[] { typeof(string)' readerType' typeof(bool) }); " is 159.
Long Statement,Jil.Deserialize,NameAutomata<T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\NameAutomata.cs,Create,The length of the statement  "            return CreateFold<DelegateType>(readerType' names' _ => { }' emit => emit.Return()' false' false' caseSensitive' defaultValue); " is 127.
Long Statement,Jil.Deserialize,SetterLookup<ForType;SerializationNameFormatType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\SetterLookup.cs,CreateFindMemberThunkReader,The length of the statement  "                .Select((name' index) => NameAutomata<int>.CreateName(typeof(ThunkReader).MakeByRefType()' name' emit => emit.LoadConstant(index))) " is 131.
Long Statement,Jil.Deserialize,SetterLookup<ForType;SerializationNameFormatType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\SetterLookup.cs,CreateFindMemberThunkReader,The length of the statement  "            var ret = NameAutomata<int>.Create<SetterLookupThunkReaderDelegate>(typeof(ThunkReader).MakeByRefType()' nameToResults' true' defaultValue: -1); " is 144.
Long Statement,Jil.Deserialize,TypeCache<TOptions;T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\TypeCaches.cs,Load,The length of the statement  "                Thunk = InlineDeserializerHelper.BuildFromStream<T>(typeof(TOptions)' options.DateFormat' options.SerializationNameFormat' exceptionDuringBuild: out ExceptionDuringBuildFromStream); " is 181.
Long Statement,Jil.Deserialize,TypeCache<TOptions;T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\TypeCaches.cs,LoadFromString,The length of the statement  "                StringThunk = InlineDeserializerHelper.BuildFromString<T>(typeof(TOptions)' options.DateFormat' options.SerializationNameFormat' exceptionDuringBuild: out ExceptionDuringBuildFromString); " is 187.
Long Statement,Jil.Deserialize,UnionConfigLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\UnionLookup.cs,Get,The length of the statement  "                var newType = ModBuilder.DefineType(ucs.ToString()+"_"+allowsNull' TypeAttributes.NotPublic | TypeAttributes.Class' typeof(UnionLookupConfigBase));" is 147.
Long Statement,Jil.Deserialize,UnionConfigLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\UnionLookup.cs,Get,The length of the statement  "                var field = newType.DefineField("_Charsets"' typeof(UnionCharsets)' FieldAttributes.Private | FieldAttributes.InitOnly);" is 120.
Long Statement,Jil.Deserialize,UnionConfigLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\UnionLookup.cs,Get,The length of the statement  "                var gcEmit = Emit<Func<UnionCharsets>>.BuildInstanceMethod(newType' "getCharsets"' MethodAttributes.Public | MethodAttributes.Virtual' doVerify: Utils.DoVerify);" is 161.
Long Statement,Jil.Deserialize,UnionConfigLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\UnionLookup.cs,Get,The length of the statement  "                var aeEmit = Emit<Func<bool>>.BuildInstanceMethod(newType' "getAllowsNull"' MethodAttributes.Public | MethodAttributes.Virtual' doVerify: Utils.DoVerify);" is 154.
Long Statement,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,GetGetMember,The length of the statement  "            var binder = (GetMemberBinder)Microsoft.CSharp.RuntimeBinder.Binder.GetMember(0' memberName' type' new[] { CSharpArgumentInfo.Create(0' null) });" is 145.
Long Statement,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,_GetSemiStaticInlineSerializerFor,The length of the statement  "                GetSemiStaticInlineSerializerForCache[key] = ret = (Action<TextWriter' ForType' int>)builder.Invoke(null' new object[] { dynamicMember' cacheType' opts.ShouldPrettyPrint' opts.ShouldExcludeNulls' opts.IsJSONP' opts.UseDateTimeFormat' opts.ShouldIncludeInherited' opts.UseUnspecifiedDateTimeKindBehavior' opts.SerializationNameFormat });" is 336.
Long Statement,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,GetSemiStaticSerializerFor,The length of the statement  "            var emit = Emit.NewDynamicMethod(typeof(void)' new[] { typeof(MemberInfo)' typeof(TextWriter)' typeof(object)' typeof(int) }' doVerify: Utils.DoVerify);" is 152.
Long Statement,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,GetSemiStaticSerializerFor,The length of the statement  "                GetSemiStaticSerializerForCache[key] = ret = emit.CreateDelegate<Action<MemberInfo' TextWriter' object' int>>(optimizationOptions: Utils.DelegateOptimizationOptions);" is 166.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' Serialize.MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase>(opts);" is 167.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MicrosoftStylePrettyPrintExcludeNullsJSONP' Serialize.MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase>(opts);" is 149.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MicrosoftStylePrettyPrintExcludeNullsInherited' Serialize.MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase>(opts);" is 157.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MicrosoftStylePrettyPrintJSONPInherited' Serialize.MicrosoftStylePrettyPrintJSONPInheritedCamelCase>(opts);" is 143.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MicrosoftStyleExcludeNullsJSONPInherited' Serialize.MicrosoftStyleExcludeNullsJSONPInheritedCamelCase>(opts);" is 145.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MicrosoftStylePrettyPrintExcludeNulls' Serialize.MicrosoftStylePrettyPrintExcludeNullsCamelCase>(opts);" is 139.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MicrosoftStylePrettyPrintJSONP' Serialize.MicrosoftStylePrettyPrintJSONPCamelCase>(opts);" is 125.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MicrosoftStylePrettyPrintInherited' Serialize.MicrosoftStylePrettyPrintInheritedCamelCase>(opts);" is 133.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MicrosoftStyleExcludeNullsJSONP' Serialize.MicrosoftStyleExcludeNullsJSONPCamelCase>(opts);" is 127.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MicrosoftStyleExcludeNullsInherited' Serialize.MicrosoftStyleExcludeNullsInheritedCamelCase>(opts);" is 135.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MicrosoftStyleJSONPInherited' Serialize.MicrosoftStyleJSONPInheritedCamelCase>(opts);" is 121.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.SecondsPrettyPrintExcludeNullsJSONPInherited' Serialize.SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase>(opts); " is 153.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.SecondsPrettyPrintExcludeNullsJSONP' Serialize.SecondsPrettyPrintExcludeNullsJSONPCamelCase>(opts); " is 135.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.SecondsPrettyPrintExcludeNullsInherited' Serialize.SecondsPrettyPrintExcludeNullsInheritedCamelCase>(opts); " is 143.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.SecondsPrettyPrintJSONPInherited' Serialize.SecondsPrettyPrintJSONPInheritedCamelCase>(opts); " is 129.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.SecondsExcludeNullsJSONPInherited' Serialize.SecondsExcludeNullsJSONPInheritedCamelCase>(opts); " is 131.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.SecondsPrettyPrintExcludeNulls' Serialize.SecondsPrettyPrintExcludeNullsCamelCase>(opts); " is 125.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.SecondsExcludeNullsInherited' Serialize.SecondsExcludeNullsInheritedCamelCase>(opts); " is 121.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.RFC1123PrettyPrintExcludeNullsJSONPInherited' Serialize.RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase>(opts); " is 153.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.RFC1123PrettyPrintExcludeNullsJSONP' Serialize.RFC1123PrettyPrintExcludeNullsJSONPCamelCase>(opts); " is 135.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.RFC1123PrettyPrintExcludeNullsInherited' Serialize.RFC1123PrettyPrintExcludeNullsInheritedCamelCase>(opts); " is 143.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.RFC1123PrettyPrintJSONPInherited' Serialize.RFC1123PrettyPrintJSONPInheritedCamelCase>(opts); " is 129.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.RFC1123ExcludeNullsJSONPInherited' Serialize.RFC1123ExcludeNullsJSONPInheritedCamelCase>(opts); " is 131.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.RFC1123PrettyPrintExcludeNulls' Serialize.RFC1123PrettyPrintExcludeNullsCamelCase>(opts); " is 125.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.RFC1123ExcludeNullsInherited' Serialize.RFC1123ExcludeNullsInheritedCamelCase>(opts); " is 121.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MillisecondsPrettyPrintExcludeNullsJSONPInherited' Serialize.MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase>(opts); " is 163.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MillisecondsPrettyPrintExcludeNullsJSONP' Serialize.MillisecondsPrettyPrintExcludeNullsJSONPCamelCase>(opts); " is 145.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MillisecondsPrettyPrintExcludeNullsInherited' Serialize.MillisecondsPrettyPrintExcludeNullsInheritedCamelCase>(opts); " is 153.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MillisecondsPrettyPrintJSONPInherited' Serialize.MillisecondsPrettyPrintJSONPInheritedCamelCase>(opts); " is 139.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MillisecondsExcludeNullsJSONPInherited' Serialize.MillisecondsExcludeNullsJSONPInheritedCamelCase>(opts); " is 141.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MillisecondsPrettyPrintExcludeNulls' Serialize.MillisecondsPrettyPrintExcludeNullsCamelCase>(opts); " is 135.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MillisecondsPrettyPrintJSONP' Serialize.MillisecondsPrettyPrintJSONPCamelCase>(opts); " is 121.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MillisecondsPrettyPrintInherited' Serialize.MillisecondsPrettyPrintInheritedCamelCase>(opts); " is 129.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MillisecondsExcludeNullsJSONP' Serialize.MillisecondsExcludeNullsJSONPCamelCase>(opts); " is 123.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.MillisecondsExcludeNullsInherited' Serialize.MillisecondsExcludeNullsInheritedCamelCase>(opts); " is 131.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.ISO8601PrettyPrintExcludeNullsJSONPInherited' Serialize.ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase>(opts); " is 153.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.ISO8601PrettyPrintExcludeNullsJSONP' Serialize.ISO8601PrettyPrintExcludeNullsJSONPCamelCase>(opts); " is 135.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.ISO8601PrettyPrintExcludeNullsInherited' Serialize.ISO8601PrettyPrintExcludeNullsInheritedCamelCase>(opts); " is 143.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.ISO8601PrettyPrintJSONPInherited' Serialize.ISO8601PrettyPrintJSONPInheritedCamelCase>(opts); " is 129.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.ISO8601ExcludeNullsJSONPInherited' Serialize.ISO8601ExcludeNullsJSONPInheritedCamelCase>(opts); " is 131.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.ISO8601PrettyPrintExcludeNulls' Serialize.ISO8601PrettyPrintExcludeNullsCamelCase>(opts); " is 125.
Long Statement,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The length of the statement  "                return SwitchOnNameFormat<Serialize.ISO8601ExcludeNullsInherited' Serialize.ISO8601ExcludeNullsInheritedCamelCase>(opts); " is 121.
Long Statement,Jil.SerializeDynamic,RecursiveSerializerCache<T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\RecursiveSerializerCache.cs,_GetFor,The length of the statement  "                var emit = Emit.NewDynamicMethod(typeof(void)' new[] { typeof(TextWriter)' type' typeof(int) }' doVerify: Utils.DoVerify); " is 122.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,GroupAndVerifyUnions,The length of the statement  "                if (!Utils.CheckUnionLegality(DateFormat' kv.Key' kv.Value' out ignored1' out ignored2' out ignored3' out ignored4' out errorMessage)) " is 134.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMember,The length of the statement  "            if (asField == null && asProp == null) throw new ConstructionException("Encountered a serializable member that is neither a field nor a property: " + member); " is 158.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMember,The length of the statement  "            if (serializingType.IsListType() || serializingType.IsDictionaryType() || serializingType.IsReadOnlyListType() || serializingType.IsReadOnlyDictionaryType()) " is 157.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMember,The length of the statement  "                WriteEnumOrPrimitive(member' serializingType' requiresQuotes: false' hasTextWriter: true' popTextWriter: false' containedInNullable: false); " is 140.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteNullable,The length of the statement  "                        WriteEnumOrPrimitive(nullableMember' underlyingType' requiresQuotes: false' hasTextWriter: true' popTextWriter: true' containedInNullable: true); " is 145.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMicrosoftStyleDateTime,The length of the statement  "                var dtCons = typeof(DateTime).GetConstructor(new[] { typeof(int)' typeof(int)' typeof(int)' typeof(int)' typeof(int)' typeof(int)' typeof(DateTimeKind) }); " is 155.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMillisecondsStyleDateTime,The length of the statement  "                var dtCons = typeof(DateTime).GetConstructor(new[] { typeof(int)' typeof(int)' typeof(int)' typeof(int)' typeof(int)' typeof(int)' typeof(DateTimeKind) }); " is 155.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteSecondsStyleDateTime,The length of the statement  "                var dtCons = typeof(DateTime).GetConstructor(new[] { typeof(int)' typeof(int)' typeof(int)' typeof(int)' typeof(int)' typeof(int)' typeof(DateTimeKind) }); " is 155.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDateTime,The length of the statement  "                var convertToKind = UnspecifiedDateTimeBehavior == UnspecifiedDateTimeKindBehavior.IsLocal ? DateTimeKind.Local : DateTimeKind.Utc; " is 131.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WritePrimitive,The length of the statement  "            var needsIntCoercion = primitiveType == typeof(byte) || primitiveType == typeof(sbyte) || primitiveType == typeof(short) || primitiveType == typeof(ushort); " is 156.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WritePrimitive,The length of the statement  "            var isIntegerType = primitiveType == typeof(int) || primitiveType == typeof(uint) || primitiveType == typeof(long) || primitiveType == typeof(ulong); " is 149.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteEncodedChar,The length of the statement  "            var needLabels = CharacterEscapes.OrderBy(kv => kv.Key).Select(kv => Tuple.Create(kv.Key - lowestCharNeedingEncoding' kv.Value)).ToList(); " is 138.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteObjectWithNulls,The length of the statement  "            var hasConditionalSerialization = writeOrder.SelectMany(wo => wo).OfType<PropertyInfo>().Any(p => p.ShouldSerializeMethod(forType) != null); " is 140.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteObject,The length of the statement  "                    throw new ConstructionException("Internal type tracking in unexpected state' found [" + finished + "] expected [" + forType + "]"); " is 131.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,_CreateUnexpectedTypeException,The length of the statement  "            return new SerializerException("Unexpected type provided during union serialization [" + observedType.Name + "]' expected one of " + oneOf); " is 140.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMemberIfNonNull,The length of the statement  "            if (asField == null && asProp == null) throw new ConstructionException("Encountered a serializable member that is neither a field nor a property: " + member); " is 158.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMemberConditionally,The length of the statement  "            if (asField == null && asProp == null) throw new ConstructionException("Encountered a serializable member that is neither a field nor a property: " + member); " is 158.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteElement,The length of the statement  "                WriteEnumOrPrimitive(listMember' elementType' requiresQuotes: false' hasTextWriter: true' popTextWriter: false' containedInNullable: false); " is 140.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,DynamicCallOutCheck,The length of the statement  "                var equivalentOptions = new Options(this.PrettyPrint' this.ExcludeNulls' this.JSONP' this.DateFormat' this.IncludeInherited' this.UnspecifiedDateTimeBehavior' this.SerializationNameFormat); " is 189.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValueIfNotNull,The length of the statement  "                    WriteEnumOrPrimitive(dictionaryMember' keyType' true' hasTextWriter: false' popTextWriter: false' containedInNullable: false); " is 126.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValueIfNotNull,The length of the statement  "                WriteEnumOrPrimitive(dictionaryMember' elementType' requiresQuotes: false' hasTextWriter: true' popTextWriter: false' containedInNullable: false); " is 146.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValue,The length of the statement  "                    WriteEnumOrPrimitive(dictionaryMember' keyType' requiresQuotes: true' hasTextWriter: false' popTextWriter: false' containedInNullable: false);   // kvp " is 151.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValue,The length of the statement  "                WriteEnumOrPrimitive(dictionaryMember' elementType' requiresQuotes: false' hasTextWriter: true' popTextWriter: false' containedInNullable: false); " is 146.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteEnum,The length of the statement  "                    throw new ConstructionException(enumType.FullName + " has no defined values and thus cannot be serialized; define values' make nullable' or configure to treat as integer"); " is 172.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,MakeEmit,The length of the statement  "                return Emit.NewDynamicMethod(typeof(void)' new[] { typeof(ThunkWriter).MakeByRefType()' typeof(ForType)' typeof(int) }' doVerify: Utils.DoVerify); " is 146.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,MakeEmit,The length of the statement  "                return Emit.NewDynamicMethod(typeof(void)' new[] { typeof(TextWriter)' typeof(ForType)' typeof(int) }' doVerify: Utils.DoVerify); " is 129.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,FindAndPrimeRecursiveOrReusedTypes,The length of the statement  "                    loadMtd = typeof(TypeCache<'>).MakeGenericType(RecursionLookupOptionsType' primeType).GetMethod("LoadToString"' BindingFlags.Public | BindingFlags.Static); " is 155.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,FindAndPrimeRecursiveOrReusedTypes,The length of the statement  "                    loadMtd = typeof(TypeCache<'>).MakeGenericType(RecursionLookupOptionsType' primeType).GetMethod("Load"' BindingFlags.Public | BindingFlags.Static); " is 147.
Long Statement,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,BuildEnumWithNewImpl,The length of the statement  "                WriteEnumOrPrimitive(dynamicMember' typeof(ForType)' requiresQuotes: false' hasTextWriter: true' popTextWriter: false' containedInNullable: false); " is 147.
Long Statement,Jil.Serialize,InlineSerializerHelper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,BuildAlwaysFailsWithToString,The length of the statement  "            var stashField = specificTypeCache.GetField("StringThunkExceptionDuringBuild"' BindingFlags.Static | BindingFlags.Public); " is 122.
Long Statement,Jil.Serialize,InlineSerializerHelper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,BuildAlwaysFailsWithToString,The length of the statement  "            var emit = Emit.NewDynamicMethod(typeof(void)' new[] { typeof(ThunkWriter).MakeByRefType()' typeof(BuildForType)' typeof(int) }); " is 129.
Long Statement,Jil.Serialize,InlineSerializerHelper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,Build,The length of the statement  "                var obj = new InlineSerializer<BuildForType>(optionsType' pretty' excludeNulls' jsonp' dateFormat' includeInherited' dateTimeBehavior' serializationNameFormat' false' false); " is 174.
Long Statement,Jil.Serialize,InlineSerializerHelper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,_BuildWithDynamism,The length of the statement  "            var obj = new InlineSerializer<BuildForType>(optionsType' pretty' excludeNulls' jsonp' dateFormat' includeInherited' dateTimeBehavior' serializationNameFormat' true' false); " is 173.
Long Statement,Jil.Serialize,InlineSerializerHelper,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,BuildToString,The length of the statement  "                var obj = new InlineSerializer<BuildForType>(optionsType' pretty' excludeNulls' jsonp' dateFormat' includeInherited' dateTimeBehavior' serializationNameFormat' false' true); " is 173.
Long Statement,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_ValidateDouble,The length of the statement  "            if (double.IsNegativeInfinity(d)) throw new InvalidOperationException("-Infinity is not a permitted JSON number value"); " is 120.
Long Statement,Jil.Serialize,TypeCache<TOptions;T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\TypeCaches.cs,Load,The length of the statement  "                Thunk = InlineSerializerHelper.Build<T>(typeof(TOptions)' pretty: opts.PrettyPrint' excludeNulls: opts.ExcludeNulls' dateFormat: opts.DateFormat' jsonp: opts.JSONP' includeInherited: opts.IncludeInherited' dateTimeBehavior: opts.DateTimeKindBehavior' serializationNameFormat: opts.SerializationNameFormat' exceptionDuringBuild: out ThunkExceptionDuringBuild); " is 359.
Long Statement,Jil.Serialize,TypeCache<TOptions;T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\TypeCaches.cs,LoadToString,The length of the statement  "                StringThunk = InlineSerializerHelper.BuildToString<T>(typeof(TOptions)' pretty: opts.PrettyPrint' excludeNulls: opts.ExcludeNulls' dateFormat: opts.DateFormat' jsonp: opts.JSONP' includeInherited: opts.IncludeInherited' dateTimeBehavior: opts.DateTimeKindBehavior' serializationNameFormat: opts.SerializationNameFormat' exceptionDuringBuild: out StringThunkExceptionDuringBuild); " is 379.
Complex Conditional,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The conditional expression  "str[0] != '/' || str[1] != 'D' || str[2] != 'a' || str[3] != 't' || str[4] != 'e' || str[5] != '('"  is complex.
Complex Conditional,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The conditional expression  "str[0] != '/' || str[1] != 'D' || str[2] != 'a' || str[3] != 't' || str[4] != 'e' || str[5] != '('"  is complex.
Complex Conditional,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTime,The conditional expression  "c == 'Z' || c == 'z' || c == '+' || c == '-'"  is complex.
Complex Conditional,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTimeOffset,The conditional expression  "c == 'Z' || c == 'z' || c == '+' || c == '-'"  is complex.
Complex Conditional,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateWithOffset,The conditional expression  "c == 'Z' || c == 'z' || c == '+' || c == '-'"  is complex.
Complex Conditional,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601TimeSpan,The conditional expression  "week != -1 && (year != -1 || month != -1 || day != -1)"  is complex.
Complex Conditional,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadDictionary,The conditional expression  "keyIsInteger || (keyIsEnum && dictionaryMember != null && dictionaryMember.ShouldConvertEnum(keyType))"  is complex.
Complex Conditional,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadDictionary,The conditional expression  "keyIsInteger || (keyIsEnum && dictionaryMember != null && dictionaryMember.ShouldConvertEnum(keyType))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The conditional expression  "!((a >= '0' && a <= '9') || (a >= 'A' && a <= 'F') || (a >= 'a' && a <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The conditional expression  "!((b >= '0' && b <= '9') || (b >= 'A' && b <= 'F') || (b >= 'a' && b <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadChar,The conditional expression  "!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadChar,The conditional expression  "!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadChar,The conditional expression  "!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadChar,The conditional expression  "!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipNumber,The conditional expression  "next == '-' || next == '+' || (next >= '0' && next <= '9')"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601Date,The conditional expression  "c == 'Z' || c == 'z' || c == '+' || c == '-'"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffset,The conditional expression  "c == 'Z' || c == 'z' || c == '+' || c == '-'"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpan,The conditional expression  "week != -1 && (year != -1 || month != -1 || day != -1)"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The conditional expression  "!((a >= '0' && a <= '9') || (a >= 'A' && a <= 'F') || (a >= 'a' && a <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The conditional expression  "!((b >= '0' && b <= '9') || (b >= 'A' && b <= 'F') || (b >= 'a' && b <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadCharThunkReader,The conditional expression  "!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadCharThunkReader,The conditional expression  "!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadCharThunkReader,The conditional expression  "!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadCharThunkReader,The conditional expression  "!((u >= '0' && u <= '9') || (u >= 'A' && u <= 'F') || (u >= 'a' && u <= 'f'))"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipNumberThunkReader,The conditional expression  "next == '-' || next == '+' || (next >= '0' && next <= '9')"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,The conditional expression  "c == 'Z' || c == 'z' || c == '+' || c == '-'"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,The conditional expression  "c == 'Z' || c == 'z' || c == '+' || c == '-'"  is complex.
Complex Conditional,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,The conditional expression  "week != -1 && (year != -1 || month != -1 || day != -1)"  is complex.
Complex Conditional,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMicrosoftTypeCache,The conditional expression  "opts.ShouldPrettyPrint && opts.ShouldExcludeNulls && opts.IsJSONP && opts.ShouldIncludeInherited"  is complex.
Complex Conditional,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetSecondsTypeCache,The conditional expression  "opts.ShouldPrettyPrint && opts.ShouldExcludeNulls && opts.IsJSONP && opts.ShouldIncludeInherited"  is complex.
Complex Conditional,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetRFC1123TypeCache,The conditional expression  "opts.ShouldPrettyPrint && opts.ShouldExcludeNulls && opts.IsJSONP && opts.ShouldIncludeInherited"  is complex.
Complex Conditional,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetMillisecondsTypeCache,The conditional expression  "opts.ShouldPrettyPrint && opts.ShouldExcludeNulls && opts.IsJSONP && opts.ShouldIncludeInherited"  is complex.
Complex Conditional,Jil.SerializeDynamic,OptionsLookup,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\OptionsLookup.cs,GetISO8601TypeCache,The conditional expression  "opts.ShouldPrettyPrint && opts.ShouldExcludeNulls && opts.IsJSONP && opts.ShouldIncludeInherited"  is complex.
Complex Conditional,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMember,The conditional expression  "serializingType.IsListType() || serializingType.IsDictionaryType() || serializingType.IsReadOnlyListType() || serializingType.IsReadOnlyDictionaryType()"  is complex.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,PropertyFieldUsage,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,LoadConstantOfType,The method has an empty catch block.
Empty Catch Block,Jil,DeserializationException,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializationException.cs,InspectReader,The method has an empty catch block.
Empty Catch Block,Jil,DeserializationException,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializationException.cs,InspectReader,The method has an empty catch block.
Empty Catch Block,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeBoolDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeIntegerDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeIntegerDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeFloatingPointDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeFloatingPointDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeFloatingPointDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeDateTimeDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeDateTimeOffsetDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeTimeSpanDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeGuidDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeStringDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeStringDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeListAndNotDictionaryDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeListAndNotDictionaryDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeListAndNotDictionaryDynamic,The method has an empty catch block.
Empty Catch Block,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,CanBeListAndNotDictionaryDynamic,The method has an empty catch block.
Magic Number,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: numBytes = 2;
Magic Number,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: numBytes = 2;
Magic Number,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: numBytes = 4;
Magic Number,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: numBytes = 4;
Magic Number,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: numBytes = 8;
Magic Number,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,GetEnumUnderlyingPrimitiveInfo,The following statement contains a magic number: numBytes = 8;
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,Utils,The following statement contains a magic number: op.Size == 2
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The following statement contains a magic number: switch (i)                 {                     case 1:                         ret.AddRange(                             asc ?                                 simpleTypes.OrderBy(byAccessOrder).ThenBy(fieldsFirst) :                                 simpleTypes.OrderByDescending(byAccessOrder).ThenByDescending(fieldsFirst)                         );                         break;                      case 2:                         ret.AddRange(                             asc ?                                 otherPrimitive.OrderBy(byAccessOrder).ThenBy(fieldsFirst) :                                 otherPrimitive.OrderByDescending(byAccessOrder).ThenByDescending(fieldsFirst)                         );                         break;                      case 3:                         ret.AddRange(                             asc ?                                 everythingElse.OrderBy(byAccessOrder).ThenBy(fieldsFirst) :                                 everythingElse.OrderByDescending(byAccessOrder).ThenByDescending(fieldsFirst)                         );                         break;                      case 4:                         ret.AddRange(                             asc ?                                 recursive.OrderBy(byAccessOrder).ThenBy(fieldsFirst) :                                 recursive.OrderByDescending(byAccessOrder).ThenByDescending(fieldsFirst)                         );                         break;                      default: throw new Exception();                 }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The following statement contains a magic number: switch (i)                 {                     case 1:                         ret.AddRange(                             asc ?                                 simpleTypes.OrderBy(byAccessOrder).ThenBy(fieldsFirst) :                                 simpleTypes.OrderByDescending(byAccessOrder).ThenByDescending(fieldsFirst)                         );                         break;                      case 2:                         ret.AddRange(                             asc ?                                 otherPrimitive.OrderBy(byAccessOrder).ThenBy(fieldsFirst) :                                 otherPrimitive.OrderByDescending(byAccessOrder).ThenByDescending(fieldsFirst)                         );                         break;                      case 3:                         ret.AddRange(                             asc ?                                 everythingElse.OrderBy(byAccessOrder).ThenBy(fieldsFirst) :                                 everythingElse.OrderByDescending(byAccessOrder).ThenByDescending(fieldsFirst)                         );                         break;                      case 4:                         ret.AddRange(                             asc ?                                 recursive.OrderBy(byAccessOrder).ThenBy(fieldsFirst) :                                 recursive.OrderByDescending(byAccessOrder).ThenByDescending(fieldsFirst)                         );                         break;                      default: throw new Exception();                 }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,IdealMemberOrderForWriting,The following statement contains a magic number: switch (i)                 {                     case 1:                         ret.AddRange(                             asc ?                                 simpleTypes.OrderBy(byAccessOrder).ThenBy(fieldsFirst) :                                 simpleTypes.OrderByDescending(byAccessOrder).ThenByDescending(fieldsFirst)                         );                         break;                      case 2:                         ret.AddRange(                             asc ?                                 otherPrimitive.OrderBy(byAccessOrder).ThenBy(fieldsFirst) :                                 otherPrimitive.OrderByDescending(byAccessOrder).ThenByDescending(fieldsFirst)                         );                         break;                      case 3:                         ret.AddRange(                             asc ?                                 everythingElse.OrderBy(byAccessOrder).ThenBy(fieldsFirst) :                                 everythingElse.OrderByDescending(byAccessOrder).ThenByDescending(fieldsFirst)                         );                         break;                      case 4:                         ret.AddRange(                             asc ?                                 recursive.OrderBy(byAccessOrder).ThenBy(fieldsFirst) :                                 recursive.OrderByDescending(byAccessOrder).ThenByDescending(fieldsFirst)                         );                         break;                      default: throw new Exception();                 }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadOp,The following statement contains a magic number: advance += 2;
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' int> readInt = (at) => cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24);
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' int> readInt = (at) => cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24);
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' int> readInt = (at) => cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24);
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' int> readInt = (at) => cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24);
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' int> readInt = (at) => cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24);
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' long> readLong =                  (at) =>                 {                     var a = (uint)(cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24));                     var b = (uint)(cil[at+4] | (cil[at + 5] << 8) | (cil[at + 6] << 16) | (cil[at + 7] << 24));                      return (((long)b) << 32) | a;                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' long> readLong =                  (at) =>                 {                     var a = (uint)(cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24));                     var b = (uint)(cil[at+4] | (cil[at + 5] << 8) | (cil[at + 6] << 16) | (cil[at + 7] << 24));                      return (((long)b) << 32) | a;                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' long> readLong =                  (at) =>                 {                     var a = (uint)(cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24));                     var b = (uint)(cil[at+4] | (cil[at + 5] << 8) | (cil[at + 6] << 16) | (cil[at + 7] << 24));                      return (((long)b) << 32) | a;                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' long> readLong =                  (at) =>                 {                     var a = (uint)(cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24));                     var b = (uint)(cil[at+4] | (cil[at + 5] << 8) | (cil[at + 6] << 16) | (cil[at + 7] << 24));                      return (((long)b) << 32) | a;                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' long> readLong =                  (at) =>                 {                     var a = (uint)(cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24));                     var b = (uint)(cil[at+4] | (cil[at + 5] << 8) | (cil[at + 6] << 16) | (cil[at + 7] << 24));                      return (((long)b) << 32) | a;                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' long> readLong =                  (at) =>                 {                     var a = (uint)(cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24));                     var b = (uint)(cil[at+4] | (cil[at + 5] << 8) | (cil[at + 6] << 16) | (cil[at + 7] << 24));                      return (((long)b) << 32) | a;                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' long> readLong =                  (at) =>                 {                     var a = (uint)(cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24));                     var b = (uint)(cil[at+4] | (cil[at + 5] << 8) | (cil[at + 6] << 16) | (cil[at + 7] << 24));                      return (((long)b) << 32) | a;                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' long> readLong =                  (at) =>                 {                     var a = (uint)(cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24));                     var b = (uint)(cil[at+4] | (cil[at + 5] << 8) | (cil[at + 6] << 16) | (cil[at + 7] << 24));                      return (((long)b) << 32) | a;                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' long> readLong =                  (at) =>                 {                     var a = (uint)(cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24));                     var b = (uint)(cil[at+4] | (cil[at + 5] << 8) | (cil[at + 6] << 16) | (cil[at + 7] << 24));                      return (((long)b) << 32) | a;                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' long> readLong =                  (at) =>                 {                     var a = (uint)(cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24));                     var b = (uint)(cil[at+4] | (cil[at + 5] << 8) | (cil[at + 6] << 16) | (cil[at + 7] << 24));                      return (((long)b) << 32) | a;                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' long> readLong =                  (at) =>                 {                     var a = (uint)(cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24));                     var b = (uint)(cil[at+4] | (cil[at + 5] << 8) | (cil[at + 6] << 16) | (cil[at + 7] << 24));                      return (((long)b) << 32) | a;                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' long> readLong =                  (at) =>                 {                     var a = (uint)(cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24));                     var b = (uint)(cil[at+4] | (cil[at + 5] << 8) | (cil[at + 6] << 16) | (cil[at + 7] << 24));                      return (((long)b) << 32) | a;                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' long> readLong =                  (at) =>                 {                     var a = (uint)(cil[at] | (cil[at + 1] << 8) | (cil[at + 2] << 16) | (cil[at + 3] << 24));                     var b = (uint)(cil[at+4] | (cil[at + 5] << 8) | (cil[at + 6] << 16) | (cil[at + 7] << 24));                      return (((long)b) << 32) | a;                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' double> readDouble =                 (at) =>                 {                     var arr = new byte[8];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                     arr[4] = cil[at + 4];                     arr[5] = cil[at + 5];                     arr[6] = cil[at + 6];                     arr[7] = cil[at + 7];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToDouble(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' double> readDouble =                 (at) =>                 {                     var arr = new byte[8];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                     arr[4] = cil[at + 4];                     arr[5] = cil[at + 5];                     arr[6] = cil[at + 6];                     arr[7] = cil[at + 7];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToDouble(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' double> readDouble =                 (at) =>                 {                     var arr = new byte[8];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                     arr[4] = cil[at + 4];                     arr[5] = cil[at + 5];                     arr[6] = cil[at + 6];                     arr[7] = cil[at + 7];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToDouble(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' double> readDouble =                 (at) =>                 {                     var arr = new byte[8];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                     arr[4] = cil[at + 4];                     arr[5] = cil[at + 5];                     arr[6] = cil[at + 6];                     arr[7] = cil[at + 7];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToDouble(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' double> readDouble =                 (at) =>                 {                     var arr = new byte[8];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                     arr[4] = cil[at + 4];                     arr[5] = cil[at + 5];                     arr[6] = cil[at + 6];                     arr[7] = cil[at + 7];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToDouble(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' double> readDouble =                 (at) =>                 {                     var arr = new byte[8];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                     arr[4] = cil[at + 4];                     arr[5] = cil[at + 5];                     arr[6] = cil[at + 6];                     arr[7] = cil[at + 7];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToDouble(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' double> readDouble =                 (at) =>                 {                     var arr = new byte[8];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                     arr[4] = cil[at + 4];                     arr[5] = cil[at + 5];                     arr[6] = cil[at + 6];                     arr[7] = cil[at + 7];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToDouble(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' double> readDouble =                 (at) =>                 {                     var arr = new byte[8];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                     arr[4] = cil[at + 4];                     arr[5] = cil[at + 5];                     arr[6] = cil[at + 6];                     arr[7] = cil[at + 7];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToDouble(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' double> readDouble =                 (at) =>                 {                     var arr = new byte[8];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                     arr[4] = cil[at + 4];                     arr[5] = cil[at + 5];                     arr[6] = cil[at + 6];                     arr[7] = cil[at + 7];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToDouble(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' double> readDouble =                 (at) =>                 {                     var arr = new byte[8];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                     arr[4] = cil[at + 4];                     arr[5] = cil[at + 5];                     arr[6] = cil[at + 6];                     arr[7] = cil[at + 7];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToDouble(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' double> readDouble =                 (at) =>                 {                     var arr = new byte[8];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                     arr[4] = cil[at + 4];                     arr[5] = cil[at + 5];                     arr[6] = cil[at + 6];                     arr[7] = cil[at + 7];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToDouble(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' double> readDouble =                 (at) =>                 {                     var arr = new byte[8];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                     arr[4] = cil[at + 4];                     arr[5] = cil[at + 5];                     arr[6] = cil[at + 6];                     arr[7] = cil[at + 7];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToDouble(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' double> readDouble =                 (at) =>                 {                     var arr = new byte[8];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                     arr[4] = cil[at + 4];                     arr[5] = cil[at + 5];                     arr[6] = cil[at + 6];                     arr[7] = cil[at + 7];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToDouble(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' float> readFloat =                 (at) =>                 {                     var arr = new byte[4];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToSingle(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' float> readFloat =                 (at) =>                 {                     var arr = new byte[4];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToSingle(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' float> readFloat =                 (at) =>                 {                     var arr = new byte[4];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToSingle(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' float> readFloat =                 (at) =>                 {                     var arr = new byte[4];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToSingle(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: Func<int' float> readFloat =                 (at) =>                 {                     var arr = new byte[4];                     arr[0] = cil[at];                     arr[1] = cil[at + 1];                     arr[2] = cil[at + 2];                     arr[3] = cil[at + 3];                      if (!BitConverter.IsLittleEndian)                     {                         Array.Reverse(arr);                     }                      return BitConverter.ToSingle(arr' 0);                 };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType)             {                 case OperandType.InlineBrTarget:                     advance += 4;                     return null;                  case OperandType.InlineSwitch:                     advance += 4;                     var len = readInt(operandStart);                     for (var i = 0; i < len; i++)                     {                         advance += 4;                     }                     return null;                  case OperandType.ShortInlineBrTarget:                     advance += 1;                     return null;                  case OperandType.InlineField:                     advance += 4;                     var field = readInt(operandStart);                     return field;                  case OperandType.InlineTok:                 case OperandType.InlineType:                 case OperandType.InlineMethod:                     advance += 4;                     return null;                  case OperandType.InlineI:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineI8:                     advance += 8;                     constantLong = readLong(operandStart);                     return null;                  case OperandType.InlineNone:                     return null;                  case OperandType.InlineR:                     advance += 8;                     constantDouble = readDouble(operandStart);                     return null;                  case OperandType.InlineSig:                     advance += 4;                     return null;                  case OperandType.InlineString:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineVar:                     advance += 2;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineI:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineR:                     advance += 4;                     constantDouble = readFloat(operandStart);                     return null;                  case OperandType.ShortInlineVar:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  default: throw new Exception("Unexpected operand type [" + op.OperandType + "]");             }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType)             {                 case OperandType.InlineBrTarget:                     advance += 4;                     return null;                  case OperandType.InlineSwitch:                     advance += 4;                     var len = readInt(operandStart);                     for (var i = 0; i < len; i++)                     {                         advance += 4;                     }                     return null;                  case OperandType.ShortInlineBrTarget:                     advance += 1;                     return null;                  case OperandType.InlineField:                     advance += 4;                     var field = readInt(operandStart);                     return field;                  case OperandType.InlineTok:                 case OperandType.InlineType:                 case OperandType.InlineMethod:                     advance += 4;                     return null;                  case OperandType.InlineI:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineI8:                     advance += 8;                     constantLong = readLong(operandStart);                     return null;                  case OperandType.InlineNone:                     return null;                  case OperandType.InlineR:                     advance += 8;                     constantDouble = readDouble(operandStart);                     return null;                  case OperandType.InlineSig:                     advance += 4;                     return null;                  case OperandType.InlineString:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineVar:                     advance += 2;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineI:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineR:                     advance += 4;                     constantDouble = readFloat(operandStart);                     return null;                  case OperandType.ShortInlineVar:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  default: throw new Exception("Unexpected operand type [" + op.OperandType + "]");             }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType)             {                 case OperandType.InlineBrTarget:                     advance += 4;                     return null;                  case OperandType.InlineSwitch:                     advance += 4;                     var len = readInt(operandStart);                     for (var i = 0; i < len; i++)                     {                         advance += 4;                     }                     return null;                  case OperandType.ShortInlineBrTarget:                     advance += 1;                     return null;                  case OperandType.InlineField:                     advance += 4;                     var field = readInt(operandStart);                     return field;                  case OperandType.InlineTok:                 case OperandType.InlineType:                 case OperandType.InlineMethod:                     advance += 4;                     return null;                  case OperandType.InlineI:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineI8:                     advance += 8;                     constantLong = readLong(operandStart);                     return null;                  case OperandType.InlineNone:                     return null;                  case OperandType.InlineR:                     advance += 8;                     constantDouble = readDouble(operandStart);                     return null;                  case OperandType.InlineSig:                     advance += 4;                     return null;                  case OperandType.InlineString:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineVar:                     advance += 2;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineI:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineR:                     advance += 4;                     constantDouble = readFloat(operandStart);                     return null;                  case OperandType.ShortInlineVar:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  default: throw new Exception("Unexpected operand type [" + op.OperandType + "]");             }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType)             {                 case OperandType.InlineBrTarget:                     advance += 4;                     return null;                  case OperandType.InlineSwitch:                     advance += 4;                     var len = readInt(operandStart);                     for (var i = 0; i < len; i++)                     {                         advance += 4;                     }                     return null;                  case OperandType.ShortInlineBrTarget:                     advance += 1;                     return null;                  case OperandType.InlineField:                     advance += 4;                     var field = readInt(operandStart);                     return field;                  case OperandType.InlineTok:                 case OperandType.InlineType:                 case OperandType.InlineMethod:                     advance += 4;                     return null;                  case OperandType.InlineI:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineI8:                     advance += 8;                     constantLong = readLong(operandStart);                     return null;                  case OperandType.InlineNone:                     return null;                  case OperandType.InlineR:                     advance += 8;                     constantDouble = readDouble(operandStart);                     return null;                  case OperandType.InlineSig:                     advance += 4;                     return null;                  case OperandType.InlineString:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineVar:                     advance += 2;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineI:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineR:                     advance += 4;                     constantDouble = readFloat(operandStart);                     return null;                  case OperandType.ShortInlineVar:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  default: throw new Exception("Unexpected operand type [" + op.OperandType + "]");             }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType)             {                 case OperandType.InlineBrTarget:                     advance += 4;                     return null;                  case OperandType.InlineSwitch:                     advance += 4;                     var len = readInt(operandStart);                     for (var i = 0; i < len; i++)                     {                         advance += 4;                     }                     return null;                  case OperandType.ShortInlineBrTarget:                     advance += 1;                     return null;                  case OperandType.InlineField:                     advance += 4;                     var field = readInt(operandStart);                     return field;                  case OperandType.InlineTok:                 case OperandType.InlineType:                 case OperandType.InlineMethod:                     advance += 4;                     return null;                  case OperandType.InlineI:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineI8:                     advance += 8;                     constantLong = readLong(operandStart);                     return null;                  case OperandType.InlineNone:                     return null;                  case OperandType.InlineR:                     advance += 8;                     constantDouble = readDouble(operandStart);                     return null;                  case OperandType.InlineSig:                     advance += 4;                     return null;                  case OperandType.InlineString:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineVar:                     advance += 2;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineI:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineR:                     advance += 4;                     constantDouble = readFloat(operandStart);                     return null;                  case OperandType.ShortInlineVar:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  default: throw new Exception("Unexpected operand type [" + op.OperandType + "]");             }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType)             {                 case OperandType.InlineBrTarget:                     advance += 4;                     return null;                  case OperandType.InlineSwitch:                     advance += 4;                     var len = readInt(operandStart);                     for (var i = 0; i < len; i++)                     {                         advance += 4;                     }                     return null;                  case OperandType.ShortInlineBrTarget:                     advance += 1;                     return null;                  case OperandType.InlineField:                     advance += 4;                     var field = readInt(operandStart);                     return field;                  case OperandType.InlineTok:                 case OperandType.InlineType:                 case OperandType.InlineMethod:                     advance += 4;                     return null;                  case OperandType.InlineI:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineI8:                     advance += 8;                     constantLong = readLong(operandStart);                     return null;                  case OperandType.InlineNone:                     return null;                  case OperandType.InlineR:                     advance += 8;                     constantDouble = readDouble(operandStart);                     return null;                  case OperandType.InlineSig:                     advance += 4;                     return null;                  case OperandType.InlineString:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineVar:                     advance += 2;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineI:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineR:                     advance += 4;                     constantDouble = readFloat(operandStart);                     return null;                  case OperandType.ShortInlineVar:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  default: throw new Exception("Unexpected operand type [" + op.OperandType + "]");             }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType)             {                 case OperandType.InlineBrTarget:                     advance += 4;                     return null;                  case OperandType.InlineSwitch:                     advance += 4;                     var len = readInt(operandStart);                     for (var i = 0; i < len; i++)                     {                         advance += 4;                     }                     return null;                  case OperandType.ShortInlineBrTarget:                     advance += 1;                     return null;                  case OperandType.InlineField:                     advance += 4;                     var field = readInt(operandStart);                     return field;                  case OperandType.InlineTok:                 case OperandType.InlineType:                 case OperandType.InlineMethod:                     advance += 4;                     return null;                  case OperandType.InlineI:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineI8:                     advance += 8;                     constantLong = readLong(operandStart);                     return null;                  case OperandType.InlineNone:                     return null;                  case OperandType.InlineR:                     advance += 8;                     constantDouble = readDouble(operandStart);                     return null;                  case OperandType.InlineSig:                     advance += 4;                     return null;                  case OperandType.InlineString:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineVar:                     advance += 2;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineI:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineR:                     advance += 4;                     constantDouble = readFloat(operandStart);                     return null;                  case OperandType.ShortInlineVar:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  default: throw new Exception("Unexpected operand type [" + op.OperandType + "]");             }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType)             {                 case OperandType.InlineBrTarget:                     advance += 4;                     return null;                  case OperandType.InlineSwitch:                     advance += 4;                     var len = readInt(operandStart);                     for (var i = 0; i < len; i++)                     {                         advance += 4;                     }                     return null;                  case OperandType.ShortInlineBrTarget:                     advance += 1;                     return null;                  case OperandType.InlineField:                     advance += 4;                     var field = readInt(operandStart);                     return field;                  case OperandType.InlineTok:                 case OperandType.InlineType:                 case OperandType.InlineMethod:                     advance += 4;                     return null;                  case OperandType.InlineI:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineI8:                     advance += 8;                     constantLong = readLong(operandStart);                     return null;                  case OperandType.InlineNone:                     return null;                  case OperandType.InlineR:                     advance += 8;                     constantDouble = readDouble(operandStart);                     return null;                  case OperandType.InlineSig:                     advance += 4;                     return null;                  case OperandType.InlineString:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineVar:                     advance += 2;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineI:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineR:                     advance += 4;                     constantDouble = readFloat(operandStart);                     return null;                  case OperandType.ShortInlineVar:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  default: throw new Exception("Unexpected operand type [" + op.OperandType + "]");             }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType)             {                 case OperandType.InlineBrTarget:                     advance += 4;                     return null;                  case OperandType.InlineSwitch:                     advance += 4;                     var len = readInt(operandStart);                     for (var i = 0; i < len; i++)                     {                         advance += 4;                     }                     return null;                  case OperandType.ShortInlineBrTarget:                     advance += 1;                     return null;                  case OperandType.InlineField:                     advance += 4;                     var field = readInt(operandStart);                     return field;                  case OperandType.InlineTok:                 case OperandType.InlineType:                 case OperandType.InlineMethod:                     advance += 4;                     return null;                  case OperandType.InlineI:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineI8:                     advance += 8;                     constantLong = readLong(operandStart);                     return null;                  case OperandType.InlineNone:                     return null;                  case OperandType.InlineR:                     advance += 8;                     constantDouble = readDouble(operandStart);                     return null;                  case OperandType.InlineSig:                     advance += 4;                     return null;                  case OperandType.InlineString:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineVar:                     advance += 2;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineI:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineR:                     advance += 4;                     constantDouble = readFloat(operandStart);                     return null;                  case OperandType.ShortInlineVar:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  default: throw new Exception("Unexpected operand type [" + op.OperandType + "]");             }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType)             {                 case OperandType.InlineBrTarget:                     advance += 4;                     return null;                  case OperandType.InlineSwitch:                     advance += 4;                     var len = readInt(operandStart);                     for (var i = 0; i < len; i++)                     {                         advance += 4;                     }                     return null;                  case OperandType.ShortInlineBrTarget:                     advance += 1;                     return null;                  case OperandType.InlineField:                     advance += 4;                     var field = readInt(operandStart);                     return field;                  case OperandType.InlineTok:                 case OperandType.InlineType:                 case OperandType.InlineMethod:                     advance += 4;                     return null;                  case OperandType.InlineI:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineI8:                     advance += 8;                     constantLong = readLong(operandStart);                     return null;                  case OperandType.InlineNone:                     return null;                  case OperandType.InlineR:                     advance += 8;                     constantDouble = readDouble(operandStart);                     return null;                  case OperandType.InlineSig:                     advance += 4;                     return null;                  case OperandType.InlineString:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineVar:                     advance += 2;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineI:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineR:                     advance += 4;                     constantDouble = readFloat(operandStart);                     return null;                  case OperandType.ShortInlineVar:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  default: throw new Exception("Unexpected operand type [" + op.OperandType + "]");             }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType)             {                 case OperandType.InlineBrTarget:                     advance += 4;                     return null;                  case OperandType.InlineSwitch:                     advance += 4;                     var len = readInt(operandStart);                     for (var i = 0; i < len; i++)                     {                         advance += 4;                     }                     return null;                  case OperandType.ShortInlineBrTarget:                     advance += 1;                     return null;                  case OperandType.InlineField:                     advance += 4;                     var field = readInt(operandStart);                     return field;                  case OperandType.InlineTok:                 case OperandType.InlineType:                 case OperandType.InlineMethod:                     advance += 4;                     return null;                  case OperandType.InlineI:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineI8:                     advance += 8;                     constantLong = readLong(operandStart);                     return null;                  case OperandType.InlineNone:                     return null;                  case OperandType.InlineR:                     advance += 8;                     constantDouble = readDouble(operandStart);                     return null;                  case OperandType.InlineSig:                     advance += 4;                     return null;                  case OperandType.InlineString:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineVar:                     advance += 2;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineI:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineR:                     advance += 4;                     constantDouble = readFloat(operandStart);                     return null;                  case OperandType.ShortInlineVar:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  default: throw new Exception("Unexpected operand type [" + op.OperandType + "]");             }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,_ReadFieldOperands,The following statement contains a magic number: switch (op.OperandType)             {                 case OperandType.InlineBrTarget:                     advance += 4;                     return null;                  case OperandType.InlineSwitch:                     advance += 4;                     var len = readInt(operandStart);                     for (var i = 0; i < len; i++)                     {                         advance += 4;                     }                     return null;                  case OperandType.ShortInlineBrTarget:                     advance += 1;                     return null;                  case OperandType.InlineField:                     advance += 4;                     var field = readInt(operandStart);                     return field;                  case OperandType.InlineTok:                 case OperandType.InlineType:                 case OperandType.InlineMethod:                     advance += 4;                     return null;                  case OperandType.InlineI:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineI8:                     advance += 8;                     constantLong = readLong(operandStart);                     return null;                  case OperandType.InlineNone:                     return null;                  case OperandType.InlineR:                     advance += 8;                     constantDouble = readDouble(operandStart);                     return null;                  case OperandType.InlineSig:                     advance += 4;                     return null;                  case OperandType.InlineString:                     advance += 4;                     constantInt = readInt(operandStart);                     return null;                  case OperandType.InlineVar:                     advance += 2;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineI:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  case OperandType.ShortInlineR:                     advance += 4;                     constantDouble = readFloat(operandStart);                     return null;                  case OperandType.ShortInlineVar:                     advance += 1;                     constantInt = cil[operandStart];                     return null;                  default: throw new Exception("Unexpected operand type [" + op.OperandType + "]");             }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,GetAnonymousNameToConstructorMap_Decompile,The following statement contains a magic number: switch (preceedingLdArg.Item1.Value)                 {                     // Ldarg_0 will be `this`' so we'll never see it                      // Ldarg_1                     case 0x03: paramIx = 1; break;                     // Ldarg_2                     case 0x04: paramIx = 2; break;                     // Ldarg_3                     case 0x05: paramIx = 3; break;                      // Ldarg' Ldarg_S                     default: paramIx = preceedingLdArg.Item2.Value; break;                 }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,GetAnonymousNameToConstructorMap_Decompile,The following statement contains a magic number: switch (preceedingLdArg.Item1.Value)                 {                     // Ldarg_0 will be `this`' so we'll never see it                      // Ldarg_1                     case 0x03: paramIx = 1; break;                     // Ldarg_2                     case 0x04: paramIx = 2; break;                     // Ldarg_3                     case 0x05: paramIx = 3; break;                      // Ldarg' Ldarg_S                     default: paramIx = preceedingLdArg.Item2.Value; break;                 }
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,FindReusedTypes,The following statement contains a magic number: Action<Type> pushIfNew =                  type =>                  {                      if (!counts.ContainsKey(type) || counts[type] < 2)                      {                          pending.Push(type);                      }                  };
Magic Number,Jil.Common,Utils,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\Utils.cs,Pow10,The following statement contains a magic number: return (long)Math.Pow(10' power);
Magic Number,Jil,DeserializationException,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializationException.cs,InspectReader,The following statement contains a magic number: (c = reader.Read()) != -1 && sb.Length < 50
Magic Number,Jil,DeserializationException,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializationException.cs,InspectReader,The following statement contains a magic number: (c = reader.Read()) != -1 && sb.Length < 50
Magic Number,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,GetHashCode,The following statement contains a magic number: const int milliMask = isoMask * 2;
Magic Number,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,GetHashCode,The following statement contains a magic number: const int microsoftMask = milliMask * 2;
Magic Number,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,GetHashCode,The following statement contains a magic number: const int secondsMask = microsoftMask * 2;
Magic Number,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,GetHashCode,The following statement contains a magic number: const int rfc1123Mask = secondsMask * 2;
Magic Number,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,GetHashCode,The following statement contains a magic number: const int localMask = rfc1123Mask * 2;
Magic Number,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,GetHashCode,The following statement contains a magic number: const int utcMask = localMask * 2;
Magic Number,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,GetHashCode,The following statement contains a magic number: const int verbatimMask = utcMask * 2;
Magic Number,Jil,Options,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Options.cs,GetHashCode,The following statement contains a magic number: const int camelCaseMask = verbatimMask * 2;
Magic Number,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,The following statement contains a magic number: switch (Type)              {                  case JsonObjectType.False:                      result = false;                      return returnType == typeof(bool);                  case JsonObjectType.True:                      result = true;                      return returnType == typeof(bool);                  case JsonObjectType.FastNumber:                      if (returnType == typeof(double))                      {                          double res;                          var ret = FastNumberToDouble(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(float))                      {                          float res;                          var ret = FastNumberToFloat(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(decimal))                      {                          decimal res;                          var ret = FastNumberToDecimal(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(byte))                      {                          byte res;                          var ret = FastNumberToByte(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(sbyte))                      {                          sbyte res;                          var ret = FastNumberToSByte(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(short))                      {                          short res;                          var ret = FastNumberToShort(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(ushort))                      {                          ushort res;                          var ret = FastNumberToUShort(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(int))                      {                          int res;                          var ret = FastNumberToInt(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(uint))                      {                          uint res;                          var ret = FastNumberToUInt(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(long))                      {                          long res;                          var ret = FastNumberToLong(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(ulong))                      {                          ulong res;                          var ret = FastNumberToULong(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(DateTime))                      {                          long res;                          var ret = FastNumberToLong(out res);                          if (!ret)                          {                              result = null;                              return false;                          }                          switch(Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  result = Methods.UnixEpoch + TimeSpan.FromMilliseconds(res);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  result = Methods.UnixEpoch + TimeSpan.FromSeconds(res);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      if(returnType == typeof(DateTimeOffset))                      {                          long res;                          var ret = FastNumberToLong(out res);                          if (!ret)                          {                              result = null;                              return false;                          }                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  result = Methods.UnixEpochOffset + TimeSpan.FromMilliseconds(res);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  result = Methods.UnixEpochOffset + TimeSpan.FromSeconds(res);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      if(returnType == typeof(TimeSpan))                      {                          const double TicksPerMillisecond = 10000;                          const double TicksPerSecond = 10000000;                            double res;                          var ret = FastNumberToDouble(out res);                          if (!ret)                          {                              result = null;                              return false;                          }                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  var msTicksDouble = res * TicksPerMillisecond;                                  var msTicks = (long)msTicksDouble;                                                                    if (msTicksDouble >= TimeSpan.MaxValue.Ticks)                                  {                                      msTicks = TimeSpan.MaxValue.Ticks;                                  }                                                                    if(msTicksDouble <= TimeSpan.MinValue.Ticks)                                  {                                      msTicks = TimeSpan.MinValue.Ticks;                                  }                                    result = new TimeSpan(msTicks);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  var sTicksDouble = res * TicksPerSecond;                                  var sTicks = (long)sTicksDouble;                                                                    if (sTicksDouble >= TimeSpan.MaxValue.Ticks)                                  {                                      sTicks = TimeSpan.MaxValue.Ticks;                                  }                                                                    if(sTicksDouble <= TimeSpan.MinValue.Ticks)                                  {                                      sTicks = TimeSpan.MinValue.Ticks;                                  }                                    result = new TimeSpan(sTicks);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      break;                  case JsonObjectType.Number:                      if (returnType == typeof(double))                      {                          result = NumberValue;                          return true;                      }                      if (returnType == typeof(float))                      {                          result = (float)NumberValue;                          return true;                      }                      if (returnType == typeof(decimal))                      {                          result = (decimal)NumberValue;                          return true;                      }                      if (returnType == typeof(byte))                      {                          result = (byte)NumberValue;                          return true;                      }                      if (returnType == typeof(sbyte))                      {                          result = (sbyte)NumberValue;                          return true;                      }                      if (returnType == typeof(short))                      {                          result = (short)NumberValue;                          return true;                      }                      if (returnType == typeof(ushort))                      {                          result = (ushort)NumberValue;                          return true;                      }                      if (returnType == typeof(int))                      {                          result = (int)NumberValue;                          return true;                      }                      if (returnType == typeof(uint))                      {                          result = (uint)NumberValue;                          return true;                      }                      if (returnType == typeof(long))                      {                          result = (long)NumberValue;                          return true;                      }                      if (returnType == typeof(ulong))                      {                          result = (ulong)NumberValue;                          return true;                      }                      if (returnType == typeof(DateTime))                      {                          var res = (long)NumberValue;                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  result = Methods.UnixEpoch + TimeSpan.FromMilliseconds(res);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  result = Methods.UnixEpoch + TimeSpan.FromSeconds(res);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      if (returnType == typeof(DateTimeOffset))                      {                          var res = (long)NumberValue;                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  result = Methods.UnixEpochOffset + TimeSpan.FromMilliseconds(res);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  result = Methods.UnixEpochOffset + TimeSpan.FromSeconds(res);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      if (returnType == typeof(TimeSpan))                      {                          const double TicksPerMillisecond = 10000;                          const double TicksPerSecond = 10000000;                            var res = NumberValue;                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  var msTicksDouble = res * TicksPerMillisecond;                                  var msTicks = (long)msTicksDouble;                                    if (msTicksDouble >= TimeSpan.MaxValue.Ticks)                                  {                                      msTicks = TimeSpan.MaxValue.Ticks;                                  }                                    if (msTicksDouble <= TimeSpan.MinValue.Ticks)                                  {                                      msTicks = TimeSpan.MinValue.Ticks;                                  }                                    result = new TimeSpan(msTicks);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  var sTicksDouble = res * TicksPerSecond;                                  var sTicks = (long)sTicksDouble;                                    if (sTicksDouble >= TimeSpan.MaxValue.Ticks)                                  {                                      sTicks = TimeSpan.MaxValue.Ticks;                                  }                                    if (sTicksDouble <= TimeSpan.MinValue.Ticks)                                  {                                      sTicks = TimeSpan.MinValue.Ticks;                                  }                                    result = new TimeSpan(sTicks);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      break;                  case JsonObjectType.String:                      if (returnType == typeof(string))                      {                          result = StringValue;                          return true;                      }                      if (returnType.IsEnum())                      {                          if (returnType.IsFlagsEnum())                          {                              return ParseFlagsEnum(returnType' out result);                          }                            return EnumValues.TryParse(returnType' StringValue' out result);                      }                      if (returnType == typeof(Guid))                      {                          Guid guid;                          if (!Guid.TryParseExact(StringValue' "D"' out guid))                          {                              result = null;                              return false;                          }                            result = guid;                          return true;                      }                      if (returnType == typeof(DateTime))                      {                          DateTime res;                          bool ret;                            switch(Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                                  ret = Methods.ReadMicrosoftStyleDateTime(StringValue' out res);                                  result = res;                                  return ret;                              case DateTimeFormat.ISO8601:                                  ret = Methods.ReadISO8601DateTime(StringValue' out res);                                  result = res;                                  return ret;                              case DateTimeFormat.RFC1123:                                  ret = Methods.ReadRFC1123DateTime(StringValue' out res);                                  result = res;                                  return ret;                              default:                                  result = null;                                  return false;                          }                      }                      if (returnType == typeof(DateTimeOffset))                      {                          DateTime dt;                          DateTimeOffset res;                          bool ret;                            switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                                  ret = Methods.ReadMicrosoftStyleDateTime(StringValue' out dt);                                  res = dt;                                  result = res;                                  return ret;                              case DateTimeFormat.ISO8601:                                  ret = Methods.ReadISO8601DateWithOffset(StringValue' out res);                                  result = res;                                  return ret;                              default:                                  result = null;                                  return false;                          }                      }                      if(returnType == typeof(TimeSpan))                      {                          TimeSpan ts;                          bool ret;                            switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                                  ret = Methods.ReadMicrosoftStyleTimeSpan(StringValue' out ts);                                  result = ts;                                  return ret;                              case DateTimeFormat.ISO8601:                                  ret = Methods.ReadISO8601TimeSpan(StringValue' out ts);                                  result = ts;                                  return ret;                              default:                                  result = null;                                  return false;                          }                      }                      break;                  case JsonObjectType.Object:                      if (returnType == typeof(System.Collections.IEnumerable))                      {                          result = EnumerableObjectWrapper.MakeAsIEnumerable(ObjectMembers);                          return true;                      }                        if (returnType.IsGenericDictionary())                      {                          var args = returnType.GetGenericArguments();                          var keyType = args[0];                          var valType = args[1];                            var stringKeys = keyType == typeof(string);                          var enumKeys = keyType.IsEnum();                            // only strings and enums can be keys                          if (!(stringKeys || enumKeys))                          {                              result = null;                              return false;                          }                            var coerced = new Dictionary<object' object>(ObjectMembers.Count);                          foreach (var kv in ObjectMembers)                          {                              object innerResult = null;                              if (kv.Value != null && !kv.Value.InnerTryConvert(valType' out innerResult))                              {                                  result = null;                                  return false;                              }                                if (stringKeys)                              {                                  coerced[kv.Key] = innerResult;                              }                              else                              {                                  object @enum = Enum.Parse(keyType' kv.Key' ignoreCase: true);                                  coerced[@enum] = innerResult;                              }                          }                            if (stringKeys)                          {                              result = Utils.ProjectStringDictionary(coerced' valType);                          }                          else                          {                              // enum keys                              result = Utils.ProjectEnumDictionary(coerced' keyType' valType);                          }                            return true;                      }                      break;                  case JsonObjectType.Array:                      if (returnType == typeof(System.Collections.IEnumerable))                      {                          result = EnumerableArrayWrapper.MakeAsIEnumerable(ArrayValue);                          return true;                      }                        if (returnType.IsGenericEnumerable())                      {                          var castTo = returnType.GetGenericArguments()[0];                            if (castTo == typeof(object))                          {                              result = EnumerableArrayWrapper.MakeAsIEnumerableOfT(ArrayValue);                              return true;                          }                            bool bail = false;                            var dynamicProjection =                              ArrayValue.Select(                                  val =>                                  {                                      object innerResult;                                      if (!val.InnerTryConvert(castTo' out innerResult))                                      {                                          bail = true;                                          return Activator.CreateInstance(castTo);                                      }                                        return innerResult;                                  }                              );                            result = Utils.DynamicProject(dynamicProjection' castTo);                            if (bail)                          {                              result = null;                              return false;                          }                            return true;                      }                      break;              }
Magic Number,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,The following statement contains a magic number: switch (Type)              {                  case JsonObjectType.False:                      result = false;                      return returnType == typeof(bool);                  case JsonObjectType.True:                      result = true;                      return returnType == typeof(bool);                  case JsonObjectType.FastNumber:                      if (returnType == typeof(double))                      {                          double res;                          var ret = FastNumberToDouble(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(float))                      {                          float res;                          var ret = FastNumberToFloat(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(decimal))                      {                          decimal res;                          var ret = FastNumberToDecimal(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(byte))                      {                          byte res;                          var ret = FastNumberToByte(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(sbyte))                      {                          sbyte res;                          var ret = FastNumberToSByte(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(short))                      {                          short res;                          var ret = FastNumberToShort(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(ushort))                      {                          ushort res;                          var ret = FastNumberToUShort(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(int))                      {                          int res;                          var ret = FastNumberToInt(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(uint))                      {                          uint res;                          var ret = FastNumberToUInt(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(long))                      {                          long res;                          var ret = FastNumberToLong(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(ulong))                      {                          ulong res;                          var ret = FastNumberToULong(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(DateTime))                      {                          long res;                          var ret = FastNumberToLong(out res);                          if (!ret)                          {                              result = null;                              return false;                          }                          switch(Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  result = Methods.UnixEpoch + TimeSpan.FromMilliseconds(res);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  result = Methods.UnixEpoch + TimeSpan.FromSeconds(res);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      if(returnType == typeof(DateTimeOffset))                      {                          long res;                          var ret = FastNumberToLong(out res);                          if (!ret)                          {                              result = null;                              return false;                          }                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  result = Methods.UnixEpochOffset + TimeSpan.FromMilliseconds(res);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  result = Methods.UnixEpochOffset + TimeSpan.FromSeconds(res);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      if(returnType == typeof(TimeSpan))                      {                          const double TicksPerMillisecond = 10000;                          const double TicksPerSecond = 10000000;                            double res;                          var ret = FastNumberToDouble(out res);                          if (!ret)                          {                              result = null;                              return false;                          }                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  var msTicksDouble = res * TicksPerMillisecond;                                  var msTicks = (long)msTicksDouble;                                                                    if (msTicksDouble >= TimeSpan.MaxValue.Ticks)                                  {                                      msTicks = TimeSpan.MaxValue.Ticks;                                  }                                                                    if(msTicksDouble <= TimeSpan.MinValue.Ticks)                                  {                                      msTicks = TimeSpan.MinValue.Ticks;                                  }                                    result = new TimeSpan(msTicks);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  var sTicksDouble = res * TicksPerSecond;                                  var sTicks = (long)sTicksDouble;                                                                    if (sTicksDouble >= TimeSpan.MaxValue.Ticks)                                  {                                      sTicks = TimeSpan.MaxValue.Ticks;                                  }                                                                    if(sTicksDouble <= TimeSpan.MinValue.Ticks)                                  {                                      sTicks = TimeSpan.MinValue.Ticks;                                  }                                    result = new TimeSpan(sTicks);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      break;                  case JsonObjectType.Number:                      if (returnType == typeof(double))                      {                          result = NumberValue;                          return true;                      }                      if (returnType == typeof(float))                      {                          result = (float)NumberValue;                          return true;                      }                      if (returnType == typeof(decimal))                      {                          result = (decimal)NumberValue;                          return true;                      }                      if (returnType == typeof(byte))                      {                          result = (byte)NumberValue;                          return true;                      }                      if (returnType == typeof(sbyte))                      {                          result = (sbyte)NumberValue;                          return true;                      }                      if (returnType == typeof(short))                      {                          result = (short)NumberValue;                          return true;                      }                      if (returnType == typeof(ushort))                      {                          result = (ushort)NumberValue;                          return true;                      }                      if (returnType == typeof(int))                      {                          result = (int)NumberValue;                          return true;                      }                      if (returnType == typeof(uint))                      {                          result = (uint)NumberValue;                          return true;                      }                      if (returnType == typeof(long))                      {                          result = (long)NumberValue;                          return true;                      }                      if (returnType == typeof(ulong))                      {                          result = (ulong)NumberValue;                          return true;                      }                      if (returnType == typeof(DateTime))                      {                          var res = (long)NumberValue;                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  result = Methods.UnixEpoch + TimeSpan.FromMilliseconds(res);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  result = Methods.UnixEpoch + TimeSpan.FromSeconds(res);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      if (returnType == typeof(DateTimeOffset))                      {                          var res = (long)NumberValue;                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  result = Methods.UnixEpochOffset + TimeSpan.FromMilliseconds(res);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  result = Methods.UnixEpochOffset + TimeSpan.FromSeconds(res);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      if (returnType == typeof(TimeSpan))                      {                          const double TicksPerMillisecond = 10000;                          const double TicksPerSecond = 10000000;                            var res = NumberValue;                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  var msTicksDouble = res * TicksPerMillisecond;                                  var msTicks = (long)msTicksDouble;                                    if (msTicksDouble >= TimeSpan.MaxValue.Ticks)                                  {                                      msTicks = TimeSpan.MaxValue.Ticks;                                  }                                    if (msTicksDouble <= TimeSpan.MinValue.Ticks)                                  {                                      msTicks = TimeSpan.MinValue.Ticks;                                  }                                    result = new TimeSpan(msTicks);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  var sTicksDouble = res * TicksPerSecond;                                  var sTicks = (long)sTicksDouble;                                    if (sTicksDouble >= TimeSpan.MaxValue.Ticks)                                  {                                      sTicks = TimeSpan.MaxValue.Ticks;                                  }                                    if (sTicksDouble <= TimeSpan.MinValue.Ticks)                                  {                                      sTicks = TimeSpan.MinValue.Ticks;                                  }                                    result = new TimeSpan(sTicks);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      break;                  case JsonObjectType.String:                      if (returnType == typeof(string))                      {                          result = StringValue;                          return true;                      }                      if (returnType.IsEnum())                      {                          if (returnType.IsFlagsEnum())                          {                              return ParseFlagsEnum(returnType' out result);                          }                            return EnumValues.TryParse(returnType' StringValue' out result);                      }                      if (returnType == typeof(Guid))                      {                          Guid guid;                          if (!Guid.TryParseExact(StringValue' "D"' out guid))                          {                              result = null;                              return false;                          }                            result = guid;                          return true;                      }                      if (returnType == typeof(DateTime))                      {                          DateTime res;                          bool ret;                            switch(Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                                  ret = Methods.ReadMicrosoftStyleDateTime(StringValue' out res);                                  result = res;                                  return ret;                              case DateTimeFormat.ISO8601:                                  ret = Methods.ReadISO8601DateTime(StringValue' out res);                                  result = res;                                  return ret;                              case DateTimeFormat.RFC1123:                                  ret = Methods.ReadRFC1123DateTime(StringValue' out res);                                  result = res;                                  return ret;                              default:                                  result = null;                                  return false;                          }                      }                      if (returnType == typeof(DateTimeOffset))                      {                          DateTime dt;                          DateTimeOffset res;                          bool ret;                            switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                                  ret = Methods.ReadMicrosoftStyleDateTime(StringValue' out dt);                                  res = dt;                                  result = res;                                  return ret;                              case DateTimeFormat.ISO8601:                                  ret = Methods.ReadISO8601DateWithOffset(StringValue' out res);                                  result = res;                                  return ret;                              default:                                  result = null;                                  return false;                          }                      }                      if(returnType == typeof(TimeSpan))                      {                          TimeSpan ts;                          bool ret;                            switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                                  ret = Methods.ReadMicrosoftStyleTimeSpan(StringValue' out ts);                                  result = ts;                                  return ret;                              case DateTimeFormat.ISO8601:                                  ret = Methods.ReadISO8601TimeSpan(StringValue' out ts);                                  result = ts;                                  return ret;                              default:                                  result = null;                                  return false;                          }                      }                      break;                  case JsonObjectType.Object:                      if (returnType == typeof(System.Collections.IEnumerable))                      {                          result = EnumerableObjectWrapper.MakeAsIEnumerable(ObjectMembers);                          return true;                      }                        if (returnType.IsGenericDictionary())                      {                          var args = returnType.GetGenericArguments();                          var keyType = args[0];                          var valType = args[1];                            var stringKeys = keyType == typeof(string);                          var enumKeys = keyType.IsEnum();                            // only strings and enums can be keys                          if (!(stringKeys || enumKeys))                          {                              result = null;                              return false;                          }                            var coerced = new Dictionary<object' object>(ObjectMembers.Count);                          foreach (var kv in ObjectMembers)                          {                              object innerResult = null;                              if (kv.Value != null && !kv.Value.InnerTryConvert(valType' out innerResult))                              {                                  result = null;                                  return false;                              }                                if (stringKeys)                              {                                  coerced[kv.Key] = innerResult;                              }                              else                              {                                  object @enum = Enum.Parse(keyType' kv.Key' ignoreCase: true);                                  coerced[@enum] = innerResult;                              }                          }                            if (stringKeys)                          {                              result = Utils.ProjectStringDictionary(coerced' valType);                          }                          else                          {                              // enum keys                              result = Utils.ProjectEnumDictionary(coerced' keyType' valType);                          }                            return true;                      }                      break;                  case JsonObjectType.Array:                      if (returnType == typeof(System.Collections.IEnumerable))                      {                          result = EnumerableArrayWrapper.MakeAsIEnumerable(ArrayValue);                          return true;                      }                        if (returnType.IsGenericEnumerable())                      {                          var castTo = returnType.GetGenericArguments()[0];                            if (castTo == typeof(object))                          {                              result = EnumerableArrayWrapper.MakeAsIEnumerableOfT(ArrayValue);                              return true;                          }                            bool bail = false;                            var dynamicProjection =                              ArrayValue.Select(                                  val =>                                  {                                      object innerResult;                                      if (!val.InnerTryConvert(castTo' out innerResult))                                      {                                          bail = true;                                          return Activator.CreateInstance(castTo);                                      }                                        return innerResult;                                  }                              );                            result = Utils.DynamicProject(dynamicProjection' castTo);                            if (bail)                          {                              result = null;                              return false;                          }                            return true;                      }                      break;              }
Magic Number,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,The following statement contains a magic number: switch (Type)              {                  case JsonObjectType.False:                      result = false;                      return returnType == typeof(bool);                  case JsonObjectType.True:                      result = true;                      return returnType == typeof(bool);                  case JsonObjectType.FastNumber:                      if (returnType == typeof(double))                      {                          double res;                          var ret = FastNumberToDouble(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(float))                      {                          float res;                          var ret = FastNumberToFloat(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(decimal))                      {                          decimal res;                          var ret = FastNumberToDecimal(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(byte))                      {                          byte res;                          var ret = FastNumberToByte(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(sbyte))                      {                          sbyte res;                          var ret = FastNumberToSByte(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(short))                      {                          short res;                          var ret = FastNumberToShort(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(ushort))                      {                          ushort res;                          var ret = FastNumberToUShort(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(int))                      {                          int res;                          var ret = FastNumberToInt(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(uint))                      {                          uint res;                          var ret = FastNumberToUInt(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(long))                      {                          long res;                          var ret = FastNumberToLong(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(ulong))                      {                          ulong res;                          var ret = FastNumberToULong(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(DateTime))                      {                          long res;                          var ret = FastNumberToLong(out res);                          if (!ret)                          {                              result = null;                              return false;                          }                          switch(Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  result = Methods.UnixEpoch + TimeSpan.FromMilliseconds(res);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  result = Methods.UnixEpoch + TimeSpan.FromSeconds(res);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      if(returnType == typeof(DateTimeOffset))                      {                          long res;                          var ret = FastNumberToLong(out res);                          if (!ret)                          {                              result = null;                              return false;                          }                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  result = Methods.UnixEpochOffset + TimeSpan.FromMilliseconds(res);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  result = Methods.UnixEpochOffset + TimeSpan.FromSeconds(res);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      if(returnType == typeof(TimeSpan))                      {                          const double TicksPerMillisecond = 10000;                          const double TicksPerSecond = 10000000;                            double res;                          var ret = FastNumberToDouble(out res);                          if (!ret)                          {                              result = null;                              return false;                          }                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  var msTicksDouble = res * TicksPerMillisecond;                                  var msTicks = (long)msTicksDouble;                                                                    if (msTicksDouble >= TimeSpan.MaxValue.Ticks)                                  {                                      msTicks = TimeSpan.MaxValue.Ticks;                                  }                                                                    if(msTicksDouble <= TimeSpan.MinValue.Ticks)                                  {                                      msTicks = TimeSpan.MinValue.Ticks;                                  }                                    result = new TimeSpan(msTicks);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  var sTicksDouble = res * TicksPerSecond;                                  var sTicks = (long)sTicksDouble;                                                                    if (sTicksDouble >= TimeSpan.MaxValue.Ticks)                                  {                                      sTicks = TimeSpan.MaxValue.Ticks;                                  }                                                                    if(sTicksDouble <= TimeSpan.MinValue.Ticks)                                  {                                      sTicks = TimeSpan.MinValue.Ticks;                                  }                                    result = new TimeSpan(sTicks);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      break;                  case JsonObjectType.Number:                      if (returnType == typeof(double))                      {                          result = NumberValue;                          return true;                      }                      if (returnType == typeof(float))                      {                          result = (float)NumberValue;                          return true;                      }                      if (returnType == typeof(decimal))                      {                          result = (decimal)NumberValue;                          return true;                      }                      if (returnType == typeof(byte))                      {                          result = (byte)NumberValue;                          return true;                      }                      if (returnType == typeof(sbyte))                      {                          result = (sbyte)NumberValue;                          return true;                      }                      if (returnType == typeof(short))                      {                          result = (short)NumberValue;                          return true;                      }                      if (returnType == typeof(ushort))                      {                          result = (ushort)NumberValue;                          return true;                      }                      if (returnType == typeof(int))                      {                          result = (int)NumberValue;                          return true;                      }                      if (returnType == typeof(uint))                      {                          result = (uint)NumberValue;                          return true;                      }                      if (returnType == typeof(long))                      {                          result = (long)NumberValue;                          return true;                      }                      if (returnType == typeof(ulong))                      {                          result = (ulong)NumberValue;                          return true;                      }                      if (returnType == typeof(DateTime))                      {                          var res = (long)NumberValue;                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  result = Methods.UnixEpoch + TimeSpan.FromMilliseconds(res);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  result = Methods.UnixEpoch + TimeSpan.FromSeconds(res);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      if (returnType == typeof(DateTimeOffset))                      {                          var res = (long)NumberValue;                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  result = Methods.UnixEpochOffset + TimeSpan.FromMilliseconds(res);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  result = Methods.UnixEpochOffset + TimeSpan.FromSeconds(res);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      if (returnType == typeof(TimeSpan))                      {                          const double TicksPerMillisecond = 10000;                          const double TicksPerSecond = 10000000;                            var res = NumberValue;                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  var msTicksDouble = res * TicksPerMillisecond;                                  var msTicks = (long)msTicksDouble;                                    if (msTicksDouble >= TimeSpan.MaxValue.Ticks)                                  {                                      msTicks = TimeSpan.MaxValue.Ticks;                                  }                                    if (msTicksDouble <= TimeSpan.MinValue.Ticks)                                  {                                      msTicks = TimeSpan.MinValue.Ticks;                                  }                                    result = new TimeSpan(msTicks);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  var sTicksDouble = res * TicksPerSecond;                                  var sTicks = (long)sTicksDouble;                                    if (sTicksDouble >= TimeSpan.MaxValue.Ticks)                                  {                                      sTicks = TimeSpan.MaxValue.Ticks;                                  }                                    if (sTicksDouble <= TimeSpan.MinValue.Ticks)                                  {                                      sTicks = TimeSpan.MinValue.Ticks;                                  }                                    result = new TimeSpan(sTicks);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      break;                  case JsonObjectType.String:                      if (returnType == typeof(string))                      {                          result = StringValue;                          return true;                      }                      if (returnType.IsEnum())                      {                          if (returnType.IsFlagsEnum())                          {                              return ParseFlagsEnum(returnType' out result);                          }                            return EnumValues.TryParse(returnType' StringValue' out result);                      }                      if (returnType == typeof(Guid))                      {                          Guid guid;                          if (!Guid.TryParseExact(StringValue' "D"' out guid))                          {                              result = null;                              return false;                          }                            result = guid;                          return true;                      }                      if (returnType == typeof(DateTime))                      {                          DateTime res;                          bool ret;                            switch(Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                                  ret = Methods.ReadMicrosoftStyleDateTime(StringValue' out res);                                  result = res;                                  return ret;                              case DateTimeFormat.ISO8601:                                  ret = Methods.ReadISO8601DateTime(StringValue' out res);                                  result = res;                                  return ret;                              case DateTimeFormat.RFC1123:                                  ret = Methods.ReadRFC1123DateTime(StringValue' out res);                                  result = res;                                  return ret;                              default:                                  result = null;                                  return false;                          }                      }                      if (returnType == typeof(DateTimeOffset))                      {                          DateTime dt;                          DateTimeOffset res;                          bool ret;                            switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                                  ret = Methods.ReadMicrosoftStyleDateTime(StringValue' out dt);                                  res = dt;                                  result = res;                                  return ret;                              case DateTimeFormat.ISO8601:                                  ret = Methods.ReadISO8601DateWithOffset(StringValue' out res);                                  result = res;                                  return ret;                              default:                                  result = null;                                  return false;                          }                      }                      if(returnType == typeof(TimeSpan))                      {                          TimeSpan ts;                          bool ret;                            switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                                  ret = Methods.ReadMicrosoftStyleTimeSpan(StringValue' out ts);                                  result = ts;                                  return ret;                              case DateTimeFormat.ISO8601:                                  ret = Methods.ReadISO8601TimeSpan(StringValue' out ts);                                  result = ts;                                  return ret;                              default:                                  result = null;                                  return false;                          }                      }                      break;                  case JsonObjectType.Object:                      if (returnType == typeof(System.Collections.IEnumerable))                      {                          result = EnumerableObjectWrapper.MakeAsIEnumerable(ObjectMembers);                          return true;                      }                        if (returnType.IsGenericDictionary())                      {                          var args = returnType.GetGenericArguments();                          var keyType = args[0];                          var valType = args[1];                            var stringKeys = keyType == typeof(string);                          var enumKeys = keyType.IsEnum();                            // only strings and enums can be keys                          if (!(stringKeys || enumKeys))                          {                              result = null;                              return false;                          }                            var coerced = new Dictionary<object' object>(ObjectMembers.Count);                          foreach (var kv in ObjectMembers)                          {                              object innerResult = null;                              if (kv.Value != null && !kv.Value.InnerTryConvert(valType' out innerResult))                              {                                  result = null;                                  return false;                              }                                if (stringKeys)                              {                                  coerced[kv.Key] = innerResult;                              }                              else                              {                                  object @enum = Enum.Parse(keyType' kv.Key' ignoreCase: true);                                  coerced[@enum] = innerResult;                              }                          }                            if (stringKeys)                          {                              result = Utils.ProjectStringDictionary(coerced' valType);                          }                          else                          {                              // enum keys                              result = Utils.ProjectEnumDictionary(coerced' keyType' valType);                          }                            return true;                      }                      break;                  case JsonObjectType.Array:                      if (returnType == typeof(System.Collections.IEnumerable))                      {                          result = EnumerableArrayWrapper.MakeAsIEnumerable(ArrayValue);                          return true;                      }                        if (returnType.IsGenericEnumerable())                      {                          var castTo = returnType.GetGenericArguments()[0];                            if (castTo == typeof(object))                          {                              result = EnumerableArrayWrapper.MakeAsIEnumerableOfT(ArrayValue);                              return true;                          }                            bool bail = false;                            var dynamicProjection =                              ArrayValue.Select(                                  val =>                                  {                                      object innerResult;                                      if (!val.InnerTryConvert(castTo' out innerResult))                                      {                                          bail = true;                                          return Activator.CreateInstance(castTo);                                      }                                        return innerResult;                                  }                              );                            result = Utils.DynamicProject(dynamicProjection' castTo);                            if (bail)                          {                              result = null;                              return false;                          }                            return true;                      }                      break;              }
Magic Number,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,The following statement contains a magic number: switch (Type)              {                  case JsonObjectType.False:                      result = false;                      return returnType == typeof(bool);                  case JsonObjectType.True:                      result = true;                      return returnType == typeof(bool);                  case JsonObjectType.FastNumber:                      if (returnType == typeof(double))                      {                          double res;                          var ret = FastNumberToDouble(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(float))                      {                          float res;                          var ret = FastNumberToFloat(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(decimal))                      {                          decimal res;                          var ret = FastNumberToDecimal(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(byte))                      {                          byte res;                          var ret = FastNumberToByte(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(sbyte))                      {                          sbyte res;                          var ret = FastNumberToSByte(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(short))                      {                          short res;                          var ret = FastNumberToShort(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(ushort))                      {                          ushort res;                          var ret = FastNumberToUShort(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(int))                      {                          int res;                          var ret = FastNumberToInt(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(uint))                      {                          uint res;                          var ret = FastNumberToUInt(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(long))                      {                          long res;                          var ret = FastNumberToLong(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(ulong))                      {                          ulong res;                          var ret = FastNumberToULong(out res);                          result = res;                          return ret;                      }                      if (returnType == typeof(DateTime))                      {                          long res;                          var ret = FastNumberToLong(out res);                          if (!ret)                          {                              result = null;                              return false;                          }                          switch(Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  result = Methods.UnixEpoch + TimeSpan.FromMilliseconds(res);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  result = Methods.UnixEpoch + TimeSpan.FromSeconds(res);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      if(returnType == typeof(DateTimeOffset))                      {                          long res;                          var ret = FastNumberToLong(out res);                          if (!ret)                          {                              result = null;                              return false;                          }                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  result = Methods.UnixEpochOffset + TimeSpan.FromMilliseconds(res);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  result = Methods.UnixEpochOffset + TimeSpan.FromSeconds(res);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      if(returnType == typeof(TimeSpan))                      {                          const double TicksPerMillisecond = 10000;                          const double TicksPerSecond = 10000000;                            double res;                          var ret = FastNumberToDouble(out res);                          if (!ret)                          {                              result = null;                              return false;                          }                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  var msTicksDouble = res * TicksPerMillisecond;                                  var msTicks = (long)msTicksDouble;                                                                    if (msTicksDouble >= TimeSpan.MaxValue.Ticks)                                  {                                      msTicks = TimeSpan.MaxValue.Ticks;                                  }                                                                    if(msTicksDouble <= TimeSpan.MinValue.Ticks)                                  {                                      msTicks = TimeSpan.MinValue.Ticks;                                  }                                    result = new TimeSpan(msTicks);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  var sTicksDouble = res * TicksPerSecond;                                  var sTicks = (long)sTicksDouble;                                                                    if (sTicksDouble >= TimeSpan.MaxValue.Ticks)                                  {                                      sTicks = TimeSpan.MaxValue.Ticks;                                  }                                                                    if(sTicksDouble <= TimeSpan.MinValue.Ticks)                                  {                                      sTicks = TimeSpan.MinValue.Ticks;                                  }                                    result = new TimeSpan(sTicks);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      break;                  case JsonObjectType.Number:                      if (returnType == typeof(double))                      {                          result = NumberValue;                          return true;                      }                      if (returnType == typeof(float))                      {                          result = (float)NumberValue;                          return true;                      }                      if (returnType == typeof(decimal))                      {                          result = (decimal)NumberValue;                          return true;                      }                      if (returnType == typeof(byte))                      {                          result = (byte)NumberValue;                          return true;                      }                      if (returnType == typeof(sbyte))                      {                          result = (sbyte)NumberValue;                          return true;                      }                      if (returnType == typeof(short))                      {                          result = (short)NumberValue;                          return true;                      }                      if (returnType == typeof(ushort))                      {                          result = (ushort)NumberValue;                          return true;                      }                      if (returnType == typeof(int))                      {                          result = (int)NumberValue;                          return true;                      }                      if (returnType == typeof(uint))                      {                          result = (uint)NumberValue;                          return true;                      }                      if (returnType == typeof(long))                      {                          result = (long)NumberValue;                          return true;                      }                      if (returnType == typeof(ulong))                      {                          result = (ulong)NumberValue;                          return true;                      }                      if (returnType == typeof(DateTime))                      {                          var res = (long)NumberValue;                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  result = Methods.UnixEpoch + TimeSpan.FromMilliseconds(res);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  result = Methods.UnixEpoch + TimeSpan.FromSeconds(res);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      if (returnType == typeof(DateTimeOffset))                      {                          var res = (long)NumberValue;                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  result = Methods.UnixEpochOffset + TimeSpan.FromMilliseconds(res);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  result = Methods.UnixEpochOffset + TimeSpan.FromSeconds(res);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      if (returnType == typeof(TimeSpan))                      {                          const double TicksPerMillisecond = 10000;                          const double TicksPerSecond = 10000000;                            var res = NumberValue;                          switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MillisecondsSinceUnixEpoch:                                  var msTicksDouble = res * TicksPerMillisecond;                                  var msTicks = (long)msTicksDouble;                                    if (msTicksDouble >= TimeSpan.MaxValue.Ticks)                                  {                                      msTicks = TimeSpan.MaxValue.Ticks;                                  }                                    if (msTicksDouble <= TimeSpan.MinValue.Ticks)                                  {                                      msTicks = TimeSpan.MinValue.Ticks;                                  }                                    result = new TimeSpan(msTicks);                                  return true;                              case DateTimeFormat.SecondsSinceUnixEpoch:                                  var sTicksDouble = res * TicksPerSecond;                                  var sTicks = (long)sTicksDouble;                                    if (sTicksDouble >= TimeSpan.MaxValue.Ticks)                                  {                                      sTicks = TimeSpan.MaxValue.Ticks;                                  }                                    if (sTicksDouble <= TimeSpan.MinValue.Ticks)                                  {                                      sTicks = TimeSpan.MinValue.Ticks;                                  }                                    result = new TimeSpan(sTicks);                                  return true;                              default:                                  result = null;                                  return false;                          }                      }                      break;                  case JsonObjectType.String:                      if (returnType == typeof(string))                      {                          result = StringValue;                          return true;                      }                      if (returnType.IsEnum())                      {                          if (returnType.IsFlagsEnum())                          {                              return ParseFlagsEnum(returnType' out result);                          }                            return EnumValues.TryParse(returnType' StringValue' out result);                      }                      if (returnType == typeof(Guid))                      {                          Guid guid;                          if (!Guid.TryParseExact(StringValue' "D"' out guid))                          {                              result = null;                              return false;                          }                            result = guid;                          return true;                      }                      if (returnType == typeof(DateTime))                      {                          DateTime res;                          bool ret;                            switch(Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                                  ret = Methods.ReadMicrosoftStyleDateTime(StringValue' out res);                                  result = res;                                  return ret;                              case DateTimeFormat.ISO8601:                                  ret = Methods.ReadISO8601DateTime(StringValue' out res);                                  result = res;                                  return ret;                              case DateTimeFormat.RFC1123:                                  ret = Methods.ReadRFC1123DateTime(StringValue' out res);                                  result = res;                                  return ret;                              default:                                  result = null;                                  return false;                          }                      }                      if (returnType == typeof(DateTimeOffset))                      {                          DateTime dt;                          DateTimeOffset res;                          bool ret;                            switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                                  ret = Methods.ReadMicrosoftStyleDateTime(StringValue' out dt);                                  res = dt;                                  result = res;                                  return ret;                              case DateTimeFormat.ISO8601:                                  ret = Methods.ReadISO8601DateWithOffset(StringValue' out res);                                  result = res;                                  return ret;                              default:                                  result = null;                                  return false;                          }                      }                      if(returnType == typeof(TimeSpan))                      {                          TimeSpan ts;                          bool ret;                            switch (Options.UseDateTimeFormat)                          {                              case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                                  ret = Methods.ReadMicrosoftStyleTimeSpan(StringValue' out ts);                                  result = ts;                                  return ret;                              case DateTimeFormat.ISO8601:                                  ret = Methods.ReadISO8601TimeSpan(StringValue' out ts);                                  result = ts;                                  return ret;                              default:                                  result = null;                                  return false;                          }                      }                      break;                  case JsonObjectType.Object:                      if (returnType == typeof(System.Collections.IEnumerable))                      {                          result = EnumerableObjectWrapper.MakeAsIEnumerable(ObjectMembers);                          return true;                      }                        if (returnType.IsGenericDictionary())                      {                          var args = returnType.GetGenericArguments();                          var keyType = args[0];                          var valType = args[1];                            var stringKeys = keyType == typeof(string);                          var enumKeys = keyType.IsEnum();                            // only strings and enums can be keys                          if (!(stringKeys || enumKeys))                          {                              result = null;                              return false;                          }                            var coerced = new Dictionary<object' object>(ObjectMembers.Count);                          foreach (var kv in ObjectMembers)                          {                              object innerResult = null;                              if (kv.Value != null && !kv.Value.InnerTryConvert(valType' out innerResult))                              {                                  result = null;                                  return false;                              }                                if (stringKeys)                              {                                  coerced[kv.Key] = innerResult;                              }                              else                              {                                  object @enum = Enum.Parse(keyType' kv.Key' ignoreCase: true);                                  coerced[@enum] = innerResult;                              }                          }                            if (stringKeys)                          {                              result = Utils.ProjectStringDictionary(coerced' valType);                          }                          else                          {                              // enum keys                              result = Utils.ProjectEnumDictionary(coerced' keyType' valType);                          }                            return true;                      }                      break;                  case JsonObjectType.Array:                      if (returnType == typeof(System.Collections.IEnumerable))                      {                          result = EnumerableArrayWrapper.MakeAsIEnumerable(ArrayValue);                          return true;                      }                        if (returnType.IsGenericEnumerable())                      {                          var castTo = returnType.GetGenericArguments()[0];                            if (castTo == typeof(object))                          {                              result = EnumerableArrayWrapper.MakeAsIEnumerableOfT(ArrayValue);                              return true;                          }                            bool bail = false;                            var dynamicProjection =                              ArrayValue.Select(                                  val =>                                  {                                      object innerResult;                                      if (!val.InnerTryConvert(castTo' out innerResult))                                      {                                          bail = true;                                          return Activator.CreateInstance(castTo);                                      }                                        return innerResult;                                  }                              );                            result = Utils.DynamicProject(dynamicProjection' castTo);                            if (bail)                          {                              result = null;                              return false;                          }                            return true;                      }                      break;              }
Magic Number,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,FastNumberToDouble,The following statement contains a magic number: var divideBy = Math.Pow(10' FastNumberPart2Length);
Magic Number,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,FastNumberToDouble,The following statement contains a magic number: ret *= Math.Pow(10' power);
Magic Number,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,The following statement contains a magic number: const double TicksPerMillisecond = 10000;
Magic Number,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,The following statement contains a magic number: const double TicksPerSecond = 10000000;
Magic Number,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,The following statement contains a magic number: const double TicksPerMillisecond = 10000;
Magic Number,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,The following statement contains a magic number: const double TicksPerSecond = 10000000;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULong,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULong,The following statement contains a magic number: i < 20
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULong,The following statement contains a magic number: var retCanBeMultiplied = (ulong.MaxValue / ret) >= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULong,The following statement contains a magic number: var remainingSpace = (ulong.MaxValue - (ret * 10UL));
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULong,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadLong,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadLong,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: const int maxUIntLength = 10 - 1;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: const int maxULongLength = 20 - 1;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: uintRet *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: ulongRet *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: ulongRet *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: ulongRet2 *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntOrULong,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: str.Length < 9
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: str[0] != '/' || str[1] != 'D' || str[2] != 'a' || str[3] != 't' || str[4] != 'e' || str[5] != '('
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: str[0] != '/' || str[1] != 'D' || str[2] != 'a' || str[3] != 't' || str[4] != 'e' || str[5] != '('
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: str[0] != '/' || str[1] != 'D' || str[2] != 'a' || str[3] != 't' || str[4] != 'e' || str[5] != '('
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: str[0] != '/' || str[1] != 'D' || str[2] != 'a' || str[3] != 't' || str[4] != 'e' || str[5] != '('
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: var ix = 6;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: l *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: ix < str.Length - 1 && i < 20
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: i < 4
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTime,The following statement contains a magic number: remainingLen != 2
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: const long EpochTicks = 621355968000000000L;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: const long MillisecondsToTicks = 10000L;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: str.Length < 9
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: str[0] != '/' || str[1] != 'D' || str[2] != 'a' || str[3] != 't' || str[4] != 'e' || str[5] != '('
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: str[0] != '/' || str[1] != 'D' || str[2] != 'a' || str[3] != 't' || str[4] != 'e' || str[5] != '('
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: str[0] != '/' || str[1] != 'D' || str[2] != 'a' || str[3] != 't' || str[4] != 'e' || str[5] != '('
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: str[0] != '/' || str[1] != 'D' || str[2] != 'a' || str[3] != 't' || str[4] != 'e' || str[5] != '('
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: var ix = 6;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: l *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: ix < str.Length - 1 && i < 20
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: tsHour *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: tsMin *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleDateTimeOffset,The following statement contains a magic number: remainingLen != 2
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleTimeSpan,The following statement contains a magic number: part *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleTimeSpan,The following statement contains a magic number: sizeOfFraction > 7
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadMicrosoftStyleTimeSpan,The following statement contains a magic number: var ms = fracOfSecond * 1000.0;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The following statement contains a magic number: day *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The following statement contains a magic number: year *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The following statement contains a magic number: year *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The following statement contains a magic number: year *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The following statement contains a magic number: hour *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The following statement contains a magic number: min *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The following statement contains a magic number: sec *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 6;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 7;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 2;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 3;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 5;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 4;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 8;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 9;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 11;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: res = 12;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTime,The following statement contains a magic number: str.Length > 33
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTime,The following statement contains a magic number: !_ParseISO8601Time(str' tPos.Value + 2' zPlusOrMinus ?? ix' ref hasSeparators' out time)
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTimeOffset,The following statement contains a magic number: str.Length > 33
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateTimeOffset,The following statement contains a magic number: !_ParseISO8601Time(str' tPos.Value + 2' zPlusOrMinus ?? ix' ref hasSeparators' out time)
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601TimeZoneOffset,The following statement contains a magic number: len < 2
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601TimeZoneOffset,The following statement contains a magic number: hour *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601TimeZoneOffset,The following statement contains a magic number: hour > 24
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601TimeZoneOffset,The following statement contains a magic number: mins *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601TimeZoneOffset,The following statement contains a magic number: mins > 59
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: len < 4
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: year *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: year *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: year *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                      {                            case 8:                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              week *= 10;                              start++;                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              if (week == 0 || week > 53) return false;                                return _ConvertWeekDateToDateTime(year' week' 1' out dt);                            case 10:                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              week *= 10;                              start++;                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              if (week == 0 || week > 53) return false;                              start++;                                c = str[start];                              if (c != '-') return false;                              start++;                                c = str[start];                              if (c < '1' || c > '7') return false;                              day = (c - '0');                                return _ConvertWeekDateToDateTime(year' week' day' out dt);                            default:                              return false;                      }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                      {                            case 8:                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              week *= 10;                              start++;                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              if (week == 0 || week > 53) return false;                                return _ConvertWeekDateToDateTime(year' week' 1' out dt);                            case 10:                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              week *= 10;                              start++;                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              if (week == 0 || week > 53) return false;                              start++;                                c = str[start];                              if (c != '-') return false;                              start++;                                c = str[start];                              if (c < '1' || c > '7') return false;                              day = (c - '0');                                return _ConvertWeekDateToDateTime(year' week' day' out dt);                            default:                              return false;                      }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                      {                            case 8:                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              week *= 10;                              start++;                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              if (week == 0 || week > 53) return false;                                return _ConvertWeekDateToDateTime(year' week' 1' out dt);                            case 10:                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              week *= 10;                              start++;                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              if (week == 0 || week > 53) return false;                              start++;                                c = str[start];                              if (c != '-') return false;                              start++;                                c = str[start];                              if (c < '1' || c > '7') return false;                              day = (c - '0');                                return _ConvertWeekDateToDateTime(year' week' day' out dt);                            default:                              return false;                      }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                      {                            case 8:                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              week *= 10;                              start++;                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              if (week == 0 || week > 53) return false;                                return _ConvertWeekDateToDateTime(year' week' 1' out dt);                            case 10:                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              week *= 10;                              start++;                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              if (week == 0 || week > 53) return false;                              start++;                                c = str[start];                              if (c != '-') return false;                              start++;                                c = str[start];                              if (c < '1' || c > '7') return false;                              day = (c - '0');                                return _ConvertWeekDateToDateTime(year' week' day' out dt);                            default:                              return false;                      }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                      {                            case 8:                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              week *= 10;                              start++;                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              if (week == 0 || week > 53) return false;                                return _ConvertWeekDateToDateTime(year' week' 1' out dt);                            case 10:                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              week *= 10;                              start++;                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              if (week == 0 || week > 53) return false;                              start++;                                c = str[start];                              if (c != '-') return false;                              start++;                                c = str[start];                              if (c < '1' || c > '7') return false;                              day = (c - '0');                                return _ConvertWeekDateToDateTime(year' week' day' out dt);                            default:                              return false;                      }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                      {                            case 8:                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              week *= 10;                              start++;                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              if (week == 0 || week > 53) return false;                                return _ConvertWeekDateToDateTime(year' week' 1' out dt);                            case 10:                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              week *= 10;                              start++;                              c = str[start];                              if (c < '0' || c > '9') return false;                              week += (c - '0');                              if (week == 0 || week > 53) return false;                              start++;                                c = str[start];                              if (c != '-') return false;                              start++;                                c = str[start];                              if (c < '1' || c > '7') return false;                              day = (c - '0');                                return _ConvertWeekDateToDateTime(year' week' day' out dt);                            default:                              return false;                      }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                  {                      case 7:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                            // year is [1'9999] and month is [1'12] for sure' no need to handle errors                          dt =new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                          return true;                        case 8:                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 366) return false;                            if (day == 366)                          {                              var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) return false;                          }                            // year is [1'9999] and day is [1'366]' no need to handle errors                          dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                          return true;                        case 10:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                          start++;                            if (str[start] != '-') return false;                          start++;                            c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 31) return false;                          start++;                            try                          {                              dt= (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                              return true;                          }                          catch (ArgumentOutOfRangeException)                          {                              return false;                          }                        default:                          return false;                  }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                  {                      case 7:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                            // year is [1'9999] and month is [1'12] for sure' no need to handle errors                          dt =new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                          return true;                        case 8:                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 366) return false;                            if (day == 366)                          {                              var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) return false;                          }                            // year is [1'9999] and day is [1'366]' no need to handle errors                          dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                          return true;                        case 10:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                          start++;                            if (str[start] != '-') return false;                          start++;                            c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 31) return false;                          start++;                            try                          {                              dt= (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                              return true;                          }                          catch (ArgumentOutOfRangeException)                          {                              return false;                          }                        default:                          return false;                  }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                  {                      case 7:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                            // year is [1'9999] and month is [1'12] for sure' no need to handle errors                          dt =new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                          return true;                        case 8:                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 366) return false;                            if (day == 366)                          {                              var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) return false;                          }                            // year is [1'9999] and day is [1'366]' no need to handle errors                          dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                          return true;                        case 10:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                          start++;                            if (str[start] != '-') return false;                          start++;                            c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 31) return false;                          start++;                            try                          {                              dt= (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                              return true;                          }                          catch (ArgumentOutOfRangeException)                          {                              return false;                          }                        default:                          return false;                  }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                  {                      case 7:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                            // year is [1'9999] and month is [1'12] for sure' no need to handle errors                          dt =new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                          return true;                        case 8:                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 366) return false;                            if (day == 366)                          {                              var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) return false;                          }                            // year is [1'9999] and day is [1'366]' no need to handle errors                          dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                          return true;                        case 10:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                          start++;                            if (str[start] != '-') return false;                          start++;                            c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 31) return false;                          start++;                            try                          {                              dt= (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                              return true;                          }                          catch (ArgumentOutOfRangeException)                          {                              return false;                          }                        default:                          return false;                  }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                  {                      case 7:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                            // year is [1'9999] and month is [1'12] for sure' no need to handle errors                          dt =new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                          return true;                        case 8:                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 366) return false;                            if (day == 366)                          {                              var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) return false;                          }                            // year is [1'9999] and day is [1'366]' no need to handle errors                          dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                          return true;                        case 10:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                          start++;                            if (str[start] != '-') return false;                          start++;                            c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 31) return false;                          start++;                            try                          {                              dt= (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                              return true;                          }                          catch (ArgumentOutOfRangeException)                          {                              return false;                          }                        default:                          return false;                  }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                  {                      case 7:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                            // year is [1'9999] and month is [1'12] for sure' no need to handle errors                          dt =new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                          return true;                        case 8:                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 366) return false;                            if (day == 366)                          {                              var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) return false;                          }                            // year is [1'9999] and day is [1'366]' no need to handle errors                          dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                          return true;                        case 10:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                          start++;                            if (str[start] != '-') return false;                          start++;                            c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 31) return false;                          start++;                            try                          {                              dt= (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                              return true;                          }                          catch (ArgumentOutOfRangeException)                          {                              return false;                          }                        default:                          return false;                  }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                  {                      case 7:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                            // year is [1'9999] and month is [1'12] for sure' no need to handle errors                          dt =new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                          return true;                        case 8:                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 366) return false;                            if (day == 366)                          {                              var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) return false;                          }                            // year is [1'9999] and day is [1'366]' no need to handle errors                          dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                          return true;                        case 10:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                          start++;                            if (str[start] != '-') return false;                          start++;                            c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 31) return false;                          start++;                            try                          {                              dt= (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                              return true;                          }                          catch (ArgumentOutOfRangeException)                          {                              return false;                          }                        default:                          return false;                  }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                  {                      case 7:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                            // year is [1'9999] and month is [1'12] for sure' no need to handle errors                          dt =new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                          return true;                        case 8:                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 366) return false;                            if (day == 366)                          {                              var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) return false;                          }                            // year is [1'9999] and day is [1'366]' no need to handle errors                          dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                          return true;                        case 10:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                          start++;                            if (str[start] != '-') return false;                          start++;                            c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 31) return false;                          start++;                            try                          {                              dt= (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                              return true;                          }                          catch (ArgumentOutOfRangeException)                          {                              return false;                          }                        default:                          return false;                  }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                  {                      case 7:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                            // year is [1'9999] and month is [1'12] for sure' no need to handle errors                          dt =new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                          return true;                        case 8:                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 366) return false;                            if (day == 366)                          {                              var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) return false;                          }                            // year is [1'9999] and day is [1'366]' no need to handle errors                          dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                          return true;                        case 10:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                          start++;                            if (str[start] != '-') return false;                          start++;                            c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 31) return false;                          start++;                            try                          {                              dt= (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                              return true;                          }                          catch (ArgumentOutOfRangeException)                          {                              return false;                          }                        default:                          return false;                  }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                  {                      case 7:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                            // year is [1'9999] and month is [1'12] for sure' no need to handle errors                          dt =new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                          return true;                        case 8:                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 366) return false;                            if (day == 366)                          {                              var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) return false;                          }                            // year is [1'9999] and day is [1'366]' no need to handle errors                          dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                          return true;                        case 10:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                          start++;                            if (str[start] != '-') return false;                          start++;                            c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 31) return false;                          start++;                            try                          {                              dt= (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                              return true;                          }                          catch (ArgumentOutOfRangeException)                          {                              return false;                          }                        default:                          return false;                  }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                  {                      case 7:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                            // year is [1'9999] and month is [1'12] for sure' no need to handle errors                          dt =new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                          return true;                        case 8:                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 366) return false;                            if (day == 366)                          {                              var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) return false;                          }                            // year is [1'9999] and day is [1'366]' no need to handle errors                          dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                          return true;                        case 10:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                          start++;                            if (str[start] != '-') return false;                          start++;                            c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 31) return false;                          start++;                            try                          {                              dt= (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                              return true;                          }                          catch (ArgumentOutOfRangeException)                          {                              return false;                          }                        default:                          return false;                  }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                  {                      case 7:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                            // year is [1'9999] and month is [1'12] for sure' no need to handle errors                          dt =new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                          return true;                        case 8:                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 366) return false;                            if (day == 366)                          {                              var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) return false;                          }                            // year is [1'9999] and day is [1'366]' no need to handle errors                          dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                          return true;                        case 10:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                          start++;                            if (str[start] != '-') return false;                          start++;                            c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 31) return false;                          start++;                            try                          {                              dt= (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                              return true;                          }                          catch (ArgumentOutOfRangeException)                          {                              return false;                          }                        default:                          return false;                  }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                  {                      case 7:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                            // year is [1'9999] and month is [1'12] for sure' no need to handle errors                          dt =new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                          return true;                        case 8:                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 366) return false;                            if (day == 366)                          {                              var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) return false;                          }                            // year is [1'9999] and day is [1'366]' no need to handle errors                          dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                          return true;                        case 10:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                          start++;                            if (str[start] != '-') return false;                          start++;                            c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 31) return false;                          start++;                            try                          {                              dt= (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                              return true;                          }                          catch (ArgumentOutOfRangeException)                          {                              return false;                          }                        default:                          return false;                  }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                  {                      case 7:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                            // year is [1'9999] and month is [1'12] for sure' no need to handle errors                          dt =new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                          return true;                        case 8:                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 366) return false;                            if (day == 366)                          {                              var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) return false;                          }                            // year is [1'9999] and day is [1'366]' no need to handle errors                          dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                          return true;                        case 10:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                          start++;                            if (str[start] != '-') return false;                          start++;                            c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 31) return false;                          start++;                            try                          {                              dt= (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                              return true;                          }                          catch (ArgumentOutOfRangeException)                          {                              return false;                          }                        default:                          return false;                  }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                  {                      case 7:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                            // year is [1'9999] and month is [1'12] for sure' no need to handle errors                          dt =new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                          return true;                        case 8:                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 366) return false;                            if (day == 366)                          {                              var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) return false;                          }                            // year is [1'9999] and day is [1'366]' no need to handle errors                          dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                          return true;                        case 10:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                          start++;                            if (str[start] != '-') return false;                          start++;                            c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 31) return false;                          start++;                            try                          {                              dt= (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                              return true;                          }                          catch (ArgumentOutOfRangeException)                          {                              return false;                          }                        default:                          return false;                  }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)                  {                      case 7:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                            // year is [1'9999] and month is [1'12] for sure' no need to handle errors                          dt =new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                          return true;                        case 8:                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 366) return false;                            if (day == 366)                          {                              var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) return false;                          }                            // year is [1'9999] and day is [1'366]' no need to handle errors                          dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                          return true;                        case 10:                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          month *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          month += (c - '0');                          if (month == 0 || month > 12) return false;                          start++;                            if (str[start] != '-') return false;                          start++;                            c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          day *= 10;                          start++;                          c = str[start];                          if (c < '0' || c > '9') return false;                          day += (c - '0');                          if (day == 0 || day > 31) return false;                          start++;                            try                          {                              dt= (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                              return true;                          }                          catch (ArgumentOutOfRangeException)                          {                              return false;                          }                        default:                          return false;                  }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)              {                  case 7:                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 366) return false;                      start++;                        if (day == 366)                      {                          var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) return false;                      }                        // year is [1'9999] and day is [1'366]' no need to handle errors                      dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      return true;                    case 8:                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      month *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      if (month == 0 || month > 12) return false;                      start++;                        c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 31) return false;                      start++;                        try                      {                          dt = (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                          return true;                      }                      catch (ArgumentOutOfRangeException)                      {                          return false;                      }                    default:                      return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)              {                  case 7:                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 366) return false;                      start++;                        if (day == 366)                      {                          var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) return false;                      }                        // year is [1'9999] and day is [1'366]' no need to handle errors                      dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      return true;                    case 8:                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      month *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      if (month == 0 || month > 12) return false;                      start++;                        c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 31) return false;                      start++;                        try                      {                          dt = (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                          return true;                      }                      catch (ArgumentOutOfRangeException)                      {                          return false;                      }                    default:                      return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)              {                  case 7:                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 366) return false;                      start++;                        if (day == 366)                      {                          var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) return false;                      }                        // year is [1'9999] and day is [1'366]' no need to handle errors                      dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      return true;                    case 8:                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      month *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      if (month == 0 || month > 12) return false;                      start++;                        c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 31) return false;                      start++;                        try                      {                          dt = (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                          return true;                      }                      catch (ArgumentOutOfRangeException)                      {                          return false;                      }                    default:                      return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)              {                  case 7:                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 366) return false;                      start++;                        if (day == 366)                      {                          var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) return false;                      }                        // year is [1'9999] and day is [1'366]' no need to handle errors                      dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      return true;                    case 8:                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      month *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      if (month == 0 || month > 12) return false;                      start++;                        c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 31) return false;                      start++;                        try                      {                          dt = (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                          return true;                      }                      catch (ArgumentOutOfRangeException)                      {                          return false;                      }                    default:                      return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)              {                  case 7:                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 366) return false;                      start++;                        if (day == 366)                      {                          var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) return false;                      }                        // year is [1'9999] and day is [1'366]' no need to handle errors                      dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      return true;                    case 8:                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      month *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      if (month == 0 || month > 12) return false;                      start++;                        c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 31) return false;                      start++;                        try                      {                          dt = (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                          return true;                      }                      catch (ArgumentOutOfRangeException)                      {                          return false;                      }                    default:                      return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)              {                  case 7:                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 366) return false;                      start++;                        if (day == 366)                      {                          var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) return false;                      }                        // year is [1'9999] and day is [1'366]' no need to handle errors                      dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      return true;                    case 8:                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      month *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      if (month == 0 || month > 12) return false;                      start++;                        c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 31) return false;                      start++;                        try                      {                          dt = (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                          return true;                      }                      catch (ArgumentOutOfRangeException)                      {                          return false;                      }                    default:                      return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)              {                  case 7:                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 366) return false;                      start++;                        if (day == 366)                      {                          var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) return false;                      }                        // year is [1'9999] and day is [1'366]' no need to handle errors                      dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      return true;                    case 8:                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      month *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      if (month == 0 || month > 12) return false;                      start++;                        c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 31) return false;                      start++;                        try                      {                          dt = (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                          return true;                      }                      catch (ArgumentOutOfRangeException)                      {                          return false;                      }                    default:                      return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)              {                  case 7:                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 366) return false;                      start++;                        if (day == 366)                      {                          var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) return false;                      }                        // year is [1'9999] and day is [1'366]' no need to handle errors                      dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      return true;                    case 8:                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      month *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      if (month == 0 || month > 12) return false;                      start++;                        c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 31) return false;                      start++;                        try                      {                          dt = (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                          return true;                      }                      catch (ArgumentOutOfRangeException)                      {                          return false;                      }                    default:                      return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)              {                  case 7:                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 366) return false;                      start++;                        if (day == 366)                      {                          var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) return false;                      }                        // year is [1'9999] and day is [1'366]' no need to handle errors                      dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      return true;                    case 8:                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      month *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      if (month == 0 || month > 12) return false;                      start++;                        c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 31) return false;                      start++;                        try                      {                          dt = (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                          return true;                      }                      catch (ArgumentOutOfRangeException)                      {                          return false;                      }                    default:                      return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)              {                  case 7:                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 366) return false;                      start++;                        if (day == 366)                      {                          var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) return false;                      }                        // year is [1'9999] and day is [1'366]' no need to handle errors                      dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      return true;                    case 8:                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      month *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      if (month == 0 || month > 12) return false;                      start++;                        c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 31) return false;                      start++;                        try                      {                          dt = (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                          return true;                      }                      catch (ArgumentOutOfRangeException)                      {                          return false;                      }                    default:                      return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)              {                  case 7:                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 366) return false;                      start++;                        if (day == 366)                      {                          var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) return false;                      }                        // year is [1'9999] and day is [1'366]' no need to handle errors                      dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      return true;                    case 8:                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      month *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      if (month == 0 || month > 12) return false;                      start++;                        c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 31) return false;                      start++;                        try                      {                          dt = (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                          return true;                      }                      catch (ArgumentOutOfRangeException)                      {                          return false;                      }                    default:                      return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)              {                  case 7:                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 366) return false;                      start++;                        if (day == 366)                      {                          var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) return false;                      }                        // year is [1'9999] and day is [1'366]' no need to handle errors                      dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      return true;                    case 8:                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      month *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      if (month == 0 || month > 12) return false;                      start++;                        c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 31) return false;                      start++;                        try                      {                          dt = (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                          return true;                      }                      catch (ArgumentOutOfRangeException)                      {                          return false;                      }                    default:                      return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The following statement contains a magic number: switch (len)              {                  case 7:                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 366) return false;                      start++;                        if (day == 366)                      {                          var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) return false;                      }                        // year is [1'9999] and day is [1'366]' no need to handle errors                      dt = (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      return true;                    case 8:                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      month *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      month += (c - '0');                      if (month == 0 || month > 12) return false;                      start++;                        c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      day *= 10;                      start++;                      c = str[start];                      if (c < '0' || c > '9') return false;                      day += (c - '0');                      if (day == 0 || day > 31) return false;                      start++;                        try                      {                          dt = (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                          return true;                      }                      catch (ArgumentOutOfRangeException)                      {                          return false;                      }                    default:                      return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: var ret = new DateTime(year' 1' 4' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: ret += TimeSpan.FromDays(7 * (week - 1));
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek)              {                  case DayOfWeek.Sunday: currentDay = 7; break;                  case DayOfWeek.Monday: currentDay = 1; break;                  case DayOfWeek.Tuesday: currentDay = 2; break;                  case DayOfWeek.Wednesday: currentDay = 3; break;                  case DayOfWeek.Thursday: currentDay = 4; break;                  case DayOfWeek.Friday: currentDay = 5; break;                  case DayOfWeek.Saturday: currentDay = 6; break;                  default: return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek)              {                  case DayOfWeek.Sunday: currentDay = 7; break;                  case DayOfWeek.Monday: currentDay = 1; break;                  case DayOfWeek.Tuesday: currentDay = 2; break;                  case DayOfWeek.Wednesday: currentDay = 3; break;                  case DayOfWeek.Thursday: currentDay = 4; break;                  case DayOfWeek.Friday: currentDay = 5; break;                  case DayOfWeek.Saturday: currentDay = 6; break;                  default: return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek)              {                  case DayOfWeek.Sunday: currentDay = 7; break;                  case DayOfWeek.Monday: currentDay = 1; break;                  case DayOfWeek.Tuesday: currentDay = 2; break;                  case DayOfWeek.Wednesday: currentDay = 3; break;                  case DayOfWeek.Thursday: currentDay = 4; break;                  case DayOfWeek.Friday: currentDay = 5; break;                  case DayOfWeek.Saturday: currentDay = 6; break;                  default: return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek)              {                  case DayOfWeek.Sunday: currentDay = 7; break;                  case DayOfWeek.Monday: currentDay = 1; break;                  case DayOfWeek.Tuesday: currentDay = 2; break;                  case DayOfWeek.Wednesday: currentDay = 3; break;                  case DayOfWeek.Thursday: currentDay = 4; break;                  case DayOfWeek.Friday: currentDay = 5; break;                  case DayOfWeek.Saturday: currentDay = 6; break;                  default: return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek)              {                  case DayOfWeek.Sunday: currentDay = 7; break;                  case DayOfWeek.Monday: currentDay = 1; break;                  case DayOfWeek.Tuesday: currentDay = 2; break;                  case DayOfWeek.Wednesday: currentDay = 3; break;                  case DayOfWeek.Thursday: currentDay = 4; break;                  case DayOfWeek.Friday: currentDay = 5; break;                  case DayOfWeek.Saturday: currentDay = 6; break;                  default: return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek)              {                  case DayOfWeek.Sunday: currentDay = 7; break;                  case DayOfWeek.Monday: currentDay = 1; break;                  case DayOfWeek.Tuesday: currentDay = 2; break;                  case DayOfWeek.Wednesday: currentDay = 3; break;                  case DayOfWeek.Thursday: currentDay = 4; break;                  case DayOfWeek.Friday: currentDay = 5; break;                  case DayOfWeek.Saturday: currentDay = 6; break;                  default: return false;              }
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: const long HoursToTicks   = 36000000000;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: const long MinutesToTicks = 600000000;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: const long SecondsToTicks = 10000000;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: len < 2
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: hour *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: hour > 24
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: frac *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: fracLength < 9
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: hoursAsTicks += frac * 36 * Utils.Pow10(9 - fracLength);
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: hoursAsTicks += frac * 36 * Utils.Pow10(9 - fracLength);
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: len < 4
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: min *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: min > 59
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: frac *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: fracLength < 8
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: minsAsMilliseconds += frac * 6 * Utils.Pow10(8 - fracLength);
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: minsAsMilliseconds += frac * 6 * Utils.Pow10(8 - fracLength);
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: secs *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: frac *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: fracLength < 7
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The following statement contains a magic number: secsAsMilliseconds += frac * Utils.Pow10(7 - fracLength);
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateWithOffset,The following statement contains a magic number: str.Length > 33
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601DateWithOffset,The following statement contains a magic number: !_ParseISO8601Time(str' tPos.Value + 2' zPlusOrMinus ?? ix' ref hasSeparators' out time)
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601TimeSpan,The following statement contains a magic number: const ulong TicksPerDay = 864000000000;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601TimeSpan,The following statement contains a magic number: const ulong TicksPerWeek = TicksPerDay * 7;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601TimeSpan,The following statement contains a magic number: const ulong TicksPerMonth = TicksPerDay * 30;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601TimeSpan,The following statement contains a magic number: const ulong TicksPerYear = TicksPerDay * 365;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601TimeSpan,The following statement contains a magic number: var yearsFromMonths = ((ulong)month) / 12;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadISO8601TimeSpan,The following statement contains a magic number: var monthsAfterYears = ((ulong)month) % 12;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: const ulong TicksPerHour = 36000000000;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: const ulong TicksPerMinute = 600000000;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: const ulong TicksPerSecond = 10000000;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks(9' fraction * 36' fracLen);
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks(9' fraction * 36' fracLen);
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks(8' fraction * 6' fracLen);
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks(8' fraction * 6' fracLen);
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks(7' fraction' fracLen);
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadPart,The following statement contains a magic number: part *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ISO8601TimeSpan_ReadPart,The following statement contains a magic number: part *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar *= 16;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar *= 16;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar *= 16;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadHexQuadToBuilderThunkReader,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULongThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULongThunkReader,The following statement contains a magic number: i < 20
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULongThunkReader,The following statement contains a magic number: var retCanBeMultiplied = (ulong.MaxValue / ret) >= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULongThunkReader,The following statement contains a magic number: var remainingSpace = (ulong.MaxValue - (ret * 10UL));
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadULongThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadUIntThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadLongThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadLongThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadSecondsTimeSpan,The following statement contains a magic number: const double TicksPerSecond = 10000000;
Magic Number,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadMillisecondsTimeSpan,The following statement contains a magic number: const double TicksPerMillisecond = 10000;
Magic Number,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadMicrosoftDateTime,The following statement contains a magic number: Emit.LoadConstant(10000L);
Magic Number,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadMicrosoftDateTime,The following statement contains a magic number: Emit.LoadConstant(621355968000000000L);
Magic Number,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadMillisecondsDateTime,The following statement contains a magic number: Emit.LoadConstant(10000L);
Magic Number,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadMillisecondsDateTime,The following statement contains a magic number: Emit.LoadConstant(621355968000000000L);
Magic Number,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadSecondsDateTime,The following statement contains a magic number: Emit.LoadConstant(10000000L);
Magic Number,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadSecondsDateTime,The following statement contains a magic number: Emit.LoadConstant(621355968000000000L);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,GrowDynamicBuffer,The following statement contains a magic number: var newLen = dynBuffer.Length * 2;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: return (byte)(a * 16 + b);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped = (c - '0') << 12;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (c - '0') << 8;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (c - '0') << 4;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following statement contains a magic number: ret += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad,The following statement contains a magic number: unescaped += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpan,The following statement contains a magic number: part *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpan,The following statement contains a magic number: sizeOfFraction > 7
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpan,The following statement contains a magic number: var ms = fracOfSecond * 1000.0;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The following statement contains a magic number: day *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The following statement contains a magic number: year *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The following statement contains a magic number: year *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The following statement contains a magic number: year *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The following statement contains a magic number: hour *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The following statement contains a magic number: min *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123Date,The following statement contains a magic number: sec *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 6;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 7;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 2;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 3;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 5;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 4;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 8;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 9;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 11;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123Month,The following statement contains a magic number: return 12;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftDateTimeOffset,The following statement contains a magic number: const long EpochTicks = 621355968000000000L;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftDateTimeOffset,The following statement contains a magic number: const long MillisecondsToTicks = 10000L;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftDateTimeOffset,The following statement contains a magic number: hour *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftDateTimeOffset,The following statement contains a magic number: min *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601Date,The following statement contains a magic number: var time = ParseISO8601Time(reader' buffer' tPos.Value + 2' zPlusOrMinus ?? ix);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffset,The following statement contains a magic number: var time = ParseISO8601Time(reader' buffer' tPos.Value + 2' zPlusOrMinus ?? ix);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: len < 4
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: year *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: year *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: year *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                     {                          case 8:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' reader' false);                              return ConvertWeekDateToDateTime(year' week' 1);                          case 10:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' reader' false);                             start++;                              c = buffer[start];                             if (c != '-') throw new DeserializationException("Expected -"' reader' false);                             start++;                              c = buffer[start];                             if (c < '1' || c > '7') throw new DeserializationException("Expected day to be a digit between 1 and 7"' reader' false);                             day = (c - '0');                              return ConvertWeekDateToDateTime(year' week' day);                          default:                             throw new DeserializationException("Unexpected date string length"' reader' false);                     }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                     {                          case 8:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' reader' false);                              return ConvertWeekDateToDateTime(year' week' 1);                          case 10:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' reader' false);                             start++;                              c = buffer[start];                             if (c != '-') throw new DeserializationException("Expected -"' reader' false);                             start++;                              c = buffer[start];                             if (c < '1' || c > '7') throw new DeserializationException("Expected day to be a digit between 1 and 7"' reader' false);                             day = (c - '0');                              return ConvertWeekDateToDateTime(year' week' day);                          default:                             throw new DeserializationException("Unexpected date string length"' reader' false);                     }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                     {                          case 8:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' reader' false);                              return ConvertWeekDateToDateTime(year' week' 1);                          case 10:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' reader' false);                             start++;                              c = buffer[start];                             if (c != '-') throw new DeserializationException("Expected -"' reader' false);                             start++;                              c = buffer[start];                             if (c < '1' || c > '7') throw new DeserializationException("Expected day to be a digit between 1 and 7"' reader' false);                             day = (c - '0');                              return ConvertWeekDateToDateTime(year' week' day);                          default:                             throw new DeserializationException("Unexpected date string length"' reader' false);                     }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                     {                          case 8:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' reader' false);                              return ConvertWeekDateToDateTime(year' week' 1);                          case 10:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' reader' false);                             start++;                              c = buffer[start];                             if (c != '-') throw new DeserializationException("Expected -"' reader' false);                             start++;                              c = buffer[start];                             if (c < '1' || c > '7') throw new DeserializationException("Expected day to be a digit between 1 and 7"' reader' false);                             day = (c - '0');                              return ConvertWeekDateToDateTime(year' week' day);                          default:                             throw new DeserializationException("Unexpected date string length"' reader' false);                     }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                     {                          case 8:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' reader' false);                              return ConvertWeekDateToDateTime(year' week' 1);                          case 10:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' reader' false);                             start++;                              c = buffer[start];                             if (c != '-') throw new DeserializationException("Expected -"' reader' false);                             start++;                              c = buffer[start];                             if (c < '1' || c > '7') throw new DeserializationException("Expected day to be a digit between 1 and 7"' reader' false);                             day = (c - '0');                              return ConvertWeekDateToDateTime(year' week' day);                          default:                             throw new DeserializationException("Unexpected date string length"' reader' false);                     }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                     {                          case 8:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' reader' false);                              return ConvertWeekDateToDateTime(year' week' 1);                          case 10:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' reader' false);                             start++;                              c = buffer[start];                             if (c != '-') throw new DeserializationException("Expected -"' reader' false);                             start++;                              c = buffer[start];                             if (c < '1' || c > '7') throw new DeserializationException("Expected day to be a digit between 1 and 7"' reader' false);                             day = (c - '0');                              return ConvertWeekDateToDateTime(year' week' day);                          default:                             throw new DeserializationException("Unexpected date string length"' reader' false);                     }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                         start++;                            if (buffer[start] != '-') throw new DeserializationException("Expected -"' reader' false);                         start++;                          c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                              throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                         }                      default:                          throw new DeserializationException("Unexpected date string length"' reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                         start++;                            if (buffer[start] != '-') throw new DeserializationException("Expected -"' reader' false);                         start++;                          c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                              throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                         }                      default:                          throw new DeserializationException("Unexpected date string length"' reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                         start++;                            if (buffer[start] != '-') throw new DeserializationException("Expected -"' reader' false);                         start++;                          c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                              throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                         }                      default:                          throw new DeserializationException("Unexpected date string length"' reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                         start++;                            if (buffer[start] != '-') throw new DeserializationException("Expected -"' reader' false);                         start++;                          c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                              throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                         }                      default:                          throw new DeserializationException("Unexpected date string length"' reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                         start++;                            if (buffer[start] != '-') throw new DeserializationException("Expected -"' reader' false);                         start++;                          c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                              throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                         }                      default:                          throw new DeserializationException("Unexpected date string length"' reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                         start++;                            if (buffer[start] != '-') throw new DeserializationException("Expected -"' reader' false);                         start++;                          c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                              throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                         }                      default:                          throw new DeserializationException("Unexpected date string length"' reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                         start++;                            if (buffer[start] != '-') throw new DeserializationException("Expected -"' reader' false);                         start++;                          c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                              throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                         }                      default:                          throw new DeserializationException("Unexpected date string length"' reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                         start++;                            if (buffer[start] != '-') throw new DeserializationException("Expected -"' reader' false);                         start++;                          c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                              throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                         }                      default:                          throw new DeserializationException("Unexpected date string length"' reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                         start++;                            if (buffer[start] != '-') throw new DeserializationException("Expected -"' reader' false);                         start++;                          c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                              throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                         }                      default:                          throw new DeserializationException("Unexpected date string length"' reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                         start++;                            if (buffer[start] != '-') throw new DeserializationException("Expected -"' reader' false);                         start++;                          c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                              throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                         }                      default:                          throw new DeserializationException("Unexpected date string length"' reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                         start++;                            if (buffer[start] != '-') throw new DeserializationException("Expected -"' reader' false);                         start++;                          c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                              throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                         }                      default:                          throw new DeserializationException("Unexpected date string length"' reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                         start++;                            if (buffer[start] != '-') throw new DeserializationException("Expected -"' reader' false);                         start++;                          c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                              throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                         }                      default:                          throw new DeserializationException("Unexpected date string length"' reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                         start++;                            if (buffer[start] != '-') throw new DeserializationException("Expected -"' reader' false);                         start++;                          c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                              throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                         }                      default:                          throw new DeserializationException("Unexpected date string length"' reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                         start++;                            if (buffer[start] != '-') throw new DeserializationException("Expected -"' reader' false);                         start++;                          c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                              throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                         }                      default:                          throw new DeserializationException("Unexpected date string length"' reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                         start++;                            if (buffer[start] != '-') throw new DeserializationException("Expected -"' reader' false);                         start++;                          c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                              throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                         }                      default:                          throw new DeserializationException("Unexpected date string length"' reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                                if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         month += (c - '0');                          if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                         start++;                            if (buffer[start] != '-') throw new DeserializationException("Expected -"' reader' false);                         start++;                          c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                          if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                         day += (c - '0');                          if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                              throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                         }                      default:                          throw new DeserializationException("Unexpected date string length"' reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                      if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                     start++;                      c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                          throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                     }                  default:                      throw new DeserializationException("Unexpected date string length"' reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                      if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                     start++;                      c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                          throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                     }                  default:                      throw new DeserializationException("Unexpected date string length"' reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                      if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                     start++;                      c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                          throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                     }                  default:                      throw new DeserializationException("Unexpected date string length"' reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                      if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                     start++;                      c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                          throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                     }                  default:                      throw new DeserializationException("Unexpected date string length"' reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                      if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                     start++;                      c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                          throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                     }                  default:                      throw new DeserializationException("Unexpected date string length"' reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                      if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                     start++;                      c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                          throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                     }                  default:                      throw new DeserializationException("Unexpected date string length"' reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                      if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                     start++;                      c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                          throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                     }                  default:                      throw new DeserializationException("Unexpected date string length"' reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                      if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                     start++;                      c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                          throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                     }                  default:                      throw new DeserializationException("Unexpected date string length"' reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                      if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                     start++;                      c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                          throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                     }                  default:                      throw new DeserializationException("Unexpected date string length"' reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                      if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                     start++;                      c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                          throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                     }                  default:                      throw new DeserializationException("Unexpected date string length"' reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                      if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                     start++;                      c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                          throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                     }                  default:                      throw new DeserializationException("Unexpected date string length"' reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                      if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                     start++;                      c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                          throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                     }                  default:                      throw new DeserializationException("Unexpected date string length"' reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                            if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     month += (c - '0');                      if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' reader' false);                     start++;                      c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                      if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' reader' false);                     day += (c - '0');                      if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                          throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' reader' e' false);                     }                  default:                      throw new DeserializationException("Unexpected date string length"' reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: const long HoursToTicks   = 36000000000;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: const long MinutesToTicks = 600000000;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: const long SecondsToTicks = 10000000;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: len < 2
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: hour *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: hour > 24
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: frac *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: fracLength < 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: hoursAsTicks += frac * 36 * Utils.Pow10(9 - fracLength);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: hoursAsTicks += frac * 36 * Utils.Pow10(9 - fracLength);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: len < 4
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: min *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: min > 59
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: frac *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: fracLength < 8
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: minsAsTicks += frac * 6 * Utils.Pow10(8 - fracLength);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: minsAsTicks += frac * 6 * Utils.Pow10(8 - fracLength);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: secs *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: frac *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: fracLength < 7
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The following statement contains a magic number: secsAsTicks += frac * Utils.Pow10(7 - fracLength);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,The following statement contains a magic number: len < 2
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,The following statement contains a magic number: hour *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,The following statement contains a magic number: hour > 24
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,The following statement contains a magic number: stop - start + 1 < 2
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,The following statement contains a magic number: mins *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffset,The following statement contains a magic number: mins > 59
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: var ret = new DateTime(year' 1' 4' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: ret += TimeSpan.FromDays(7 * (week - 1));
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek)             {                 case DayOfWeek.Sunday: currentDay = 7; break;                 case DayOfWeek.Monday: currentDay = 1; break;                 case DayOfWeek.Tuesday: currentDay = 2; break;                 case DayOfWeek.Wednesday: currentDay = 3; break;                 case DayOfWeek.Thursday: currentDay = 4; break;                 case DayOfWeek.Friday: currentDay = 5; break;                 case DayOfWeek.Saturday: currentDay = 6; break;                 default: throw new Exception("Unexpected DayOfWeek");             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek)             {                 case DayOfWeek.Sunday: currentDay = 7; break;                 case DayOfWeek.Monday: currentDay = 1; break;                 case DayOfWeek.Tuesday: currentDay = 2; break;                 case DayOfWeek.Wednesday: currentDay = 3; break;                 case DayOfWeek.Thursday: currentDay = 4; break;                 case DayOfWeek.Friday: currentDay = 5; break;                 case DayOfWeek.Saturday: currentDay = 6; break;                 default: throw new Exception("Unexpected DayOfWeek");             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek)             {                 case DayOfWeek.Sunday: currentDay = 7; break;                 case DayOfWeek.Monday: currentDay = 1; break;                 case DayOfWeek.Tuesday: currentDay = 2; break;                 case DayOfWeek.Wednesday: currentDay = 3; break;                 case DayOfWeek.Thursday: currentDay = 4; break;                 case DayOfWeek.Friday: currentDay = 5; break;                 case DayOfWeek.Saturday: currentDay = 6; break;                 default: throw new Exception("Unexpected DayOfWeek");             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek)             {                 case DayOfWeek.Sunday: currentDay = 7; break;                 case DayOfWeek.Monday: currentDay = 1; break;                 case DayOfWeek.Tuesday: currentDay = 2; break;                 case DayOfWeek.Wednesday: currentDay = 3; break;                 case DayOfWeek.Thursday: currentDay = 4; break;                 case DayOfWeek.Friday: currentDay = 5; break;                 case DayOfWeek.Saturday: currentDay = 6; break;                 default: throw new Exception("Unexpected DayOfWeek");             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek)             {                 case DayOfWeek.Sunday: currentDay = 7; break;                 case DayOfWeek.Monday: currentDay = 1; break;                 case DayOfWeek.Tuesday: currentDay = 2; break;                 case DayOfWeek.Wednesday: currentDay = 3; break;                 case DayOfWeek.Thursday: currentDay = 4; break;                 case DayOfWeek.Friday: currentDay = 5; break;                 case DayOfWeek.Saturday: currentDay = 6; break;                 default: throw new Exception("Unexpected DayOfWeek");             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ConvertWeekDateToDateTime,The following statement contains a magic number: switch (ret.DayOfWeek)             {                 case DayOfWeek.Sunday: currentDay = 7; break;                 case DayOfWeek.Monday: currentDay = 1; break;                 case DayOfWeek.Tuesday: currentDay = 2; break;                 case DayOfWeek.Wednesday: currentDay = 3; break;                 case DayOfWeek.Thursday: currentDay = 4; break;                 case DayOfWeek.Friday: currentDay = 5; break;                 case DayOfWeek.Saturday: currentDay = 6; break;                 default: throw new Exception("Unexpected DayOfWeek");             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpan,The following statement contains a magic number: const ulong TicksPerDay = 864000000000;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpan,The following statement contains a magic number: const ulong TicksPerWeek = TicksPerDay * 7;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpan,The following statement contains a magic number: const ulong TicksPerMonth = TicksPerDay * 30;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpan,The following statement contains a magic number: const ulong TicksPerYear = TicksPerDay * 365;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpan,The following statement contains a magic number: var yearsFromMonths = ((ulong)month) / 12;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpan,The following statement contains a magic number: var monthsAfterYears = ((ulong)month) % 12;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: const ulong TicksPerHour = 36000000000;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: const ulong TicksPerMinute = 600000000;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: const ulong TicksPerSecond = 10000000;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks(9' fraction * 36' fracLen);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks(9' fraction * 36' fracLen);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks(8' fraction * 6' fracLen);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks(8' fraction * 6' fracLen);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePart,The following statement contains a magic number: ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks(7' fraction' fracLen);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadPart,The following statement contains a magic number: part *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadPart,The following statement contains a magic number: part *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: temp *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: temp > 23
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: temp *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: temp *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffset,The following statement contains a magic number: temp > 59
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64,The following statement contains a magic number: negative && ret == 9223372036854775808UL
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDouble,The following statement contains a magic number: strLen >= 2 && asStr[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDouble,The following statement contains a magic number: var secondChar = asStr[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDouble,The following statement contains a magic number: strLen >= 3 && asStr[0] == '-' && asStr[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArray,The following statement contains a magic number: idx >= 2 && buffer[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArray,The following statement contains a magic number: var secondChar = buffer[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArray,The following statement contains a magic number: idx >= 3 && buffer[0] == '-' && buffer[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,The following statement contains a magic number: idx >= 2 && buffer[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,The following statement contains a magic number: var secondChar = buffer[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,The following statement contains a magic number: idx >= 3 && buffer[0] == '-' && buffer[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,The following statement contains a magic number: var maxChars =  5 +                       (hasIntegerComponent ? 1 : 0) +                       (includesDecimalPoint ? 1 : 0) +                       (lastCharIs5 ? 1 : 0);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFast,The following statement contains a magic number: n = n * 10 + buffer[idx] - '0';
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingle,The following statement contains a magic number: strLen >= 2 && asStr[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingle,The following statement contains a magic number: var secondChar = asStr[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingle,The following statement contains a magic number: strLen >= 3 && asStr[0] == '-' && asStr[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArray,The following statement contains a magic number: idx >= 2 && buffer[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArray,The following statement contains a magic number: var secondChar = buffer[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArray,The following statement contains a magic number: idx >= 3 && buffer[0] == '-' && buffer[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,The following statement contains a magic number: idx >= 2 && buffer[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,The following statement contains a magic number: var secondChar = buffer[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,The following statement contains a magic number: idx >= 3 && buffer[0] == '-' && buffer[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,The following statement contains a magic number: var maxChars =                       6 +                       (hasIntegerComponent ? 1 : 0) +                       (includesDecimalPoint ? 1 : 0);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFast,The following statement contains a magic number: n = n * 10 + buffer[idx] - '0';
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimal,The following statement contains a magic number: strLen >= 2 && asStr[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimal,The following statement contains a magic number: var secondChar = asStr[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimal,The following statement contains a magic number: strLen >= 3 && asStr[0] == '-' && asStr[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArray,The following statement contains a magic number: idx >= 2 && buffer[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArray,The following statement contains a magic number: var secondChar = buffer[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArray,The following statement contains a magic number: idx >= 3 && buffer[0] == '-' && buffer[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: idx >= 2 && buffer[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: var secondChar = buffer[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: idx >= 3 && buffer[0] == '-' && buffer[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: var maxChars = decimalPointIdx < 0 ? 18 : 19;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: var maxChars = decimalPointIdx < 0 ? 18 : 19;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: n1 = n1 * 10 + buffer[idx] - '0';
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFast,The following statement contains a magic number: idx < endIdx && n1 < 100000000
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt8ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt8ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt16ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt16ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt32ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadInt64ThunkReader,The following statement contains a magic number: negative && ret == 9223372036854775808UL
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadUInt64ThunkReader,The following statement contains a magic number: ret *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,The following statement contains a magic number: idx >= 2 && buffer[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,The following statement contains a magic number: var secondChar = buffer[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,The following statement contains a magic number: idx >= 3 && buffer[0] == '-' && buffer[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,The following statement contains a magic number: var maxChars = 5 +                     (hasIntegerComponent ? 1 : 0) +                     (includesDecimalPoint ? 1 : 0) +                     (lastCharIs5 ? 1 : 0);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleFastThunkReader,The following statement contains a magic number: n = n * 10 + buffer[idx] - '0';
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArrayThunkReader,The following statement contains a magic number: idx >= 2 && buffer[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArrayThunkReader,The following statement contains a magic number: var secondChar = buffer[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleCharArrayThunkReader,The following statement contains a magic number: idx >= 3 && buffer[0] == '-' && buffer[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleThunkReader,The following statement contains a magic number: strLen >= 2 && asStr[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleThunkReader,The following statement contains a magic number: var secondChar = asStr[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDoubleThunkReader,The following statement contains a magic number: strLen >= 3 && asStr[0] == '-' && asStr[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,The following statement contains a magic number: idx >= 2 && buffer[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,The following statement contains a magic number: var secondChar = buffer[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,The following statement contains a magic number: idx >= 3 && buffer[0] == '-' && buffer[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,The following statement contains a magic number: var maxChars =                     6 +                     (hasIntegerComponent ? 1 : 0) +                     (includesDecimalPoint ? 1 : 0);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleFastThunkReader,The following statement contains a magic number: n = n * 10 + buffer[idx] - '0';
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArrayThunkReader,The following statement contains a magic number: idx >= 2 && buffer[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArrayThunkReader,The following statement contains a magic number: var secondChar = buffer[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleCharArrayThunkReader,The following statement contains a magic number: idx >= 3 && buffer[0] == '-' && buffer[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleThunkReader,The following statement contains a magic number: strLen >= 2 && asStr[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleThunkReader,The following statement contains a magic number: var secondChar = asStr[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadSingleThunkReader,The following statement contains a magic number: strLen >= 3 && asStr[0] == '-' && asStr[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: idx >= 2 && buffer[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: var secondChar = buffer[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: idx >= 3 && buffer[0] == '-' && buffer[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: var maxChars = decimalPointIdx < 0 ? 18 : 19;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: var maxChars = decimalPointIdx < 0 ? 18 : 19;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: n1 = n1 * 10 + buffer[idx] - '0';
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalFastThunkReader,The following statement contains a magic number: idx < endIdx && n1 < 100000000
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArrayThunkReader,The following statement contains a magic number: idx >= 2 && buffer[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArrayThunkReader,The following statement contains a magic number: var secondChar = buffer[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalCharArrayThunkReader,The following statement contains a magic number: idx >= 3 && buffer[0] == '-' && buffer[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalThunkReader,The following statement contains a magic number: strLen >= 2 && asStr[0] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalThunkReader,The following statement contains a magic number: var secondChar = asStr[2];
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadDecimalThunkReader,The following statement contains a magic number: strLen >= 3 && asStr[0] == '-' && asStr[1] == '0'
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following statement contains a magic number: ret += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped = (c - '0') << 12;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (c - '0') << 8;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuad2,The following statement contains a magic number: unescaped |= (c - '0') << 4;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadToBuilder,The following statement contains a magic number: encodedChar += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadGuidByte,The following statement contains a magic number: return (byte)(a * 16 + b);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped *= 16;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadHexQuadThunkReader,The following statement contains a magic number: unescaped += 10 + c;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: temp *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: temp > 23
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: temp *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: temp *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: c < 0 || c > 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_DiscardMicrosoftTimeZoneOffsetThunkReader,The following statement contains a magic number: temp > 59
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateThunkReader,The following statement contains a magic number: var time = ParseISO8601TimeThunkReader(ref reader' buffer' tPos.Value + 2' zPlusOrMinus ?? ix);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: len < 4
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: year *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: year *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: year *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                     {                          case 8:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' ref reader' false);                              return ConvertWeekDateToDateTime(year' week' 1);                          case 10:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' ref reader' false);                             start++;                              c = buffer[start];                             if (c != '-') throw new DeserializationException("Expected -"' ref reader' false);                             start++;                              c = buffer[start];                             if (c < '1' || c > '7') throw new DeserializationException("Expected day to be a digit between 1 and 7"' ref reader' false);                             day = (c - '0');                              return ConvertWeekDateToDateTime(year' week' day);                          default:                             throw new DeserializationException("Unexpected date string length"' ref reader' false);                     }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                     {                          case 8:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' ref reader' false);                              return ConvertWeekDateToDateTime(year' week' 1);                          case 10:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' ref reader' false);                             start++;                              c = buffer[start];                             if (c != '-') throw new DeserializationException("Expected -"' ref reader' false);                             start++;                              c = buffer[start];                             if (c < '1' || c > '7') throw new DeserializationException("Expected day to be a digit between 1 and 7"' ref reader' false);                             day = (c - '0');                              return ConvertWeekDateToDateTime(year' week' day);                          default:                             throw new DeserializationException("Unexpected date string length"' ref reader' false);                     }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                     {                          case 8:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' ref reader' false);                              return ConvertWeekDateToDateTime(year' week' 1);                          case 10:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' ref reader' false);                             start++;                              c = buffer[start];                             if (c != '-') throw new DeserializationException("Expected -"' ref reader' false);                             start++;                              c = buffer[start];                             if (c < '1' || c > '7') throw new DeserializationException("Expected day to be a digit between 1 and 7"' ref reader' false);                             day = (c - '0');                              return ConvertWeekDateToDateTime(year' week' day);                          default:                             throw new DeserializationException("Unexpected date string length"' ref reader' false);                     }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                     {                          case 8:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' ref reader' false);                              return ConvertWeekDateToDateTime(year' week' 1);                          case 10:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' ref reader' false);                             start++;                              c = buffer[start];                             if (c != '-') throw new DeserializationException("Expected -"' ref reader' false);                             start++;                              c = buffer[start];                             if (c < '1' || c > '7') throw new DeserializationException("Expected day to be a digit between 1 and 7"' ref reader' false);                             day = (c - '0');                              return ConvertWeekDateToDateTime(year' week' day);                          default:                             throw new DeserializationException("Unexpected date string length"' ref reader' false);                     }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                     {                          case 8:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' ref reader' false);                              return ConvertWeekDateToDateTime(year' week' 1);                          case 10:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' ref reader' false);                             start++;                              c = buffer[start];                             if (c != '-') throw new DeserializationException("Expected -"' ref reader' false);                             start++;                              c = buffer[start];                             if (c < '1' || c > '7') throw new DeserializationException("Expected day to be a digit between 1 and 7"' ref reader' false);                             day = (c - '0');                              return ConvertWeekDateToDateTime(year' week' day);                          default:                             throw new DeserializationException("Unexpected date string length"' ref reader' false);                     }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                     {                          case 8:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' ref reader' false);                              return ConvertWeekDateToDateTime(year' week' 1);                          case 10:                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             week *= 10;                             start++;                             c = buffer[start];                             if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                             week += (c - '0');                             if (week == 0 || week > 53) throw new DeserializationException("Expected week to be between 01 and 53"' ref reader' false);                             start++;                              c = buffer[start];                             if (c != '-') throw new DeserializationException("Expected -"' ref reader' false);                             start++;                              c = buffer[start];                             if (c < '1' || c > '7') throw new DeserializationException("Expected day to be a digit between 1 and 7"' ref reader' false);                             day = (c - '0');                              return ConvertWeekDateToDateTime(year' week' day);                          default:                             throw new DeserializationException("Unexpected date string length"' ref reader' false);                     }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref  reader' false);                         day += (c - '0');                         if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                              if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                         start++;                          if (buffer[start] != '-') throw new DeserializationException("Expected -"' ref reader' false);                         start++;                          c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                             throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                         }                      default:                         throw new DeserializationException("Unexpected date string length"' ref reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref  reader' false);                         day += (c - '0');                         if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                              if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                         start++;                          if (buffer[start] != '-') throw new DeserializationException("Expected -"' ref reader' false);                         start++;                          c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                             throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                         }                      default:                         throw new DeserializationException("Unexpected date string length"' ref reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref  reader' false);                         day += (c - '0');                         if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                              if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                         start++;                          if (buffer[start] != '-') throw new DeserializationException("Expected -"' ref reader' false);                         start++;                          c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                             throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                         }                      default:                         throw new DeserializationException("Unexpected date string length"' ref reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref  reader' false);                         day += (c - '0');                         if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                              if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                         start++;                          if (buffer[start] != '-') throw new DeserializationException("Expected -"' ref reader' false);                         start++;                          c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                             throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                         }                      default:                         throw new DeserializationException("Unexpected date string length"' ref reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref  reader' false);                         day += (c - '0');                         if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                              if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                         start++;                          if (buffer[start] != '-') throw new DeserializationException("Expected -"' ref reader' false);                         start++;                          c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                             throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                         }                      default:                         throw new DeserializationException("Unexpected date string length"' ref reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref  reader' false);                         day += (c - '0');                         if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                              if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                         start++;                          if (buffer[start] != '-') throw new DeserializationException("Expected -"' ref reader' false);                         start++;                          c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                             throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                         }                      default:                         throw new DeserializationException("Unexpected date string length"' ref reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref  reader' false);                         day += (c - '0');                         if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                              if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                         start++;                          if (buffer[start] != '-') throw new DeserializationException("Expected -"' ref reader' false);                         start++;                          c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                             throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                         }                      default:                         throw new DeserializationException("Unexpected date string length"' ref reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref  reader' false);                         day += (c - '0');                         if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                              if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                         start++;                          if (buffer[start] != '-') throw new DeserializationException("Expected -"' ref reader' false);                         start++;                          c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                             throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                         }                      default:                         throw new DeserializationException("Unexpected date string length"' ref reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref  reader' false);                         day += (c - '0');                         if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                              if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                         start++;                          if (buffer[start] != '-') throw new DeserializationException("Expected -"' ref reader' false);                         start++;                          c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                             throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                         }                      default:                         throw new DeserializationException("Unexpected date string length"' ref reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref  reader' false);                         day += (c - '0');                         if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                              if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                         start++;                          if (buffer[start] != '-') throw new DeserializationException("Expected -"' ref reader' false);                         start++;                          c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                             throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                         }                      default:                         throw new DeserializationException("Unexpected date string length"' ref reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref  reader' false);                         day += (c - '0');                         if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                              if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                         start++;                          if (buffer[start] != '-') throw new DeserializationException("Expected -"' ref reader' false);                         start++;                          c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                             throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                         }                      default:                         throw new DeserializationException("Unexpected date string length"' ref reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref  reader' false);                         day += (c - '0');                         if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                              if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                         start++;                          if (buffer[start] != '-') throw new DeserializationException("Expected -"' ref reader' false);                         start++;                          c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                             throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                         }                      default:                         throw new DeserializationException("Unexpected date string length"' ref reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref  reader' false);                         day += (c - '0');                         if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                              if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                         start++;                          if (buffer[start] != '-') throw new DeserializationException("Expected -"' ref reader' false);                         start++;                          c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                             throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                         }                      default:                         throw new DeserializationException("Unexpected date string length"' ref reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref  reader' false);                         day += (c - '0');                         if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                              if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                         start++;                          if (buffer[start] != '-') throw new DeserializationException("Expected -"' ref reader' false);                         start++;                          c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                             throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                         }                      default:                         throw new DeserializationException("Unexpected date string length"' ref reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref  reader' false);                         day += (c - '0');                         if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                              if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                         start++;                          if (buffer[start] != '-') throw new DeserializationException("Expected -"' ref reader' false);                         start++;                          c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                             throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                         }                      default:                         throw new DeserializationException("Unexpected date string length"' ref reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)                 {                     case 7:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                          // year is [1'9999] and month is [1'12] for sure' no need to handle errors                         return new DateTime(year' month' 1' 0' 0' 0' DateTimeKind.Local);                      case 8:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref  reader' false);                         day += (c - '0');                         if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                          if (day == 366)                         {                             var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                              if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                         }                          // year is [1'9999] and day is [1'366]' no need to handle errors                         return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                      case 10:                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         month *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         month += (c - '0');                         if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                         start++;                          if (buffer[start] != '-') throw new DeserializationException("Expected -"' ref reader' false);                         start++;                          c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         day *= 10;                         start++;                         c = buffer[start];                         if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                         day += (c - '0');                         if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                         start++;                          try                         {                             return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                         }                         catch (ArgumentOutOfRangeException e)                         {                             throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                         }                      default:                         throw new DeserializationException("Unexpected date string length"' ref reader' false);                 }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                          if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                     start++;                      c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                         throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                     }                  default:                     throw new DeserializationException("Unexpected date string length"' ref reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                          if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                     start++;                      c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                         throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                     }                  default:                     throw new DeserializationException("Unexpected date string length"' ref reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                          if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                     start++;                      c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                         throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                     }                  default:                     throw new DeserializationException("Unexpected date string length"' ref reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                          if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                     start++;                      c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                         throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                     }                  default:                     throw new DeserializationException("Unexpected date string length"' ref reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                          if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                     start++;                      c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                         throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                     }                  default:                     throw new DeserializationException("Unexpected date string length"' ref reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                          if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                     start++;                      c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                         throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                     }                  default:                     throw new DeserializationException("Unexpected date string length"' ref reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                          if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                     start++;                      c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                         throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                     }                  default:                     throw new DeserializationException("Unexpected date string length"' ref reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                          if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                     start++;                      c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                         throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                     }                  default:                     throw new DeserializationException("Unexpected date string length"' ref reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                          if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                     start++;                      c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                         throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                     }                  default:                     throw new DeserializationException("Unexpected date string length"' ref reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                          if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                     start++;                      c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                         throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                     }                  default:                     throw new DeserializationException("Unexpected date string length"' ref reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                          if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                     start++;                      c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                         throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                     }                  default:                     throw new DeserializationException("Unexpected date string length"' ref reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                          if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                     start++;                      c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                         throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                     }                  default:                     throw new DeserializationException("Unexpected date string length"' ref reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The following statement contains a magic number: switch (len)             {                 case 7:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 366) throw new DeserializationException("Expected ordinal day to be between 001 and 366"' ref reader' false);                     start++;                      if (day == 366)                     {                         var isLeapYear = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));                          if (!isLeapYear) throw new DeserializationException("Ordinal day can only be 366 in a leap year"' ref reader' false);                     }                      // year is [1'9999] and day is [1'366]' no need to handle errors                     return (new DateTime(year' 1' 1' 0' 0' 0' DateTimeKind.Local)).AddDays(day - 1);                  case 8:                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     month *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     month += (c - '0');                     if (month == 0 || month > 12) throw new DeserializationException("Expected month to be between 01 and 12"' ref reader' false);                     start++;                      c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     day *= 10;                     start++;                     c = buffer[start];                     if (c < '0' || c > '9') throw new DeserializationException("Expected digit"' ref reader' false);                     day += (c - '0');                     if (day == 0 || day > 31) throw new DeserializationException("Expected day to be between 01 and 31"' ref reader' false);                     start++;                      try                     {                         return (new DateTime(year' month' day' 0' 0' 0' DateTimeKind.Local));                     }                     catch (ArgumentOutOfRangeException e)                     {                         throw new DeserializationException("ISO8601 date could not be mapped to DateTime"' ref reader' e' false);                     }                  default:                     throw new DeserializationException("Unexpected date string length"' ref reader' false);             }
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: const long HoursToTicks = 36000000000;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: const long MinutesToTicks = 600000000;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: const long SecondsToTicks = 10000000;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: len < 2
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: hour *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: hour > 24
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: frac *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: fracLength < 9
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: hoursAsTicks += frac * 36 * Utils.Pow10(9 - fracLength);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: hoursAsTicks += frac * 36 * Utils.Pow10(9 - fracLength);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: len < 4
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: min *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: min > 59
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: frac *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: fracLength < 8
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: minsAsTicks += frac * 6 * Utils.Pow10(8 - fracLength);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: minsAsTicks += frac * 6 * Utils.Pow10(8 - fracLength);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: secs *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: frac *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: fracLength < 7
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The following statement contains a magic number: secsAsTicks += frac * Utils.Pow10(7 - fracLength);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,The following statement contains a magic number: len < 2
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,The following statement contains a magic number: hour *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,The following statement contains a magic number: hour > 24
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,The following statement contains a magic number: stop - start + 1 < 2
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,The following statement contains a magic number: mins *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeZoneOffsetThunkReader,The following statement contains a magic number: mins > 59
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The following statement contains a magic number: day *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The following statement contains a magic number: year *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The following statement contains a magic number: year *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The following statement contains a magic number: year *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The following statement contains a magic number: hour *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The following statement contains a magic number: min *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadRFC1123DateThunkReader,The following statement contains a magic number: sec *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 6;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 7;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 2;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 3;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 5;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 4;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 8;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 9;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 11;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ReadRFC1123MonthThunkReader,The following statement contains a magic number: return 12;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601DateWithOffsetThunkReader,The following statement contains a magic number: var time = ParseISO8601TimeThunkReader(ref reader' buffer' tPos.Value + 2' zPlusOrMinus ?? ix);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpanThunkReader,The following statement contains a magic number: part *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpanThunkReader,The following statement contains a magic number: sizeOfFraction > 7
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftTimeSpanThunkReader,The following statement contains a magic number: var ms = fracOfSecond * 1000.0;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,The following statement contains a magic number: const ulong TicksPerDay = 864000000000;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,The following statement contains a magic number: const ulong TicksPerWeek = TicksPerDay * 7;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,The following statement contains a magic number: const ulong TicksPerMonth = TicksPerDay * 30;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,The following statement contains a magic number: const ulong TicksPerYear = TicksPerDay * 365;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,The following statement contains a magic number: var yearsFromMonths = ((ulong)month) / 12;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadISO8601TimeSpanThunkReader,The following statement contains a magic number: var monthsAfterYears = ((ulong)month) % 12;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: const ulong TicksPerHour = 36000000000;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: const ulong TicksPerMinute = 600000000;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: const ulong TicksPerSecond = 10000000;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks(9' fraction * 36' fracLen);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: ticks += (ulong)whole * TicksPerHour + ISO8601TimeSpan_FractionToTicks(9' fraction * 36' fracLen);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks(8' fraction * 6' fracLen);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: ticks += (ulong)whole * TicksPerMinute + ISO8601TimeSpan_FractionToTicks(8' fraction * 6' fracLen);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadTimePartThunkReader,The following statement contains a magic number: ticks += (ulong)whole * TicksPerSecond + ISO8601TimeSpan_FractionToTicks(7' fraction' fracLen);
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadPartThunkReader,The following statement contains a magic number: part *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ISO8601TimeSpan_ReadPartThunkReader,The following statement contains a magic number: part *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftDateTimeOffsetThunkReader,The following statement contains a magic number: const long EpochTicks = 621355968000000000L;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftDateTimeOffsetThunkReader,The following statement contains a magic number: const long MillisecondsToTicks = 10000L;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftDateTimeOffsetThunkReader,The following statement contains a magic number: hour *= 10;
Magic Number,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadMicrosoftDateTimeOffsetThunkReader,The following statement contains a magic number: min *= 10;
Magic Number,Jil.Deserialize,NameAutomata<T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\NameAutomata.cs,DoCharBranches,The following statement contains a magic number: var bsComparisons = (int)Math.Ceiling(Math.Log(namesToFinish.Count' 2)) + 1;
Magic Number,Jil.Deserialize,NameAutomata<T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\NameAutomata.cs,DoCharBinarySearch,The following statement contains a magic number: match =                  charsLeft =>                  {                      if (charsLeft.Count == 0)                      {                          d.Emit.Branch(noMatch);                 // --empty--                          return;                      }                        if (charsLeft.Count == 1)                      {                          var exact = charsLeft[0];                            d.Emit.LoadLocal(d.Local_ch);           // int                          d.Emit.LoadConstant((int)exact.Item1);  // int int                          d.Emit.BranchIfEqual(exact.Item2);      // --empty--                          d.Emit.Branch(noMatch);                 // --empty--                          return;                      }                        var midPoint = charsLeft.Count / 2;                      var midVal = charsLeft[midPoint];                        var left = charsLeft.Take(midPoint).ToList();                      var right = charsLeft.Skip(midPoint).ToList();                        var leftLabel = d.Emit.DefineLabel(Helper.GetNextName());                        d.Emit.LoadLocal(d.Local_ch);           // int                      d.Emit.LoadConstant((int)midVal.Item1); // int int                      d.Emit.BranchIfLess(leftLabel);         // --empty--                      match(right);                           // --empty--                        d.Emit.MarkLabel(leftLabel);            // --empty--                      match(left);                            // --empty                  };
Magic Number,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch(depth){                 case 0: return;                 case 1: stream.Write(' '); return;                 case 2: stream.Write("  "); return;                 case 3: stream.Write("   "); return;                 case 4: stream.Write("    "); return;                 case 5: stream.Write("     "); return;                 case 6: stream.Write("      "); return;                 case 7: stream.Write("       "); return;                 case 8: stream.Write("        "); return;                 case 9: stream.Write("         "); return;                 case 10: stream.Write("          "); return;             }
Magic Number,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch(depth){                 case 0: return;                 case 1: stream.Write(' '); return;                 case 2: stream.Write("  "); return;                 case 3: stream.Write("   "); return;                 case 4: stream.Write("    "); return;                 case 5: stream.Write("     "); return;                 case 6: stream.Write("      "); return;                 case 7: stream.Write("       "); return;                 case 8: stream.Write("        "); return;                 case 9: stream.Write("         "); return;                 case 10: stream.Write("          "); return;             }
Magic Number,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch(depth){                 case 0: return;                 case 1: stream.Write(' '); return;                 case 2: stream.Write("  "); return;                 case 3: stream.Write("   "); return;                 case 4: stream.Write("    "); return;                 case 5: stream.Write("     "); return;                 case 6: stream.Write("      "); return;                 case 7: stream.Write("       "); return;                 case 8: stream.Write("        "); return;                 case 9: stream.Write("         "); return;                 case 10: stream.Write("          "); return;             }
Magic Number,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch(depth){                 case 0: return;                 case 1: stream.Write(' '); return;                 case 2: stream.Write("  "); return;                 case 3: stream.Write("   "); return;                 case 4: stream.Write("    "); return;                 case 5: stream.Write("     "); return;                 case 6: stream.Write("      "); return;                 case 7: stream.Write("       "); return;                 case 8: stream.Write("        "); return;                 case 9: stream.Write("         "); return;                 case 10: stream.Write("          "); return;             }
Magic Number,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch(depth){                 case 0: return;                 case 1: stream.Write(' '); return;                 case 2: stream.Write("  "); return;                 case 3: stream.Write("   "); return;                 case 4: stream.Write("    "); return;                 case 5: stream.Write("     "); return;                 case 6: stream.Write("      "); return;                 case 7: stream.Write("       "); return;                 case 8: stream.Write("        "); return;                 case 9: stream.Write("         "); return;                 case 10: stream.Write("          "); return;             }
Magic Number,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch(depth){                 case 0: return;                 case 1: stream.Write(' '); return;                 case 2: stream.Write("  "); return;                 case 3: stream.Write("   "); return;                 case 4: stream.Write("    "); return;                 case 5: stream.Write("     "); return;                 case 6: stream.Write("      "); return;                 case 7: stream.Write("       "); return;                 case 8: stream.Write("        "); return;                 case 9: stream.Write("         "); return;                 case 10: stream.Write("          "); return;             }
Magic Number,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch(depth){                 case 0: return;                 case 1: stream.Write(' '); return;                 case 2: stream.Write("  "); return;                 case 3: stream.Write("   "); return;                 case 4: stream.Write("    "); return;                 case 5: stream.Write("     "); return;                 case 6: stream.Write("      "); return;                 case 7: stream.Write("       "); return;                 case 8: stream.Write("        "); return;                 case 9: stream.Write("         "); return;                 case 10: stream.Write("          "); return;             }
Magic Number,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch(depth){                 case 0: return;                 case 1: stream.Write(' '); return;                 case 2: stream.Write("  "); return;                 case 3: stream.Write("   "); return;                 case 4: stream.Write("    "); return;                 case 5: stream.Write("     "); return;                 case 6: stream.Write("      "); return;                 case 7: stream.Write("       "); return;                 case 8: stream.Write("        "); return;                 case 9: stream.Write("         "); return;                 case 10: stream.Write("          "); return;             }
Magic Number,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: switch(depth){                 case 0: return;                 case 1: stream.Write(' '); return;                 case 2: stream.Write("  "); return;                 case 3: stream.Write("   "); return;                 case 4: stream.Write("    "); return;                 case 5: stream.Write("     "); return;                 case 6: stream.Write("      "); return;                 case 7: stream.Write("       "); return;                 case 8: stream.Write("        "); return;                 case 9: stream.Write("         "); return;                 case 10: stream.Write("          "); return;             }
Magic Number,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,GetSemiStaticSerializerFor,The following statement contains a magic number: emit.LoadArgument(2);
Magic Number,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,GetSemiStaticSerializerFor,The following statement contains a magic number: emit.LoadArgument(3);
Magic Number,Jil.SerializeDynamic,RecursiveSerializerCache<T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\RecursiveSerializerCache.cs,_GetFor,The following statement contains a magic number: emit.LoadArgument(2);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: const int precalcLimit = 10;
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: Emit.LoadArgument(2);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,LineBreakAndIndent,The following statement contains a magic number: Emit.LoadArgument(2);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,IncreaseIndent,The following statement contains a magic number: Emit.LoadArgument(2);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,IncreaseIndent,The following statement contains a magic number: Emit.StoreArgument(2);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,DecreaseIndent,The following statement contains a magic number: Emit.LoadArgument(2);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,DecreaseIndent,The following statement contains a magic number: Emit.StoreArgument(2);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMember,The following statement contains a magic number: Emit.LoadArgument(2);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMicrosoftStyleDateTime,The following statement contains a magic number: Emit.LoadConstant(1970);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMicrosoftStyleDateTime,The following statement contains a magic number: Emit.LoadConstant(621355968000000000L);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMicrosoftStyleDateTime,The following statement contains a magic number: Emit.LoadConstant(10000L);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMillisecondsStyleDateTime,The following statement contains a magic number: Emit.LoadConstant(1970);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMillisecondsStyleDateTime,The following statement contains a magic number: Emit.LoadConstant(621355968000000000L);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteMillisecondsStyleDateTime,The following statement contains a magic number: Emit.LoadConstant(10000L);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteSecondsStyleDateTime,The following statement contains a magic number: Emit.LoadConstant(1970);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteSecondsStyleDateTime,The following statement contains a magic number: Emit.LoadConstant(621355968000000000L);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteSecondsStyleDateTime,The following statement contains a magic number: Emit.LoadConstant(10000000L);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteElement,The following statement contains a magic number: Emit.LoadArgument(2);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,DynamicCallOutCheck,The following statement contains a magic number: Emit.LoadArgument(2);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValueIfNotNull,The following statement contains a magic number: Emit.LoadArgument(2);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteKeyValue,The following statement contains a magic number: Emit.LoadArgument(2);
Magic Number,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,BuildObjectWithNewImpl,The following statement contains a magic number: Emit.LoadArgument(2);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[8] = '-';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[13] = '-';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[18] = '-';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[23] = '-';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: var b = visibleMembers.B00 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[6] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[7] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B01 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[4] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[5] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B02 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[2] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[3] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B03 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B04 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[11] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[12] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B05 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[9] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[10] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B06 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[16] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[17] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B07 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[14] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[15] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B08 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[19] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[20] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B09 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[21] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[22] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B10 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[24] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[25] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B11 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[26] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[27] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B12 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[28] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[29] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B13 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[30] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[31] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B14 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[32] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[33] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: b = visibleMembers.B15 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[34] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: buffer[35] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid,The following statement contains a magic number: writer.Write(buffer' 0' 36);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: var digits = DigitPairs[(byte)(val % 100)];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[4] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[3] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: digits = DigitPairs[(byte)(val / 100)];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[2] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[5] = '-';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[7] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[6] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[8] = '-';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[10] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[9] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[11] = 'T';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[13] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[12] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[14] = ':';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[16] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[15] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[17] = ':';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[19] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[18] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[20] = '.';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: var fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[27] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[26] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: fracEnd = 28;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[25] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[24] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[23] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[22] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: buffer[21] = (char)('0' + fracPart);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString,The following statement contains a magic number: writer.Write(buffer' 0' fracEnd + 2);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: var digits = DigitPairs[(byte)(val % 100)];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[4] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[3] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: digits = DigitPairs[(byte)(val / 100)];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[2] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[5] = '-';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[7] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[6] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[8] = '-';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[10] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[9] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[11] = 'T';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[13] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[12] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[14] = ':';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[16] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[15] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[17] = ':';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[19] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[18] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[20] = '.';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: var fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[27] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[26] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: fracEnd = 28;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[25] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[24] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[23] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[22] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[21] = (char)('0' + fracPart);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[fracEnd + 2] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[fracEnd + 3] = ':';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[fracEnd + 4] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[fracEnd + 5] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: buffer[fracEnd + 6] = '"';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString,The following statement contains a magic number: writer.Write(buffer' 0' fracEnd + 7);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteInt,The following statement contains a magic number: byte ix = (byte)(copy % 100);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteInt,The following statement contains a magic number: copy /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: writer.Write(DigitTriplets' number * 3' 3);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: writer.Write(DigitTriplets' number * 3' 3);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: number >= 100
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: number < 1000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: var d012 = number % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: var d012 = number % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d543 = (number / 1000) * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d543 = (number / 1000) * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: numLen = 6;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: number >= 100000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: number < 1000000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d876 = (number / 1000000) * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d876 = (number / 1000000) * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: numLen = 9;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: number >= 100000000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: number < 1000000000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: numLen = 10;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: var d9 = number / 1000000000;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer[2] = DigitTriplets[d876 + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer[3] = DigitTriplets[d876 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer[3] = DigitTriplets[d876 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer[4] = DigitTriplets[d543];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer[5] = DigitTriplets[d543 + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer[6] = DigitTriplets[d543 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer[6] = DigitTriplets[d543 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer[7] = DigitTriplets[d012];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer[8] = DigitTriplets[d012 + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer[9] = DigitTriplets[d012 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: buffer[9] = DigitTriplets[d012 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned,The following statement contains a magic number: writer.Write(buffer' 10 - numLen' numLen);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUInt,The following statement contains a magic number: byte ix = (byte)(copy % 100);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUInt,The following statement contains a magic number: copy /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: writer.Write(DigitTriplets' (int)(number * 3)' 3);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: writer.Write(DigitTriplets' (int)(number * 3)' 3);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: number >= 100
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: number < 1000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: var d012 = number % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: var d012 = number % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d543 = (number / 1000) * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d543 = (number / 1000) * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: numLen = 6;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: number >= 100000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: number < 1000000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d876 = (number / 1000000) * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d876 = (number / 1000000) * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: numLen = 9;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: number >= 100000000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: number < 1000000000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: numLen = 10;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: var d9 = number / 1000000000;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer[2] = DigitTriplets[d876 + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer[3] = DigitTriplets[d876 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer[3] = DigitTriplets[d876 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer[4] = DigitTriplets[d543];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer[5] = DigitTriplets[d543 + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer[6] = DigitTriplets[d543 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer[6] = DigitTriplets[d543 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer[7] = DigitTriplets[d012];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer[8] = DigitTriplets[d012 + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer[9] = DigitTriplets[d012 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: buffer[9] = DigitTriplets[d012 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled,The following statement contains a magic number: writer.Write(buffer' 10 - numLen' numLen);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteLong,The following statement contains a magic number: byte ix = (byte)(copy % 100);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteLong,The following statement contains a magic number: copy /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteULong,The following statement contains a magic number: byte ix = (byte)(copy % 100);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteULong,The following statement contains a magic number: copy /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: var fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: buffer[7] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: buffer[6] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: fracEnd = 8;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: buffer[5] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: buffer[4] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: buffer[3] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601,The following statement contains a magic number: buffer[2] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer[2] = ':';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer[3] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer[4] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer[5] = ':';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer[6] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer[7] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: endCount = 8;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer[8] = '.';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: var fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer[15] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer[14] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: fracEnd = 16;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer[13] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer[12] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer[11] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer[10] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft,The following statement contains a magic number: buffer[9] = (char)('0' + fracPart);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: var firstHalfYear = DigitPairs[year / 100];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following statement contains a magic number: var secondHalfYear = DigitPairs[year % 100];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteMicrosoftStyleWithOffset,The following statement contains a magic number: const long EpochTicks = 621355968000000000L;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteMicrosoftStyleWithOffset,The following statement contains a magic number: const long TicksToMilliseconds = 10000L;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[8] = '-';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[13] = '-';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[18] = '-';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[23] = '-';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: var b = visibleMembers.B00 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[6] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[7] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B01 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[4] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[5] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B02 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[2] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[3] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B03 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B04 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[11] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[12] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B05 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[9] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[10] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B06 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[16] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[17] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B07 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[14] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[15] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B08 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[19] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[20] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B09 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[21] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[22] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B10 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[24] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[25] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B11 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[26] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[27] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B12 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[28] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[29] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B13 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[30] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[31] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B14 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[32] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[33] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: b = visibleMembers.B15 * 2;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[34] = WriteGuidLookup[b];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: buffer[35] = WriteGuidLookup[b + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteGuid_ThunkWriter,The following statement contains a magic number: writer.Write(buffer' 0' 36);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: var digits = DigitPairs[(byte)(val % 100)];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[4] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[3] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: digits = DigitPairs[(byte)(val / 100)];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[2] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[5] = '-';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[7] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[6] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[8] = '-';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[10] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[9] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[11] = 'T';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[13] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[12] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[14] = ':';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[16] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[15] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[17] = ':';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[19] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[18] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[20] = '.';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: var fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[27] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[26] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: fracEnd = 28;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[25] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[24] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[23] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[22] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: buffer[21] = (char)('0' + fracPart);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601ToString_ThunkWriter,The following statement contains a magic number: writer.Write(buffer' 0' fracEnd + 2);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: var digits = DigitPairs[(byte)(val % 100)];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[4] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[3] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: digits = DigitPairs[(byte)(val / 100)];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[2] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[5] = '-';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[7] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[6] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[8] = '-';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[10] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[9] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[11] = 'T';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[13] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[12] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[14] = ':';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[16] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[15] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[17] = ':';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[19] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[18] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[20] = '.';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: var fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[27] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[26] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: fracEnd = 28;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[25] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[24] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[23] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[22] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[21] = (char)('0' + fracPart);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[fracEnd + 2] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[fracEnd + 3] = ':';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[fracEnd + 4] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[fracEnd + 5] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: buffer[fracEnd + 6] = '"';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomISO8601WithOffsetToString_ThunkWriter,The following statement contains a magic number: writer.Write(buffer' 0' fracEnd + 7);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteInt_ThunkWriter,The following statement contains a magic number: byte ix = (byte)(copy % 100);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteInt_ThunkWriter,The following statement contains a magic number: copy /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: writer.Write(DigitTriplets' number * 3' 3);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: writer.Write(DigitTriplets' number * 3' 3);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: number >= 100
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: number < 1000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: var d012 = number % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: var d012 = number % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: numLen = 6;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: number >= 100000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: number < 1000000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: numLen = 9;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: number >= 100000000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: number < 1000000000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: numLen = 10;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: var d9 = number / 1000000000;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer[2] = DigitTriplets[d876 + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer[3] = DigitTriplets[d876 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer[3] = DigitTriplets[d876 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer[4] = DigitTriplets[d543];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer[5] = DigitTriplets[d543 + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer[6] = DigitTriplets[d543 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer[6] = DigitTriplets[d543 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer[7] = DigitTriplets[d012];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer[8] = DigitTriplets[d012 + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer[9] = DigitTriplets[d012 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: buffer[9] = DigitTriplets[d012 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteIntUnrolledSigned_ThunkWriter,The following statement contains a magic number: writer.Write(buffer' 10 - numLen' numLen);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUInt_ThunkWriter,The following statement contains a magic number: byte ix = (byte)(copy % 100);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUInt_ThunkWriter,The following statement contains a magic number: copy /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: writer.Write(DigitTriplets' (int)(number * 3)' 3);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: writer.Write(DigitTriplets' (int)(number * 3)' 3);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: number >= 100
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: number < 1000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: var d012 = number % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: var d012 = number % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: numLen = 6;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: number >= 100000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: number < 1000000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d543 = (number / 1000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: numLen = 9;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: number >= 100000000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: number < 1000000000
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: d876 = (number / 1000000) % 1000 * 3;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: numLen = 10;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: var d9 = number / 1000000000;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer[2] = DigitTriplets[d876 + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer[3] = DigitTriplets[d876 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer[3] = DigitTriplets[d876 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer[4] = DigitTriplets[d543];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer[5] = DigitTriplets[d543 + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer[6] = DigitTriplets[d543 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer[6] = DigitTriplets[d543 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer[7] = DigitTriplets[d012];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer[8] = DigitTriplets[d012 + 1];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer[9] = DigitTriplets[d012 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: buffer[9] = DigitTriplets[d012 + 2];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteUIntUnrolled_ThunkWriter,The following statement contains a magic number: writer.Write(buffer' 10 - numLen' numLen);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteLong_ThunkWriter,The following statement contains a magic number: byte ix = (byte)(copy % 100);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteLong_ThunkWriter,The following statement contains a magic number: copy /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteULong_ThunkWriter,The following statement contains a magic number: byte ix = (byte)(copy % 100);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteULong_ThunkWriter,The following statement contains a magic number: copy /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: var fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: buffer[7] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: buffer[6] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: fracEnd = 8;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: buffer[5] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: buffer[4] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: buffer[3] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanISO8601_ThunkWriter,The following statement contains a magic number: buffer[2] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer[2] = ':';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer[3] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer[4] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer[5] = ':';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer[6] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer[7] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: endCount = 8;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer[8] = '.';
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: var fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer[15] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer[14] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: fracEnd = 16;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer[13] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer[12] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: fracPart = remainingTicks % 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: remainingTicks /= 100;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer[11] = digits.Second;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer[10] = digits.First;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_WriteTimeSpanMicrosoft_ThunkWriter,The following statement contains a magic number: buffer[9] = (char)('0' + fracPart);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: var dayOfWeek = (ConstantString_DaysOfWeek)(((byte)dt.DayOfWeek) * 3);
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: var firstHalfYear = DigitPairs[year / 100];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following statement contains a magic number: var secondHalfYear = DigitPairs[year % 100];
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteMicrosoftStyleWithOffset_ThunkWriter,The following statement contains a magic number: const long EpochTicks = 621355968000000000L;
Magic Number,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomWriteMicrosoftStyleWithOffset_ThunkWriter,The following statement contains a magic number: const long TicksToMilliseconds = 10000L;
Magic Number,Jil.Serialize,SerializeDynamicThunk<T>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\SerializeDynamicThunk.cs,SerializeDynamicThunk,The following statement contains a magic number: emit.LoadArgument(2);
Magic Number,Jil.Serialize,ThunkWriter,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,WriteCommonConstant,The following statement contains a magic number: var ix = asUShort >> 8;
Magic Number,Jil.Serialize,ThunkWriter,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,WriteFormattingConstant,The following statement contains a magic number: var ix = (asUShort >> 8);
Magic Number,Jil.Serialize,ThunkWriter,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,WriteMinConstant,The following statement contains a magic number: var ix = (asUShort >> 8);
Magic Number,Jil.Serialize,ThunkWriter,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,WriteValueConstant,The following statement contains a magic number: var ix = (asUShort >> 8);
Magic Number,Jil.Serialize,ThunkWriter,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\ThunkWriter.cs,WriteDayOfWeek,The following statement contains a magic number: Builder.Append(ThunkWriterCharArrays.ConstantString_DaysOfWeek' ix' 3);
Duplicate Code,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The method contains a code clone-set at the following line numbers (starting from the method definition): ((110' 130)' (329' 349)' (553' 573)' (772' 792)' (996' 1016)' (1215' 1235)' (1439' 1459)' (1658' 1678)' (1882' 1902)' (2101' 2121))
Duplicate Code,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The method contains a code clone-set at the following line numbers (starting from the method definition): ((217' 242)' (660' 685)' (1103' 1128)' (1546' 1571)' (1989' 2014))
Duplicate Code,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The method contains a code clone-set at the following line numbers (starting from the method definition): ((110' 130)' (329' 349)' (553' 573)' (772' 792)' (996' 1016)' (1215' 1235)' (1439' 1459)' (1658' 1678)' (1882' 1902)' (2101' 2121))
Duplicate Code,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The method contains a code clone-set at the following line numbers (starting from the method definition): ((217' 242)' (660' 685)' (1103' 1128)' (1546' 1571)' (1989' 2014))
Duplicate Code,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,InnerTryConvert,The method contains a code clone-set at the following line numbers (starting from the method definition): ((155' 194)' (289' 328))
Duplicate Code,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,The method contains a code clone-set at the following line numbers (starting from the method definition): ((14' 50)' (57' 93))
Duplicate Code,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadRFC1123DateTime,The method contains a code clone-set at the following line numbers (starting from the method definition): ((117' 145)' (131' 159))
Duplicate Code,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Date,The method contains a code clone-set at the following line numbers (starting from the method definition): ((229' 254)' (301' 326))
Duplicate Code,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The method contains a code clone-set at the following line numbers (starting from the method definition): ((104' 159)' (225' 280))
Duplicate Code,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,_ParseISO8601Time,The method contains a code clone-set at the following line numbers (starting from the method definition): ((162' 215)' (282' 335))
Duplicate Code,Jil.Deserialize,InlineDeserializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\InlineDeserializer.cs,ReadAndSetDiscriminantUnion,The method contains a code clone-set at the following line numbers (starting from the method definition): ((109' 130)' (170' 191))
Duplicate Code,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Date,The method contains a code clone-set at the following line numbers (starting from the method definition): ((225' 250)' (295' 320))
Duplicate Code,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The method contains a code clone-set at the following line numbers (starting from the method definition): ((102' 140)' (219' 257))
Duplicate Code,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601Time,The method contains a code clone-set at the following line numbers (starting from the method definition): ((158' 191)' (274' 307))
Duplicate Code,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601DateThunkReader,The method contains a code clone-set at the following line numbers (starting from the method definition): ((225' 250)' (295' 320))
Duplicate Code,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The method contains a code clone-set at the following line numbers (starting from the method definition): ((102' 155)' (219' 272))
Duplicate Code,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,ParseISO8601TimeThunkReader,The method contains a code clone-set at the following line numbers (starting from the method definition): ((158' 209)' (274' 325))
Duplicate Code,Jil.Serialize,InlineSerializer<ForType>,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\InlineSerializer.cs,WriteDictionaryWithNulls,The method contains a code clone-set at the following line numbers (starting from the method definition): ((96' 117)' (125' 146))
Missing Default,Jil.Common,ExtensionMethods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Common\ExtensionMethods.cs,JsonEscapeFast,The following switch statement is missing a default case: switch (c)                  {                      case '\u0000': output.Write(@"\u0000"); continue;                      case '\u0001': output.Write(@"\u0001"); continue;                      case '\u0002': output.Write(@"\u0002"); continue;                      case '\u0003': output.Write(@"\u0003"); continue;                      case '\u0004': output.Write(@"\u0004"); continue;                      case '\u0005': output.Write(@"\u0005"); continue;                      case '\u0006': output.Write(@"\u0006"); continue;                      case '\u0007': output.Write(@"\u0007"); continue;                      case '\u0008': output.Write(@"\u0008"); continue;                      case '\u0009': output.Write(@"\t"); continue;                      case '\u000A': output.Write(@"\n"); continue;                      case '\u000B': output.Write(@"\v"); continue;                      case '\u000C': output.Write(@"\f"); continue;                      case '\u000D': output.Write(@"\r"); continue;                      case '\u000E': output.Write(@"\u000E"); continue;                      case '\u000F': output.Write(@"\u000F"); continue;                      case '\u0010': output.Write(@"\u0010"); continue;                      case '\u0011': output.Write(@"\u0011"); continue;                      case '\u0012': output.Write(@"\u0012"); continue;                      case '\u0013': output.Write(@"\u0013"); continue;                      case '\u0014': output.Write(@"\u0014"); continue;                      case '\u0015': output.Write(@"\u0015"); continue;                      case '\u0016': output.Write(@"\u0016"); continue;                      case '\u0017': output.Write(@"\u0017"); continue;                      case '\u0018': output.Write(@"\u0018"); continue;                      case '\u0019': output.Write(@"\u0019"); continue;                      case '\u001A': output.Write(@"\u001A"); continue;                      case '\u001B': output.Write(@"\u001B"); continue;                      case '\u001C': output.Write(@"\u001C"); continue;                      case '\u001D': output.Write(@"\u001D"); continue;                      case '\u001E': output.Write(@"\u001E"); continue;                      case '\u001F': output.Write(@"\u001F"); continue;                  }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseDateTimeFormat)              {                  case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                      switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyle' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }                      break;                  case DateTimeFormat.MillisecondsSinceUnixEpoch:                      switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Milliseconds' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }                      break;                  case DateTimeFormat.SecondsSinceUnixEpoch:                      switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Seconds' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }                      break;                  case DateTimeFormat.ISO8601:                      switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601CamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Utc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601UtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Inherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601InheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }                      break;                  case DateTimeFormat.RFC1123:                      switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123CamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Utc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123UtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Inherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123InheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }                      break;              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyle' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyle' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyle' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyle' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyle' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyle' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Milliseconds' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Milliseconds' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Milliseconds' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Milliseconds' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Milliseconds' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Milliseconds' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Seconds' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Seconds' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Seconds' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Seconds' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Seconds' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Seconds' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601CamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Utc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601UtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Inherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601InheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601CamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Utc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601UtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Inherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601InheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601CamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Utc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601UtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Inherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601InheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601CamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Utc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601UtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Inherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601InheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601CamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Utc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601UtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601CamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Utc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601UtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Inherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601InheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Inherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601InheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123CamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Utc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123UtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Inherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123InheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123CamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Utc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123UtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Inherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123InheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123CamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Utc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123UtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Inherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123InheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123CamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Utc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123UtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Inherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123InheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123CamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Utc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123UtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123CamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Utc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123UtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Inherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123InheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Inherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123InheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrint' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetWriterAction,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.Get();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.Get();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseDateTimeFormat)              {                  case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                      switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyle' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }                      break;                  case DateTimeFormat.MillisecondsSinceUnixEpoch:                      switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Milliseconds' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }                      break;                  case DateTimeFormat.SecondsSinceUnixEpoch:                      switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Seconds' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }                      break;                  case DateTimeFormat.ISO8601:                      switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601CamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Utc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601UtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Inherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601InheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }                      break;                  case DateTimeFormat.RFC1123:                      switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123CamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Utc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123UtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Inherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123InheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }                      break;              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyle' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyle' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyle' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyle' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyle' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyle' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStyleExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MicrosoftStylePrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Milliseconds' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Milliseconds' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Milliseconds' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Milliseconds' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Milliseconds' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Milliseconds' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<MillisecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Seconds' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Seconds' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Seconds' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Seconds' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Seconds' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<Seconds' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<SecondsPrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601CamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Utc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601UtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Inherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601InheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601CamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Utc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601UtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Inherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601InheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601CamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Utc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601UtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Inherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601InheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601CamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Utc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601UtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Inherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601InheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601CamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Utc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601UtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601CamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Utc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601UtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Inherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601InheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601Inherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601InheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601InheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601JSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601JSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<ISO8601PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldPrettyPrint)                      {                          case false:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123CamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Utc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123UtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Inherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123InheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                          case true:                              switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }                              break;                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123CamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Utc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123UtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Inherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123InheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123CamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Utc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123UtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Inherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123InheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123CamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Utc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123UtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Inherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123InheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123CamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Utc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123UtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123CamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Utc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123UtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Inherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123InheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123Inherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123InheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123InheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123JSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123JSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123ExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldExcludeNulls)                              {                                  case false:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                                  case true:                                      switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }                                      break;                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrint' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.IsJSONP)                                      {                                          case false:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                          case true:                                              switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }                                              break;                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNulls' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.ShouldIncludeInherited)                                              {                                                  case false:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                                  case true:                                                      switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }                                                      break;                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONP' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.UseUnspecifiedDateTimeKindBehavior)                                                      {                                                          case UnspecifiedDateTimeKindBehavior.IsLocal:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }                                                              break;                                                          case UnspecifiedDateTimeKindBehavior.IsUTC:                                                              switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }                                                              break;                                                      }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInherited' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,GetThunkerDelegate,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                                                              {                                                                  case SerializationNameFormat.Verbatim:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtc' T>.GetToString();                                                                  case SerializationNameFormat.CamelCase:                                                                      return TypeCache<RFC1123PrettyPrintExcludeNullsJSONPInheritedUtcCamelCase' T>.GetToString();                                                              }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.UseDateTimeFormat)                  {                      case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                          switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.MicrosoftStyle' T>.Get()(reader' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.MicrosoftStyleCamelCase' T>.Get()(reader' 0);                          }                          break;                      case DateTimeFormat.MillisecondsSinceUnixEpoch:                          switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.MillisecondStyle' T>.Get()(reader' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.MillisecondStyleCamelCase' T>.Get()(reader' 0);                          }                          break;                      case DateTimeFormat.SecondsSinceUnixEpoch:                          switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.SecondStyle' T>.Get()(reader' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.SecondStyleCamelCase' T>.Get()(reader' 0);                          }                          break;                      case DateTimeFormat.ISO8601:                          switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.ISO8601Style' T>.Get()(reader' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.ISO8601StyleCamelCase' T>.Get()(reader' 0);                          }                          break;                      case DateTimeFormat.RFC1123:                          switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.RFC1123Style' T>.Get()(reader' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.RFC1123StyleCamelCase' T>.Get()(reader' 0);                          }                          break;                  }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.MicrosoftStyle' T>.Get()(reader' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.MicrosoftStyleCamelCase' T>.Get()(reader' 0);                          }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.MillisecondStyle' T>.Get()(reader' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.MillisecondStyleCamelCase' T>.Get()(reader' 0);                          }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.SecondStyle' T>.Get()(reader' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.SecondStyleCamelCase' T>.Get()(reader' 0);                          }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.ISO8601Style' T>.Get()(reader' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.ISO8601StyleCamelCase' T>.Get()(reader' 0);                          }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.RFC1123Style' T>.Get()(reader' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.RFC1123StyleCamelCase' T>.Get()(reader' 0);                          }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.UseDateTimeFormat)                  {                      case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                          switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.MicrosoftStyle' T>.GetFromString()(ref thunk' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.MicrosoftStyleCamelCase' T>.GetFromString()(ref thunk' 0);                          }                          break;                      case DateTimeFormat.MillisecondsSinceUnixEpoch:                          switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.MillisecondStyle' T>.GetFromString()(ref thunk' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.MillisecondStyleCamelCase' T>.GetFromString()(ref thunk' 0);                          }                          break;                      case DateTimeFormat.SecondsSinceUnixEpoch:                          switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.SecondStyle' T>.GetFromString()(ref thunk' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.SecondStyleCamelCase' T>.GetFromString()(ref thunk' 0);                          }                          break;                      case DateTimeFormat.ISO8601:                          switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.ISO8601Style' T>.GetFromString()(ref thunk' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.ISO8601StyleCamelCase' T>.GetFromString()(ref thunk' 0);                          }                          break;                      case DateTimeFormat.RFC1123:                          switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.RFC1123Style' T>.GetFromString()(ref thunk' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.RFC1123StyleCamelCase' T>.GetFromString()(ref thunk' 0);                          }                          break;                  }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.MicrosoftStyle' T>.GetFromString()(ref thunk' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.MicrosoftStyleCamelCase' T>.GetFromString()(ref thunk' 0);                          }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.MillisecondStyle' T>.GetFromString()(ref thunk' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.MillisecondStyleCamelCase' T>.GetFromString()(ref thunk' 0);                          }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.SecondStyle' T>.GetFromString()(ref thunk' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.SecondStyleCamelCase' T>.GetFromString()(ref thunk' 0);                          }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.ISO8601Style' T>.GetFromString()(ref thunk' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.ISO8601StyleCamelCase' T>.GetFromString()(ref thunk' 0);                          }
Missing Default,Jil,JSON,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\JSON.cs,Deserialize,The following switch statement is missing a default case: switch (options.SerializationNameFormat)                          {                              case SerializationNameFormat.Verbatim:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.RFC1123Style' T>.GetFromString()(ref thunk' 0);                              case SerializationNameFormat.CamelCase:                                  return Jil.Deserialize.TypeCache<Jil.Deserialize.RFC1123StyleCamelCase' T>.GetFromString()(ref thunk' 0);                          }
Missing Default,Jil.DeserializeDynamic,DynamicDeserializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,_DeserializeMember,The following switch statement is missing a default case: switch (c)             {                 case '"': DeserializeString(reader' builder); return;                 case '[': DeserializeArray(reader' builder); return;                 case '{': DeserializeObject(reader' builder); return;                 case 'n': DeserializeNull(reader' builder); return;                 case 't': DeserializeTrue(reader' builder); return;                 case 'f': DeserializeFalse(reader' builder); return;                 case '-': DeserializeNumber('-'' reader' builder); return;             }
Missing Default,Jil.DeserializeDynamic,DynamicDeserializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\DynamicDeserializer.cs,_DeserializeMemberThunkReader,The following switch statement is missing a default case: switch (c)              {                  case '"': DeserializeStringThunkReader(ref reader' builder); return;                  case '[': DeserializeArrayThunkReader(ref reader' builder); return;                  case '{': DeserializeObjectThunkReader(ref reader' builder); return;                  case 'n': DeserializeNullThunkReader(ref reader' builder); return;                  case 't': DeserializeTrueThunkReader(ref reader' builder); return;                  case 'f': DeserializeFalseThunkReader(ref reader' builder); return;                  case '-': DeserializeNumberThunkReader('-'' ref reader' builder); return;              }
Missing Default,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,Put,The following switch statement is missing a default case: switch (Type)              {                  case JsonObjectType.Array: ArrayValue.Add(other); return;                  case JsonObjectType.ObjectMember:                      if (MemberPart1 == null)                      {                          MemberPart1 = other;                      }                      else                      {                          if (MemberPart2 == null)                          {                              MemberPart2 = other;                              try                              {                                  this.Parent.ObjectMembers.Add(MemberPart1.StringValue' MemberPart2);                              }                              catch (ArgumentException e)                              {                                  throw new DeserializationException($"Tried to add duplicate member \"{MemberPart1.StringValue}\" to an object"' e' false);                              }                          }                          else                          {                              throw new InvalidOperationException();                          }                      }                      return;              }
Missing Default,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,_InnerTryBinaryOperation,The following switch statement is missing a default case: switch(operand)              {                  case ExpressionType.And:                      if (!returnType.IsAssignableFrom(typeof(bool)))                      {                          result = null;                          return false;                      }                      if (Type == JsonObjectType.False)                      {                          result = false;                          return true;                      }                      if (Type == JsonObjectType.True)                      {                          result = (bool)rightHand;                          return true;                      }                      break;                    case ExpressionType.Or:                      if (!returnType.IsAssignableFrom(typeof(bool)))                      {                          result = null;                          return false;                      }                      if (Type == JsonObjectType.False)                      {                          result = (bool)rightHand;                          return true;                      }                      if (Type == JsonObjectType.True)                      {                          result = true;                          return true;                      }                      break;                    case ExpressionType.Add:                  case ExpressionType.AddChecked:                      if (!returnType.IsAssignableFrom(typeof(float)))                      {                          result = null;                          return false;                      }                      if(Type == JsonObjectType.Number || Type == JsonObjectType.FastNumber)                      {                          object lhsRef;                          if (InnerTryConvert(typeof(float)' out lhsRef))                          {                              var lhs = (float)lhsRef;                              var rhs = (float)rightHand;                                result = lhs + rhs;                              return true;                          }                      }                      break;                    case ExpressionType.Divide:                      if (!returnType.IsAssignableFrom(typeof(float)))                      {                          result = null;                          return false;                      }                      if(Type == JsonObjectType.Number || Type == JsonObjectType.FastNumber)                      {                          object lhsRef;                          if (InnerTryConvert(typeof(float)' out lhsRef))                          {                              var lhs = (float)lhsRef;                              var rhs = (float)rightHand;                                result = lhs / rhs;                              return true;                          }                      }                      break;                    case ExpressionType.Equal:                      if (!returnType.IsAssignableFrom(typeof(bool)))                      {                          result = null;                          return false;                      }                      if (object.ReferenceEquals(rightHand' null))                      {                          result = false;                          return true;                      }                      if (object.ReferenceEquals(this' rightHand))                      {                          result = true;                          return true;                      }                      if (Type == JsonObjectType.FastNumber || Type == JsonObjectType.Number)                      {                          object leftHand;                          if (InnerTryConvert(typeof(float)' out leftHand))                          {                              var rhs = (float)rightHand;                              var lhs = (float)leftHand;                                result = lhs == rhs;                              return true;                          }                      }                      if (Type == JsonObjectType.String)                      {                          object leftHand;                          if (InnerTryConvert(typeof(string)' out leftHand))                          {                              var rhs = (string)rightHand;                              var lhs = (string)leftHand;                                result = lhs == rhs;                              return true;                          }                      }                      if (Type == JsonObjectType.True)                      {                          result = (bool)rightHand;                          return true;                      }                      if (Type == JsonObjectType.False)                      {                          result = !(bool)rightHand;                          return true;                      }                      break;                    case ExpressionType.GreaterThan:                      if (!returnType.IsAssignableFrom(typeof(bool)))                      {                          result = null;                          return false;                      }                      if (Type == JsonObjectType.Number || Type == JsonObjectType.FastNumber)                      {                          object lhsRef;                          if (InnerTryConvert(typeof(float)' out lhsRef))                          {                              var lhs = (float)lhsRef;                              var rhs = (float)rightHand;                                result = lhs > rhs;                              return true;                          }                      }                      break;                    case ExpressionType.GreaterThanOrEqual:                      if (!returnType.IsAssignableFrom(typeof(bool)))                      {                          result = null;                          return false;                      }                      if (Type == JsonObjectType.Number || Type == JsonObjectType.FastNumber)                      {                          object lhsRef;                          if (InnerTryConvert(typeof(float)' out lhsRef))                          {                              var lhs = (float)lhsRef;                              var rhs = (float)rightHand;                                result = lhs >= rhs;                              return true;                          }                      }                      break;                    case ExpressionType.LessThan:                       if (!returnType.IsAssignableFrom(typeof(bool)))                      {                          result = null;                          return false;                      }                      if (Type == JsonObjectType.Number || Type == JsonObjectType.FastNumber)                      {                          object lhsRef;                          if (InnerTryConvert(typeof(float)' out lhsRef))                          {                              var lhs = (float)lhsRef;                              var rhs = (float)rightHand;                                result = lhs < rhs;                              return true;                          }                      }                      break;                    case ExpressionType.LessThanOrEqual:                       if (!returnType.IsAssignableFrom(typeof(bool)))                      {                          result = null;                          return false;                      }                      if (Type == JsonObjectType.Number || Type == JsonObjectType.FastNumber)                      {                          object lhsRef;                          if (InnerTryConvert(typeof(float)' out lhsRef))                          {                              var lhs = (float)lhsRef;                              var rhs = (float)rightHand;                                result = lhs <= rhs;                              return true;                          }                      }                      break;                    case ExpressionType.Multiply:                  case ExpressionType.MultiplyChecked:                      if (!returnType.IsAssignableFrom(typeof(float)))                      {                          result = null;                          return false;                      }                      if(Type == JsonObjectType.Number || Type == JsonObjectType.FastNumber)                      {                          object lhsRef;                          if (InnerTryConvert(typeof(float)' out lhsRef))                          {                              var lhs = (float)lhsRef;                              var rhs = (float)rightHand;                                result = lhs * rhs;                              return true;                          }                      }                      break;                    case ExpressionType.NotEqual:                      if (!returnType.IsAssignableFrom(typeof(bool)))                      {                          result = null;                          return false;                      }                      if (object.ReferenceEquals(rightHand' null))                      {                          result = true;                          return true;                      }                      if (object.ReferenceEquals(this' rightHand))                      {                          result = false;                          return true;                      }                      if (Type == JsonObjectType.FastNumber || Type == JsonObjectType.Number)                      {                          object leftHand;                          if (InnerTryConvert(typeof(float)' out leftHand))                          {                              var rhs = (float)rightHand;                              var lhs = (float)leftHand;                                result = lhs != rhs;                              return true;                          }                      }                      if (Type == JsonObjectType.String)                      {                          object leftHand;                          if (InnerTryConvert(typeof(string)' out leftHand))                          {                              var rhs = (string)rightHand;                              var lhs = (string)leftHand;                                result = lhs != rhs;                              return true;                          }                      }                      if (Type == JsonObjectType.True)                      {                          result = !(bool)rightHand;                          return true;                      }                      if (Type == JsonObjectType.False)                      {                          result = (bool)rightHand;                          return true;                      }                      break;                    case ExpressionType.Subtract:                  case ExpressionType.SubtractChecked:                      if (!returnType.IsAssignableFrom(typeof(float)))                      {                          result = null;                          return false;                      }                      if(Type == JsonObjectType.Number || Type == JsonObjectType.FastNumber)                      {                          object lhsRef;                          if (InnerTryConvert(typeof(float)' out lhsRef))                          {                              var lhs = (float)lhsRef;                              var rhs = (float)rightHand;                                result = lhs - rhs;                              return true;                          }                      }                      break;              }
Missing Default,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,_InnerTryUnaryOperation,The following switch statement is missing a default case: switch(operand)              {                  case ExpressionType.IsFalse:                      if(!returnType.IsAssignableFrom(typeof(bool)))                      {                          result = null;                          return false;                      }                      result = Type == JsonObjectType.False;                      return true;                                    case ExpressionType.IsTrue:                      if(!returnType.IsAssignableFrom(typeof(bool)))                      {                          result = null;                          return false;                      }                      result = Type == JsonObjectType.True;                      return true;                    case ExpressionType.UnaryPlus:                      if (Type == JsonObjectType.FastNumber || Type == JsonObjectType.Number)                      {                          return this.InnerTryConvert(returnType' out result);                      }                      break;                    case ExpressionType.NegateChecked:                  case ExpressionType.Negate:                      if (Type == JsonObjectType.FastNumber)                      {                          var negated =                               new JsonObject                              {                                  Type = JsonObjectType.FastNumber'                                    FastNumberNegative = !this.FastNumberNegative'                                  FastNumberPart1 = this.FastNumberPart1'                                  FastNumberPart2 = this.FastNumberPart2'                                  FastNumberPart2Length = this.FastNumberPart2Length'                                  FastNumberPart3 = this.FastNumberPart3                              };                            return negated.InnerTryConvert(returnType' out result);                      }                      if (Type == JsonObjectType.Number)                      {                          var negated =                              new JsonObject                              {                                  Type = JsonObjectType.Number'                                    NumberValue = -this.NumberValue                              };                            return negated.InnerTryConvert(returnType' out result);                      }                      break;                    case ExpressionType.Not:                      if (Type == JsonObjectType.True)                      {                          return JsonObject.False.InnerTryConvert(returnType' out result);                      }                      if (Type == JsonObjectType.False)                      {                          return JsonObject.True.InnerTryConvert(returnType' out result);                      }                      break;              }
Missing Default,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastDateTime,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat)                  {                      case DateTimeFormat.MillisecondsSinceUnixEpoch:                          dt = Methods.UnixEpoch + TimeSpan.FromMilliseconds(res);                          return true;                      case DateTimeFormat.SecondsSinceUnixEpoch:                          dt = Methods.UnixEpoch + TimeSpan.FromSeconds(res);                          return true;                  }
Missing Default,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastDateTime,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat)                  {                      case DateTimeFormat.MillisecondsSinceUnixEpoch:                          dt = Methods.UnixEpoch + TimeSpan.FromMilliseconds(res);                          return true;                      case DateTimeFormat.SecondsSinceUnixEpoch:                          dt = Methods.UnixEpoch + TimeSpan.FromSeconds(res);                          return true;                  }
Missing Default,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastDateTime,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat)                  {                      case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                          ret = Methods.ReadMicrosoftStyleDateTime(StringValue' out res);                          dt = res;                          return ret;                      case DateTimeFormat.ISO8601:                          ret = Methods.ReadISO8601DateTime(StringValue' out res);                          dt = res;                          return ret;                  }
Missing Default,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastDateTimeOffset,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat)                  {                      case DateTimeFormat.MillisecondsSinceUnixEpoch:                          dto = Methods.UnixEpoch + TimeSpan.FromMilliseconds(res);                          return true;                      case DateTimeFormat.SecondsSinceUnixEpoch:                          dto = Methods.UnixEpoch + TimeSpan.FromSeconds(res);                          return true;                  }
Missing Default,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastDateTimeOffset,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat)                  {                      case DateTimeFormat.MillisecondsSinceUnixEpoch:                          dto = Methods.UnixEpoch + TimeSpan.FromMilliseconds(res);                          return true;                      case DateTimeFormat.SecondsSinceUnixEpoch:                          dto = Methods.UnixEpoch + TimeSpan.FromSeconds(res);                          return true;                  }
Missing Default,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastDateTimeOffset,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat)                  {                      case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                          ret = Methods.ReadMicrosoftStyleDateTimeOffset(StringValue' out res);                          dto = res;                          return ret;                      case DateTimeFormat.ISO8601:                          ret = Methods.ReadISO8601DateTimeOffset(StringValue' out res);                          dto = res;                          return ret;                  }
Missing Default,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat)                  {                      case DateTimeFormat.MillisecondsSinceUnixEpoch:                          var msTicksDouble = res * TicksPerMillisecond;                          var msTicks = (long)msTicksDouble;                            if (msTicksDouble >= TimeSpan.MaxValue.Ticks)                          {                              msTicks = TimeSpan.MaxValue.Ticks;                          }                            if (msTicksDouble <= TimeSpan.MinValue.Ticks)                          {                              msTicks = TimeSpan.MinValue.Ticks;                          }                            ts = new TimeSpan(msTicks);                          return true;                      case DateTimeFormat.SecondsSinceUnixEpoch:                          var sTicksDouble = res * TicksPerSecond;                          var sTicks = (long)sTicksDouble;                            if (sTicksDouble >= TimeSpan.MaxValue.Ticks)                          {                              sTicks = TimeSpan.MaxValue.Ticks;                          }                            if (sTicksDouble <= TimeSpan.MinValue.Ticks)                          {                              sTicks = TimeSpan.MinValue.Ticks;                          }                            ts = new TimeSpan(sTicks);                          return true;                  }
Missing Default,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat)                  {                      case DateTimeFormat.MillisecondsSinceUnixEpoch:                          var msTicksDouble = res * TicksPerMillisecond;                          var msTicks = (long)msTicksDouble;                            if (msTicksDouble >= TimeSpan.MaxValue.Ticks)                          {                              msTicks = TimeSpan.MaxValue.Ticks;                          }                            if (msTicksDouble <= TimeSpan.MinValue.Ticks)                          {                              msTicks = TimeSpan.MinValue.Ticks;                          }                            ts = new TimeSpan(msTicks);                          return true;                      case DateTimeFormat.SecondsSinceUnixEpoch:                          var sTicksDouble = res * TicksPerSecond;                          var sTicks = (long)sTicksDouble;                            if (sTicksDouble >= TimeSpan.MaxValue.Ticks)                          {                              sTicks = TimeSpan.MaxValue.Ticks;                          }                            if (sTicksDouble <= TimeSpan.MinValue.Ticks)                          {                              sTicks = TimeSpan.MinValue.Ticks;                          }                            ts = new TimeSpan(sTicks);                          return true;                  }
Missing Default,Jil.DeserializeDynamic,JsonObject,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\JsonObject.cs,TryCastTimeSpan,The following switch statement is missing a default case: switch (Options.UseDateTimeFormat)                  {                      case DateTimeFormat.MicrosoftStyleMillisecondsSinceUnixEpoch:                          ret = Methods.ReadMicrosoftStyleTimeSpan(StringValue' out ts);                          return ret;                      case DateTimeFormat.ISO8601:                          ret = Methods.ReadISO8601TimeSpan(StringValue' out ts);                          return ret;                  }
Missing Default,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadEncodedStringWithBuffer,The following switch statement is missing a default case: switch (second)                     {                         case '"': buffer[ix] = '"'; ix++; continue;                         case '\\': buffer[ix] = '\\'; ix++; continue;                         case '/': buffer[ix] = '/'; ix++; continue;                         case 'b': buffer[ix] = '\b'; ix++; continue;                         case 'f': buffer[ix] = '\f'; ix++; continue;                         case 'n': buffer[ix] = '\n'; ix++; continue;                         case 'r': buffer[ix] = '\r'; ix++; continue;                         case 't': buffer[ix] = '\t'; ix++; continue;                     }
Missing Default,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadEncodedStringWithBuffer,The following switch statement is missing a default case: switch (second)                 {                     case '"': commonSb.Append('"'); continue;                     case '\\': commonSb.Append('\\'); continue;                     case '/': commonSb.Append('/'); continue;                     case 'b': commonSb.Append('\b'); continue;                     case 'f': commonSb.Append('\f'); continue;                     case 'n': commonSb.Append('\n'); continue;                     case 'r': commonSb.Append('\r'); continue;                     case 't': commonSb.Append('\t'); continue;                 }
Missing Default,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadEncodedStringWithBufferThunkReader,The following switch statement is missing a default case: switch (second)                      {                          case '"': buffer[ix] = '"'; ix++; continue;                          case '\\': buffer[ix] = '\\'; ix++; continue;                          case '/': buffer[ix] = '/'; ix++; continue;                          case 'b': buffer[ix] = '\b'; ix++; continue;                          case 'f': buffer[ix] = '\f'; ix++; continue;                          case 'n': buffer[ix] = '\n'; ix++; continue;                          case 'r': buffer[ix] = '\r'; ix++; continue;                          case 't': buffer[ix] = '\t'; ix++; continue;                      }
Missing Default,Jil.DeserializeDynamic,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\DeserializeDynamic\Methods.cs,ReadEncodedStringWithBufferThunkReader,The following switch statement is missing a default case: switch (second)                  {                      case '"': commonSb.Append('"'); continue;                      case '\\': commonSb.Append('\\'); continue;                      case '/': commonSb.Append('/'); continue;                      case 'b': commonSb.Append('\b'); continue;                      case 'f': commonSb.Append('\f'); continue;                      case 'n': commonSb.Append('\n'); continue;                      case 'r': commonSb.Append('\r'); continue;                      case 't': commonSb.Append('\t'); continue;                  }
Missing Default,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadChar,The following switch statement is missing a default case: switch (second)                 {                     case '"': continue;                     case '\\': continue;                     case '/': continue;                     case 'b': continue;                     case 'f': continue;                     case 'n': continue;                     case 'r': continue;                     case 't': continue;                 }
Missing Default,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedString,The following switch statement is missing a default case: switch (second)                 {                     case '"': commonSb.Append('"'); continue;                     case '\\': commonSb.Append('\\'); continue;                     case '/': commonSb.Append('/'); continue;                     case 'b': commonSb.Append('\b'); continue;                     case 'f': commonSb.Append('\f'); continue;                     case 'n': commonSb.Append('\n'); continue;                     case 'r': commonSb.Append('\r'); continue;                     case 't': commonSb.Append('\t'); continue;                 }
Missing Default,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithCharArray,The following switch statement is missing a default case: switch (second)                     {                         case '"': buffer[idx++] = '"'; continue;                         case '\\': buffer[idx++] = '\\'; continue;                         case '/': buffer[idx++] = '/'; continue;                         case 'b': buffer[idx++] = '\b'; continue;                         case 'f': buffer[idx++] = '\f'; continue;                         case 'n': buffer[idx++] = '\n'; continue;                         case 'r': buffer[idx++] = '\r'; continue;                         case 't': buffer[idx++] = '\t'; continue;                     }
Missing Default,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithBuffer,The following switch statement is missing a default case: switch (second)                     {                         case '"': buffer[ix] = '"'; ix++; continue;                         case '\\': buffer[ix] = '\\'; ix++; continue;                         case '/': buffer[ix] = '/'; ix++; continue;                         case 'b': buffer[ix] = '\b'; ix++; continue;                         case 'f': buffer[ix] = '\f'; ix++; continue;                         case 'n': buffer[ix] = '\n'; ix++; continue;                         case 'r': buffer[ix] = '\r'; ix++; continue;                         case 't': buffer[ix] = '\t'; ix++; continue;                     }
Missing Default,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithBuffer,The following switch statement is missing a default case: switch (second)                 {                     case '"': commonSb.Append('"'); continue;                     case '\\': commonSb.Append('\\'); continue;                     case '/': commonSb.Append('/'); continue;                     case 'b': commonSb.Append('\b'); continue;                     case 'f': commonSb.Append('\f'); continue;                     case 'n': commonSb.Append('\n'); continue;                     case 'r': commonSb.Append('\r'); continue;                     case 't': commonSb.Append('\t'); continue;                 }
Missing Default,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedChar,The following switch statement is missing a default case: switch (second)             {                 case '"': return '"';                 case '\\': return '\\';                 case '/': return '/';                 case 'b': return '\b';                 case 'f': return '\f';                 case 'n': return '\n';                 case 'r': return '\r';                 case 't': return '\t';             }
Missing Default,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedCharThunkReader,The following switch statement is missing a default case: switch (second)             {                 case '"': return '"';                 case '\\': return '\\';                 case '/': return '/';                 case 'b': return '\b';                 case 'f': return '\f';                 case 'n': return '\n';                 case 'r': return '\r';                 case 't': return '\t';             }
Missing Default,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithCharArrayThunkReader,The following switch statement is missing a default case: switch (second)                     {                         case '"': buffer[idx++] = '"'; continue;                         case '\\': buffer[idx++] = '\\'; continue;                         case '/': buffer[idx++] = '/'; continue;                         case 'b': buffer[idx++] = '\b'; continue;                         case 'f': buffer[idx++] = '\f'; continue;                         case 'n': buffer[idx++] = '\n'; continue;                         case 'r': buffer[idx++] = '\r'; continue;                         case 't': buffer[idx++] = '\t'; continue;                     }
Missing Default,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithBufferThunkReader,The following switch statement is missing a default case: switch (second)                     {                         case '"': buffer[ix] = '"'; ix++; continue;                         case '\\': buffer[ix] = '\\'; ix++; continue;                         case '/': buffer[ix] = '/'; ix++; continue;                         case 'b': buffer[ix] = '\b'; ix++; continue;                         case 'f': buffer[ix] = '\f'; ix++; continue;                         case 'n': buffer[ix] = '\n'; ix++; continue;                         case 'r': buffer[ix] = '\r'; ix++; continue;                         case 't': buffer[ix] = '\t'; ix++; continue;                     }
Missing Default,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringWithBufferThunkReader,The following switch statement is missing a default case: switch (second)                 {                     case '"': commonSb.Append('"'); continue;                     case '\\': commonSb.Append('\\'); continue;                     case '/': commonSb.Append('/'); continue;                     case 'b': commonSb.Append('\b'); continue;                     case 'f': commonSb.Append('\f'); continue;                     case 'n': commonSb.Append('\n'); continue;                     case 'r': commonSb.Append('\r'); continue;                     case 't': commonSb.Append('\t'); continue;                 }
Missing Default,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,_ReadEncodedStringThunkReader,The following switch statement is missing a default case: switch (second)                 {                     case '"': commonSb.Append('"'); continue;                     case '\\': commonSb.Append('\\'); continue;                     case '/': commonSb.Append('/'); continue;                     case 'b': commonSb.Append('\b'); continue;                     case 'f': commonSb.Append('\f'); continue;                     case 'n': commonSb.Append('\n'); continue;                     case 'r': commonSb.Append('\r'); continue;                     case 't': commonSb.Append('\t'); continue;                 }
Missing Default,Jil.Deserialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Deserialize\Methods.cs,SkipEncodedStringWithLeadCharThunkReader,The following switch statement is missing a default case: switch (second)                 {                     case '"': continue;                     case '\\': continue;                     case '/': continue;                     case 'b': continue;                     case 'f': continue;                     case 'n': continue;                     case 'r': continue;                     case 't': continue;                 }
Missing Default,Jil.SerializeDynamic,DynamicSerializer,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\SerializeDynamic\DynamicSerializer.cs,LineBreakAndIndent,The following switch statement is missing a default case: switch(depth){                 case 0: return;                 case 1: stream.Write(' '); return;                 case 2: stream.Write("  "); return;                 case 3: stream.Write("   "); return;                 case 4: stream.Write("    "); return;                 case 5: stream.Write("     "); return;                 case 6: stream.Write("      "); return;                 case 7: stream.Write("       "); return;                 case 8: stream.Write("        "); return;                 case 9: stream.Write("         "); return;                 case 10: stream.Write("          "); return;             }
Missing Default,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following switch statement is missing a default case: switch (dt.DayOfWeek)              {                  case DayOfWeek.Sunday: writer.Write("Sun' "); break;                  case DayOfWeek.Monday: writer.Write("Mon' "); break;                  case DayOfWeek.Tuesday: writer.Write("Tue' "); break;                  case DayOfWeek.Wednesday: writer.Write("Wed' "); break;                  case DayOfWeek.Thursday: writer.Write("Thu' "); break;                  case DayOfWeek.Friday: writer.Write("Fri' "); break;                  case DayOfWeek.Saturday: writer.Write("Sat' "); break;              }
Missing Default,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123,The following switch statement is missing a default case: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
Missing Default,Jil.Serialize,Methods,D:\research\architectureSmells\repos\kevin-montrose_Jil\Jil\Serialize\Methods.cs,_CustomRFC1123_ThunkWriter,The following switch statement is missing a default case: switch (dt.Month)              {                  case 1: writer.Write("Jan "); break;                  case 2: writer.Write("Feb "); break;                  case 3: writer.Write("Mar "); break;                  case 4: writer.Write("Apr "); break;                  case 5: writer.Write("May "); break;                  case 6: writer.Write("Jun "); break;                  case 7: writer.Write("Jul "); break;                  case 8: writer.Write("Aug "); break;                  case 9: writer.Write("Sep "); break;                  case 10: writer.Write("Oct "); break;                  case 11: writer.Write("Nov "); break;                  case 12: writer.Write("Dec "); break;              }
