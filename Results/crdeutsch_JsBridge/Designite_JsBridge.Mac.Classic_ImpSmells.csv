Implementation smell,Namespace,Class,File,Method,Description
Complex Method,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,EscapeToJavascriptString,Cyclomatic complexity of the method is 11
Complex Method,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseObject,Cyclomatic complexity of the method is 8
Complex Method,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseValue,Cyclomatic complexity of the method is 12
Complex Method,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,Cyclomatic complexity of the method is 21
Complex Method,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 24
Complex Method,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,SerializeValue,Cyclomatic complexity of the method is 9
Complex Method,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,SerializeString,Cyclomatic complexity of the method is 9
Complex Method,cdeutsch,PocoJsonSerializerStrategy,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,DeserializeObject,Cyclomatic complexity of the method is 21
Complex Method,cdeutsch,AppProtocolHandler,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\JsBridge.cs,StartLoading,Cyclomatic complexity of the method is 12
Long Statement,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The length of the statement  "					if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 132.
Long Statement,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The length of the statement  "							if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) { " is 168.
Long Statement,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseNumber,The length of the statement  "	if (str.IndexOf ("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf ("e"' StringComparison.OrdinalIgnoreCase) != -1) { " is 129.
Long Statement,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseNumber,The length of the statement  "		success = double.TryParse (new string (json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 125.
Long Statement,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseNumber,The length of the statement  "		success = long.TryParse (new string (json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The length of the statement  "		if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') { " is 134.
Long Statement,cdeutsch,PocoJsonSerializerStrategy,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,DeserializeObject,The length of the statement  "		if (!string.IsNullOrEmpty (str) && (type == typeof(DateTime) || (ReflectionUtils.IsNullableType (type) && Nullable.GetUnderlyingType (type) == typeof(DateTime)))) " is 162.
Long Statement,cdeutsch,PocoJsonSerializerStrategy,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,DeserializeObject,The length of the statement  "			obj = DateTime.ParseExact (str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 144.
Long Statement,cdeutsch,PocoJsonSerializerStrategy,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,DeserializeObject,The length of the statement  "		                    type == typeof(int) || type == typeof(long) || type == typeof(double) ||type == typeof(float) || type == typeof(bool) || type == typeof(decimal) ||type == typeof(byte) || type == typeof(short)" is 192.
Long Statement,cdeutsch,JsBridge,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\JsBridge.cs,RemoveEventListener,The length of the statement  "		if (source == ee.WebView && string.Compare (EventName' ee.EventName' StringComparison.InvariantCultureIgnoreCase) == 0 && ee.Event == Event) { " is 142.
Long Statement,cdeutsch,JsBridge,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\JsBridge.cs,JsEventFired,The length of the statement  "	foreach (var ee in EventListeners.Where (oo => string.Compare (oo.EventName' feData.Name' StringComparison.InvariantCultureIgnoreCase) == 0)) { " is 143.
Long Statement,cdeutsch,AppProtocolHandler,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\JsBridge.cs,StartLoading,The length of the statement  "	Client.FailedWithError (this' NSError.FromDomain (new NSString ("AppProtocolHandler")' Convert.ToInt32 (NSUrlError.ResourceUnavailable))); " is 138.
Long Statement,Reflection,ReflectionUtils,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,IsTypeGenericeCollectionInterface,The length of the statement  "	return (genericDefinition == typeof(IList<>) || genericDefinition == typeof(ICollection<>) || genericDefinition == typeof(IEnumerable<>)); " is 138.
Long Statement,Reflection,ReflectionUtils,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ToNullableType,The length of the statement  "	return obj == null ? null : Convert.ChangeType (obj' Nullable.GetUnderlyingType (nullableType)' CultureInfo.InvariantCulture); " is 126.
Long Statement,Reflection,CacheResolver,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,GetNewInstance,The length of the statement  "                    ConstructorInfo constructorInfo = type.GetConstructor(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' Type.EmptyTypes' null);" is 153.
Long Statement,Reflection,CacheResolver,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,GetNewInstance,The length of the statement  "	ConstructorInfo constructorInfo = type.GetConstructor (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' Type.EmptyTypes' null); " is 154.
Long Statement,Reflection,CacheResolver,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,CreateGetHandler,The length of the statement  "                DynamicMethod dynamicGet = CreateDynamicMethod("Get" + fieldInfo.Name' fieldInfo.DeclaringType' new Type[] { typeof(object) }' fieldInfo.DeclaringType);" is 152.
Long Statement,Reflection,CacheResolver,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,CreateSetHandler,The length of the statement  "                DynamicMethod dynamicSet = CreateDynamicMethod("Set" + fieldInfo.Name' null' new Type[] { typeof(object)' typeof(object) }' fieldInfo.DeclaringType);" is 149.
Long Statement,Reflection,CacheResolver,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,CreateGetHandler,The length of the statement  "                DynamicMethod dynamicGet = CreateDynamicMethod("Get" + propertyInfo.Name' propertyInfo.DeclaringType' new Type[] { typeof(object) }' propertyInfo.DeclaringType);" is 161.
Long Statement,Reflection,CacheResolver,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,CreateSetHandler,The length of the statement  "                DynamicMethod dynamicSet = CreateDynamicMethod("Set" + propertyInfo.Name' null' new Type[] { typeof(object)' typeof(object) }' propertyInfo.DeclaringType);" is 155.
Complex Conditional,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The conditional expression  "json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e'"  is complex.
Complex Conditional,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The conditional expression  "json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e'"  is complex.
Complex Conditional,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The conditional expression  "json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l'"  is complex.
Complex Conditional,cdeutsch,PocoJsonSerializerStrategy,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,DeserializeObject,The conditional expression  "!string.IsNullOrEmpty (str) && (type == typeof(DateTime) || (ReflectionUtils.IsNullableType (type) && Nullable.GetUnderlyingType (type) == typeof(DateTime)))"  is complex.
Complex Conditional,cdeutsch,PocoJsonSerializerStrategy,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,DeserializeObject,The conditional expression  "(value is long && type == typeof(long)) || (value is double && type == typeof(double))"  is complex.
Complex Conditional,cdeutsch,PocoJsonSerializerStrategy,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,DeserializeObject,The conditional expression  "(value is double && type != typeof(double)) || (value is long && type != typeof(long))"  is complex.
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length;) {  	c = jsonString [i++];  	if (c == '\\') {  		int remainingLength = jsonString.Length - i;  		if (remainingLength >= 2) {  			char lookahead = jsonString [i];  			if (lookahead == '\\') {  				sb.Append ('\\');  				++i;  			} else if (lookahead == '"') {  				sb.Append ("\"");  				++i;  			} else if (lookahead == 't') {  				sb.Append ('\t');  				++i;  			} else if (lookahead == 'b') {  				sb.Append ('\b');  				++i;  			} else if (lookahead == 'n') {  				sb.Append ('\n');  				++i;  			} else if (lookahead == 'r') {  				sb.Append ('\r');  				++i;  			}  		}  	} else {  		sb.Append (c);  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: if (c == '\\') {  	int remainingLength = jsonString.Length - i;  	if (remainingLength >= 2) {  		char lookahead = jsonString [i];  		if (lookahead == '\\') {  			sb.Append ('\\');  			++i;  		} else if (lookahead == '"') {  			sb.Append ("\"");  			++i;  		} else if (lookahead == 't') {  			sb.Append ('\t');  			++i;  		} else if (lookahead == 'b') {  			sb.Append ('\b');  			++i;  		} else if (lookahead == 'n') {  			sb.Append ('\n');  			++i;  		} else if (lookahead == 'r') {  			sb.Append ('\r');  			++i;  		}  	}  } else {  	sb.Append (c);  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: if (remainingLength >= 2) {  	char lookahead = jsonString [i];  	if (lookahead == '\\') {  		sb.Append ('\\');  		++i;  	} else if (lookahead == '"') {  		sb.Append ("\"");  		++i;  	} else if (lookahead == 't') {  		sb.Append ('\t');  		++i;  	} else if (lookahead == 'b') {  		sb.Append ('\b');  		++i;  	} else if (lookahead == 'n') {  		sb.Append ('\n');  		++i;  	} else if (lookahead == 'r') {  		sb.Append ('\r');  		++i;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT || WINDOWS_PHONE  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT || WINDOWS_PHONE  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT || WINDOWS_PHONE  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT || WINDOWS_PHONE  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT || WINDOWS_PHONE  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT || WINDOWS_PHONE  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT || WINDOWS_PHONE  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT || WINDOWS_PHONE  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	} else if (c == '\\') {  		if (index == json.Length)  			break;  		c = json [index++];  		if (c == '"')  			s.Append ('"');  		else if (c == '\\')  			s.Append ('\\');  		else if (c == '/')  			s.Append ('/');  		else if (c == 'b')  			s.Append ('\b');  		else if (c == 'f')  			s.Append ('\f');  		else if (c == 'n')  			s.Append ('\n');  		else if (c == 'r')  			s.Append ('\r');  		else if (c == 't')  			s.Append ('\t');  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  					return "";  				// convert the integer codepoint to a unicode char and add to string  				if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  				 {  					index += 4;  					// skip 4 chars  					remainingLength = json.Length - index;  					if (remainingLength >= 6) {  						uint lowCodePoint;  						if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  							if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  							 {  								s.Append ((char)codePoint);  								s.Append ((char)lowCodePoint);  								index += 6;  								// skip 6 chars  								continue;  							}  						}  					}  					success = false;  					// invalid surrogate pair  					return "";  				}  				#if SILVERLIGHT || WINDOWS_PHONE  				                            s.Append(ConvertFromUtf32((int)codePoint)); #else  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				#endif  				// skip 4 chars  				index += 4;  			} else  				break;  		}  	} else  		s.Append (c);  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  } else if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length)  		break;  	c = json [index++];  	if (c == '"')  		s.Append ('"');  	else if (c == '\\')  		s.Append ('\\');  	else if (c == '/')  		s.Append ('/');  	else if (c == 'b')  		s.Append ('\b');  	else if (c == 'f')  		s.Append ('\f');  	else if (c == 'n')  		s.Append ('\n');  	else if (c == 'r')  		s.Append ('\r');  	else if (c == 't')  		s.Append ('\t');  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  				return "";  			// convert the integer codepoint to a unicode char and add to string  			if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  			 {  				index += 4;  				// skip 4 chars  				remainingLength = json.Length - index;  				if (remainingLength >= 6) {  					uint lowCodePoint;  					if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  						if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  						 {  							s.Append ((char)codePoint);  							s.Append ((char)lowCodePoint);  							index += 6;  							// skip 6 chars  							continue;  						}  					}  				}  				success = false;  				// invalid surrogate pair  				return "";  			}  			#if SILVERLIGHT || WINDOWS_PHONE  			                            s.Append(ConvertFromUtf32((int)codePoint)); #else  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			#endif  			// skip 4 chars  			index += 4;  		} else  			break;  	}  } else  	s.Append (c);  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '"')  	s.Append ('"');  else if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '\\')  	s.Append ('\\');  else if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == '/')  	s.Append ('/');  else if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'b')  	s.Append ('\b');  else if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'f')  	s.Append ('\f');  else if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'n')  	s.Append ('\n');  else if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'r')  	s.Append ('\r');  else if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 't')  	s.Append ('\t');  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  			return "";  		// convert the integer codepoint to a unicode char and add to string  		if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  		 {  			index += 4;  			// skip 4 chars  			remainingLength = json.Length - index;  			if (remainingLength >= 6) {  				uint lowCodePoint;  				if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  					if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  					 {  						s.Append ((char)codePoint);  						s.Append ((char)lowCodePoint);  						index += 6;  						// skip 6 chars  						continue;  					}  				}  			}  			success = false;  			// invalid surrogate pair  			return "";  		}  		#if SILVERLIGHT || WINDOWS_PHONE  		                            s.Append(ConvertFromUtf32((int)codePoint)); #else  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		#endif  		// skip 4 chars  		index += 4;  	} else  		break;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT || WINDOWS_PHONE  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT || WINDOWS_PHONE  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT || WINDOWS_PHONE  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT || WINDOWS_PHONE  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT || WINDOWS_PHONE  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT || WINDOWS_PHONE  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT || WINDOWS_PHONE  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT || WINDOWS_PHONE  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  		return "";  	// convert the integer codepoint to a unicode char and add to string  	if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate  	 {  		index += 4;  		// skip 4 chars  		remainingLength = json.Length - index;  		if (remainingLength >= 6) {  			uint lowCodePoint;  			if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  				if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  				 {  					s.Append ((char)codePoint);  					s.Append ((char)lowCodePoint);  					index += 6;  					// skip 6 chars  					continue;  				}  			}  		}  		success = false;  		// invalid surrogate pair  		return "";  	}  	#if SILVERLIGHT || WINDOWS_PHONE  	                            s.Append(ConvertFromUtf32((int)codePoint)); #else  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	#endif  	// skip 4 chars  	index += 4;  } else  	break;  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))  	return "";  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate   {  	index += 4;  	// skip 4 chars  	remainingLength = json.Length - index;  	if (remainingLength >= 6) {  		uint lowCodePoint;  		if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  			if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  			 {  				s.Append ((char)codePoint);  				s.Append ((char)lowCodePoint);  				index += 6;  				// skip 6 chars  				continue;  			}  		}  	}  	success = false;  	// invalid surrogate pair  	return "";  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate   {  	index += 4;  	// skip 4 chars  	remainingLength = json.Length - index;  	if (remainingLength >= 6) {  		uint lowCodePoint;  		if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  			if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  			 {  				s.Append ((char)codePoint);  				s.Append ((char)lowCodePoint);  				index += 6;  				// skip 6 chars  				continue;  			}  		}  	}  	success = false;  	// invalid surrogate pair  	return "";  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate   {  	index += 4;  	// skip 4 chars  	remainingLength = json.Length - index;  	if (remainingLength >= 6) {  		uint lowCodePoint;  		if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  			if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  			 {  				s.Append ((char)codePoint);  				s.Append ((char)lowCodePoint);  				index += 6;  				// skip 6 chars  				continue;  			}  		}  	}  	success = false;  	// invalid surrogate pair  	return "";  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate   {  	index += 4;  	// skip 4 chars  	remainingLength = json.Length - index;  	if (remainingLength >= 6) {  		uint lowCodePoint;  		if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  			if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  			 {  				s.Append ((char)codePoint);  				s.Append ((char)lowCodePoint);  				index += 6;  				// skip 6 chars  				continue;  			}  		}  	}  	success = false;  	// invalid surrogate pair  	return "";  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate   {  	index += 4;  	// skip 4 chars  	remainingLength = json.Length - index;  	if (remainingLength >= 6) {  		uint lowCodePoint;  		if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  			if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  			 {  				s.Append ((char)codePoint);  				s.Append ((char)lowCodePoint);  				index += 6;  				// skip 6 chars  				continue;  			}  		}  	}  	success = false;  	// invalid surrogate pair  	return "";  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (0xD800 <= codePoint && codePoint <= 0xDBFF)// if high surrogate   {  	index += 4;  	// skip 4 chars  	remainingLength = json.Length - index;  	if (remainingLength >= 6) {  		uint lowCodePoint;  		if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  			if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  			 {  				s.Append ((char)codePoint);  				s.Append ((char)lowCodePoint);  				index += 6;  				// skip 6 chars  				continue;  			}  		}  	}  	success = false;  	// invalid surrogate pair  	return "";  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: index += 4;  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 6) {  	uint lowCodePoint;  	if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  		if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  		 {  			s.Append ((char)codePoint);  			s.Append ((char)lowCodePoint);  			index += 6;  			// skip 6 chars  			continue;  		}  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 6) {  	uint lowCodePoint;  	if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  		if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  		 {  			s.Append ((char)codePoint);  			s.Append ((char)lowCodePoint);  			index += 6;  			// skip 6 chars  			continue;  		}  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 6) {  	uint lowCodePoint;  	if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  		if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  		 {  			s.Append ((char)codePoint);  			s.Append ((char)lowCodePoint);  			index += 6;  			// skip 6 chars  			continue;  		}  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 6) {  	uint lowCodePoint;  	if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  		if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  		 {  			s.Append ((char)codePoint);  			s.Append ((char)lowCodePoint);  			index += 6;  			// skip 6 chars  			continue;  		}  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 6) {  	uint lowCodePoint;  	if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  		if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  		 {  			s.Append ((char)codePoint);  			s.Append ((char)lowCodePoint);  			index += 6;  			// skip 6 chars  			continue;  		}  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  	if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  	 {  		s.Append ((char)codePoint);  		s.Append ((char)lowCodePoint);  		index += 6;  		// skip 6 chars  		continue;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  	if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  	 {  		s.Append ((char)codePoint);  		s.Append ((char)lowCodePoint);  		index += 6;  		// skip 6 chars  		continue;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  	if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  	 {  		s.Append ((char)codePoint);  		s.Append ((char)lowCodePoint);  		index += 6;  		// skip 6 chars  		continue;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (new string (json' index' 2) == "\\u" && UInt32.TryParse (new string (json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) {  	if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate  	 {  		s.Append ((char)codePoint);  		s.Append ((char)lowCodePoint);  		index += 6;  		// skip 6 chars  		continue;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)// if low surrogate   {  	s.Append ((char)codePoint);  	s.Append ((char)lowCodePoint);  	index += 6;  	// skip 6 chars  	continue;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: index += 6;  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseString,The following statement contains a magic number: index += 4;  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return TOKEN_FALSE;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return TOKEN_FALSE;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return TOKEN_FALSE;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return TOKEN_FALSE;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return TOKEN_FALSE;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return TOKEN_FALSE;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return TOKEN_FALSE;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return TOKEN_FALSE;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return TOKEN_FALSE;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: index += 5;  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return TOKEN_TRUE;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return TOKEN_TRUE;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return TOKEN_TRUE;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return TOKEN_TRUE;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return TOKEN_TRUE;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return TOKEN_TRUE;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return TOKEN_TRUE;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: index += 4;  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return TOKEN_NULL;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return TOKEN_NULL;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return TOKEN_NULL;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return TOKEN_NULL;  	}  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return TOKEN_NULL;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return TOKEN_NULL;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return TOKEN_NULL;  }  
Magic Number,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following statement contains a magic number: index += 4;  
Magic Number,cdeutsch,AppProtocolHandler,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\JsBridge.cs,StartLoading,The following statement contains a magic number: if (parameters.Length > 2) {  	var callbackToks = parameters [0].Split ('=');  	var dataToks = parameters [1].Split ('=');  	if (callbackToks.Length > 1 && dataToks.Length > 1) {  		// Determine what to do here based on the url   		var appUrl = new AppUrl () {  			Module = Request.Url.Host'  			Method = Request.Url.RelativePath.Substring (1)'  			JsonData = System.Web.HttpUtility.UrlDecode (dataToks [1])  		};  		// this is a request from mt.js so handle it.  		switch (appUrl.Module.ToLower ()) {  		case "app":  			if (string.Equals (appUrl.Method' "fireEvent"' StringComparison.InvariantCultureIgnoreCase)) {  				// fire this event.  				var feData = appUrl.DeserializeFireEvent ();  				// find event listeners for this event and trigger it.  				JsBridge.JsEventFired (feData);  			}  			break;  		case "api":  			if (string.Equals (appUrl.Method' "log"' StringComparison.InvariantCultureIgnoreCase)) {  				// log output.  				var lData = appUrl.DeserializeLog ();  				#if DEBUG  				Console.WriteLine ("BROWSER:[" + lData.Level + "]: " + lData.Message);  				#endif  			}  			break;  		}  		// indicate success.  		var data = NSData.FromString (callbackToks [1] + "({'success' : '1'});");  		using (var response = new NSUrlResponse (Request.Url' "text/javascript"' Convert.ToInt32 (data.Length)' "utf-8")) {  			Client.ReceivedResponse (this' response' NSUrlCacheStoragePolicy.NotAllowed);  			Client.DataLoaded (this' data);  			Client.FinishedLoading (this);  		}  		return;  	}  }  
Missing Default,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead (json' index)) {  case TOKEN_STRING:  	return ParseString (json' ref index' ref success);  case TOKEN_NUMBER:  	return ParseNumber (json' ref index' ref success);  case TOKEN_CURLY_OPEN:  	return ParseObject (json' ref index' ref success);  case TOKEN_SQUARED_OPEN:  	return ParseArray (json' ref index' ref success);  case TOKEN_TRUE:  	NextToken (json' ref index);  	return true;  case TOKEN_FALSE:  	NextToken (json' ref index);  	return false;  case TOKEN_NULL:  	NextToken (json' ref index);  	return null;  case TOKEN_NONE:  	break;  }  
Missing Default,cdeutsch,SimpleJson,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\libs\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c) {  case '{':  	return TOKEN_CURLY_OPEN;  case '}':  	return TOKEN_CURLY_CLOSE;  case '[':  	return TOKEN_SQUARED_OPEN;  case ']':  	return TOKEN_SQUARED_CLOSE;  case ''':  	return TOKEN_COMMA;  case '"':  	return TOKEN_STRING;  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  case '-':  	return TOKEN_NUMBER;  case ':':  	return TOKEN_COLON;  }  
Missing Default,cdeutsch,AppProtocolHandler,F:\newReposMay17\crdeutsch_JsBridge\JsBridge.Mac.Classic\..\JsBridge.iOS.Classic\JsBridge.cs,StartLoading,The following switch statement is missing a default case: switch (appUrl.Module.ToLower ()) {  case "app":  	if (string.Equals (appUrl.Method' "fireEvent"' StringComparison.InvariantCultureIgnoreCase)) {  		// fire this event.  		var feData = appUrl.DeserializeFireEvent ();  		// find event listeners for this event and trigger it.  		JsBridge.JsEventFired (feData);  	}  	break;  case "api":  	if (string.Equals (appUrl.Method' "log"' StringComparison.InvariantCultureIgnoreCase)) {  		// log output.  		var lData = appUrl.DeserializeLog ();  		#if DEBUG  		Console.WriteLine ("BROWSER:[" + lData.Level + "]: " + lData.Message);  		#endif  	}  	break;  }  
