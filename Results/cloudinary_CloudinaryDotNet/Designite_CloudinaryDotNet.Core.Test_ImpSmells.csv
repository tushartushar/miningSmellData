Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,CloudinaryDotNet.Test.Asset,AuthTokenTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\AuthTokenTest.cs,,The length of the parameter authTokenTestTransformationAsString is 35.
Long Statement,CloudinaryDotNet.Test.Parameters,ParametersTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Parameters\ParametersTest.cs,TestArchiveParamsCheck,The length of the statement  "            Assert.Throws<ArgumentException>(new ArchiveParams().Check' "Should require atleast on option specified: PublicIds' Tags or Prefixes"); " is 135.
Long Statement,CloudinaryDotNet.Test.Parameters,ParametersTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Parameters\ParametersTest.cs,TestDelDerivedResParamsCheck,The length of the statement  "            Assert.Throws<ArgumentException>(p.Check' "Should require at least on item in either DerivedResources or Tranformations specified"); " is 132.
Long Statement,CloudinaryDotNet.Test.Configuration,ConfigurationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Configuration\ConfigurationTest.cs,TestJsConfigFull,The length of the statement  "            var config = m_cloudinary.GetCloudinaryJsConfig(true' @"https://raw.github.com/cloudinary/cloudinary_js/master/js").ToString(); " is 127.
Long Statement,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestOverlayError1,The length of the statement  "            Assert.That(() => transformation.ToString()' Throws.TypeOf<ArgumentException>()' "Must supply fontFamily for text in overlay"); " is 127.
Long Statement,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestOverlayError2,The length of the statement  "            Assert.That(() => transformation.ToString()' Throws.TypeOf<ArgumentException>()' "Must supply publicId for non-text underlay"); " is 127.
Long Statement,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestBaseTransformationArray,The length of the statement  "            var transformation = new Transformation().X(100).Y(100).Width(200).Crop("fill").Chain().Radius(10).Chain().Crop("crop").Width(100); " is 131.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,CustomFunctionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\CustomFunctionTest.cs,TestCustomFunction,The length of the statement  "                "fn_remote:aHR0cHM6Ly9kZjM0cmE0YS5leGVjdXRlLWFwaS51cy13ZXN0LTIuYW1hem9uYXdzLmNvbS9kZWZhdWx0L2Nsb3VkaW5hcnlGdW5jdGlvbg=="' " is 121.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,CustomFunctionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\CustomFunctionTest.cs,TestCustomPreFunction,The length of the statement  "                "fn_pre:remote:aHR0cHM6Ly9kZjM0cmE0YS5leGVjdXRlLWFwaS51cy13ZXN0LTIuYW1hem9uYXdzLmNvbS9kZWZhdWx0L2Nsb3VkaW5hcnlGdW5jdGlvbg=="' " is 125.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,WithLiteral,The length of the statement  "            Assert.AreEqual(sTransform.IndexOf("if")' 0' "should include the if parameter as the first component in the transformation string"); " is 132.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,WithLiteral,The length of the statement  "            Assert.AreEqual(sTransform.IndexOf("if")' 0' "should include the if parameter as the first component in the transformation string"); " is 132.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,WithLiteral,The length of the statement  "            Assert.AreEqual("if_w_lt_200'c_fill'h_120'w_80/if_w_gt_400'c_fit'h_150'w_150/e_sepia"' sTransform' "should allow multiple conditions when chaining transformations"); " is 165.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf,The length of the statement  "            Assert.AreEqual("if_w_lt_200/c_fill'e_sharpen'h_120'w_80/e_brightness:50/co_red'e_shadow/if_end"' sTransform' "should be proper transformation string"); " is 152.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,IfElse,The length of the statement  "            Assert.AreEqual("if_w_lt_200'c_fill'h_120'w_80/if_else'c_fill'h_90'w_100"' sTransform' "should support if_else with transformation parameters"); " is 144.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,IfElse,The length of the statement  "            Assert.AreEqual("if_w_lt_200/c_fill'h_120'w_80/if_else/c_fill'h_90'w_100"' sTransform' "should be proper transformation string"); " is 129.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The length of the statement  "            Assert.AreEqual("if_ar_gt_3:4'c_scale'w_100"' transformation.ToString()' "passing an operator and a value adds a condition"); " is 125.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The length of the statement  "            transformation = new Transformation().IfCondition().AspectRatio("gt"' "3:4").And().Width("gt"' 100).Then().Width(50).Crop("scale"); " is 131.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The length of the statement  "            Assert.AreEqual("if_ar_gt_3:4_and_w_gt_100'c_scale'w_50"' transformation.ToString()' "should chaining condition with `and`"); " is 125.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The length of the statement  "            transformation = new Transformation().IfCondition().AspectRatio("gt"' "3:4").And().Width("gt"' 100).Or().Width("gt"' 200).Then().Width(50).Crop("scale"); " is 153.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The length of the statement  "            Assert.AreEqual("if_ar_gt_3:4_and_w_gt_100_or_w_gt_200'c_scale'w_50"' transformation.ToString()' "should chain conditions with `or`"); " is 134.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The length of the statement  "            transformation = new Transformation().IfCondition().AspectRatio(">"' "3:4").And().Width("<="' 100).Or().Width("gt"' 200).Then().Width(50).Crop("scale"); " is 152.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The length of the statement  "            Assert.AreEqual("if_ar_gt_3:4_and_w_lte_100_or_w_gt_200'c_scale'w_50"' transformation.ToString()' "should translate operators"); " is 128.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The length of the statement  "            transformation = new Transformation().IfCondition().AspectRatio(">"' "3:4").And().Width("<="' 100).Or().Width(">"' 200).Then().Width(50).Crop("scale"); " is 151.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The length of the statement  "            Assert.AreEqual("if_ar_gt_3:4_and_w_lte_100_or_w_gt_200'c_scale'w_50"' transformation.ToString()' "should translate operators"); " is 128.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The length of the statement  "            transformation = new Transformation().IfCondition().AspectRatio(">="' "3:4").And().PageCount(">="' 100).Or().PageCount("!="' 0).Then().Width(50).Crop("scale"); " is 159.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The length of the statement  "            Assert.AreEqual("if_ar_gte_3:4_and_pc_gte_100_or_pc_ne_0'c_scale'w_50"' transformation.ToString()' "should translate operators"); " is 129.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The length of the statement  "            transformation = new Transformation().IfCondition().AspectRatio("gt"' "3:4").And().InitialHeight(">"' 100).And().InitialWidth("<"' 500).Then().Width(100).Crop("scale"); " is 168.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The length of the statement  "            Assert.AreEqual("if_ar_gt_3:4_and_ih_gt_100_and_iw_lt_500'c_scale'w_100"' transformation.ToString()' "passing an operator and a value adds a condition"); " is 153.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ShouldSupportAndTranslateOperators,The length of the statement  "                            .Then().Effect("grayscale").ToString()' "should support and translate operators:  '='' '!='' '<'' '>'' '<='' '>='' '&&'' '||'"); " is 128.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ShouldSupportAndTranslateOperators,The length of the statement  "            Assert.AreEqual(allOperators' new Transformation().IfCondition("w = 0 && height != 0 || aspectRatio < 0 and pageCount > 0 and faceCount <= 0 and width >= 0") " is 157.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf2,The length of the statement  "            var transformation = new Transformation().IfCondition().Width("gt"' 100).And().Width("lt"' 200).Then().Width(50).Crop("scale").EndIf(); " is 135.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf2,The length of the statement  "            Assert.AreEqual("if_w_gt_100_and_w_lt_200/c_scale'w_50/if_end"' transformation.ToString()' "should serialize to 'if_end'"); " is 123.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf2,The length of the statement  "            transformation = new Transformation().IfCondition().Width("gt"' 100).And().Width("lt"' 200).Then().Width(50).Crop("scale").EndIf(); " is 131.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf2,The length of the statement  "            Assert.AreEqual("if_w_gt_100_and_w_lt_200/c_scale'w_50/if_end"' transformation.ToString()' "force the if clause to be chained"); " is 128.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf2,The length of the statement  "            transformation = new Transformation().IfCondition().Width("gt"' 100).And().Width("lt"' 200).Then().Width(50).Crop("scale").IfElse().Width(100).Crop("crop").EndIf(); " is 164.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf2,The length of the statement  "            Assert.AreEqual("if_w_gt_100_and_w_lt_200/c_scale'w_50/if_else/c_crop'w_100/if_end"' transformation.ToString()' "force the if_else clause to be chained"); " is 154.
Long Statement,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestSupportStringInterpolation,The length of the statement  "            StringAssert.AreEqualIgnoringCase("c_scale'l_text:Arial_18:$(start)Hello%20$(name)$(ext)%252C%20%24%28no%20%29%20%24%28%20no%29$(end)"' t.ToString()); " is 150.
Long Statement,CloudinaryDotNet.Test.Asset,UrlBuilderTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlBuilderTest.cs,TestSecureNonAkamai,The length of the statement  "            string uri = m_api.UrlImgUp.Secure(true).PrivateCdn(true).SecureDistribution("something.cloudfront.net").BuildUrl("test"); " is 122.
Long Statement,CloudinaryDotNet.Test.Asset,UrlBuilderTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlBuilderTest.cs,TestSecureDistributionFromUrl,The length of the statement  "            CloudinaryDotNet.Cloudinary cloudinary = new CloudinaryDotNet.Cloudinary("cloudinary://a:b@test123/config.secure.distribution.com"); " is 132.
Long Statement,CloudinaryDotNet.Test.Asset,UrlBuilderTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlBuilderTest.cs,TestFolders,The length of the statement  "            Assert.AreEqual(TestConstants.DefaultImageUpPath + $"{DefaultVersionStr}/1/a{DefaultVersionStr}/{TestImageId}"' result); " is 120.
Long Statement,CloudinaryDotNet.Test.Asset,UrlBuilderTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlBuilderTest.cs,TestFetchLayerUrl,The length of the statement  "            var transformation = new Transformation().Overlay(new FetchLayer().Url("http://image.com/img/seatrade_supplier_logo.jpg")); " is 123.
Long Statement,CloudinaryDotNet.Test.Asset,UrlBuilderTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlBuilderTest.cs,TestFetchLayerUrl,The length of the statement  "            var uri = m_api.UrlImgFetch.Transform(transformation).BuildUrl("http://image.com/files/8813/5551/7470/cruise-ship.png"); " is 120.
Long Statement,CloudinaryDotNet.Test.Asset,UrlBuilderTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlBuilderTest.cs,TestFetchLayerUrl,The length of the statement  "            Assert.AreEqual(TestConstants.DefaultImageFetchPath + "l_fetch:aHR0cDovL2ltYWdlLmNvbS9pbWcvc2VhdHJhZGVfc3VwcGxpZXJfbG9nby5qcGc=/http://image.com/files/8813/5551/7470/cruise-ship.png"' uri); " is 189.
Long Statement,CloudinaryDotNet.Test.Asset,SignatureTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\SignatureTest.cs,TestSignParameters,The length of the statement  "            StringAssert.AreEqualIgnoringCase(m_api.SignParameters(paramsSetOne)' m_api.SignParameters(paramsSetTwo)' "The signatures are not equal."); " is 139.
Long Statement,CloudinaryDotNet.Test.Asset,SignatureTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\SignatureTest.cs,TestSignParameters,The length of the statement  "            StringAssert.AreNotEqualIgnoringCase(m_api.SignParameters(paramsSetOne)' m_api.SignParameters(paramsSetTwo)' "The signatures are equal."); " is 138.
Long Statement,CloudinaryDotNet.Test.Asset,UrlSuffixTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlSuffixTest.cs,TestDisallowUseRootPathIfNotImageUploadForFacebook,The length of the statement  "            Assert.That(() => m_api.UrlImgUp.UseRootPath(true).PrivateCdn(true).Action("facebook").BuildUrl("test")' Throws.TypeOf<NotSupportedException>()' "Root path only supported for image/upload!"); " is 191.
Long Statement,CloudinaryDotNet.Test.Asset,UrlSuffixTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlSuffixTest.cs,TestDisallowUseRootPathIfNotImageUploadForRaw,The length of the statement  "            Assert.That(() => m_api.UrlImgUp.UseRootPath(true).PrivateCdn(true).ResourceType("raw").BuildUrl("test")' Throws.TypeOf<NotSupportedException>()' "Root path only supported for image/upload!"); " is 192.
Long Statement,CloudinaryDotNet.Test.Asset,UrlSuffixTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlSuffixTest.cs,TestDisallowUrlSuffixInNonUploadTypes,The length of the statement  "            Assert.That(() => m_api.UrlImgUp.Suffix("hello").PrivateCdn(true).Action("facebook").BuildUrl("test")' Throws.TypeOf<NotSupportedException>()' "URL Suffix only supported for image/upload and raw/upload!"); " is 205.
Long Statement,CloudinaryDotNet.Test.Asset,UrlSuffixTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlSuffixTest.cs,TestDisallowUrlSuffixWithSlash,The length of the statement  "            Assert.That(() => m_api.UrlImgUp.Suffix("hello/world").PrivateCdn(true).BuildUrl("test")' Throws.TypeOf<ArgumentException>()' "Suffix should not include . or /!"); " is 163.
Long Statement,CloudinaryDotNet.Test.Asset,UrlSuffixTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlSuffixTest.cs,TestDisallowUrlSuffixWithDot,The length of the statement  "            Assert.That(() => m_api.UrlImgUp.Suffix("hello.world").PrivateCdn(true).BuildUrl("test")' Throws.TypeOf<ArgumentException>()' "Suffix should not include . or /!"); " is 163.
Long Statement,CloudinaryDotNet.Test.Asset,UrlSuffixTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlSuffixTest.cs,TestNotSignTheUrlSuffix,The length of the statement  "            actual = m_api.UrlImgUp.Format("jpg").PrivateCdn(true).Signed(true).Suffix("hello").Transform(new Transformation().Angle(0)).BuildUrl("test"); " is 142.
Long Statement,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestImageTag,The length of the statement  "            Assert.AreEqual("<img src=\"http://res.cloudinary.com/testcloud/image/upload/c_crop'h_101'w_100/test\" alt=\"my image\" width=\"100\" height=\"101\"/>"' result); " is 161.
Long Statement,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestResponsiveWidth,The length of the statement  "                    "<img alt=\"my image\" class=\"cld-responsive\" data-src=\"http://res.cloudinary.com/testcloud/image/upload/c_crop'h_0.9'w_0.9/c_limit'w_auto/test\"/>"' " is 152.
Long Statement,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestResponsiveWidth,The length of the statement  "            result = m_api.UrlImgUp.Transform(transformation).BuildImageTag("test"' new StringDictionary("alt=my image"' "class=extra")); " is 125.
Long Statement,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestResponsiveWidth,The length of the statement  "                    "<img alt=\"my image\" class=\"extra cld-responsive\" data-src=\"http://res.cloudinary.com/testcloud/image/upload/c_crop'h_0.9'w_0.9/c_limit'w_auto/test\"/>"' " is 158.
Long Statement,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestResponsiveWidth,The length of the statement  "            result = m_api.UrlImgUp.Transform(transformation).BuildImageTag("test"' new StringDictionary("alt=my image"' "responsive_placeholder=blank")); " is 142.
Long Statement,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestResponsiveWidth,The length of the statement  "                    "<img src=\"data:image/gif;base64'R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7\" alt=\"my image\" class=\"cld-responsive\" data-src=\"http://res.cloudinary.com/testcloud/image/upload/c_crop'w_auto/test\"/>"' " is 219.
Long Statement,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestResponsiveWidth,The length of the statement  "            result = m_api.UrlImgUp.Transform(transformation).BuildImageTag("test"' new StringDictionary("alt=my image"' "responsive_placeholder=other.gif")); " is 146.
Long Statement,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestResponsiveWidth,The length of the statement  "                    "<img src=\"other.gif\" alt=\"my image\" class=\"cld-responsive\" data-src=\"http://res.cloudinary.com/testcloud/image/upload/c_crop'w_auto/test\"/>"' " is 150.
Long Statement,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestImageTagAutoDpr,The length of the statement  "            Assert.AreEqual("<img width=\"100\" height=\"101\" class=\"cld-hidpi\" data-src=\"http://res.cloudinary.com/testcloud/image/upload/c_crop'dpr_auto'h_101'w_100/test\"/>"' result); " is 178.
Long Statement,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestImageTagNoParams,The length of the statement  "            Assert.AreEqual("<img src=\"http://res.cloudinary.com/testcloud/image/upload/c_crop'h_101'w_100/test\" width=\"100\" height=\"101\"/>"' result); " is 144.
Long Statement,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestImageTagParams,The length of the statement  "            var result = m_api.UrlImgUp.Transform(transformation).BuildImageTag("test"' "alt=my image name \"TestImg\""' "test=My image name is 'Test2'").ToString(); " is 153.
Long Statement,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestImageTagParams,The length of the statement  "            Assert.AreEqual("<img src=\"http://res.cloudinary.com/testcloud/image/upload/c_crop'h_101'w_100/test\" alt=\"my image name &quot;TestImg&quot;\" test=\"My image name is &#39;Test2&#39;\" width=\"100\" height=\"101\"/>"' result); " is 228.
Long Statement,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestDifferentHtmlDimensions,The length of the statement  "            Assert.AreEqual("<img src=\"http://res.cloudinary.com/testcloud/image/upload/h_101'w_100/test\" width=\"50\" height=\"51\"/>"' tag); " is 132.
Magic Number,CloudinaryDotNet.Test.Parameters,ParametersTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Parameters\ParametersTest.cs,UploadMappingParamsCheckTest,The following statement contains a magic number: var p = new UploadMappingParams { MaxResults = 1000 };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestAngle,The following statement contains a magic number: var transformation = new Transformation().Angle(12).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestOverlay,The following statement contains a magic number: transformation = new Transformation().Overlay("text:hello").Width(100).Height(100);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestOverlay,The following statement contains a magic number: transformation = new Transformation().Overlay("text:hello").Width(100).Height(100);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestOverlayHelpers,The following statement contains a magic number: var layerTests = new Dictionary<BaseLayer' string>              {                  { new Layer().PublicId("logo")' "logo" }'                  { new Layer().PublicId("folder/logo")' "folder:logo" }'                  { new Layer().PublicId("logo").Type("private")' "private:logo" }'                  { new Layer().PublicId("logo").Format("png")' "logo.png" }'                  { new Layer().ResourceType("video").PublicId("cat")' "video:cat" }'                  {                      new TextLayer()                          .Text("Hello World' Nice to meet you?")                          .FontFamily("Arial")                          .FontSize(18)'                      "text:Arial_18:Hello%20World%252C%20Nice%20to%20meet%20you%3F"                  }'                  {                      new TextLayer("Hello World?")                          .FontFamily("Arial")                          .FontSize(18)                          .FontWeight("bold")                          .FontStyle("italic")                          .LetterSpacing("4")                          .LineSpacing("3")'                      "text:Arial_18_bold_italic_letter_spacing_4_line_spacing_3:Hello%20World%3F"                  }'                  {                      new TextLayer("Hello World' Nice to meet you?")                          .FontFamily("Arial")                          .FontSize(18)                          .FontAntialiasing(FontAntialiasing.Best)                          .FontHinting(FontHinting.Medium)'                      "text:Arial_18_antialias_best_hinting_medium:Hello%20World%252C%20Nice%20to%20meet%20you%3F"                  }'                  { new SubtitlesLayer().PublicId("sample_sub_en.srt")' "subtitles:sample_sub_en.srt" }'                  {                      new SubtitlesLayer()                          .PublicId("sample_sub_he.srt")                          .FontFamily("Arial")                          .FontSize(40)'                      "subtitles:Arial_40:sample_sub_he.srt"                  }              };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestOverlayHelpers,The following statement contains a magic number: var layerTests = new Dictionary<BaseLayer' string>              {                  { new Layer().PublicId("logo")' "logo" }'                  { new Layer().PublicId("folder/logo")' "folder:logo" }'                  { new Layer().PublicId("logo").Type("private")' "private:logo" }'                  { new Layer().PublicId("logo").Format("png")' "logo.png" }'                  { new Layer().ResourceType("video").PublicId("cat")' "video:cat" }'                  {                      new TextLayer()                          .Text("Hello World' Nice to meet you?")                          .FontFamily("Arial")                          .FontSize(18)'                      "text:Arial_18:Hello%20World%252C%20Nice%20to%20meet%20you%3F"                  }'                  {                      new TextLayer("Hello World?")                          .FontFamily("Arial")                          .FontSize(18)                          .FontWeight("bold")                          .FontStyle("italic")                          .LetterSpacing("4")                          .LineSpacing("3")'                      "text:Arial_18_bold_italic_letter_spacing_4_line_spacing_3:Hello%20World%3F"                  }'                  {                      new TextLayer("Hello World' Nice to meet you?")                          .FontFamily("Arial")                          .FontSize(18)                          .FontAntialiasing(FontAntialiasing.Best)                          .FontHinting(FontHinting.Medium)'                      "text:Arial_18_antialias_best_hinting_medium:Hello%20World%252C%20Nice%20to%20meet%20you%3F"                  }'                  { new SubtitlesLayer().PublicId("sample_sub_en.srt")' "subtitles:sample_sub_en.srt" }'                  {                      new SubtitlesLayer()                          .PublicId("sample_sub_he.srt")                          .FontFamily("Arial")                          .FontSize(40)'                      "subtitles:Arial_40:sample_sub_he.srt"                  }              };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestOverlayHelpers,The following statement contains a magic number: var layerTests = new Dictionary<BaseLayer' string>              {                  { new Layer().PublicId("logo")' "logo" }'                  { new Layer().PublicId("folder/logo")' "folder:logo" }'                  { new Layer().PublicId("logo").Type("private")' "private:logo" }'                  { new Layer().PublicId("logo").Format("png")' "logo.png" }'                  { new Layer().ResourceType("video").PublicId("cat")' "video:cat" }'                  {                      new TextLayer()                          .Text("Hello World' Nice to meet you?")                          .FontFamily("Arial")                          .FontSize(18)'                      "text:Arial_18:Hello%20World%252C%20Nice%20to%20meet%20you%3F"                  }'                  {                      new TextLayer("Hello World?")                          .FontFamily("Arial")                          .FontSize(18)                          .FontWeight("bold")                          .FontStyle("italic")                          .LetterSpacing("4")                          .LineSpacing("3")'                      "text:Arial_18_bold_italic_letter_spacing_4_line_spacing_3:Hello%20World%3F"                  }'                  {                      new TextLayer("Hello World' Nice to meet you?")                          .FontFamily("Arial")                          .FontSize(18)                          .FontAntialiasing(FontAntialiasing.Best)                          .FontHinting(FontHinting.Medium)'                      "text:Arial_18_antialias_best_hinting_medium:Hello%20World%252C%20Nice%20to%20meet%20you%3F"                  }'                  { new SubtitlesLayer().PublicId("sample_sub_en.srt")' "subtitles:sample_sub_en.srt" }'                  {                      new SubtitlesLayer()                          .PublicId("sample_sub_he.srt")                          .FontFamily("Arial")                          .FontSize(40)'                      "subtitles:Arial_40:sample_sub_he.srt"                  }              };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestOverlayHelpers,The following statement contains a magic number: var layerTests = new Dictionary<BaseLayer' string>              {                  { new Layer().PublicId("logo")' "logo" }'                  { new Layer().PublicId("folder/logo")' "folder:logo" }'                  { new Layer().PublicId("logo").Type("private")' "private:logo" }'                  { new Layer().PublicId("logo").Format("png")' "logo.png" }'                  { new Layer().ResourceType("video").PublicId("cat")' "video:cat" }'                  {                      new TextLayer()                          .Text("Hello World' Nice to meet you?")                          .FontFamily("Arial")                          .FontSize(18)'                      "text:Arial_18:Hello%20World%252C%20Nice%20to%20meet%20you%3F"                  }'                  {                      new TextLayer("Hello World?")                          .FontFamily("Arial")                          .FontSize(18)                          .FontWeight("bold")                          .FontStyle("italic")                          .LetterSpacing("4")                          .LineSpacing("3")'                      "text:Arial_18_bold_italic_letter_spacing_4_line_spacing_3:Hello%20World%3F"                  }'                  {                      new TextLayer("Hello World' Nice to meet you?")                          .FontFamily("Arial")                          .FontSize(18)                          .FontAntialiasing(FontAntialiasing.Best)                          .FontHinting(FontHinting.Medium)'                      "text:Arial_18_antialias_best_hinting_medium:Hello%20World%252C%20Nice%20to%20meet%20you%3F"                  }'                  { new SubtitlesLayer().PublicId("sample_sub_en.srt")' "subtitles:sample_sub_en.srt" }'                  {                      new SubtitlesLayer()                          .PublicId("sample_sub_he.srt")                          .FontFamily("Arial")                          .FontSize(40)'                      "subtitles:Arial_40:sample_sub_he.srt"                  }              };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestUnderlay,The following statement contains a magic number: transformation = new Transformation().Underlay("text:hello").Width(100).Height(100);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestUnderlay,The following statement contains a magic number: transformation = new Transformation().Underlay("text:hello").Width(100).Height(100);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestOpacity,The following statement contains a magic number: var transformation = new Transformation().Overlay("overlay.png").Opacity(40);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestCrop,The following statement contains a magic number: var transformation = new Transformation().Width(100).Height(101);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestCrop,The following statement contains a magic number: var transformation = new Transformation().Width(100).Height(101);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestCrop,The following statement contains a magic number: transformation = new Transformation().Width(100).Height(101).Crop("crop");
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestCrop,The following statement contains a magic number: transformation = new Transformation().Width(100).Height(101).Crop("crop");
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestTransformations,The following statement contains a magic number: var transformation = new Transformation().X(1).Y(2).Radius(3).Gravity(Gravity.Center).Quality(0.4).Prefix("a");
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestTransformations,The following statement contains a magic number: var transformation = new Transformation().X(1).Y(2).Radius(3).Gravity(Gravity.Center).Quality(0.4).Prefix("a");
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestTransformations,The following statement contains a magic number: var transformation = new Transformation().X(1).Y(2).Radius(3).Gravity(Gravity.Center).Quality(0.4).Prefix("a");
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestBaseTransformationChain,The following statement contains a magic number: var transformation = new Transformation().X(100).Y(100).Crop("fill").Chain().Crop("crop").Width(100);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestBaseTransformationChain,The following statement contains a magic number: var transformation = new Transformation().X(100).Y(100).Crop("fill").Chain().Crop("crop").Width(100);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestBaseTransformationChain,The following statement contains a magic number: var transformation = new Transformation().X(100).Y(100).Crop("fill").Chain().Crop("crop").Width(100);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestEagerTransformationList,The following statement contains a magic number: var list = new List<Transformation>(){                  new EagerTransformation().SetFormat("jpg").Crop("scale").Width(2.0)'                  new EagerTransformation(new Transformation().Width(10)'new Transformation().Angle(10))'                  new Transformation().Width(20).Height(20)              };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestEagerTransformationList,The following statement contains a magic number: var list = new List<Transformation>(){                  new EagerTransformation().SetFormat("jpg").Crop("scale").Width(2.0)'                  new EagerTransformation(new Transformation().Width(10)'new Transformation().Angle(10))'                  new Transformation().Width(20).Height(20)              };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestEagerTransformationList,The following statement contains a magic number: var list = new List<Transformation>(){                  new EagerTransformation().SetFormat("jpg").Crop("scale").Width(2.0)'                  new EagerTransformation(new Transformation().Width(10)'new Transformation().Angle(10))'                  new Transformation().Width(20).Height(20)              };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestEagerTransformationList,The following statement contains a magic number: var list = new List<Transformation>(){                  new EagerTransformation().SetFormat("jpg").Crop("scale").Width(2.0)'                  new EagerTransformation(new Transformation().Width(10)'new Transformation().Angle(10))'                  new Transformation().Width(20).Height(20)              };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestEagerTransformationList,The following statement contains a magic number: var list = new List<Transformation>(){                  new EagerTransformation().SetFormat("jpg").Crop("scale").Width(2.0)'                  new EagerTransformation(new Transformation().Width(10)'new Transformation().Angle(10))'                  new Transformation().Width(20).Height(20)              };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestBaseTransformationArray,The following statement contains a magic number: var transformation = new Transformation().X(100).Y(100).Width(200).Crop("fill").Chain().Radius(10).Chain().Crop("crop").Width(100);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestBaseTransformationArray,The following statement contains a magic number: var transformation = new Transformation().X(100).Y(100).Width(200).Crop("fill").Chain().Radius(10).Chain().Crop("crop").Width(100);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestBaseTransformationArray,The following statement contains a magic number: var transformation = new Transformation().X(100).Y(100).Width(200).Crop("fill").Chain().Radius(10).Chain().Crop("crop").Width(100);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestBaseTransformationArray,The following statement contains a magic number: var transformation = new Transformation().X(100).Y(100).Width(200).Crop("fill").Chain().Radius(10).Chain().Crop("crop").Width(100);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestBaseTransformationArray,The following statement contains a magic number: var transformation = new Transformation().X(100).Y(100).Width(200).Crop("fill").Chain().Radius(10).Chain().Crop("crop").Width(100);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestEffectWithParam,The following statement contains a magic number: var transformation = new Transformation().Effect("sepia"' 10);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestDensity,The following statement contains a magic number: var transformation = new Transformation().Density(150);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestZoom,The following statement contains a magic number: var transformation = new Transformation().Crop("crop").Gravity(Gravity.Face).Zoom(3);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestPage,The following statement contains a magic number: var transformation = new Transformation().Page(5);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestBorder,The following statement contains a magic number: var transformation = new Transformation().Border(5' "black");
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestBorder,The following statement contains a magic number: transformation = new Transformation().Border(5' "#ffaabbdd");
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestResponsiveWidthTransform,The following statement contains a magic number: var transformation = new Transformation().Width(100).Height(100).Crop("crop").ResponsiveWidth(true);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestResponsiveWidthTransform,The following statement contains a magic number: var transformation = new Transformation().Width(100).Height(100).Crop("crop").ResponsiveWidth(true);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestResponsiveWidthTransform,The following statement contains a magic number: transformation = new Transformation().Width(100).Height(100).Crop("crop").ResponsiveWidth(true);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,ImageTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\ImageTransformationTest.cs,TestResponsiveWidthTransform,The following statement contains a magic number: transformation = new Transformation().Width(100).Height(100).Crop("crop").ResponsiveWidth(true);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: var radiusTestValues = new Dictionary<Radius' string>              {                  {new Radius(10)' "10"}'                  {new Radius("10")' "10"}'                  {new Radius("$v")' "$v"}'                  {new Radius("10:20")' "10:20"}'                                    {new Radius(10' 20)' "10:20"}'                  {new Radius(10' 20' 30)' "10:20:30"}'                  {new Radius("10:20:$v:40")' "10:20:$v:40"}'                  {new Radius(10' 20' "$v"' 40)' "10:20:$v:40"}'                                    {new Radius(new[] {10' 20' 30})' "10:20:30"}'                  {new Radius(new List<object> {10' 20' "$v"})' "10:20:$v"}'                  {new Radius(new object[] {10' 20' "$v"' 40})' "10:20:$v:40"}'                  {new Radius(new string[] {"10:20"})' "10:20"}'                  {new Radius(new List<string> {"10:20:$v:40"})' "10:20:$v:40"}'                                };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: Assert.That(() => new Radius(null' 10)' ThrowsArgumentNullException());
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: Assert.That(() => new Radius(null' 10' 20)' ThrowsArgumentNullException());
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: Assert.That(() => new Radius(null' 10' 20)' ThrowsArgumentNullException());
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: Assert.That(() => new Radius(null' 10' 20' 30)' ThrowsArgumentNullException());
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: Assert.That(() => new Radius(null' 10' 20' 30)' ThrowsArgumentNullException());
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: Assert.That(() => new Radius(null' 10' 20' 30)' ThrowsArgumentNullException());
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: Assert.That(() => new Radius(new List<object> { 1' 2' 3' 4' 5 })' ThrowsArgumentException());
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: Assert.That(() => new Radius(new List<object> { 1' 2' 3' 4' 5 })' ThrowsArgumentException());
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: Assert.That(() => new Radius(new List<object> { 1' 2' 3' 4' 5 })' ThrowsArgumentException());
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadius,The following statement contains a magic number: Assert.That(() => new Radius(new List<object> { 1' 2' 3' 4' 5 })' ThrowsArgumentException());
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadiusClone,The following statement contains a magic number: var radius = new Radius(10' 20.5f' "$v"' 40);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadiusClone,The following statement contains a magic number: var radius = new Radius(10' 20.5f' "$v"' 40);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadiusClone,The following statement contains a magic number: var radius = new Radius(10' 20.5f' "$v"' 40);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadiusTransformation,The following statement contains a magic number: var radiusTestValues = new Dictionary<Transformation' string>              {                  {new Transformation().Radius(10)' "r_10"}'                  {new Transformation().Radius("10:20")' "r_10:20"}'                  {new Transformation().Radius(new List<object> {10' 20' "$v"})' "r_10:20:$v"}'                  {new Transformation().Radius(new Radius(10))' "r_10"}'                  {new Transformation().Radius(null)' ""}              };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadiusTransformation,The following statement contains a magic number: var radiusTestValues = new Dictionary<Transformation' string>              {                  {new Transformation().Radius(10)' "r_10"}'                  {new Transformation().Radius("10:20")' "r_10:20"}'                  {new Transformation().Radius(new List<object> {10' 20' "$v"})' "r_10:20:$v"}'                  {new Transformation().Radius(new Radius(10))' "r_10"}'                  {new Transformation().Radius(null)' ""}              };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadiusTransformation,The following statement contains a magic number: var radiusTestValues = new Dictionary<Transformation' string>              {                  {new Transformation().Radius(10)' "r_10"}'                  {new Transformation().Radius("10:20")' "r_10:20"}'                  {new Transformation().Radius(new List<object> {10' 20' "$v"})' "r_10:20:$v"}'                  {new Transformation().Radius(new Radius(10))' "r_10"}'                  {new Transformation().Radius(null)' ""}              };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,RadiusTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\RadiusTest.cs,TestRadiusTransformation,The following statement contains a magic number: var radiusTestValues = new Dictionary<Transformation' string>              {                  {new Transformation().Radius(10)' "r_10"}'                  {new Transformation().Radius("10:20")' "r_10:20"}'                  {new Transformation().Radius(new List<object> {10' 20' "$v"})' "r_10:20:$v"}'                  {new Transformation().Radius(new Radius(10))' "r_10"}'                  {new Transformation().Radius(null)' ""}              };
Magic Number,CloudinaryDotNet.Test.Transformations.Image,SpriteTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\SpriteTest.cs,TestSpriteTransform,The following statement contains a magic number: Transformation t = new Transformation().Crop("fit").Height(60).Width(150);
Magic Number,CloudinaryDotNet.Test.Transformations.Image,SpriteTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Image\SpriteTest.cs,TestSpriteTransform,The following statement contains a magic number: Transformation t = new Transformation().Crop("fit").Height(60).Width(150);
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,WithLiteral,The following statement contains a magic number: var transformation = new Transformation().IfCondition("w_lt_200").Crop("fill").Height(120).Width(80);
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,WithLiteral,The following statement contains a magic number: var transformation = new Transformation().IfCondition("w_lt_200").Crop("fill").Height(120).Width(80);
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,WithLiteral,The following statement contains a magic number: transformation = new Transformation().Crop("fill").Height(120).IfCondition("w_lt_200").Width(80);
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,WithLiteral,The following statement contains a magic number: transformation = new Transformation().Crop("fill").Height(120).IfCondition("w_lt_200").Width(80);
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,WithLiteral,The following statement contains a magic number: transformation = new Transformation().IfCondition("w_lt_200").Crop("fill").Height(120).Width(80).                                            Chain().IfCondition("w_gt_400").Crop("fit").Height(150).Width(150).                                            Chain().Effect("sepia");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,WithLiteral,The following statement contains a magic number: transformation = new Transformation().IfCondition("w_lt_200").Crop("fill").Height(120).Width(80).                                            Chain().IfCondition("w_gt_400").Crop("fit").Height(150).Width(150).                                            Chain().Effect("sepia");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,WithLiteral,The following statement contains a magic number: transformation = new Transformation().IfCondition("w_lt_200").Crop("fill").Height(120).Width(80).                                            Chain().IfCondition("w_gt_400").Crop("fit").Height(150).Width(150).                                            Chain().Effect("sepia");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,WithLiteral,The following statement contains a magic number: transformation = new Transformation().IfCondition("w_lt_200").Crop("fill").Height(120).Width(80).                                            Chain().IfCondition("w_gt_400").Crop("fit").Height(150).Width(150).                                            Chain().Effect("sepia");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,LiteralWithSpaces,The following statement contains a magic number: var transformation = new Transformation().IfCondition("w < 200").Crop("fill").Height(120).Width(80);
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,LiteralWithSpaces,The following statement contains a magic number: var transformation = new Transformation().IfCondition("w < 200").Crop("fill").Height(120).Width(80);
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf,The following statement contains a magic number: var transformation = new Transformation().IfCondition("w_lt_200").Crop("fill").Height(120).Width(80).Effect("sharpen")                  .Chain().Effect("brightness"' 50)                  .Chain().Effect("shadow").Color("red")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf,The following statement contains a magic number: var transformation = new Transformation().IfCondition("w_lt_200").Crop("fill").Height(120).Width(80).Effect("sharpen")                  .Chain().Effect("brightness"' 50)                  .Chain().Effect("shadow").Color("red")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf,The following statement contains a magic number: var transformation = new Transformation().IfCondition("w_lt_200").Crop("fill").Height(120).Width(80).Effect("sharpen")                  .Chain().Effect("brightness"' 50)                  .Chain().Effect("shadow").Color("red")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,IfElse,The following statement contains a magic number: var transformations = new List<Transformation>()              {                  new Transformation().IfCondition("w_lt_200").Crop("fill").Height(120).Width(80)'                  new Transformation().IfElse().Crop("fill").Height(90).Width(100)              };
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,IfElse,The following statement contains a magic number: var transformations = new List<Transformation>()              {                  new Transformation().IfCondition("w_lt_200").Crop("fill").Height(120).Width(80)'                  new Transformation().IfElse().Crop("fill").Height(90).Width(100)              };
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,IfElse,The following statement contains a magic number: var transformations = new List<Transformation>()              {                  new Transformation().IfCondition("w_lt_200").Crop("fill").Height(120).Width(80)'                  new Transformation().IfElse().Crop("fill").Height(90).Width(100)              };
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,IfElse,The following statement contains a magic number: var transformations = new List<Transformation>()              {                  new Transformation().IfCondition("w_lt_200").Crop("fill").Height(120).Width(80)'                  new Transformation().IfElse().Crop("fill").Height(90).Width(100)              };
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,IfElse,The following statement contains a magic number: transformations = new List<Transformation>()              {                  new Transformation().IfCondition("w_lt_200")'                  new Transformation().Crop("fill").Height(120).Width(80)'                  new Transformation().IfElse()'                  new Transformation().Crop("fill").Height(90).Width(100)              };
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,IfElse,The following statement contains a magic number: transformations = new List<Transformation>()              {                  new Transformation().IfCondition("w_lt_200")'                  new Transformation().Crop("fill").Height(120).Width(80)'                  new Transformation().IfElse()'                  new Transformation().Crop("fill").Height(90).Width(100)              };
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,IfElse,The following statement contains a magic number: transformations = new List<Transformation>()              {                  new Transformation().IfCondition("w_lt_200")'                  new Transformation().Crop("fill").Height(120).Width(80)'                  new Transformation().IfElse()'                  new Transformation().Crop("fill").Height(90).Width(100)              };
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,IfElse,The following statement contains a magic number: transformations = new List<Transformation>()              {                  new Transformation().IfCondition("w_lt_200")'                  new Transformation().Crop("fill").Height(120).Width(80)'                  new Transformation().IfElse()'                  new Transformation().Crop("fill").Height(90).Width(100)              };
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: var transformation = new Transformation().IfCondition().AspectRatio("gt"' "3:4").Then().Width(100).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: transformation = new Transformation().IfCondition().AspectRatio("gt"' "3:4").And().Width("gt"' 100).Then().Width(50).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: transformation = new Transformation().IfCondition().AspectRatio("gt"' "3:4").And().Width("gt"' 100).Then().Width(50).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: transformation = new Transformation().IfCondition().AspectRatio("gt"' "3:4").And().Width("gt"' 100).Or().Width("gt"' 200).Then().Width(50).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: transformation = new Transformation().IfCondition().AspectRatio("gt"' "3:4").And().Width("gt"' 100).Or().Width("gt"' 200).Then().Width(50).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: transformation = new Transformation().IfCondition().AspectRatio("gt"' "3:4").And().Width("gt"' 100).Or().Width("gt"' 200).Then().Width(50).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: transformation = new Transformation().IfCondition().AspectRatio(">"' "3:4").And().Width("<="' 100).Or().Width("gt"' 200).Then().Width(50).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: transformation = new Transformation().IfCondition().AspectRatio(">"' "3:4").And().Width("<="' 100).Or().Width("gt"' 200).Then().Width(50).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: transformation = new Transformation().IfCondition().AspectRatio(">"' "3:4").And().Width("<="' 100).Or().Width("gt"' 200).Then().Width(50).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: transformation = new Transformation().IfCondition().AspectRatio(">"' "3:4").And().Width("<="' 100).Or().Width(">"' 200).Then().Width(50).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: transformation = new Transformation().IfCondition().AspectRatio(">"' "3:4").And().Width("<="' 100).Or().Width(">"' 200).Then().Width(50).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: transformation = new Transformation().IfCondition().AspectRatio(">"' "3:4").And().Width("<="' 100).Or().Width(">"' 200).Then().Width(50).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: transformation = new Transformation().IfCondition().AspectRatio(">="' "3:4").And().PageCount(">="' 100).Or().PageCount("!="' 0).Then().Width(50).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: transformation = new Transformation().IfCondition().AspectRatio(">="' "3:4").And().PageCount(">="' 100).Or().PageCount("!="' 0).Then().Width(50).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: transformation = new Transformation().IfCondition().AspectRatio("gt"' "3:4").And().InitialHeight(">"' 100).And().InitialWidth("<"' 500).Then().Width(100).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: transformation = new Transformation().IfCondition().AspectRatio("gt"' "3:4").And().InitialHeight(">"' 100).And().InitialWidth("<"' 500).Then().Width(100).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,ChainedConditions,The following statement contains a magic number: transformation = new Transformation().IfCondition().AspectRatio("gt"' "3:4").And().InitialHeight(">"' 100).And().InitialWidth("<"' 500).Then().Width(100).Crop("scale");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf2,The following statement contains a magic number: var transformation = new Transformation().IfCondition().Width("gt"' 100).And().Width("lt"' 200).Then().Width(50).Crop("scale").EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf2,The following statement contains a magic number: var transformation = new Transformation().IfCondition().Width("gt"' 100).And().Width("lt"' 200).Then().Width(50).Crop("scale").EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf2,The following statement contains a magic number: var transformation = new Transformation().IfCondition().Width("gt"' 100).And().Width("lt"' 200).Then().Width(50).Crop("scale").EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf2,The following statement contains a magic number: transformation = new Transformation().IfCondition().Width("gt"' 100).And().Width("lt"' 200).Then().Width(50).Crop("scale").EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf2,The following statement contains a magic number: transformation = new Transformation().IfCondition().Width("gt"' 100).And().Width("lt"' 200).Then().Width(50).Crop("scale").EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf2,The following statement contains a magic number: transformation = new Transformation().IfCondition().Width("gt"' 100).And().Width("lt"' 200).Then().Width(50).Crop("scale").EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf2,The following statement contains a magic number: transformation = new Transformation().IfCondition().Width("gt"' 100).And().Width("lt"' 200).Then().Width(50).Crop("scale").IfElse().Width(100).Crop("crop").EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf2,The following statement contains a magic number: transformation = new Transformation().IfCondition().Width("gt"' 100).And().Width("lt"' 200).Then().Width(50).Crop("scale").IfElse().Width(100).Crop("crop").EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf2,The following statement contains a magic number: transformation = new Transformation().IfCondition().Width("gt"' 100).And().Width("lt"' 200).Then().Width(50).Crop("scale").IfElse().Width(100).Crop("crop").EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,EndIf2,The following statement contains a magic number: transformation = new Transformation().IfCondition().Width("gt"' 100).And().Width("lt"' 200).Then().Width(50).Crop("scale").IfElse().Width(100).Crop("crop").EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperators,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt().Value(2)                          .And().Value(Expression.PageCount().Lt().Value(300))                          .Or().Value("!myTag1!").In().Value(Expression.Tags())                          .And().Value("!myTag2!").Nin().Value(Expression.Tags())                          .And().Value(Expression.Width().Gte().Value(200))                          .And().Value(Expression.Height().Eq().Value("$foo"))                          .And().Value(Expression.Width().Ne().Value("$foo").Mul().Value(2))                          .And().Value(Expression.Height().Lt().Value("$foo"))                          .Or().Value(Expression.Width().Lte().Value(500))                          .And().Value(Expression.IllustrationScore().Lt().Value(0))                          .And().Value(Expression.CurrentPageIndex().Eq().Value(10))                          .And().Value(Expression.XOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Ne().Value(400))                          .And().Value(Expression.AspectRatio().Gt().Value("3:4"))                          .And().Value(Expression.AspectRatioOfInitialImage().Gt().Value("3:4"))                          .And().Value(Expression.Height().Lt(Expression.InitialWidth().Div().Value(2).Add().Value(1)))                          .And().Value(Expression.Width().Lt(Expression.InitialHeight().Sub().Value("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperators,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt().Value(2)                          .And().Value(Expression.PageCount().Lt().Value(300))                          .Or().Value("!myTag1!").In().Value(Expression.Tags())                          .And().Value("!myTag2!").Nin().Value(Expression.Tags())                          .And().Value(Expression.Width().Gte().Value(200))                          .And().Value(Expression.Height().Eq().Value("$foo"))                          .And().Value(Expression.Width().Ne().Value("$foo").Mul().Value(2))                          .And().Value(Expression.Height().Lt().Value("$foo"))                          .Or().Value(Expression.Width().Lte().Value(500))                          .And().Value(Expression.IllustrationScore().Lt().Value(0))                          .And().Value(Expression.CurrentPageIndex().Eq().Value(10))                          .And().Value(Expression.XOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Ne().Value(400))                          .And().Value(Expression.AspectRatio().Gt().Value("3:4"))                          .And().Value(Expression.AspectRatioOfInitialImage().Gt().Value("3:4"))                          .And().Value(Expression.Height().Lt(Expression.InitialWidth().Div().Value(2).Add().Value(1)))                          .And().Value(Expression.Width().Lt(Expression.InitialHeight().Sub().Value("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperators,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt().Value(2)                          .And().Value(Expression.PageCount().Lt().Value(300))                          .Or().Value("!myTag1!").In().Value(Expression.Tags())                          .And().Value("!myTag2!").Nin().Value(Expression.Tags())                          .And().Value(Expression.Width().Gte().Value(200))                          .And().Value(Expression.Height().Eq().Value("$foo"))                          .And().Value(Expression.Width().Ne().Value("$foo").Mul().Value(2))                          .And().Value(Expression.Height().Lt().Value("$foo"))                          .Or().Value(Expression.Width().Lte().Value(500))                          .And().Value(Expression.IllustrationScore().Lt().Value(0))                          .And().Value(Expression.CurrentPageIndex().Eq().Value(10))                          .And().Value(Expression.XOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Ne().Value(400))                          .And().Value(Expression.AspectRatio().Gt().Value("3:4"))                          .And().Value(Expression.AspectRatioOfInitialImage().Gt().Value("3:4"))                          .And().Value(Expression.Height().Lt(Expression.InitialWidth().Div().Value(2).Add().Value(1)))                          .And().Value(Expression.Width().Lt(Expression.InitialHeight().Sub().Value("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperators,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt().Value(2)                          .And().Value(Expression.PageCount().Lt().Value(300))                          .Or().Value("!myTag1!").In().Value(Expression.Tags())                          .And().Value("!myTag2!").Nin().Value(Expression.Tags())                          .And().Value(Expression.Width().Gte().Value(200))                          .And().Value(Expression.Height().Eq().Value("$foo"))                          .And().Value(Expression.Width().Ne().Value("$foo").Mul().Value(2))                          .And().Value(Expression.Height().Lt().Value("$foo"))                          .Or().Value(Expression.Width().Lte().Value(500))                          .And().Value(Expression.IllustrationScore().Lt().Value(0))                          .And().Value(Expression.CurrentPageIndex().Eq().Value(10))                          .And().Value(Expression.XOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Ne().Value(400))                          .And().Value(Expression.AspectRatio().Gt().Value("3:4"))                          .And().Value(Expression.AspectRatioOfInitialImage().Gt().Value("3:4"))                          .And().Value(Expression.Height().Lt(Expression.InitialWidth().Div().Value(2).Add().Value(1)))                          .And().Value(Expression.Width().Lt(Expression.InitialHeight().Sub().Value("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperators,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt().Value(2)                          .And().Value(Expression.PageCount().Lt().Value(300))                          .Or().Value("!myTag1!").In().Value(Expression.Tags())                          .And().Value("!myTag2!").Nin().Value(Expression.Tags())                          .And().Value(Expression.Width().Gte().Value(200))                          .And().Value(Expression.Height().Eq().Value("$foo"))                          .And().Value(Expression.Width().Ne().Value("$foo").Mul().Value(2))                          .And().Value(Expression.Height().Lt().Value("$foo"))                          .Or().Value(Expression.Width().Lte().Value(500))                          .And().Value(Expression.IllustrationScore().Lt().Value(0))                          .And().Value(Expression.CurrentPageIndex().Eq().Value(10))                          .And().Value(Expression.XOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Ne().Value(400))                          .And().Value(Expression.AspectRatio().Gt().Value("3:4"))                          .And().Value(Expression.AspectRatioOfInitialImage().Gt().Value("3:4"))                          .And().Value(Expression.Height().Lt(Expression.InitialWidth().Div().Value(2).Add().Value(1)))                          .And().Value(Expression.Width().Lt(Expression.InitialHeight().Sub().Value("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperators,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt().Value(2)                          .And().Value(Expression.PageCount().Lt().Value(300))                          .Or().Value("!myTag1!").In().Value(Expression.Tags())                          .And().Value("!myTag2!").Nin().Value(Expression.Tags())                          .And().Value(Expression.Width().Gte().Value(200))                          .And().Value(Expression.Height().Eq().Value("$foo"))                          .And().Value(Expression.Width().Ne().Value("$foo").Mul().Value(2))                          .And().Value(Expression.Height().Lt().Value("$foo"))                          .Or().Value(Expression.Width().Lte().Value(500))                          .And().Value(Expression.IllustrationScore().Lt().Value(0))                          .And().Value(Expression.CurrentPageIndex().Eq().Value(10))                          .And().Value(Expression.XOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Ne().Value(400))                          .And().Value(Expression.AspectRatio().Gt().Value("3:4"))                          .And().Value(Expression.AspectRatioOfInitialImage().Gt().Value("3:4"))                          .And().Value(Expression.Height().Lt(Expression.InitialWidth().Div().Value(2).Add().Value(1)))                          .And().Value(Expression.Width().Lt(Expression.InitialHeight().Sub().Value("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperators,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt().Value(2)                          .And().Value(Expression.PageCount().Lt().Value(300))                          .Or().Value("!myTag1!").In().Value(Expression.Tags())                          .And().Value("!myTag2!").Nin().Value(Expression.Tags())                          .And().Value(Expression.Width().Gte().Value(200))                          .And().Value(Expression.Height().Eq().Value("$foo"))                          .And().Value(Expression.Width().Ne().Value("$foo").Mul().Value(2))                          .And().Value(Expression.Height().Lt().Value("$foo"))                          .Or().Value(Expression.Width().Lte().Value(500))                          .And().Value(Expression.IllustrationScore().Lt().Value(0))                          .And().Value(Expression.CurrentPageIndex().Eq().Value(10))                          .And().Value(Expression.XOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Ne().Value(400))                          .And().Value(Expression.AspectRatio().Gt().Value("3:4"))                          .And().Value(Expression.AspectRatioOfInitialImage().Gt().Value("3:4"))                          .And().Value(Expression.Height().Lt(Expression.InitialWidth().Div().Value(2).Add().Value(1)))                          .And().Value(Expression.Width().Lt(Expression.InitialHeight().Sub().Value("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperators,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt().Value(2)                          .And().Value(Expression.PageCount().Lt().Value(300))                          .Or().Value("!myTag1!").In().Value(Expression.Tags())                          .And().Value("!myTag2!").Nin().Value(Expression.Tags())                          .And().Value(Expression.Width().Gte().Value(200))                          .And().Value(Expression.Height().Eq().Value("$foo"))                          .And().Value(Expression.Width().Ne().Value("$foo").Mul().Value(2))                          .And().Value(Expression.Height().Lt().Value("$foo"))                          .Or().Value(Expression.Width().Lte().Value(500))                          .And().Value(Expression.IllustrationScore().Lt().Value(0))                          .And().Value(Expression.CurrentPageIndex().Eq().Value(10))                          .And().Value(Expression.XOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Ne().Value(400))                          .And().Value(Expression.AspectRatio().Gt().Value("3:4"))                          .And().Value(Expression.AspectRatioOfInitialImage().Gt().Value("3:4"))                          .And().Value(Expression.Height().Lt(Expression.InitialWidth().Div().Value(2).Add().Value(1)))                          .And().Value(Expression.Width().Lt(Expression.InitialHeight().Sub().Value("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperators,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt().Value(2)                          .And().Value(Expression.PageCount().Lt().Value(300))                          .Or().Value("!myTag1!").In().Value(Expression.Tags())                          .And().Value("!myTag2!").Nin().Value(Expression.Tags())                          .And().Value(Expression.Width().Gte().Value(200))                          .And().Value(Expression.Height().Eq().Value("$foo"))                          .And().Value(Expression.Width().Ne().Value("$foo").Mul().Value(2))                          .And().Value(Expression.Height().Lt().Value("$foo"))                          .Or().Value(Expression.Width().Lte().Value(500))                          .And().Value(Expression.IllustrationScore().Lt().Value(0))                          .And().Value(Expression.CurrentPageIndex().Eq().Value(10))                          .And().Value(Expression.XOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Ne().Value(400))                          .And().Value(Expression.AspectRatio().Gt().Value("3:4"))                          .And().Value(Expression.AspectRatioOfInitialImage().Gt().Value("3:4"))                          .And().Value(Expression.Height().Lt(Expression.InitialWidth().Div().Value(2).Add().Value(1)))                          .And().Value(Expression.Width().Lt(Expression.InitialHeight().Sub().Value("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperators,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt().Value(2)                          .And().Value(Expression.PageCount().Lt().Value(300))                          .Or().Value("!myTag1!").In().Value(Expression.Tags())                          .And().Value("!myTag2!").Nin().Value(Expression.Tags())                          .And().Value(Expression.Width().Gte().Value(200))                          .And().Value(Expression.Height().Eq().Value("$foo"))                          .And().Value(Expression.Width().Ne().Value("$foo").Mul().Value(2))                          .And().Value(Expression.Height().Lt().Value("$foo"))                          .Or().Value(Expression.Width().Lte().Value(500))                          .And().Value(Expression.IllustrationScore().Lt().Value(0))                          .And().Value(Expression.CurrentPageIndex().Eq().Value(10))                          .And().Value(Expression.XOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Ne().Value(400))                          .And().Value(Expression.AspectRatio().Gt().Value("3:4"))                          .And().Value(Expression.AspectRatioOfInitialImage().Gt().Value("3:4"))                          .And().Value(Expression.Height().Lt(Expression.InitialWidth().Div().Value(2).Add().Value(1)))                          .And().Value(Expression.Width().Lt(Expression.InitialHeight().Sub().Value("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperators,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt().Value(2)                          .And().Value(Expression.PageCount().Lt().Value(300))                          .Or().Value("!myTag1!").In().Value(Expression.Tags())                          .And().Value("!myTag2!").Nin().Value(Expression.Tags())                          .And().Value(Expression.Width().Gte().Value(200))                          .And().Value(Expression.Height().Eq().Value("$foo"))                          .And().Value(Expression.Width().Ne().Value("$foo").Mul().Value(2))                          .And().Value(Expression.Height().Lt().Value("$foo"))                          .Or().Value(Expression.Width().Lte().Value(500))                          .And().Value(Expression.IllustrationScore().Lt().Value(0))                          .And().Value(Expression.CurrentPageIndex().Eq().Value(10))                          .And().Value(Expression.XOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Lt().Value(300))                          .And().Value(Expression.YOffset().Ne().Value(400))                          .And().Value(Expression.AspectRatio().Gt().Value("3:4"))                          .And().Value(Expression.AspectRatioOfInitialImage().Gt().Value("3:4"))                          .And().Value(Expression.Height().Lt(Expression.InitialWidth().Div().Value(2).Add().Value(1)))                          .And().Value(Expression.Width().Lt(Expression.InitialHeight().Sub().Value("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperatorsWithValues,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt(2)                          .And(Expression.PageCount().Lt(300))                          .Or("!myTag1!").In(Expression.Tags())                          .And("!myTag2!").Nin(Expression.Tags())                          .And(Expression.Width().Gte(200))                          .And(Expression.Height().Eq("$foo"))                          .And(Expression.Width().Ne("$foo").Mul(2))                          .And(Expression.Height().Lt("$foo"))                          .Or(Expression.Width().Lte(500))                          .And(Expression.IllustrationScore().Lt(0))                          .And(Expression.CurrentPageIndex().Eq(10))                          .And(Expression.XOffset().Lt(300))                          .And(Expression.YOffset().Lt(300))                          .And(Expression.YOffset().Ne(400))                          .And(Expression.AspectRatio().Gt("3:4"))                          .And(Expression.AspectRatioOfInitialImage().Gt("3:4"))                          .And(Expression.Height().Lt(Expression.InitialWidth().Div(2).Add(1)))                          .And(Expression.Width().Lt(Expression.InitialHeight().Sub("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperatorsWithValues,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt(2)                          .And(Expression.PageCount().Lt(300))                          .Or("!myTag1!").In(Expression.Tags())                          .And("!myTag2!").Nin(Expression.Tags())                          .And(Expression.Width().Gte(200))                          .And(Expression.Height().Eq("$foo"))                          .And(Expression.Width().Ne("$foo").Mul(2))                          .And(Expression.Height().Lt("$foo"))                          .Or(Expression.Width().Lte(500))                          .And(Expression.IllustrationScore().Lt(0))                          .And(Expression.CurrentPageIndex().Eq(10))                          .And(Expression.XOffset().Lt(300))                          .And(Expression.YOffset().Lt(300))                          .And(Expression.YOffset().Ne(400))                          .And(Expression.AspectRatio().Gt("3:4"))                          .And(Expression.AspectRatioOfInitialImage().Gt("3:4"))                          .And(Expression.Height().Lt(Expression.InitialWidth().Div(2).Add(1)))                          .And(Expression.Width().Lt(Expression.InitialHeight().Sub("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperatorsWithValues,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt(2)                          .And(Expression.PageCount().Lt(300))                          .Or("!myTag1!").In(Expression.Tags())                          .And("!myTag2!").Nin(Expression.Tags())                          .And(Expression.Width().Gte(200))                          .And(Expression.Height().Eq("$foo"))                          .And(Expression.Width().Ne("$foo").Mul(2))                          .And(Expression.Height().Lt("$foo"))                          .Or(Expression.Width().Lte(500))                          .And(Expression.IllustrationScore().Lt(0))                          .And(Expression.CurrentPageIndex().Eq(10))                          .And(Expression.XOffset().Lt(300))                          .And(Expression.YOffset().Lt(300))                          .And(Expression.YOffset().Ne(400))                          .And(Expression.AspectRatio().Gt("3:4"))                          .And(Expression.AspectRatioOfInitialImage().Gt("3:4"))                          .And(Expression.Height().Lt(Expression.InitialWidth().Div(2).Add(1)))                          .And(Expression.Width().Lt(Expression.InitialHeight().Sub("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperatorsWithValues,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt(2)                          .And(Expression.PageCount().Lt(300))                          .Or("!myTag1!").In(Expression.Tags())                          .And("!myTag2!").Nin(Expression.Tags())                          .And(Expression.Width().Gte(200))                          .And(Expression.Height().Eq("$foo"))                          .And(Expression.Width().Ne("$foo").Mul(2))                          .And(Expression.Height().Lt("$foo"))                          .Or(Expression.Width().Lte(500))                          .And(Expression.IllustrationScore().Lt(0))                          .And(Expression.CurrentPageIndex().Eq(10))                          .And(Expression.XOffset().Lt(300))                          .And(Expression.YOffset().Lt(300))                          .And(Expression.YOffset().Ne(400))                          .And(Expression.AspectRatio().Gt("3:4"))                          .And(Expression.AspectRatioOfInitialImage().Gt("3:4"))                          .And(Expression.Height().Lt(Expression.InitialWidth().Div(2).Add(1)))                          .And(Expression.Width().Lt(Expression.InitialHeight().Sub("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperatorsWithValues,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt(2)                          .And(Expression.PageCount().Lt(300))                          .Or("!myTag1!").In(Expression.Tags())                          .And("!myTag2!").Nin(Expression.Tags())                          .And(Expression.Width().Gte(200))                          .And(Expression.Height().Eq("$foo"))                          .And(Expression.Width().Ne("$foo").Mul(2))                          .And(Expression.Height().Lt("$foo"))                          .Or(Expression.Width().Lte(500))                          .And(Expression.IllustrationScore().Lt(0))                          .And(Expression.CurrentPageIndex().Eq(10))                          .And(Expression.XOffset().Lt(300))                          .And(Expression.YOffset().Lt(300))                          .And(Expression.YOffset().Ne(400))                          .And(Expression.AspectRatio().Gt("3:4"))                          .And(Expression.AspectRatioOfInitialImage().Gt("3:4"))                          .And(Expression.Height().Lt(Expression.InitialWidth().Div(2).Add(1)))                          .And(Expression.Width().Lt(Expression.InitialHeight().Sub("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperatorsWithValues,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt(2)                          .And(Expression.PageCount().Lt(300))                          .Or("!myTag1!").In(Expression.Tags())                          .And("!myTag2!").Nin(Expression.Tags())                          .And(Expression.Width().Gte(200))                          .And(Expression.Height().Eq("$foo"))                          .And(Expression.Width().Ne("$foo").Mul(2))                          .And(Expression.Height().Lt("$foo"))                          .Or(Expression.Width().Lte(500))                          .And(Expression.IllustrationScore().Lt(0))                          .And(Expression.CurrentPageIndex().Eq(10))                          .And(Expression.XOffset().Lt(300))                          .And(Expression.YOffset().Lt(300))                          .And(Expression.YOffset().Ne(400))                          .And(Expression.AspectRatio().Gt("3:4"))                          .And(Expression.AspectRatioOfInitialImage().Gt("3:4"))                          .And(Expression.Height().Lt(Expression.InitialWidth().Div(2).Add(1)))                          .And(Expression.Width().Lt(Expression.InitialHeight().Sub("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperatorsWithValues,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt(2)                          .And(Expression.PageCount().Lt(300))                          .Or("!myTag1!").In(Expression.Tags())                          .And("!myTag2!").Nin(Expression.Tags())                          .And(Expression.Width().Gte(200))                          .And(Expression.Height().Eq("$foo"))                          .And(Expression.Width().Ne("$foo").Mul(2))                          .And(Expression.Height().Lt("$foo"))                          .Or(Expression.Width().Lte(500))                          .And(Expression.IllustrationScore().Lt(0))                          .And(Expression.CurrentPageIndex().Eq(10))                          .And(Expression.XOffset().Lt(300))                          .And(Expression.YOffset().Lt(300))                          .And(Expression.YOffset().Ne(400))                          .And(Expression.AspectRatio().Gt("3:4"))                          .And(Expression.AspectRatioOfInitialImage().Gt("3:4"))                          .And(Expression.Height().Lt(Expression.InitialWidth().Div(2).Add(1)))                          .And(Expression.Width().Lt(Expression.InitialHeight().Sub("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperatorsWithValues,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt(2)                          .And(Expression.PageCount().Lt(300))                          .Or("!myTag1!").In(Expression.Tags())                          .And("!myTag2!").Nin(Expression.Tags())                          .And(Expression.Width().Gte(200))                          .And(Expression.Height().Eq("$foo"))                          .And(Expression.Width().Ne("$foo").Mul(2))                          .And(Expression.Height().Lt("$foo"))                          .Or(Expression.Width().Lte(500))                          .And(Expression.IllustrationScore().Lt(0))                          .And(Expression.CurrentPageIndex().Eq(10))                          .And(Expression.XOffset().Lt(300))                          .And(Expression.YOffset().Lt(300))                          .And(Expression.YOffset().Ne(400))                          .And(Expression.AspectRatio().Gt("3:4"))                          .And(Expression.AspectRatioOfInitialImage().Gt("3:4"))                          .And(Expression.Height().Lt(Expression.InitialWidth().Div(2).Add(1)))                          .And(Expression.Width().Lt(Expression.InitialHeight().Sub("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperatorsWithValues,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt(2)                          .And(Expression.PageCount().Lt(300))                          .Or("!myTag1!").In(Expression.Tags())                          .And("!myTag2!").Nin(Expression.Tags())                          .And(Expression.Width().Gte(200))                          .And(Expression.Height().Eq("$foo"))                          .And(Expression.Width().Ne("$foo").Mul(2))                          .And(Expression.Height().Lt("$foo"))                          .Or(Expression.Width().Lte(500))                          .And(Expression.IllustrationScore().Lt(0))                          .And(Expression.CurrentPageIndex().Eq(10))                          .And(Expression.XOffset().Lt(300))                          .And(Expression.YOffset().Lt(300))                          .And(Expression.YOffset().Ne(400))                          .And(Expression.AspectRatio().Gt("3:4"))                          .And(Expression.AspectRatioOfInitialImage().Gt("3:4"))                          .And(Expression.Height().Lt(Expression.InitialWidth().Div(2).Add(1)))                          .And(Expression.Width().Lt(Expression.InitialHeight().Sub("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperatorsWithValues,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt(2)                          .And(Expression.PageCount().Lt(300))                          .Or("!myTag1!").In(Expression.Tags())                          .And("!myTag2!").Nin(Expression.Tags())                          .And(Expression.Width().Gte(200))                          .And(Expression.Height().Eq("$foo"))                          .And(Expression.Width().Ne("$foo").Mul(2))                          .And(Expression.Height().Lt("$foo"))                          .Or(Expression.Width().Lte(500))                          .And(Expression.IllustrationScore().Lt(0))                          .And(Expression.CurrentPageIndex().Eq(10))                          .And(Expression.XOffset().Lt(300))                          .And(Expression.YOffset().Lt(300))                          .And(Expression.YOffset().Ne(400))                          .And(Expression.AspectRatio().Gt("3:4"))                          .And(Expression.AspectRatioOfInitialImage().Gt("3:4"))                          .And(Expression.Height().Lt(Expression.InitialWidth().Div(2).Add(1)))                          .And(Expression.Width().Lt(Expression.InitialHeight().Sub("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionOperatorsWithValues,The following statement contains a magic number: var transformation = new Transformation()                  .Variable("$foo"' 10)                  .Variable("$foostr"' new[] { "my"' "str"' "ing" })                  .Chain()                  .IfCondition(                      Expression.FaceCount().Gt(2)                          .And(Expression.PageCount().Lt(300))                          .Or("!myTag1!").In(Expression.Tags())                          .And("!myTag2!").Nin(Expression.Tags())                          .And(Expression.Width().Gte(200))                          .And(Expression.Height().Eq("$foo"))                          .And(Expression.Width().Ne("$foo").Mul(2))                          .And(Expression.Height().Lt("$foo"))                          .Or(Expression.Width().Lte(500))                          .And(Expression.IllustrationScore().Lt(0))                          .And(Expression.CurrentPageIndex().Eq(10))                          .And(Expression.XOffset().Lt(300))                          .And(Expression.YOffset().Lt(300))                          .And(Expression.YOffset().Ne(400))                          .And(Expression.AspectRatio().Gt("3:4"))                          .And(Expression.AspectRatioOfInitialImage().Gt("3:4"))                          .And(Expression.Height().Lt(Expression.InitialWidth().Div(2).Add(1)))                          .And(Expression.Width().Lt(Expression.InitialHeight().Sub("$foo")))                  )                  .Crop("scale")                  .Width(new Condition("$foo * 200 / faceCount"))                  .Overlay("$foostr")                  .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionsClone,The following statement contains a magic number: var expression = Expression.PageCount().Lt(300);
Magic Number,CloudinaryDotNet.Test.Transformations.Common,ExpressionTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\ExpressionTest.cs,TestExpressionsClone,The following statement contains a magic number: expression.Gt(2);
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestArrayShouldDefineASetOfVariables,The following statement contains a magic number: t.IfCondition("face_count > 2")                      .Variables(Expression.Variable("$z"' 5)' Expression.Variable("$foo"' "$z * 2"))                      .Crop("scale")                      .Width("$foo * 200");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestShouldSortDefinedVariable,The following statement contains a magic number: var t = new Transformation().Variable("$second"' 1).Variable("$first"' 2);
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestShouldPlaceDefinedVariablesBeforeOrdered,The following statement contains a magic number: var t = new Transformation()                      .Variables(Expression.Variable("$z"' 5)' Expression.Variable("$foo"' "$z * 2"))                      .Variable("$second"' 1)                      .Variable("$first"' 2);
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestShouldPlaceDefinedVariablesBeforeOrdered,The following statement contains a magic number: var t = new Transformation()                      .Variables(Expression.Variable("$z"' 5)' Expression.Variable("$foo"' "$z * 2"))                      .Variable("$second"' 1)                      .Variable("$first"' 2);
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestVariable,The following statement contains a magic number: var t = new Transformation()                      .Variable("$foo"' 10)                      .Chain()                      .IfCondition(Expression.FaceCount().Gt(2))                      .Crop("scale")                      .Width(new Condition("$foo * 200 / faceCount"))                      .IfElse()                      .Width(Expression.InitialHeight().Mul(2))                      .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestVariable,The following statement contains a magic number: var t = new Transformation()                      .Variable("$foo"' 10)                      .Chain()                      .IfCondition(Expression.FaceCount().Gt(2))                      .Crop("scale")                      .Width(new Condition("$foo * 200 / faceCount"))                      .IfElse()                      .Width(Expression.InitialHeight().Mul(2))                      .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestVariable,The following statement contains a magic number: var t = new Transformation()                      .Variable("$foo"' 10)                      .Chain()                      .IfCondition(Expression.FaceCount().Gt(2))                      .Crop("scale")                      .Width(new Condition("$foo * 200 / faceCount"))                      .IfElse()                      .Width(Expression.InitialHeight().Mul(2))                      .EndIf();
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestShouldSupportTextVariableValues,The following statement contains a magic number: var t = new Transformation()                  .Effect("$efname"' 100)                  .Variable("$efname"' "!blur!");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestSupportStringInterpolation,The following statement contains a magic number: var t = new Transformation()                      .Crop("scale")                      .Overlay(new TextLayer().Text("$(start)Hello $(name)$(ext)' $(no ) $( no)$(end)")                              .FontFamily("Arial")                              .FontSize(18));
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestCloneWithNested,The following statement contains a magic number: var transformation = new Transformation().X(100).Y(100).Width(200)                  .Crop("fill").Chain().Radius(10).Chain().Crop("crop").Width(100).Angle("12"' "13"' "14");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestCloneWithNested,The following statement contains a magic number: var transformation = new Transformation().X(100).Y(100).Width(200)                  .Crop("fill").Chain().Radius(10).Chain().Crop("crop").Width(100).Angle("12"' "13"' "14");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestCloneWithNested,The following statement contains a magic number: var transformation = new Transformation().X(100).Y(100).Width(200)                  .Crop("fill").Chain().Radius(10).Chain().Crop("crop").Width(100).Angle("12"' "13"' "14");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestCloneWithNested,The following statement contains a magic number: var transformation = new Transformation().X(100).Y(100).Width(200)                  .Crop("fill").Chain().Radius(10).Chain().Crop("crop").Width(100).Angle("12"' "13"' "14");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestCloneWithNested,The following statement contains a magic number: var transformation = new Transformation().X(100).Y(100).Width(200)                  .Crop("fill").Chain().Radius(10).Chain().Crop("crop").Width(100).Angle("12"' "13"' "14");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestCloneWithNested,The following statement contains a magic number: transformation.NestedTransforms[0].Width(300);
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestTransformationLayersDeepClone,The following statement contains a magic number: var layer = new TextLayer("Hello").FontSize(10).FontFamily("Arial");
Magic Number,CloudinaryDotNet.Test.Transformations.Common,TransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Common\TransformationTest.cs,TestTransformationLayersDeepClone,The following statement contains a magic number: layer.FontSize(20);
Magic Number,CloudinaryDotNet.Test.Asset,UrlBuilderTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlBuilderTest.cs,TestUrlClone,The following statement contains a magic number: var layer = new TextLayer("Hello").FontFamily("Arial").FontSize(10);
Magic Number,CloudinaryDotNet.Test.Asset,UrlBuilderTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlBuilderTest.cs,TestUrlClone,The following statement contains a magic number: var transformation = new Transformation().Angle(12).Overlay(layer);
Magic Number,CloudinaryDotNet.Test.Asset,UrlBuilderTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlBuilderTest.cs,TestUrlClone,The following statement contains a magic number: transformation.Angle(14);
Magic Number,CloudinaryDotNet.Test.Asset,UrlBuilderTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlBuilderTest.cs,TestUrlClone,The following statement contains a magic number: layer.FontSize(20);
Magic Number,CloudinaryDotNet.Test.Asset,UrlBuilderTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlBuilderTest.cs,TestExcludeEmptyTransformation,The following statement contains a magic number: var transformation = new Transformation().Chain().X(100).Y(100).Crop("fill").Chain();
Magic Number,CloudinaryDotNet.Test.Asset,UrlBuilderTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\UrlBuilderTest.cs,TestExcludeEmptyTransformation,The following statement contains a magic number: var transformation = new Transformation().Chain().X(100).Y(100).Crop("fill").Chain();
Magic Number,CloudinaryDotNet.Test.Asset,SignatureTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\SignatureTest.cs,TestSignParameters,The following statement contains a magic number: Dictionary<string' object> paramsSetOne = new Dictionary<string' object>() {                  { "Param1"' "anyString"}'                  { "Param2"' 25}'                  { "Param3"' 25.35f}'              };
Magic Number,CloudinaryDotNet.Test.Asset,SignatureTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\SignatureTest.cs,TestSignParameters,The following statement contains a magic number: Dictionary<string' object> paramsSetOne = new Dictionary<string' object>() {                  { "Param1"' "anyString"}'                  { "Param2"' 25}'                  { "Param3"' 25.35f}'              };
Magic Number,CloudinaryDotNet.Test.Asset,SignatureTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\SignatureTest.cs,TestVerifyNotificationSignature,The following statement contains a magic number: var validResponseTimestamp = currentTimestamp - 5000;
Magic Number,CloudinaryDotNet.Test.Asset,SignatureTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\SignatureTest.cs,TestVerifyNotificationSignature,The following statement contains a magic number: Assert.IsFalse(m_api.VerifyNotificationSignature(responseJson' validResponseTimestamp'                  responseSignature' 4000)' $"{testMessagePart} is invalid for matching but expired signature");
Magic Number,CloudinaryDotNet.Test.Asset,SignatureTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\SignatureTest.cs,TestVerifyNotificationSignature,The following statement contains a magic number: Assert.IsFalse(m_api.VerifyNotificationSignature(responseJson' validResponseTimestamp'                  responseSignature + "chars"' 4000)' $"{testMessagePart} invalid for non matching and expired signature");
Magic Number,CloudinaryDotNet.Test.Asset,SignatureTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\SignatureTest.cs,TestSignedUrl,The following statement contains a magic number: var actual = api.UrlImgUp.Version("1234")                  .Transform(new Transformation().Crop("crop").Width(10).Height(20))                  .Signed(true)                  .BuildUrl("image.jpg");
Magic Number,CloudinaryDotNet.Test.Asset,SignatureTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\SignatureTest.cs,TestSignedUrl,The following statement contains a magic number: var actual = api.UrlImgUp.Version("1234")                  .Transform(new Transformation().Crop("crop").Width(10).Height(20))                  .Signed(true)                  .BuildUrl("image.jpg");
Magic Number,CloudinaryDotNet.Test.Asset,SignatureTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\SignatureTest.cs,TestSignedUrl,The following statement contains a magic number: actual = api.UrlImgUp                  .Transform(new Transformation().Crop("crop").Width(10).Height(20))                  .Signed(true)                  .BuildUrl("image.jpg");
Magic Number,CloudinaryDotNet.Test.Asset,SignatureTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\SignatureTest.cs,TestSignedUrl,The following statement contains a magic number: actual = api.UrlImgUp                  .Transform(new Transformation().Crop("crop").Width(10).Height(20))                  .Signed(true)                  .BuildUrl("image.jpg");
Magic Number,CloudinaryDotNet.Test.Asset,SignatureTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Asset\SignatureTest.cs,TestSignedUrl,The following statement contains a magic number: actual = api.UrlImgUp.Version("1")                  .Transform(new Transformation().Crop("crop").Width(1).Height(20))                  .Signed(true)                  .BuildUrl("image.jpg");
Magic Number,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestImageTag,The following statement contains a magic number: var transformation = new Transformation().Width(100).Height(101).Crop("crop");
Magic Number,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestImageTag,The following statement contains a magic number: var transformation = new Transformation().Width(100).Height(101).Crop("crop");
Magic Number,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestResponsiveWidth,The following statement contains a magic number: var transformation = new Transformation().Width(0.9).Height(0.9).Crop("crop").ResponsiveWidth(true);
Magic Number,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestResponsiveWidth,The following statement contains a magic number: var transformation = new Transformation().Width(0.9).Height(0.9).Crop("crop").ResponsiveWidth(true);
Magic Number,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestImageTagAutoDpr,The following statement contains a magic number: var transform = new Transformation().Width(100).Height(101).Crop("crop").Dpr("auto");
Magic Number,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestImageTagAutoDpr,The following statement contains a magic number: var transform = new Transformation().Width(100).Height(101).Crop("crop").Dpr("auto");
Magic Number,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestImageTagNoParams,The following statement contains a magic number: Transformation transformation = new Transformation().Width(100).Height(101).Crop("crop");
Magic Number,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestImageTagNoParams,The following statement contains a magic number: Transformation transformation = new Transformation().Width(100).Height(101).Crop("crop");
Magic Number,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestImageTagParams,The following statement contains a magic number: Transformation transformation = new Transformation().Width(100).Height(101).Crop("crop");
Magic Number,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestImageTagParams,The following statement contains a magic number: Transformation transformation = new Transformation().Width(100).Height(101).Crop("crop");
Magic Number,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestDifferentHtmlDimensions,The following statement contains a magic number: var trans = new Transformation().Width(100).Height(101).SetHtmlWidth(50).SetHtmlHeight(51);
Magic Number,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestDifferentHtmlDimensions,The following statement contains a magic number: var trans = new Transformation().Width(100).Height(101).SetHtmlWidth(50).SetHtmlHeight(51);
Magic Number,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestDifferentHtmlDimensions,The following statement contains a magic number: var trans = new Transformation().Width(100).Height(101).SetHtmlWidth(50).SetHtmlHeight(51);
Magic Number,CloudinaryDotNet.Test.Tag,ImageTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\ImageTagTest.cs,TestDifferentHtmlDimensions,The following statement contains a magic number: var trans = new Transformation().Width(100).Height(101).SetHtmlWidth(50).SetHtmlHeight(51);
Magic Number,CloudinaryDotNet.Test.Tag,VideoTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\VideoTagTest.cs,TestVideoTagWithTransformation,The following statement contains a magic number: var transformation = new Transformation().VideoCodec("codec"' "h264").AudioCodec("acc").StartOffset(3);
Magic Number,CloudinaryDotNet.Test.Tag,VideoTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\VideoTagTest.cs,TestVideoTagWithTransformation,The following statement contains a magic number: transformation.Width(250);
Magic Number,CloudinaryDotNet.Test.Tag,VideoTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\VideoTagTest.cs,TestVideoTagWithSourceTransformation,The following statement contains a magic number: var actualTag = m_api.UrlVideoUp.Transform(new Transformation().Quality(50).Chain().Width(100))                      .SourceTransformationFor("mp4"' new Transformation().Quality(30))                      .SourceTransformationFor("ogv"' new Transformation().Quality(70))                      .BuildVideoTag(SOURCE_MOVIE).ToString();
Magic Number,CloudinaryDotNet.Test.Tag,VideoTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\VideoTagTest.cs,TestVideoTagWithSourceTransformation,The following statement contains a magic number: var actualTag = m_api.UrlVideoUp.Transform(new Transformation().Quality(50).Chain().Width(100))                      .SourceTransformationFor("mp4"' new Transformation().Quality(30))                      .SourceTransformationFor("ogv"' new Transformation().Quality(70))                      .BuildVideoTag(SOURCE_MOVIE).ToString();
Magic Number,CloudinaryDotNet.Test.Tag,VideoTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\VideoTagTest.cs,TestVideoTagWithSourceTransformation,The following statement contains a magic number: var actualTag = m_api.UrlVideoUp.Transform(new Transformation().Quality(50).Chain().Width(100))                      .SourceTransformationFor("mp4"' new Transformation().Quality(30))                      .SourceTransformationFor("ogv"' new Transformation().Quality(70))                      .BuildVideoTag(SOURCE_MOVIE).ToString();
Magic Number,CloudinaryDotNet.Test.Tag,VideoTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\VideoTagTest.cs,TestVideoTagWithSourceTransformation,The following statement contains a magic number: var actualTag = m_api.UrlVideoUp.Transform(new Transformation().Quality(50).Chain().Width(100))                      .SourceTransformationFor("mp4"' new Transformation().Quality(30))                      .SourceTransformationFor("ogv"' new Transformation().Quality(70))                      .BuildVideoTag(SOURCE_MOVIE).ToString();
Magic Number,CloudinaryDotNet.Test.Tag,VideoTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\VideoTagTest.cs,TestVideoTagWithSourceTransformation,The following statement contains a magic number: actualTag = m_api.UrlVideoUp.Transform(new Transformation().Quality(50).Chain().Width(100))                      .SourceTransformationFor("mp4"' new Transformation().Quality(30))                      .SourceTransformationFor("ogv"' new Transformation().Quality(70))                      .SourceTypes("webm"' "mp4").BuildVideoTag(SOURCE_MOVIE).ToString();
Magic Number,CloudinaryDotNet.Test.Tag,VideoTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\VideoTagTest.cs,TestVideoTagWithSourceTransformation,The following statement contains a magic number: actualTag = m_api.UrlVideoUp.Transform(new Transformation().Quality(50).Chain().Width(100))                      .SourceTransformationFor("mp4"' new Transformation().Quality(30))                      .SourceTransformationFor("ogv"' new Transformation().Quality(70))                      .SourceTypes("webm"' "mp4").BuildVideoTag(SOURCE_MOVIE).ToString();
Magic Number,CloudinaryDotNet.Test.Tag,VideoTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\VideoTagTest.cs,TestVideoTagWithSourceTransformation,The following statement contains a magic number: actualTag = m_api.UrlVideoUp.Transform(new Transformation().Quality(50).Chain().Width(100))                      .SourceTransformationFor("mp4"' new Transformation().Quality(30))                      .SourceTransformationFor("ogv"' new Transformation().Quality(70))                      .SourceTypes("webm"' "mp4").BuildVideoTag(SOURCE_MOVIE).ToString();
Magic Number,CloudinaryDotNet.Test.Tag,VideoTagTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Tag\VideoTagTest.cs,TestVideoTagWithSourceTransformation,The following statement contains a magic number: actualTag = m_api.UrlVideoUp.Transform(new Transformation().Quality(50).Chain().Width(100))                      .SourceTransformationFor("mp4"' new Transformation().Quality(30))                      .SourceTransformationFor("ogv"' new Transformation().Quality(70))                      .SourceTypes("webm"' "mp4").BuildVideoTag(SOURCE_MOVIE).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestBitRate,The following statement contains a magic number: var actual = new Transformation().BitRate(2048).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestAudioFrequency,The following statement contains a magic number: var actual = new Transformation().AudioFrequency(44100).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestKeyframeInterval,The following statement contains a magic number: Assert.AreEqual("ki_10.0"' new Transformation().KeyframeInterval(10).ToString());
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestKeyframeInterval,The following statement contains a magic number: Assert.AreEqual("ki_0.05"' new Transformation().KeyframeInterval(0.05f).ToString());
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestKeyframeInterval,The following statement contains a magic number: Assert.AreEqual("ki_3.45"' new Transformation().KeyframeInterval(3.45f).ToString());
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestKeyframeInterval,The following statement contains a magic number: Assert.AreEqual("ki_300.0"' new Transformation().KeyframeInterval(300).ToString());
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestKeyframeInterval,The following statement contains a magic number: Assert.That(() => new Transformation().KeyframeInterval(-10).ToString()'                  Throws.TypeOf<ArgumentException>()' "Should throw an exception when keyframe interval is less than 0.");
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestVideoSampling,The following statement contains a magic number: var actual = new Transformation().VideoSamplingFrames(20).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestVideoSampling,The following statement contains a magic number: actual = new Transformation().VideoSamplingSeconds(20).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestVideoSampling,The following statement contains a magic number: actual = new Transformation().VideoSamplingSeconds(20.0).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestStartOffset,The following statement contains a magic number: var actual = new Transformation().StartOffset(2.63).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestStartOffset,The following statement contains a magic number: actual = new Transformation().StartOffsetPercent(2.63).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestDuration,The following statement contains a magic number: var actual = new Transformation().Duration(2.63).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestDuration,The following statement contains a magic number: actual = new Transformation().DurationPercent(2.63).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestOffset,The following statement contains a magic number: actual = new Transformation().Offset(new float[] { 2.67f' 3.22f }).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestOffset,The following statement contains a magic number: actual = new Transformation().Offset(new float[] { 2.67f' 3.22f }).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestOffset,The following statement contains a magic number: actual = new Transformation().Offset(new double[] { 2.67' 3.22 }).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestOffset,The following statement contains a magic number: actual = new Transformation().Offset(new double[] { 2.67' 3.22 }).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestStartEndOffset,The following statement contains a magic number: actual = new Transformation().StartOffset(2.67f).EndOffset(3.22f).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestStartEndOffset,The following statement contains a magic number: actual = new Transformation().StartOffset(2.67f).EndOffset(3.22f).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestStartEndOffset,The following statement contains a magic number: actual = new Transformation().StartOffset(2.67).EndOffset(3.22).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestStartEndOffset,The following statement contains a magic number: actual = new Transformation().StartOffset(2.67).EndOffset(3.22).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestZoomVideo,The following statement contains a magic number: actual = new Transformation().Zoom(1.5).ToString();
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestVideoFps,The following statement contains a magic number: var testPairs = new Dictionary<Transformation' string>()              {                  {new Transformation().Fps(24' 29.97)' "fps_24-29.97"}'                  {new Transformation().Fps(29.97)' "fps_29.97"}'                  {new Transformation().Fps(24)' "fps_24"}'                  {new Transformation().Fps(null' 29.97)' "fps_-29.97"}'                  {new Transformation().Fps(24' null)' "fps_24-"}'                  {new Transformation().Fps("$v")' "fps_$v"}'                  {new Transformation().Fps("$min"' "$max")' "fps_$min-$max"}'                  {new Transformation().Fps("24-29.97")' "fps_24-29.97"}'              };
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestVideoFps,The following statement contains a magic number: var testPairs = new Dictionary<Transformation' string>()              {                  {new Transformation().Fps(24' 29.97)' "fps_24-29.97"}'                  {new Transformation().Fps(29.97)' "fps_29.97"}'                  {new Transformation().Fps(24)' "fps_24"}'                  {new Transformation().Fps(null' 29.97)' "fps_-29.97"}'                  {new Transformation().Fps(24' null)' "fps_24-"}'                  {new Transformation().Fps("$v")' "fps_$v"}'                  {new Transformation().Fps("$min"' "$max")' "fps_$min-$max"}'                  {new Transformation().Fps("24-29.97")' "fps_24-29.97"}'              };
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestVideoFps,The following statement contains a magic number: var testPairs = new Dictionary<Transformation' string>()              {                  {new Transformation().Fps(24' 29.97)' "fps_24-29.97"}'                  {new Transformation().Fps(29.97)' "fps_29.97"}'                  {new Transformation().Fps(24)' "fps_24"}'                  {new Transformation().Fps(null' 29.97)' "fps_-29.97"}'                  {new Transformation().Fps(24' null)' "fps_24-"}'                  {new Transformation().Fps("$v")' "fps_$v"}'                  {new Transformation().Fps("$min"' "$max")' "fps_$min-$max"}'                  {new Transformation().Fps("24-29.97")' "fps_24-29.97"}'              };
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestVideoFps,The following statement contains a magic number: var testPairs = new Dictionary<Transformation' string>()              {                  {new Transformation().Fps(24' 29.97)' "fps_24-29.97"}'                  {new Transformation().Fps(29.97)' "fps_29.97"}'                  {new Transformation().Fps(24)' "fps_24"}'                  {new Transformation().Fps(null' 29.97)' "fps_-29.97"}'                  {new Transformation().Fps(24' null)' "fps_24-"}'                  {new Transformation().Fps("$v")' "fps_$v"}'                  {new Transformation().Fps("$min"' "$max")' "fps_$min-$max"}'                  {new Transformation().Fps("24-29.97")' "fps_24-29.97"}'              };
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestVideoFps,The following statement contains a magic number: var testPairs = new Dictionary<Transformation' string>()              {                  {new Transformation().Fps(24' 29.97)' "fps_24-29.97"}'                  {new Transformation().Fps(29.97)' "fps_29.97"}'                  {new Transformation().Fps(24)' "fps_24"}'                  {new Transformation().Fps(null' 29.97)' "fps_-29.97"}'                  {new Transformation().Fps(24' null)' "fps_24-"}'                  {new Transformation().Fps("$v")' "fps_$v"}'                  {new Transformation().Fps("$min"' "$max")' "fps_$min-$max"}'                  {new Transformation().Fps("24-29.97")' "fps_24-29.97"}'              };
Magic Number,CloudinaryDotNet.Test.Transformations.Video,VideoTransformationTest,D:\research\architectureSmells\repos\cloudinary_CloudinaryDotNet\Shared.Tests\Transformations\Video\VideoTransformationTest.cs,TestVideoFps,The following statement contains a magic number: var testPairs = new Dictionary<Transformation' string>()              {                  {new Transformation().Fps(24' 29.97)' "fps_24-29.97"}'                  {new Transformation().Fps(29.97)' "fps_29.97"}'                  {new Transformation().Fps(24)' "fps_24"}'                  {new Transformation().Fps(null' 29.97)' "fps_-29.97"}'                  {new Transformation().Fps(24' null)' "fps_24-"}'                  {new Transformation().Fps("$v")' "fps_$v"}'                  {new Transformation().Fps("$min"' "$max")' "fps_$min-$max"}'                  {new Transformation().Fps("24-29.97")' "fps_24-29.97"}'              };
