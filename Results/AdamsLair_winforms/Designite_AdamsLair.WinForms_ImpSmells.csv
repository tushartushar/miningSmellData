Implementation smell,Namespace,Class,File,Method,Description
Long Method,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The method has 402 lines of code.
Long Method,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The method has 152 lines of code.
Long Method,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The method has 172 lines of code.
Long Method,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The method has 221 lines of code.
Long Method,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,The method has 152 lines of code.
Long Method,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The method has 228 lines of code.
Long Method,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,DrawRuler,The method has 140 lines of code.
Long Method,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,PaintHeader,The method has 116 lines of code.
Long Method,AdamsLair.WinForms.PropertyEditing.Templates,StringEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\StringEditorTemplate.cs,OnKeyDown,The method has 145 lines of code.
Complex Method,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawStringLine,Cyclomatic complexity of the method is 8
Complex Method,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextField,Cyclomatic complexity of the method is 9
Complex Method,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,Cyclomatic complexity of the method is 14
Complex Method,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,PickModelIndexAt,Cyclomatic complexity of the method is 11
Complex Method,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,UpdateSelectionIndices,Cyclomatic complexity of the method is 11
Complex Method,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,OnPaintItem,Cyclomatic complexity of the method is 11
Complex Method,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,OnKeyDown,Cyclomatic complexity of the method is 9
Complex Method,AdamsLair.WinForms.PropertyEditing.Editors,IListPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IListPropertyEditor.cs,UpdateElementEditors,Cyclomatic complexity of the method is 9
Complex Method,AdamsLair.WinForms.PropertyEditing.Editors,IListPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IListPropertyEditor.cs,SizeValueSetter,Cyclomatic complexity of the method is 9
Complex Method,AdamsLair.WinForms.PropertyEditing.Editors,IDictionaryPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IDictionaryPropertyEditor.cs,UpdateElementEditors,Cyclomatic complexity of the method is 12
Complex Method,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,Cyclomatic complexity of the method is 20
Complex Method,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnModelGraphsAdded,Cyclomatic complexity of the method is 11
Complex Method,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaint,Cyclomatic complexity of the method is 10
Complex Method,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,Cyclomatic complexity of the method is 8
Complex Method,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,Cyclomatic complexity of the method is 8
Complex Method,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,GetTrackAtPos,Cyclomatic complexity of the method is 9
Complex Method,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,UpdateMouseoverState,Cyclomatic complexity of the method is 11
Complex Method,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnModelTracksAdded,Cyclomatic complexity of the method is 11
Complex Method,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,Cyclomatic complexity of the method is 29
Complex Method,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,DrawRuler,Cyclomatic complexity of the method is 10
Complex Method,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,PaintHeader,Cyclomatic complexity of the method is 16
Complex Method,AdamsLair.WinForms.PropertyEditing,MemberwisePropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\MemberwisePropertyEditor.cs,VerifyReflectedTypeEditors,Cyclomatic complexity of the method is 10
Complex Method,AdamsLair.WinForms.PropertyEditing,PropertyGrid,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyGrid.cs,OnKeyDown,Cyclomatic complexity of the method is 10
Complex Method,AdamsLair.WinForms.PropertyEditing.Templates,BitmaskEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\BitmaskEditorTemplate.cs,DefaultValueStringGenerator,Cyclomatic complexity of the method is 8
Long Parameter List,AdamsLair.WinForms.ColorControls,ColorPanel,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPanel.cs,SetupGradient,The method has 5 parameters. Parameters: tl' tr' bl' br' accuracy
Long Parameter List,AdamsLair.WinForms.ColorControls,ColorPanel,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPanel.cs,SetupXYGradient,The method has 5 parameters. Parameters: left' right' bottom' top' accuracy
Long Parameter List,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawStringLine,The method has 8 parameters. Parameters: g' text' font' textRect' textColor' align' lineAlign' trimming
Long Parameter List,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,MeasureStringLine,The method has 7 parameters. Parameters: g' text' measureRanges' font' textRect' align' lineAlign
Long Parameter List,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,PickCharStringLine,The method has 6 parameters. Parameters: text' font' textRect' pickLoc' align' lineAlign
Long Parameter List,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The method has 5 parameters. Parameters: g' rect' state' style' backColor
Long Parameter List,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextField,The method has 11 parameters. Parameters: g' rect' text' font' textColor' backColor' state' style' scroll' cursorPos' selLength
Long Parameter List,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,PickCharTextField,The method has 6 parameters. Parameters: rect' text' font' style' pickLoc' scroll
Long Parameter List,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,GetCharPosTextField,The method has 6 parameters. Parameters: rect' text' font' style' index' scroll
Long Parameter List,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The method has 5 parameters. Parameters: g' rect' state' text' icon
Long Parameter List,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The method has 5 parameters. Parameters: g' rect' state' text' icon
Long Parameter List,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The method has 5 parameters. Parameters: g' rect' state' text' icon
Long Parameter List,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The method has 5 parameters. Parameters: g' rect' state' text' icon
Long Parameter List,AdamsLair.WinForms.ItemViews,TiledViewItemMouseEventArgs,C:\repos\AdamsLair_winforms\WinForms\ItemViews\EventArgs\TiledViewItemMouseEventArgs.cs,TiledViewItemMouseEventArgs,The method has 5 parameters. Parameters: view' modelIndex' item' location' buttons
Long Parameter List,AdamsLair.WinForms.ItemViews,TiledViewItemDrawEventArgs,C:\repos\AdamsLair_winforms\WinForms\ItemViews\EventArgs\TiledViewItemDrawEventArgs.cs,TiledViewItemDrawEventArgs,The method has 7 parameters. Parameters: view' modelIndex' item' graphics' itemRect' selected' hovered
Long Parameter List,AdamsLair.WinForms.TimelineControls,TimelineViewSelectionEventArgs,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\EventArgs\TimelineViewSelectionEventArgs.cs,TimelineViewSelectionEventArgs,The method has 5 parameters. Parameters: view' begin' end' lastBegin' lastEnd
Long Parameter List,AdamsLair.WinForms.TimelineControls,TimelineViewTrackPaintEventArgs,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\EventArgs\TimelineViewTrackPaintEventArgs.cs,TimelineViewTrackPaintEventArgs,The method has 6 parameters. Parameters: track' graphics' qualityHint' targetRect' beginTime' endTime
Long Parameter List,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,GetCurvePoints,The method has 6 parameters. Parameters: trackArea' sampleQuality' curveFunc' minPixelStep' beginUnitX' endUnitX
Long Parameter List,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,GetLinearInterpolationError,The method has 5 parameters. Parameters: beginX' beginY' endX' endY' func
Long Parameter List,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,EnumerateRulerMarks,The method has 5 parameters. Parameters: stepSize' unitScroll' beginUnits' endUnits' stepCountMultiple
Long Statement,AdamsLair.WinForms.ColorControls,ColorPanel,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPanel.cs,SetupHueSaturationGradient,The length of the statement  "				Color.FromArgb((int)Math.Round(255.0f * brightness)' (int)Math.Round(255.0f * brightness)' (int)Math.Round(255.0f * brightness))' " is 129.
Long Statement,AdamsLair.WinForms.ColorControls,ColorPanel,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPanel.cs,OnPaint,The length of the statement  "				e.Graphics.FillRectangle(new HatchBrush(HatchStyle.LargeCheckerBoard' this.renderer.ColorLightBackground' this.renderer.ColorDarkBackground)' colorArea); " is 153.
Long Statement,AdamsLair.WinForms.ColorControls,ColorPanel,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPanel.cs,OnPaint,The length of the statement  "			e.Graphics.DrawImage(this.srcImage' colorArea' 0' 0' this.srcImage.Width - 1' this.srcImage.Height - 1' GraphicsUnit.Pixel); " is 124.
Long Statement,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorShowBox,The length of the statement  "			this.colorShowBox.UpperColor = this.alphaEnabled ? this.oldColor.ToColor() : Color.FromArgb(255' this.oldColor.ToColor()); " is 122.
Long Statement,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorShowBox,The length of the statement  "			this.colorShowBox.LowerColor = this.alphaEnabled ? this.selColor.ToColor() : Color.FromArgb(255' this.selColor.ToColor()); " is 122.
Long Statement,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,textBoxHex_TextChanged,The length of the statement  "			if (int.TryParse(this.textBoxHex.Text' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.CurrentUICulture' out argb)) " is 145.
Long Statement,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ColorPickerDialog)); " is 137.
Long Statement,AdamsLair.WinForms.ColorControls,ColorShowBox,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorShowBox.cs,OnPaint,The length of the statement  "				e.Graphics.FillRectangle(new HatchBrush(HatchStyle.LargeCheckerBoard' this.renderer.ColorLightBackground' this.renderer.ColorDarkBackground)' colorArea); " is 153.
Long Statement,AdamsLair.WinForms.ColorControls,ColorSlider,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorSlider.cs,OnPaint,The length of the statement  "				e.Graphics.FillRectangle(new HatchBrush(HatchStyle.LargeCheckerBoard' this.renderer.ColorLightBackground' this.renderer.ColorDarkBackground)' colorArea); " is 153.
Long Statement,AdamsLair.WinForms.ColorControls,ColorSlider,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorSlider.cs,OnPaint,The length of the statement  "			e.Graphics.DrawImage(this.srcImage' colorArea' 0' 0' this.srcImage.Width' this.srcImage.Height - 1' GraphicsUnit.Pixel' colorAreaImageAttr); " is 140.
Long Statement,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,GetBackgroundColor,The length of the statement  "			brightnessScale *= (float)Math.Pow(this.NestedBrightnessScale' Math.Max((indent - this.NestedBrightnessOffset) / PropertyEditing.GroupedPropertyEditor.DefaultIndent' 0)); " is 170.
Long Statement,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The length of the statement  "			Rectangle innerRectLower = new Rectangle(innerRect.X' innerRect.Y + innerRectUpper.Height' innerRect.Width' innerRect.Height - innerRectUpper.Height); " is 150.
Long Statement,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The length of the statement  "				g.DrawLine(new Pen((lowerBrush as LinearGradientBrush).LinearColors[1])' innerRectLower.X + 1' innerRectLower.Bottom - 1' innerRectLower.Right - 2' innerRectLower.Bottom - 1); " is 175.
Long Statement,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The length of the statement  "				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect); " is 126.
Long Statement,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The length of the statement  "			innerRect = new Rectangle(innerRect.X + 2' innerRect.Y' innerRect.Width - dropDownIconRect.Width - 6' innerRect.Height); " is 120.
Long Statement,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The length of the statement  "				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect); " is 126.
Long Statement,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitCheckBox,The length of the statement  "				System.Windows.Forms.VisualStyles.CheckBoxState vsState = System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal; " is 122.
Long Statement,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitCheckBox,The length of the statement  "					case CheckBoxState.UncheckedDisabled:	vsState = System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled;	break; " is 121.
Long Statement,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitCheckBox,The length of the statement  "					case CheckBoxState.UncheckedPressed:	vsState = System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed;		break; " is 120.
Long Statement,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The length of the statement  "					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal); " is 126.
Long Statement,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The length of the statement  "					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot); " is 123.
Long Statement,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The length of the statement  "					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed); " is 127.
Long Statement,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The length of the statement  "					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled); " is 128.
Long Statement,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The length of the statement  "			g.DrawRectangle(gridPen' this.ClientRectangle.X' this.ClientRectangle.Y' this.ClientRectangle.Width - 1' this.ClientRectangle.Height - 1); " is 138.
Long Statement,AdamsLair.WinForms.ItemModels,MenuModel,C:\repos\AdamsLair_winforms\WinForms\ItemModels\MenuModel.cs,RequestItem,The length of the statement  "				MenuModelItem item = rootItems.FirstOrDefault(c => string.Equals(c.Name' itemNameTreePath[0]' StringComparison.InvariantCultureIgnoreCase)); " is 140.
Long Statement,AdamsLair.WinForms.ItemModels,MenuModel,C:\repos\AdamsLair_winforms\WinForms\ItemModels\MenuModel.cs,RequestItem,The length of the statement  "					resultItem = item.Items.FirstOrDefault(c => string.Equals(c.Name' itemNameTreePath[i]' StringComparison.InvariantCultureIgnoreCase)); " is 133.
Long Statement,AdamsLair.WinForms.ItemViews,MenuStripMenuView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\MenuStripMenuView.cs,UpdateItemProperties,The length of the statement  "			viewItem.Available	= modelItem.Visible && (modelItem.TypeHint != MenuItemTypeHint.Separator || this.visibleSeparators.Contains(viewItem)); " is 138.
Long Statement,AdamsLair.WinForms.ItemViews,MenuStripMenuView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\MenuStripMenuView.cs,model_ItemsChanged,The length of the statement  "						if (modelItem.Parent != null && this.viewItems.TryGetValue(modelItem.Parent' out parentViewItem) && parentViewItem is ToolStripMenuItem) " is 136.
Long Statement,AdamsLair.WinForms.ItemViews,TiledViewTextItemEditor,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledViewTextItemEditor.cs,GetValueFromItem,The length of the statement  "			PropertyInfo property = itemType.GetProperty(this.editedPropertyName' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 140.
Long Statement,AdamsLair.WinForms.ItemViews,TiledViewTextItemEditor,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledViewTextItemEditor.cs,ApplyValueToItem,The length of the statement  "			PropertyInfo property = itemType.GetProperty(this.editedPropertyName' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 140.
Long Statement,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,ScrollToModelIndex,The length of the statement  "			if (scrolledPos.Y >= this.Padding.Top && scrolledPos.Y + this.tileSize.Height <= this.ClientSize.Height - this.Padding.Bottom) " is 126.
Long Statement,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,ScrollToModelIndex,The length of the statement  "				this.AutoScrollPosition = new Point(-this.AutoScrollPosition.X' -this.AutoScrollPosition.Y - (this.Padding.Top - scrolledPos.Y)); " is 129.
Long Statement,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,ScrollToModelIndex,The length of the statement  "				this.AutoScrollPosition = new Point(-this.AutoScrollPosition.X' -this.AutoScrollPosition.Y + (scrolledPos.Y + this.tileSize.Height) - (this.ClientSize.Height - this.Padding.Bottom)); " is 182.
Long Statement,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,OnPaint,The length of the statement  "					this.cachedEventItemUserPaint.IsSelected = i >= firstSelected && i <= lastSelected && this.selection.Any(s => s.ModelIndex == i); " is 129.
Long Statement,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,ProcessCmdKey,The length of the statement  "			if (keyData.HasFlag(Keys.Up) || keyData.HasFlag(Keys.Down) || keyData.HasFlag(Keys.Left) || keyData.HasFlag(Keys.Right)) " is 120.
Long Statement,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,OnMouseMove,The length of the statement  "					this.OnItemDrag(new TiledViewItemMouseEventArgs(this' this.dragIndex' this.model.GetItemAt(this.dragIndex)' new Point(e.X - itemPos.X' e.Y - itemPos.Y)' e.Button)); " is 164.
Long Statement,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,OnMouseClick,The length of the statement  "				this.OnItemClicked(new TiledViewItemMouseEventArgs(this' this.hoverIndex' this.model.GetItemAt(this.hoverIndex)' new Point(e.X - itemPos.X' e.Y - itemPos.Y)' e.Button)); " is 169.
Long Statement,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,OnMouseDoubleClick,The length of the statement  "				this.OnItemDoubleClicked(new TiledViewItemMouseEventArgs(this' this.hoverIndex' this.model.GetItemAt(this.hoverIndex)' new Point(e.X - itemPos.X' e.Y - itemPos.Y)' e.Button)); " is 175.
Long Statement,AdamsLair.WinForms.PropertyEditing.Editors,LabelPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\LabelPropertyEditor.cs,OnGetValue,The length of the statement  "				this.valMultiple = this.valMultiple || values.Any(o => o == null || this.GetLabelFor(o' ref this.valMultiple) != this.val); " is 123.
Long Statement,AdamsLair.WinForms.PropertyEditing.Editors,IListPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IListPropertyEditor.cs,UpdateElementEditors,The length of the statement  "			Type reflectedArrayType = PropertyEditor.ReflectDynamicType(elementType' valuesNotNull.Select(a => GetIListElementType(a.GetType()))); " is 134.
Long Statement,AdamsLair.WinForms.PropertyEditing.Editors,IListPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IListPropertyEditor.cs,SizeValueSetter,The length of the statement  "			Type reflectedArrayType = PropertyEditor.ReflectDynamicType(elementType' targetArray.Select(a => GetIListElementType(a.GetType()))); " is 132.
Long Statement,AdamsLair.WinForms.PropertyEditing.Editors,IListPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IListPropertyEditor.cs,GetIListElementType,The length of the statement  "			else if ((ilistInterface = listType.GetInterfaces().Where(t => t.IsGenericType && t.GetGenericTypeDefinition() == typeof(IList<>)).FirstOrDefault()) != null) " is 157.
Long Statement,AdamsLair.WinForms.PropertyEditing.Editors,IDictionaryPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IDictionaryPropertyEditor.cs,UpdateElementEditors,The length of the statement  "			Type reflectedDictValueType = PropertyEditor.ReflectDynamicType(dictValueType' valuesNotNull.Select(a => GetIDictionaryValueType(a.GetType()))); " is 144.
Long Statement,AdamsLair.WinForms.PropertyEditing.Editors,IDictionaryPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IDictionaryPropertyEditor.cs,AddKeyToDictionary,The length of the statement  "			Type reflectedValueType = PropertyEditor.ReflectDynamicType(valueType' targetArray.Select(a => GetIDictionaryValueType(a.GetType()))); " is 134.
Long Statement,AdamsLair.WinForms.PropertyEditing.Editors,IDictionaryPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IDictionaryPropertyEditor.cs,GetIDictionaryValueType,The length of the statement  "			else if ((idictionaryInterface = dictType.GetInterfaces().Where(t => t.IsGenericType && t.GetGenericTypeDefinition() == typeof(IDictionary<'>)).FirstOrDefault()) != null) " is 170.
Long Statement,AdamsLair.WinForms.PropertyEditing.Editors,IDictionaryPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IDictionaryPropertyEditor.cs,GetIDictionaryKeyType,The length of the statement  "			else if ((idictionaryInterface = dictType.GetInterfaces().Where(t => t.IsGenericType && t.GetGenericTypeDefinition() == typeof(IDictionary<'>)).FirstOrDefault()) != null) " is 170.
Long Statement,AdamsLair.WinForms.PropertyEditing.Editors,ObjectSelectorPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\ObjectSelectorPropertyEditor.cs,UpdateEditorValue,The length of the statement  "			this.objSelector.SelectedObject = this.objSelector.DropDownItems.Cast<ObjectItem>().FirstOrDefault(i => object.Equals(i.Value' this.val)); " is 138.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The length of the statement  "			// Ignore e.BeginTime and e.EndTime for sampling' as we're heavily dependent on rounding errors' etc. while undersampling. Instead' always sample the whole curve. " is 162.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The length of the statement  "			float endUnitX = Math.Min(this.ParentView.UnitOriginOffset - this.ParentView.UnitScroll + this.ParentView.VisibleUnitWidth' this.model.EndTime); " is 144.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The length of the statement  "					this.cacheCurveVertices = this.GetCurvePoints(rect' e.GetAdjustedQuality(this.parentTrack.CurvePrecision)' this.model.GetValueAtX' minPixelStep' beginUnitX' endUnitX); " is 167.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The length of the statement  "							float relativeX = (float)(this.cacheCurveVertices[(int)((float)i * (this.cacheCurveVertices.Length - 1) / (float)(baseBlend.Length - 1))].X - rect.X) / (float)rect.Width; " is 170.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The length of the statement  "						this.cacheEnvelopeGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal); " is 128.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The length of the statement  "						this.cacheCurveGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal); " is 125.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The length of the statement  "							curveBlend.Colors[i] = Color.FromArgb((int)((1.0f - localOpacity) * (1.0f - localOpacity) * this.curveOpacity * 255.0f)' this.baseColor); " is 137.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,GetCurvePoints,The length of the statement  "				float errorThreshold = 1.0f * Math.Abs(this.parentTrack.VerticalUnitTop - this.parentTrack.VerticalUnitBottom) / trackArea.Height; " is 130.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,GetVisibleRulerMarks,The length of the statement  "			foreach (float unitValue in TimelineView.EnumerateRulerMarks(rulerStep' 0.0f' this.verticalUnitTop' this.verticalUnitBottom' 1)) " is 128.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,GetVisibleRulerMarks,The length of the statement  "				if (Math.Abs(unitValue - this.verticalUnitTop) >= rulerStep && Math.Abs(unitValue - this.verticalUnitBottom) >= rulerStep) " is 122.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,AdjustVerticalUnits,The length of the statement  "					targetTop = TimelineView.GetNiceMultiple(maxUnits' TimelineView.NiceMultipleMode.Higher' TimelineView.NiceMultipleGranularity.High); " is 132.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,AdjustVerticalUnits,The length of the statement  "					targetBottom = TimelineView.GetNiceMultiple(minUnits' TimelineView.NiceMultipleMode.Lower' TimelineView.NiceMultipleGranularity.High); " is 134.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,UpdateMouseoverState,The length of the statement  "				float maxValue = graph.Model.GetMaxValueInRange(cursorUnits.X - unitsPerPixel.X * 2.5f' cursorUnits.X + unitsPerPixel.X * 2.5f); " is 128.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,UpdateMouseoverState,The length of the statement  "				float minValue = graph.Model.GetMinValueInRange(cursorUnits.X - unitsPerPixel.X * 2.5f' cursorUnits.X + unitsPerPixel.X * 2.5f); " is 128.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,UpdateDisplayedGraphInfo,The length of the statement  "							float sampleTime = mouseoverTime - unitEnvelopeRadius + ((float)i / (float)(SampleCount - 1)) * 2.0f * unitEnvelopeRadius; " is 122.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnModelGraphsAdded,The length of the statement  "					foreach (TimelineModelViewAssignmentAttribute attrib in graphType.GetCustomAttributes(true).OfType<TimelineModelViewAssignmentAttribute>()) " is 139.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaint,The length of the statement  "				float endUnitX = Math.Min(this.ParentView.UnitOriginOffset - this.ParentView.UnitScroll + this.ParentView.VisibleUnitWidth' this.ContentEndTime); " is 145.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaint,The length of the statement  "			e.Graphics.DrawLine(new Pen(e.Renderer.ColorVeryDarkBackground)' rect.Left' rect.Bottom - 1' rect.Right' rect.Bottom - 1); " is 122.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The length of the statement  "						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels)); " is 204.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The length of the statement  "						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height); " is 130.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The length of the statement  "						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv); " is 153.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The length of the statement  "						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height); " is 125.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The length of the statement  "						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv); " is 153.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The length of the statement  "						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height); " is 125.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,The length of the statement  "				int maxUnitWidth = Math.Max(Math.Max(rectUnitMarkings.Width' (int)verticalTopTextSize.Width + 2)' (int)verticalBottomTextSize.Width + 2); " is 137.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,The length of the statement  "				g.DrawString(verticalTopText' r.FontSmall' new SolidBrush(r.ColorText)' left ? rectUnitMarkings.Right - textSize.Width : rectUnitMarkings.Left' rectUnitMarkings.Top); " is 166.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,The length of the statement  "				g.DrawString(verticalBottomText' r.FontSmall' new SolidBrush(r.ColorText)' left ? rectUnitMarkings.Right - textSize.Width : rectUnitMarkings.Left' rectUnitMarkings.Bottom - textSize.Height - 1); " is 194.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,AdjustZoomLevel,The length of the statement  "			if (!this.ClientRectangle.Contains(targetPos)) targetPos = new Point(this.ClientRectangle.Width / 2' this.ClientRectangle.Height / 2); " is 134.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,InvalidateContent,The length of the statement  "			Rectangle invalidateRect = new Rectangle(this.rectContentArea.X' 0' this.rectContentArea.Width' this.ClientRectangle.Height); " is 125.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,UpdateContentHeight,The length of the statement  "			int additionalHeight = Math.Max(0' this.ClientSize.Height - contentBaseHeight - this.trackSpacing * (this.trackList.Count - 1) + 2); " is 132.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,UpdateContentHeight,The length of the statement  "						growHeight = Math.Min(availHeight' (int)Math.Round((float)additionalHeight * (float)track.FillHeight / (float)totalFill)); " is 122.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,UpdateContentHeight,The length of the statement  "			int contentHeight = this.areaTopRuler.Size + this.areaBottomRuler.Size + this.trackList.Sum(t => t.Height) + this.trackSpacing * (this.trackList.Count - 1) - 2; " is 160.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,UpdateContentWidth,The length of the statement  "					1 + (int)this.ConvertUnitsToPixels(contentEndTime - this.unitOffset) + this.areaLeftSidebar.Size + this.areaRightSidebar.Size'  " is 126.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,UpdateMouseoverState,The length of the statement  "				this.mouseoverTrack.OnMouseMove(new MouseEventArgs(Control.MouseButtons' 0' mousePos.X - trackRect.X' mousePos.Y - trackRect.Y' 0)); " is 132.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnModelTracksAdded,The length of the statement  "					foreach (TimelineModelViewAssignmentAttribute attrib in trackType.GetCustomAttributes(true).OfType<TimelineModelViewAssignmentAttribute>()) " is 139.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnKeyDown,The length of the statement  "				this.AutoScrollPosition = new Point(-this.AutoScrollPosition.X' -this.AutoScrollPosition.Y - this.ClientSize.Height / 50); " is 122.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnKeyDown,The length of the statement  "				this.AutoScrollPosition = new Point(-this.AutoScrollPosition.X' -this.AutoScrollPosition.Y + this.ClientSize.Height / 50); " is 122.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The length of the statement  "				foreach (TimelineViewRulerMark mark in this.GetVisibleRulerMarks((int)e.Graphics.ClipBounds.Left' (int)e.Graphics.ClipBounds.Right)) " is 132.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The length of the statement  "					Rectangle lineRect = new Rectangle((int)mark.PixelValue' (int)this.rectContentArea.Y' 1' (int)this.rectContentArea.Height); " is 123.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The length of the statement  "				e.Graphics.DrawLine(pen' selectionPixelsBegin' this.rectContentArea.Top' selectionPixelsBegin' this.rectContentArea.Bottom); " is 124.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The length of the statement  "				e.Graphics.DrawLine(pen' selectionPixelsEnd' this.rectContentArea.Top' selectionPixelsEnd' this.rectContentArea.Bottom); " is 120.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The length of the statement  "				e.Graphics.DrawLine(mouseoverTimePen' mouseoverPixels' this.rectContentArea.Top' mouseoverPixels' this.rectContentArea.Bottom); " is 127.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The length of the statement  "				shadowBlend.Colors		= new[] {	Color.FromArgb(64' shadowColor)'	Color.FromArgb(16' shadowColor)'	Color.FromArgb(0' shadowColor) }; " is 129.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The length of the statement  "				Rectangle dropShadowH = new Rectangle(this.rectContentArea.Left' this.rectContentArea.Top' this.rectContentArea.Width' Math.Min(12' this.rectContentArea.Height)); " is 162.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The length of the statement  "				Rectangle dropShadowV = new Rectangle(this.rectContentArea.Left' this.rectContentArea.Top' Math.Min(12' this.rectContentArea.Width)' this.rectContentArea.Height); " is 162.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The length of the statement  "				e.Graphics.FillEllipse(new SolidBrush(this.renderer.ColorText.ScaleAlpha(0.5f))' this.mouseActionOrigin.X - 3' this.mouseActionOrigin.Y - 3' 6' 6); " is 147.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The length of the statement  "				e.Graphics.DrawLine(new Pen(this.renderer.ColorText.ScaleAlpha(0.5f))' this.mouseActionOrigin' this.PointToClient(Cursor.Position)); " is 132.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,DrawRuler,The length of the statement  "					bool drawMark = (mark.PixelValue - rectUnitMarkings.Left >= 1.0f) && (rectUnitMarkings.Right - mark.PixelValue >= 1.0f); " is 120.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,DrawRuler,The length of the statement  "						markTextY = rectUnitMarkings.Bottom - this.renderer.FontRegular.Height - Math.Max(Math.Min(3 + rectUnitMarkings.Top - rectUnitName.Bottom' rectUnitMarkings.Height / 2)' 0); " is 172.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,DrawRuler,The length of the statement  "						markTextY = rectUnitMarkings.Top + Math.Max(Math.Min(3 + rectUnitName.Top - rectUnitMarkings.Bottom' rectUnitMarkings.Height / 2)' 0); " is 134.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,RaiseSelectionChanged,The length of the statement  "			this.OnSelectionChanged(new TimelineViewSelectionEventArgs(this' this.SelectionBeginTime' this.SelectionEndTime' lastBegin' lastEnd)); " is 134.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewTrack.cs,Invalidate,The length of the statement  "			float fromPixels = Math.Max(this.parentView.GetPosAtUnit(fromUnits)' rectOnParent.Left + this.parentView.LeftSidebarSize) - 1; " is 126.
Long Statement,AdamsLair.WinForms.TimelineControls,TimelineViewTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewTrack.cs,Invalidate,The length of the statement  "			float toPixels = Math.Min(this.parentView.GetPosAtUnit(toUnits)' rectOnParent.Right - this.parentView.RightSidebarSize) + 2; " is 124.
Long Statement,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,UpdateGeometry,The length of the statement  "			this.headerRect = new Rectangle(this.ClientRectangle.X' this.ClientRectangle.Y' this.ClientRectangle.Width' this.headerHeight); " is 127.
Long Statement,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,UpdateGeometry,The length of the statement  "			bool parentExpand = (this.ParentEditor as GroupedPropertyEditor) != null && (this.ParentEditor as GroupedPropertyEditor).UseIndentChildExpand; " is 142.
Long Statement,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,PaintHeader,The length of the statement  "				this.headerRect.Width - buttonRect.Width - iconRect.Width - this.expandCheckRect.Width - this.activeCheckRect.Width - 2'  " is 120.
Long Statement,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,PaintHeader,The length of the statement  "			Color headerBgColor = this.ControlRenderer.GetBackgroundColor(this.headerColor.Value' focusBg && adaptBgColor' this.Location.X); " is 128.
Long Statement,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,PaintIndentExpandButton,The length of the statement  "			Rectangle indentExpandRect = new Rectangle(childGroup.Location.X - this.indent' childGroup.Location.Y' this.indent' childGroup.headerHeight); " is 141.
Long Statement,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,IndentChildExpandOnMouseMove,The length of the statement  "			Rectangle expandRect = new Rectangle(childGroup.Location.X - this.indent' childGroup.Location.Y' this.indent' childGroup.headerHeight); " is 135.
Long Statement,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,IndentChildExpandOnMouseLeave,The length of the statement  "			Rectangle expandRect = new Rectangle(childGroup.Location.X - this.indent' childGroup.Location.Y' this.indent' childGroup.headerHeight); " is 135.
Long Statement,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,IndentChildExpandOnMouseDown,The length of the statement  "				Rectangle expandRect = new Rectangle(childGroup.Location.X - this.indent' childGroup.Location.Y' this.indent' childGroup.headerHeight); " is 135.
Long Statement,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,IndentChildExpandOnMouseUp,The length of the statement  "				Rectangle expandRect = new Rectangle(childGroup.Location.X - this.indent' childGroup.Location.Y' this.indent' childGroup.headerHeight); " is 135.
Long Statement,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,OnMouseMove,The length of the statement  "				Rectangle expandHotSpot = new Rectangle(this.expandCheckRect.X' this.headerRect.Y' this.expandCheckRect.Width' this.headerRect.Height); " is 135.
Long Statement,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,OnMouseMove,The length of the statement  "				Rectangle activeHotSpot = new Rectangle(this.activeCheckRect.X' this.headerRect.Y' this.activeCheckRect.Width' this.headerRect.Height); " is 135.
Long Statement,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,OnMouseMove,The length of the statement  "				this.expandCheckHovered = this.CanExpand && (this.Hints & HintFlags.ExpandEnabled) != HintFlags.None && expandHotSpot.Contains(e.Location); " is 139.
Long Statement,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,OnMouseMove,The length of the statement  "				this.activeCheckHovered = !this.ReadOnly && (this.Hints & HintFlags.ActiveEnabled) != HintFlags.None && activeHotSpot.Contains(e.Location); " is 139.
Long Statement,AdamsLair.WinForms.PropertyEditing,PropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditor.cs,PaintButton,The length of the statement  "			Point buttonCenter = new Point(this.buttonRect.X + this.buttonRect.Width / 2' this.buttonRect.Y + this.buttonRect.Height / 2); " is 126.
Long Statement,AdamsLair.WinForms.PropertyEditing,PropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditor.cs,PaintButton,The length of the statement  "			g.DrawImage(buttonImage' buttonCenter.X - buttonSize.Width / 2' buttonCenter.Y - buttonSize.Height / 2' buttonSize.Width' buttonSize.Height); " is 141.
Long Statement,AdamsLair.WinForms.PropertyEditing,PropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditor.cs,OnMouseMove,The length of the statement  "			bool buttonHovered = (this.Hints & HintFlags.ButtonEnabled) != HintFlags.None && !this.ReadOnly && this.ButtonRectangle.Contains(e.Location); " is 141.
Long Statement,AdamsLair.WinForms.PropertyEditing,PropertyGrid,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyGrid.cs,CreateEditor,The length of the statement  "			if (parentEditor.ParentGrid != this) throw new ArgumentException("The specified editor is not a child of this PropertyGrid"' "parentEditor"); " is 141.
Long Statement,AdamsLair.WinForms.PropertyEditing,PropertyGrid,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyGrid.cs,PickEditorAt,The length of the statement  "			return groupedMainEdit != null ? groupedMainEdit.PickEditorAt(x - this.ClientRectangle.X' y - this.ClientRectangle.Y) : this.mainEditor; " is 136.
Long Statement,AdamsLair.WinForms.PropertyEditing,PropertyGrid,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyGrid.cs,OnMouseDown,The length of the statement  "			if ((this.mouseDownTemp & e.Button) == e.Button) this.OnMouseUp(new MouseEventArgs((this.mouseDownTemp & e.Button)' e.Clicks' e.X' e.Y' e.Delta)); " is 146.
Long Statement,AdamsLair.WinForms.PropertyEditing,PropertyGrid,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyGrid.cs,OnMouseUp,The length of the statement  "			if ((this.mouseDownTemp & e.Button) == MouseButtons.None) this.OnMouseDown(new MouseEventArgs(e.Button' e.Clicks' e.X' e.Y' e.Delta)); " is 134.
Long Statement,AdamsLair.WinForms.PropertyEditing,PropertyGrid,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyGrid.cs,ProcessCmdKey,The length of the statement  "			if (keyData.HasFlag(Keys.Up) || keyData.HasFlag(Keys.Down) || keyData.HasFlag(Keys.Left) || keyData.HasFlag(Keys.Right) || keyData.HasFlag(Keys.Tab)) " is 149.
Long Statement,AdamsLair.WinForms.PropertyEditing,PropertyGrid,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyGrid.cs,OnScroll,The length of the statement  "				MouseEventArgs childArgs = new MouseEventArgs(Control.MouseButtons' 0' Control.MousePosition.X' Control.MousePosition.Y' 0); " is 124.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,ComboBoxEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\ComboBoxEditorTemplate.cs,OnPaint,The length of the statement  "			else if (this.pressed || this.IsDropDownOpened || (this.focused && (Control.ModifierKeys & Keys.Control) == Keys.Control)) " is 122.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,ComboBoxEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\ComboBoxEditorTemplate.cs,OnMouseDown,The length of the statement  "				if (this.hovered && (e.Button & MouseButtons.Left) != MouseButtons.None && (DateTime.Now - this.mouseClosed).TotalMilliseconds > 200) " is 133.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,ComboBoxEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\ComboBoxEditorTemplate.cs,ShowDropDown,The length of the statement  "			this.popupControl.Show(parentGrid' this.dropdown' dropDownLoc.X' dropDownLoc.Y' dropDownSize.Width' dropDownSize.Height' PopupResizeMode.None); " is 143.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,BitmaskEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\BitmaskEditorTemplate.cs,OnPaint,The length of the statement  "			else if (this.pressed || this.IsDropDownOpened || (this.focused && (Control.ModifierKeys & Keys.Control) == Keys.Control)) " is 122.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,BitmaskEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\BitmaskEditorTemplate.cs,OnMouseDown,The length of the statement  "				if (this.hovered && (e.Button & MouseButtons.Left) != MouseButtons.None && (DateTime.Now - this.mouseClosed).TotalMilliseconds > 200) " is 133.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,BitmaskEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\BitmaskEditorTemplate.cs,ShowDropDown,The length of the statement  "			this.popupControl.Show(parentGrid' this.dropdown' dropDownLoc.X' dropDownLoc.Y' dropDownSize.Width' dropDownSize.Height' PopupResizeMode.None); " is 143.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,MultiComboBoxEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\MultiComboBoxEditorTemplate.cs,OnPaint,The length of the statement  "			else if (this.pressed || this.IsDropDownOpened || (this.focused && (Control.ModifierKeys & Keys.Control) == Keys.Control)) " is 122.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,MultiComboBoxEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\MultiComboBoxEditorTemplate.cs,OnMouseDown,The length of the statement  "				if (this.hovered && (e.Button & MouseButtons.Left) != MouseButtons.None && (DateTime.Now - this.mouseClosed).TotalMilliseconds > 200) " is 133.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,MultiComboBoxEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\MultiComboBoxEditorTemplate.cs,OnKeyDown,The length of the statement  "					pasteObjProxy = pasteObj.Select(p => this.dropdownItems.FirstOrDefault(obj => object.Equals(obj' p))).Where(o => o != null).ToList();  " is 133.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,MultiComboBoxEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\MultiComboBoxEditorTemplate.cs,OnKeyDown,The length of the statement  "					pasteObjProxy = pasteObj.Select(p => this.dropdownItems.FirstOrDefault(obj => obj != null && p == obj.ToString())).ToList();  " is 124.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,MultiComboBoxEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\MultiComboBoxEditorTemplate.cs,ShowDropDown,The length of the statement  "			this.popupControl.Show(parentGrid' this.dropdown' dropDownLoc.X' dropDownLoc.Y' dropDownSize.Width' dropDownSize.Height' PopupResizeMode.None); " is 143.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,NumericEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\NumericEditorTemplate.cs,OnPaint,The length of the statement  "			this.parent.ControlRenderer.DrawButton(e.Graphics' gfxGripRect' gripState' null' (enabled && !this.ReadOnly) ? gripIcon.Normal : gripIcon.Disabled); " is 148.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,NumericEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\NumericEditorTemplate.cs,OnPaint,The length of the statement  "					this.minMaxRect.Width * Math.Min(Math.Max((float)((this.value - this.barMin) / (this.barMax - this.barMin))' 0.0f)' 1.0f)' " is 122.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,NumericEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\NumericEditorTemplate.cs,OnMouseDown,The length of the statement  "				this.Value = this.barMin + (decimal)Math.Min(Math.Max((float)(e.Location.X - this.minMaxRect.X) / (float)this.minMaxRect.Width' 0.0f)' 1.0f) * (this.barMax - this.barMin); " is 171.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,NumericEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\NumericEditorTemplate.cs,OnMouseMove,The length of the statement  "				this.Value = this.barMin + (decimal)Math.Min(Math.Max((float)(e.Location.X - this.minMaxRect.X) / (float)this.minMaxRect.Width' 0.0f)' 1.0f) * (this.barMax - this.barMin); " is 171.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,NumericEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\NumericEditorTemplate.cs,SetTextFromValue,The length of the statement  "				this.stringEditor.Text = (this.value < 0m ? "-" : "") + beforeSep.ToString() + "." + afterSep.ToString().PadLeft(this.decimalPlaces' '0'); " is 138.
Long Statement,AdamsLair.WinForms.PropertyEditing.Templates,NumericEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\NumericEditorTemplate.cs,SetValueFromText,The length of the statement  "			this.isTextValid = decimal.TryParse(this.stringEditor.Text' NumberStyles.Any' CultureInfo.InvariantCulture' out valResult); " is 123.
Complex Conditional,AdamsLair.WinForms.ColorControls,ColorPanel,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPanel.cs,OnPaint,The conditional expression  "this.clrBottomLeft.A < 255 || this.clrBottomRight.A < 255 || this.clrTopLeft.A < 255 || this.clrTopRight.A < 255"  is complex.
Complex Conditional,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The conditional expression  "state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed"  is complex.
Complex Conditional,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The conditional expression  "state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed"  is complex.
Complex Conditional,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,OnPaintItem,The conditional expression  "e.IsSelected || (Control.MouseButtons != MouseButtons.None && this.highlightHoverItems && e.IsHovered)"  is complex.
Complex Conditional,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,ProcessCmdKey,The conditional expression  "keyData.HasFlag(Keys.Up) || keyData.HasFlag(Keys.Down) || keyData.HasFlag(Keys.Left) || keyData.HasFlag(Keys.Right)"  is complex.
Complex Conditional,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,OnKeyDown,The conditional expression  "e.KeyCode == Keys.Right || e.KeyCode == Keys.Left || e.KeyCode == Keys.Up || e.KeyCode == Keys.Down"  is complex.
Complex Conditional,AdamsLair.WinForms.PropertyEditing.Editors,BoolPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\BoolPropertyEditor.cs,OnGetValue,The conditional expression  "!this.ReadOnly && (values.Any(o => o == null) || (trueCount > 0 && trueCount < values.Count()))"  is complex.
Complex Conditional,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,UpdateGeometry,The conditional expression  "this.rectTopRuler != lastRectTopRuler ||  				this.rectBottomRuler != lastRectBottomRuler ||  				this.rectLeftSidebar != lastRectLeftSidebar ||  				this.rectRightSidebar != lastRectRightSidebar ||  				this.rectContentArea != lastRectContentArea"  is complex.
Complex Conditional,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,IsInputKey,The conditional expression  "keyData == Keys.Left || keyData == Keys.Right || keyData == Keys.Up || keyData == Keys.Down"  is complex.
Complex Conditional,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,OnMouseDoubleClick,The conditional expression  "this.CanExpand &&   				(this.Hints & HintFlags.ExpandEnabled) != HintFlags.None &&   				(this.Hints & HintFlags.HasExpandCheck) != HintFlags.None &&   				!this.expandCheckHovered &&   				!this.activeCheckHovered &&   				this.headerRect.Contains(e.Location) &&   				!this.ButtonRectangle.Contains(e.Location)"  is complex.
Complex Conditional,AdamsLair.WinForms.PropertyEditing,PropertyGrid,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyGrid.cs,ProcessCmdKey,The conditional expression  "keyData.HasFlag(Keys.Up) || keyData.HasFlag(Keys.Down) || keyData.HasFlag(Keys.Left) || keyData.HasFlag(Keys.Right) || keyData.HasFlag(Keys.Tab)"  is complex.
Complex Conditional,AdamsLair.WinForms.PropertyEditing,MainEditorProvider,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyGrid.cs,CreateEditor,The conditional expression  "baseType == typeof(sbyte) || baseType == typeof(byte) ||  					baseType == typeof(short) || baseType == typeof(ushort) ||  					baseType == typeof(int) || baseType == typeof(uint) ||  					baseType == typeof(long) || baseType == typeof(ulong) ||  					baseType == typeof(float) || baseType == typeof(double) || baseType == typeof(decimal)"  is complex.
Complex Conditional,AdamsLair.WinForms.PropertyEditing.Templates,ComboBoxEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\ComboBoxEditorTemplate.cs,OnPaint,The conditional expression  "this.pressed || this.IsDropDownOpened || (this.focused && (Control.ModifierKeys & Keys.Control) == Keys.Control)"  is complex.
Complex Conditional,AdamsLair.WinForms.PropertyEditing.Templates,BitmaskEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\BitmaskEditorTemplate.cs,OnPaint,The conditional expression  "this.pressed || this.IsDropDownOpened || (this.focused && (Control.ModifierKeys & Keys.Control) == Keys.Control)"  is complex.
Complex Conditional,AdamsLair.WinForms.PropertyEditing.Templates,BitmaskEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\BitmaskEditorTemplate.cs,OnKeyDown,The conditional expression  "e.KeyCode == Keys.Return || e.KeyCode == Keys.Right || (e.KeyCode == Keys.Down && e.Control)"  is complex.
Complex Conditional,AdamsLair.WinForms.PropertyEditing.Templates,MultiComboBoxEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\MultiComboBoxEditorTemplate.cs,OnPaint,The conditional expression  "this.pressed || this.IsDropDownOpened || (this.focused && (Control.ModifierKeys & Keys.Control) == Keys.Control)"  is complex.
Complex Conditional,AdamsLair.WinForms.PropertyEditing.Templates,MultiComboBoxEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\MultiComboBoxEditorTemplate.cs,OnKeyDown,The conditional expression  "e.KeyCode == Keys.Return || e.KeyCode == Keys.Right || (e.KeyCode == Keys.Down && e.Control)"  is complex.
Complex Conditional,AdamsLair.WinForms.PropertyEditing.Templates,StringEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\StringEditorTemplate.cs,OnKeyDown,The conditional expression  "!this.readOnly && this.selectionLength == 0 && this.text != null && this.cursorIndex < this.text.Length"  is complex.
Complex Conditional,AdamsLair.WinForms.PropertyEditing.Templates,StringEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\StringEditorTemplate.cs,OnKeyDown,The conditional expression  "!this.readOnly && this.selectionLength == 0 && this.text != null && this.cursorIndex > 0"  is complex.
Virtual Method Call from Constructor,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,ControlRenderer,The constructor "ControlRenderer" calls a virtual method "Reset".
Virtual Method Call from Constructor,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,GroupedPropertyEditor,The constructor "GroupedPropertyEditor" calls a virtual method "ClearContent".
Empty Catch Block,AdamsLair.WinForms.PropertyEditing,MemberwisePropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\MemberwisePropertyEditor.cs,ReflectTypeForMember,The method has an empty catch block.
Empty Catch Block,AdamsLair.WinForms.PropertyEditing,MemberwisePropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\MemberwisePropertyEditor.cs,DefaultPropertySetter,The method has an empty catch block.
Magic Number,AdamsLair.WinForms.ColorControls,ColorPanel,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPanel.cs,SetupGradient,The following statement contains a magic number: Bitmap tempImg = new Bitmap(2' 2);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPanel,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPanel.cs,SetupGradient,The following statement contains a magic number: Bitmap tempImg = new Bitmap(2' 2);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPanel,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPanel.cs,OnPaint,The following statement contains a magic number: if (this.clrBottomLeft.A < 255 || this.clrBottomRight.A < 255 || this.clrTopLeft.A < 255 || this.clrTopRight.A < 255)  				e.Graphics.FillRectangle(new HatchBrush(HatchStyle.LargeCheckerBoard' this.renderer.ColorLightBackground' this.renderer.ColorDarkBackground)' colorArea);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPanel,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPanel.cs,OnPaint,The following statement contains a magic number: if (this.clrBottomLeft.A < 255 || this.clrBottomRight.A < 255 || this.clrTopLeft.A < 255 || this.clrTopRight.A < 255)  				e.Graphics.FillRectangle(new HatchBrush(HatchStyle.LargeCheckerBoard' this.renderer.ColorLightBackground' this.renderer.ColorDarkBackground)' colorArea);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPanel,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPanel.cs,OnPaint,The following statement contains a magic number: if (this.clrBottomLeft.A < 255 || this.clrBottomRight.A < 255 || this.clrTopLeft.A < 255 || this.clrTopRight.A < 255)  				e.Graphics.FillRectangle(new HatchBrush(HatchStyle.LargeCheckerBoard' this.renderer.ColorLightBackground' this.renderer.ColorDarkBackground)' colorArea);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPanel,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPanel.cs,OnPaint,The following statement contains a magic number: if (this.clrBottomLeft.A < 255 || this.clrBottomRight.A < 255 || this.clrTopLeft.A < 255 || this.clrTopRight.A < 255)  				e.Graphics.FillRectangle(new HatchBrush(HatchStyle.LargeCheckerBoard' this.renderer.ColorLightBackground' this.renderer.ColorDarkBackground)' colorArea);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPanel,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPanel.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawEllipse(innerPickerPen'  				pickerVisualPos.X - this.pickerSize / 2'  				pickerVisualPos.Y - this.pickerSize / 2'  				this.pickerSize'  				this.pickerSize);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPanel,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPanel.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawEllipse(innerPickerPen'  				pickerVisualPos.X - this.pickerSize / 2'  				pickerVisualPos.Y - this.pickerSize / 2'  				this.pickerSize'  				this.pickerSize);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPanel,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPanel.cs,OnPaint,The following statement contains a magic number: if (!this.Enabled)  			{  				e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(128' this.renderer.ColorBackground))' colorArea);  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorShowBox,The following statement contains a magic number: this.colorShowBox.UpperColor = this.alphaEnabled ? this.oldColor.ToColor() : Color.FromArgb(255' this.oldColor.ToColor());
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorShowBox,The following statement contains a magic number: this.colorShowBox.LowerColor = this.alphaEnabled ? this.selColor.ToColor() : Color.FromArgb(255' this.selColor.ToColor());
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorPanelGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorPanel.SetupXYGradient(  						Color.White'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' 1.0f)'  						Color.Black'  						Color.Transparent);  					break;  				case PrimaryAttrib.Saturation:  					this.colorPanel.SetupHueBrightnessGradient(this.selColor.s);  					break;  				case PrimaryAttrib.Brightness:  					this.colorPanel.SetupHueSaturationGradient(this.selColor.v);  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' tmp.R' 255' 0)'  						Color.FromArgb(255' tmp.R' 255' 255)'  						Color.FromArgb(255' tmp.R' 0' 0)'  						Color.FromArgb(255' tmp.R' 0' 255)'  						32);  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' tmp.G' 0)'  						Color.FromArgb(255' 255' tmp.G' 255)'  						Color.FromArgb(255' 0' tmp.G' 0)'  						Color.FromArgb(255' 0' tmp.G' 255)'  						32);  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorPanel.SetupGradient(  						Color.FromArgb(255' 255' 0' tmp.B)'  						Color.FromArgb(255' 255' 255' tmp.B)'  						Color.FromArgb(255' 0' 0' tmp.B)'  						Color.FromArgb(255' 0' 255' tmp.B)'  						32);  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorSliderGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorSlider.SetupHueGradient(/*this.selColor.GetHSVSaturation()' this.selColor.GetHSVBrightness()*/);  					break;  				case PrimaryAttrib.Saturation:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 0.0f' this.selColor.v)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' this.selColor.v));  					break;  				case PrimaryAttrib.Brightness:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 0.0f)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 1.0f));  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' 0' tmp.G' tmp.B)'  						Color.FromArgb(255' 255' tmp.G' tmp.B));  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' 0' tmp.B)'  						Color.FromArgb(255' tmp.R' 255' tmp.B));  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' tmp.G' 0)'  						Color.FromArgb(255' tmp.R' tmp.G' 255));  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorSliderGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorSlider.SetupHueGradient(/*this.selColor.GetHSVSaturation()' this.selColor.GetHSVBrightness()*/);  					break;  				case PrimaryAttrib.Saturation:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 0.0f' this.selColor.v)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' this.selColor.v));  					break;  				case PrimaryAttrib.Brightness:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 0.0f)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 1.0f));  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' 0' tmp.G' tmp.B)'  						Color.FromArgb(255' 255' tmp.G' tmp.B));  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' 0' tmp.B)'  						Color.FromArgb(255' tmp.R' 255' tmp.B));  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' tmp.G' 0)'  						Color.FromArgb(255' tmp.R' tmp.G' 255));  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorSliderGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorSlider.SetupHueGradient(/*this.selColor.GetHSVSaturation()' this.selColor.GetHSVBrightness()*/);  					break;  				case PrimaryAttrib.Saturation:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 0.0f' this.selColor.v)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' this.selColor.v));  					break;  				case PrimaryAttrib.Brightness:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 0.0f)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 1.0f));  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' 0' tmp.G' tmp.B)'  						Color.FromArgb(255' 255' tmp.G' tmp.B));  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' 0' tmp.B)'  						Color.FromArgb(255' tmp.R' 255' tmp.B));  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' tmp.G' 0)'  						Color.FromArgb(255' tmp.R' tmp.G' 255));  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorSliderGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorSlider.SetupHueGradient(/*this.selColor.GetHSVSaturation()' this.selColor.GetHSVBrightness()*/);  					break;  				case PrimaryAttrib.Saturation:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 0.0f' this.selColor.v)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' this.selColor.v));  					break;  				case PrimaryAttrib.Brightness:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 0.0f)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 1.0f));  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' 0' tmp.G' tmp.B)'  						Color.FromArgb(255' 255' tmp.G' tmp.B));  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' 0' tmp.B)'  						Color.FromArgb(255' tmp.R' 255' tmp.B));  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' tmp.G' 0)'  						Color.FromArgb(255' tmp.R' tmp.G' 255));  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorSliderGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorSlider.SetupHueGradient(/*this.selColor.GetHSVSaturation()' this.selColor.GetHSVBrightness()*/);  					break;  				case PrimaryAttrib.Saturation:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 0.0f' this.selColor.v)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' this.selColor.v));  					break;  				case PrimaryAttrib.Brightness:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 0.0f)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 1.0f));  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' 0' tmp.G' tmp.B)'  						Color.FromArgb(255' 255' tmp.G' tmp.B));  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' 0' tmp.B)'  						Color.FromArgb(255' tmp.R' 255' tmp.B));  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' tmp.G' 0)'  						Color.FromArgb(255' tmp.R' tmp.G' 255));  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorSliderGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorSlider.SetupHueGradient(/*this.selColor.GetHSVSaturation()' this.selColor.GetHSVBrightness()*/);  					break;  				case PrimaryAttrib.Saturation:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 0.0f' this.selColor.v)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' this.selColor.v));  					break;  				case PrimaryAttrib.Brightness:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 0.0f)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 1.0f));  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' 0' tmp.G' tmp.B)'  						Color.FromArgb(255' 255' tmp.G' tmp.B));  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' 0' tmp.B)'  						Color.FromArgb(255' tmp.R' 255' tmp.B));  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' tmp.G' 0)'  						Color.FromArgb(255' tmp.R' tmp.G' 255));  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorSliderGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorSlider.SetupHueGradient(/*this.selColor.GetHSVSaturation()' this.selColor.GetHSVBrightness()*/);  					break;  				case PrimaryAttrib.Saturation:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 0.0f' this.selColor.v)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' this.selColor.v));  					break;  				case PrimaryAttrib.Brightness:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 0.0f)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 1.0f));  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' 0' tmp.G' tmp.B)'  						Color.FromArgb(255' 255' tmp.G' tmp.B));  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' 0' tmp.B)'  						Color.FromArgb(255' tmp.R' 255' tmp.B));  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' tmp.G' 0)'  						Color.FromArgb(255' tmp.R' tmp.G' 255));  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorSliderGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorSlider.SetupHueGradient(/*this.selColor.GetHSVSaturation()' this.selColor.GetHSVBrightness()*/);  					break;  				case PrimaryAttrib.Saturation:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 0.0f' this.selColor.v)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' this.selColor.v));  					break;  				case PrimaryAttrib.Brightness:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 0.0f)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 1.0f));  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' 0' tmp.G' tmp.B)'  						Color.FromArgb(255' 255' tmp.G' tmp.B));  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' 0' tmp.B)'  						Color.FromArgb(255' tmp.R' 255' tmp.B));  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' tmp.G' 0)'  						Color.FromArgb(255' tmp.R' tmp.G' 255));  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateColorSliderGradient,The following statement contains a magic number: switch (this.primAttrib)  			{  				default:  				case PrimaryAttrib.Hue:  					this.colorSlider.SetupHueGradient(/*this.selColor.GetHSVSaturation()' this.selColor.GetHSVBrightness()*/);  					break;  				case PrimaryAttrib.Saturation:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 0.0f' this.selColor.v)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' 1.0f' this.selColor.v));  					break;  				case PrimaryAttrib.Brightness:  					this.colorSlider.SetupGradient(  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 0.0f)'  						ExtMethodsColor.ColorFromHSV(this.selColor.h' this.selColor.s' 1.0f));  					break;  				case PrimaryAttrib.Red:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' 0' tmp.G' tmp.B)'  						Color.FromArgb(255' 255' tmp.G' tmp.B));  					break;  				case PrimaryAttrib.Green:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' 0' tmp.B)'  						Color.FromArgb(255' tmp.R' 255' tmp.B));  					break;  				case PrimaryAttrib.Blue:  					tmp = this.selColor.ToColor();  					this.colorSlider.SetupGradient(  						Color.FromArgb(255' tmp.R' tmp.G' 0)'  						Color.FromArgb(255' tmp.R' tmp.G' 255));  					break;  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,UpdateAlphaSliderGradient,The following statement contains a magic number: this.alphaSlider.SetupGradient(Color.Transparent' Color.FromArgb(255' this.selColor.ToColor()));
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioHue.Location = new System.Drawing.Point(363' 82);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioHue.Location = new System.Drawing.Point(363' 82);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioHue.Size = new System.Drawing.Size(33' 17);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioHue.Size = new System.Drawing.Size(33' 17);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioHue.TabIndex = 3;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioSaturation.Location = new System.Drawing.Point(363' 105);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioSaturation.Location = new System.Drawing.Point(363' 105);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioSaturation.Size = new System.Drawing.Size(32' 17);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioSaturation.Size = new System.Drawing.Size(32' 17);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioSaturation.TabIndex = 4;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioValue.Location = new System.Drawing.Point(363' 128);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioValue.Location = new System.Drawing.Point(363' 128);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioValue.Size = new System.Drawing.Size(32' 17);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioValue.Size = new System.Drawing.Size(32' 17);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioValue.TabIndex = 5;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioRed.Location = new System.Drawing.Point(363' 159);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioRed.Location = new System.Drawing.Point(363' 159);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioRed.Size = new System.Drawing.Size(33' 17);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioRed.Size = new System.Drawing.Size(33' 17);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioRed.TabIndex = 6;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioBlue.Location = new System.Drawing.Point(363' 205);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioBlue.Location = new System.Drawing.Point(363' 205);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioBlue.Size = new System.Drawing.Size(32' 17);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioBlue.Size = new System.Drawing.Size(32' 17);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioBlue.TabIndex = 7;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioGreen.Location = new System.Drawing.Point(363' 182);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioGreen.Location = new System.Drawing.Point(363' 182);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioGreen.Size = new System.Drawing.Size(33' 17);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioGreen.Size = new System.Drawing.Size(33' 17);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.radioGreen.TabIndex = 8;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numHue.Increment = new decimal(new int[] {              15'              0'              0'              0});
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numHue.Location = new System.Drawing.Point(402' 82);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numHue.Location = new System.Drawing.Point(402' 82);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numHue.Maximum = new decimal(new int[] {              360'              0'              0'              0});
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numHue.Size = new System.Drawing.Size(54' 20);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numHue.Size = new System.Drawing.Size(54' 20);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numHue.TabIndex = 9;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numSaturation.Increment = new decimal(new int[] {              5'              0'              0'              0});
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numSaturation.Location = new System.Drawing.Point(402' 105);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numSaturation.Location = new System.Drawing.Point(402' 105);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numSaturation.Size = new System.Drawing.Size(54' 20);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numSaturation.Size = new System.Drawing.Size(54' 20);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numSaturation.TabIndex = 10;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numValue.Increment = new decimal(new int[] {              5'              0'              0'              0});
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numValue.Location = new System.Drawing.Point(402' 128);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numValue.Location = new System.Drawing.Point(402' 128);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numValue.Size = new System.Drawing.Size(54' 20);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numValue.Size = new System.Drawing.Size(54' 20);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numValue.TabIndex = 11;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numRed.Location = new System.Drawing.Point(402' 159);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numRed.Location = new System.Drawing.Point(402' 159);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numRed.Maximum = new decimal(new int[] {              255'              0'              0'              0});
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numRed.Size = new System.Drawing.Size(54' 20);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numRed.Size = new System.Drawing.Size(54' 20);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numRed.TabIndex = 12;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numGreen.Location = new System.Drawing.Point(402' 182);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numGreen.Location = new System.Drawing.Point(402' 182);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numGreen.Maximum = new decimal(new int[] {              255'              0'              0'              0});
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numGreen.Size = new System.Drawing.Size(54' 20);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numGreen.Size = new System.Drawing.Size(54' 20);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numGreen.TabIndex = 13;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numBlue.Location = new System.Drawing.Point(402' 205);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numBlue.Location = new System.Drawing.Point(402' 205);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numBlue.Maximum = new decimal(new int[] {              255'              0'              0'              0});
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numBlue.Size = new System.Drawing.Size(54' 20);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numBlue.Size = new System.Drawing.Size(54' 20);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numBlue.TabIndex = 14;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.textBoxHex.Location = new System.Drawing.Point(32' 279);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.textBoxHex.Location = new System.Drawing.Point(32' 279);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.textBoxHex.Size = new System.Drawing.Size(75' 20);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.textBoxHex.Size = new System.Drawing.Size(75' 20);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.textBoxHex.TabIndex = 16;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelHex.Location = new System.Drawing.Point(12' 282);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelHex.Location = new System.Drawing.Point(12' 282);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelHex.Size = new System.Drawing.Size(14' 13);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelHex.Size = new System.Drawing.Size(14' 13);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelHex.TabIndex = 17;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelOld.Location = new System.Drawing.Point(423' 12);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelOld.Location = new System.Drawing.Point(423' 12);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelOld.Size = new System.Drawing.Size(33' 26);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelOld.Size = new System.Drawing.Size(33' 26);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelOld.TabIndex = 18;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelNew.Location = new System.Drawing.Point(423' 36);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelNew.Location = new System.Drawing.Point(423' 36);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelNew.Size = new System.Drawing.Size(33' 26);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelNew.Size = new System.Drawing.Size(33' 26);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelNew.TabIndex = 19;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(379' 277);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(379' 277);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(93' 23);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(93' 23);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.TabIndex = 20;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonOk.Location = new System.Drawing.Point(280' 277);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonOk.Location = new System.Drawing.Point(280' 277);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonOk.Size = new System.Drawing.Size(93' 23);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonOk.Size = new System.Drawing.Size(93' 23);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonOk.TabIndex = 21;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numAlpha.Location = new System.Drawing.Point(402' 236);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numAlpha.Location = new System.Drawing.Point(402' 236);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numAlpha.Maximum = new decimal(new int[] {              255'              0'              0'              0});
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numAlpha.Size = new System.Drawing.Size(54' 20);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numAlpha.Size = new System.Drawing.Size(54' 20);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.numAlpha.TabIndex = 22;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelAlpha.Location = new System.Drawing.Point(379' 238);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelAlpha.Location = new System.Drawing.Point(379' 238);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelAlpha.Size = new System.Drawing.Size(14' 13);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelAlpha.Size = new System.Drawing.Size(14' 13);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelAlpha.TabIndex = 23;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelHueUnit.Location = new System.Drawing.Point(461' 84);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelHueUnit.Location = new System.Drawing.Point(461' 84);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelHueUnit.Size = new System.Drawing.Size(11' 13);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelHueUnit.Size = new System.Drawing.Size(11' 13);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelHueUnit.TabIndex = 24;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelSaturationUnit.Location = new System.Drawing.Point(462' 107);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelSaturationUnit.Location = new System.Drawing.Point(462' 107);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelSaturationUnit.Size = new System.Drawing.Size(15' 13);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelSaturationUnit.Size = new System.Drawing.Size(15' 13);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelSaturationUnit.TabIndex = 25;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelValueUnit.Location = new System.Drawing.Point(461' 130);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelValueUnit.Location = new System.Drawing.Point(461' 130);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelValueUnit.Size = new System.Drawing.Size(15' 13);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelValueUnit.Size = new System.Drawing.Size(15' 13);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelValueUnit.TabIndex = 26;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.alphaSlider.Location = new System.Drawing.Point(312' 7);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.alphaSlider.Location = new System.Drawing.Point(312' 7);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.alphaSlider.Size = new System.Drawing.Size(32' 266);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.alphaSlider.Size = new System.Drawing.Size(32' 266);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.alphaSlider.TabIndex = 15;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.colorShowBox.Location = new System.Drawing.Point(363' 12);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.colorShowBox.Location = new System.Drawing.Point(363' 12);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.colorShowBox.Size = new System.Drawing.Size(54' 50);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.colorShowBox.Size = new System.Drawing.Size(54' 50);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.colorShowBox.TabIndex = 2;
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.colorSlider.Location = new System.Drawing.Point(274' 7);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.colorSlider.Location = new System.Drawing.Point(274' 7);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.colorSlider.Size = new System.Drawing.Size(32' 266);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.colorSlider.Size = new System.Drawing.Size(32' 266);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.colorPanel.Location = new System.Drawing.Point(12' 12);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.colorPanel.Location = new System.Drawing.Point(12' 12);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.colorPanel.Size = new System.Drawing.Size(256' 256);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.colorPanel.Size = new System.Drawing.Size(256' 256);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(484' 312);
Magic Number,AdamsLair.WinForms.ColorControls,ColorPickerDialog,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(484' 312);
Magic Number,AdamsLair.WinForms.ColorControls,ColorShowBox,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorShowBox.cs,OnMouseClick,The following statement contains a magic number: if (e.Y > (this.ClientRectangle.Top + this.ClientRectangle.Bottom) / 2)  				this.OnLowerClick();  			else  				this.OnUpperClick();
Magic Number,AdamsLair.WinForms.ColorControls,ColorShowBox,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorShowBox.cs,OnPaint,The following statement contains a magic number: if (this.lowerColor.A < 255 || this.upperColor.A < 255)  				e.Graphics.FillRectangle(new HatchBrush(HatchStyle.LargeCheckerBoard' this.renderer.ColorLightBackground' this.renderer.ColorDarkBackground)' colorArea);
Magic Number,AdamsLair.WinForms.ColorControls,ColorShowBox,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorShowBox.cs,OnPaint,The following statement contains a magic number: if (this.lowerColor.A < 255 || this.upperColor.A < 255)  				e.Graphics.FillRectangle(new HatchBrush(HatchStyle.LargeCheckerBoard' this.renderer.ColorLightBackground' this.renderer.ColorDarkBackground)' colorArea);
Magic Number,AdamsLair.WinForms.ColorControls,ColorShowBox,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorShowBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle(new SolidBrush(this.upperColor)'  				colorArea.X'  				colorArea.Y'  				colorArea.Width'  				colorArea.Height / 2 + 1);
Magic Number,AdamsLair.WinForms.ColorControls,ColorShowBox,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorShowBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle(new SolidBrush(this.lowerColor)'  				colorArea.X'  				colorArea.Y + colorArea.Height / 2 + 1'  				colorArea.Width'  				colorArea.Height / 2);
Magic Number,AdamsLair.WinForms.ColorControls,ColorShowBox,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorShowBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle(new SolidBrush(this.lowerColor)'  				colorArea.X'  				colorArea.Y + colorArea.Height / 2 + 1'  				colorArea.Width'  				colorArea.Height / 2);
Magic Number,AdamsLair.WinForms.ColorControls,ColorSlider,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorSlider.cs,OnPaint,The following statement contains a magic number: Rectangle colorBox = new Rectangle(  				this.ClientRectangle.X + this.pickerSize'  				this.ClientRectangle.Y + this.pickerSize'  				this.ClientRectangle.Width - this.pickerSize * 2'  				this.ClientRectangle.Height - this.pickerSize * 2);
Magic Number,AdamsLair.WinForms.ColorControls,ColorSlider,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorSlider.cs,OnPaint,The following statement contains a magic number: Rectangle colorBox = new Rectangle(  				this.ClientRectangle.X + this.pickerSize'  				this.ClientRectangle.Y + this.pickerSize'  				this.ClientRectangle.Width - this.pickerSize * 2'  				this.ClientRectangle.Height - this.pickerSize * 2);
Magic Number,AdamsLair.WinForms.ColorControls,ColorSlider,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorSlider.cs,OnPaint,The following statement contains a magic number: if (this.min.A < 255 || this.max.A < 255)  				e.Graphics.FillRectangle(new HatchBrush(HatchStyle.LargeCheckerBoard' this.renderer.ColorLightBackground' this.renderer.ColorDarkBackground)' colorArea);
Magic Number,AdamsLair.WinForms.ColorControls,ColorSlider,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorSlider.cs,OnPaint,The following statement contains a magic number: if (this.min.A < 255 || this.max.A < 255)  				e.Graphics.FillRectangle(new HatchBrush(HatchStyle.LargeCheckerBoard' this.renderer.ColorLightBackground' this.renderer.ColorDarkBackground)' colorArea);
Magic Number,AdamsLair.WinForms.ColorControls,ColorSlider,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorSlider.cs,OnPaint,The following statement contains a magic number: Pen outerPickerPen = this.Enabled ? Pens.Black : new Pen(Color.FromArgb(128' Color.Black));
Magic Number,AdamsLair.WinForms.ColorControls,ColorSlider,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorSlider.cs,OnPaint,The following statement contains a magic number: if (this.innerPicker)  			{  				Pen innerPickerPen = this.valTemp.GetLuminance() > 0.5f ? Pens.Black : Pens.White;  				e.Graphics.DrawLine(innerPickerPen'  					new Point(colorArea.Left' pickerVisualPos)'  					new Point(colorArea.Left + 2' pickerVisualPos));  				e.Graphics.DrawLine(innerPickerPen'  					new Point(colorArea.Right - 1' pickerVisualPos)'  					new Point(colorArea.Right - 1 - 2' pickerVisualPos));  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorSlider,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorSlider.cs,OnPaint,The following statement contains a magic number: if (this.innerPicker)  			{  				Pen innerPickerPen = this.valTemp.GetLuminance() > 0.5f ? Pens.Black : Pens.White;  				e.Graphics.DrawLine(innerPickerPen'  					new Point(colorArea.Left' pickerVisualPos)'  					new Point(colorArea.Left + 2' pickerVisualPos));  				e.Graphics.DrawLine(innerPickerPen'  					new Point(colorArea.Right - 1' pickerVisualPos)'  					new Point(colorArea.Right - 1 - 2' pickerVisualPos));  			}
Magic Number,AdamsLair.WinForms.ColorControls,ColorSlider,C:\repos\AdamsLair_winforms\WinForms\ColorControls\ColorSlider.cs,OnPaint,The following statement contains a magic number: if (!this.Enabled)  			{  				e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(128' this.renderer.ColorBackground))' colorArea);  			}
Magic Number,AdamsLair.WinForms.Drawing,IconImage,C:\repos\AdamsLair_winforms\WinForms\Drawing\IconImage.cs,IconImage,The following statement contains a magic number: {  				colorMatrix = new System.Drawing.Imaging.ColorMatrix(new float[][] {  					new float[] {1.3f' 0.0f' 0.0f' 0.0f' 0.0f}'  					new float[] {0.0f' 1.3f' 0.0f' 0.0f' 0.0f}'  					new float[] {0.0f' 0.0f' 1.3f' 0.0f' 0.0f}'  					new float[] {0.0f' 0.0f' 0.0f' 1.0f' 0.0f}'  					new float[] {0.0f' 0.0f' 0.0f' 0.0f' 1.0f}});  				imgAttribs.SetColorMatrix(colorMatrix);  				this.images[2] = new Bitmap(source.Width' source.Height);  				using (Graphics g = Graphics.FromImage(this.images[2]))  				{  					g.DrawImage(source'   						new Rectangle(Point.Empty' source.Size)'   						0' 0' source.Width' source.Height' GraphicsUnit.Pixel'   						imgAttribs);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,IconImage,C:\repos\AdamsLair_winforms\WinForms\Drawing\IconImage.cs,IconImage,The following statement contains a magic number: {  				colorMatrix = new System.Drawing.Imaging.ColorMatrix(new float[][] {  					new float[] {1.3f' 0.0f' 0.0f' 0.0f' 0.0f}'  					new float[] {0.0f' 1.3f' 0.0f' 0.0f' 0.0f}'  					new float[] {0.0f' 0.0f' 1.3f' 0.0f' 0.0f}'  					new float[] {0.0f' 0.0f' 0.0f' 1.0f' 0.0f}'  					new float[] {0.0f' 0.0f' 0.0f' 0.0f' 1.0f}});  				imgAttribs.SetColorMatrix(colorMatrix);  				this.images[2] = new Bitmap(source.Width' source.Height);  				using (Graphics g = Graphics.FromImage(this.images[2]))  				{  					g.DrawImage(source'   						new Rectangle(Point.Empty' source.Size)'   						0' 0' source.Width' source.Height' GraphicsUnit.Pixel'   						imgAttribs);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,IconImage,C:\repos\AdamsLair_winforms\WinForms\Drawing\IconImage.cs,IconImage,The following statement contains a magic number: {  				colorMatrix = new System.Drawing.Imaging.ColorMatrix(new float[][] {  					new float[] {0.34f' 0.34f' 0.34f' 0.0f' 0.0f}'  					new float[] {0.34f' 0.34f' 0.34f' 0.0f' 0.0f}'  					new float[] {0.34f' 0.34f' 0.34f' 0.0f' 0.0f}'  					new float[] {0.0f' 0.0f' 0.0f' 0.5f' 0.0f}'  					new float[] {0.0f' 0.0f' 0.0f' 0.0f' 1.0f}});  				imgAttribs.SetColorMatrix(colorMatrix);  				this.images[3] = new Bitmap(source.Width' source.Height);  				using (Graphics g = Graphics.FromImage(this.images[3]))  				{  					g.DrawImage(source'   						new Rectangle(Point.Empty' source.Size)'   						0' 0' source.Width' source.Height' GraphicsUnit.Pixel'   						imgAttribs);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,IconImage,C:\repos\AdamsLair_winforms\WinForms\Drawing\IconImage.cs,IconImage,The following statement contains a magic number: {  				colorMatrix = new System.Drawing.Imaging.ColorMatrix(new float[][] {  					new float[] {0.34f' 0.34f' 0.34f' 0.0f' 0.0f}'  					new float[] {0.34f' 0.34f' 0.34f' 0.0f' 0.0f}'  					new float[] {0.34f' 0.34f' 0.34f' 0.0f' 0.0f}'  					new float[] {0.0f' 0.0f' 0.0f' 0.5f' 0.0f}'  					new float[] {0.0f' 0.0f' 0.0f' 0.0f' 1.0f}});  				imgAttribs.SetColorMatrix(colorMatrix);  				this.images[3] = new Bitmap(source.Width' source.Height);  				using (Graphics g = Graphics.FromImage(this.images[3]))  				{  					g.DrawImage(source'   						new Rectangle(Point.Empty' source.Size)'   						0' 0' source.Width' source.Height' GraphicsUnit.Pixel'   						imgAttribs);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawStringLine,The following statement contains a magic number: if (manualEllipsis) textRect.Width -= 5;
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawStringLine,The following statement contains a magic number: if (isEllipsisActive)  			{  				Pen ellipsisPen = new Pen(textColor);  				ellipsisPen.DashStyle = DashStyle.Dot;  				g.DrawLine(ellipsisPen'   					textRect.Right - DrawStringWidthAdd'   					(textRect.Y + textRect.Height * 0.5f) + (nameLabelSize.Height * 0.3f)'   					textRect.Right - DrawStringWidthAdd + 3'   					(textRect.Y + textRect.Height * 0.5f) + (nameLabelSize.Height * 0.3f));  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,MeasureStringLine,The following statement contains a magic number: textRect.Width -= 5;
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,PickCharStringLine,The following statement contains a magic number: textRect.Width -= 5;
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,GetFontYOffset,The following statement contains a magic number: int fontOffset = font.Height - 2 * (int)(font.Height * 0.5f);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (rect.Width < 4 || rect.Height < 4) return rect;
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (rect.Width < 4 || rect.Height < 4) return rect;
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextBoxBorder,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  			{  				clientRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					innerPen = new Pen(Color.FromArgb(64' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect);  				g.DrawRectangle(innerPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == TextBoxStyle.Flat)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPen = new Pen(borderColorDark);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPen = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPen = new Pen(Color.FromArgb(128' borderColorDark));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawRectangle(borderPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}  			else if (style == TextBoxStyle.Sunken)  			{  				clientRect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);    				Pen borderPenDark;  				Pen borderPen;  				Pen innerPen;  				if (state == TextBoxState.Normal)  				{  					borderPenDark = new Pen(borderColorDark);  					borderPen = new Pen(borderColor);  					innerPen = new Pen(Color.Transparent);  				}  				else if (state == TextBoxState.Hot)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.25f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.25f' true));  					innerPen = new Pen(Color.FromArgb(32' this.ColorHightlight));  				}  				else if (state == TextBoxState.Focus)  				{  					borderPenDark = new Pen(borderColorDark.MixWith(this.ColorHightlight' 0.5f' true));  					borderPen = new Pen(borderColor.MixWith(this.ColorHightlight' 0.5f' true));  					innerPen = new Pen(Color.FromArgb(48' this.ColorHightlight));  				}  				else //if (state == TextBoxState.Disabled)  				{  					borderPenDark = new Pen(Color.FromArgb(128' borderColorDark));  					borderPen = new Pen(Color.FromArgb(128' borderColor));  					innerPen = new Pen(Color.Transparent);  				}    				g.FillRectangle(new SolidBrush(backColor)' rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);    				g.DrawLine(borderPenDark' rect.X + 1' rect.Y' rect.Right - 2' rect.Y);  				g.DrawLine(borderPen' rect.X' rect.Y + 1' rect.X' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.Right - 1' rect.Y + 1' rect.Right - 1' rect.Bottom - 2);  				g.DrawLine(borderPen' rect.X + 1' rect.Bottom - 1' rect.Right - 2' rect.Bottom - 1);  				g.DrawRectangle(innerPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextField,The following statement contains a magic number: if (rect.Width < 4 || rect.Height < 4) return;
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextField,The following statement contains a magic number: if (rect.Width < 4 || rect.Height < 4) return;
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextField,The following statement contains a magic number: if (text != null)  			{  				// Draw Selection  				if ((state & TextBoxState.Focus) == TextBoxState.Focus && cursorPos >= 0 && selLength != 0)  				{  					int selPos = Math.Min(cursorPos + selLength' cursorPos);  					CharacterRange[] charRanges = new [] { new CharacterRange(selPos' Math.Abs(selLength)) };  					Region[] charRegions = MeasureStringLine(g' text' charRanges' font' textRectScrolled);  					RectangleF selectionRect = charRegions.Length > 0 ? charRegions[0].GetBounds(g) : RectangleF.Empty;  					selectionRect.Inflate(0' 2);  					selectionRect.Y += GetFontYOffset(font);  					if (selPos == 0)  					{  						selectionRect.X -= 2;  						selectionRect.Width += 2;  					}  					if (selPos + Math.Abs(selLength) == text.Length)  					{  						selectionRect.Width += 2;  					}    					if ((state & TextBoxState.ReadOnlyFlag) == TextBoxState.ReadOnlyFlag)  						g.FillRectangle(new SolidBrush(Color.FromArgb(128' this.ColorGrayText))' selectionRect);  					else  						g.FillRectangle(new SolidBrush(Color.FromArgb(128' this.ColorHightlight))' selectionRect);  				}    				// Draw Text  				if ((state & TextBoxState.Disabled) == TextBoxState.Disabled ||  					(state & TextBoxState.ReadOnlyFlag) == TextBoxState.ReadOnlyFlag)  					textColor = Color.FromArgb(128' textColor);  				DrawStringLine(g' text' font' textRectScrolled' textColor);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextField,The following statement contains a magic number: if (text != null)  			{  				// Draw Selection  				if ((state & TextBoxState.Focus) == TextBoxState.Focus && cursorPos >= 0 && selLength != 0)  				{  					int selPos = Math.Min(cursorPos + selLength' cursorPos);  					CharacterRange[] charRanges = new [] { new CharacterRange(selPos' Math.Abs(selLength)) };  					Region[] charRegions = MeasureStringLine(g' text' charRanges' font' textRectScrolled);  					RectangleF selectionRect = charRegions.Length > 0 ? charRegions[0].GetBounds(g) : RectangleF.Empty;  					selectionRect.Inflate(0' 2);  					selectionRect.Y += GetFontYOffset(font);  					if (selPos == 0)  					{  						selectionRect.X -= 2;  						selectionRect.Width += 2;  					}  					if (selPos + Math.Abs(selLength) == text.Length)  					{  						selectionRect.Width += 2;  					}    					if ((state & TextBoxState.ReadOnlyFlag) == TextBoxState.ReadOnlyFlag)  						g.FillRectangle(new SolidBrush(Color.FromArgb(128' this.ColorGrayText))' selectionRect);  					else  						g.FillRectangle(new SolidBrush(Color.FromArgb(128' this.ColorHightlight))' selectionRect);  				}    				// Draw Text  				if ((state & TextBoxState.Disabled) == TextBoxState.Disabled ||  					(state & TextBoxState.ReadOnlyFlag) == TextBoxState.ReadOnlyFlag)  					textColor = Color.FromArgb(128' textColor);  				DrawStringLine(g' text' font' textRectScrolled' textColor);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextField,The following statement contains a magic number: if (text != null)  			{  				// Draw Selection  				if ((state & TextBoxState.Focus) == TextBoxState.Focus && cursorPos >= 0 && selLength != 0)  				{  					int selPos = Math.Min(cursorPos + selLength' cursorPos);  					CharacterRange[] charRanges = new [] { new CharacterRange(selPos' Math.Abs(selLength)) };  					Region[] charRegions = MeasureStringLine(g' text' charRanges' font' textRectScrolled);  					RectangleF selectionRect = charRegions.Length > 0 ? charRegions[0].GetBounds(g) : RectangleF.Empty;  					selectionRect.Inflate(0' 2);  					selectionRect.Y += GetFontYOffset(font);  					if (selPos == 0)  					{  						selectionRect.X -= 2;  						selectionRect.Width += 2;  					}  					if (selPos + Math.Abs(selLength) == text.Length)  					{  						selectionRect.Width += 2;  					}    					if ((state & TextBoxState.ReadOnlyFlag) == TextBoxState.ReadOnlyFlag)  						g.FillRectangle(new SolidBrush(Color.FromArgb(128' this.ColorGrayText))' selectionRect);  					else  						g.FillRectangle(new SolidBrush(Color.FromArgb(128' this.ColorHightlight))' selectionRect);  				}    				// Draw Text  				if ((state & TextBoxState.Disabled) == TextBoxState.Disabled ||  					(state & TextBoxState.ReadOnlyFlag) == TextBoxState.ReadOnlyFlag)  					textColor = Color.FromArgb(128' textColor);  				DrawStringLine(g' text' font' textRectScrolled' textColor);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextField,The following statement contains a magic number: if (text != null)  			{  				// Draw Selection  				if ((state & TextBoxState.Focus) == TextBoxState.Focus && cursorPos >= 0 && selLength != 0)  				{  					int selPos = Math.Min(cursorPos + selLength' cursorPos);  					CharacterRange[] charRanges = new [] { new CharacterRange(selPos' Math.Abs(selLength)) };  					Region[] charRegions = MeasureStringLine(g' text' charRanges' font' textRectScrolled);  					RectangleF selectionRect = charRegions.Length > 0 ? charRegions[0].GetBounds(g) : RectangleF.Empty;  					selectionRect.Inflate(0' 2);  					selectionRect.Y += GetFontYOffset(font);  					if (selPos == 0)  					{  						selectionRect.X -= 2;  						selectionRect.Width += 2;  					}  					if (selPos + Math.Abs(selLength) == text.Length)  					{  						selectionRect.Width += 2;  					}    					if ((state & TextBoxState.ReadOnlyFlag) == TextBoxState.ReadOnlyFlag)  						g.FillRectangle(new SolidBrush(Color.FromArgb(128' this.ColorGrayText))' selectionRect);  					else  						g.FillRectangle(new SolidBrush(Color.FromArgb(128' this.ColorHightlight))' selectionRect);  				}    				// Draw Text  				if ((state & TextBoxState.Disabled) == TextBoxState.Disabled ||  					(state & TextBoxState.ReadOnlyFlag) == TextBoxState.ReadOnlyFlag)  					textColor = Color.FromArgb(128' textColor);  				DrawStringLine(g' text' font' textRectScrolled' textColor);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextField,The following statement contains a magic number: if (text != null)  			{  				// Draw Selection  				if ((state & TextBoxState.Focus) == TextBoxState.Focus && cursorPos >= 0 && selLength != 0)  				{  					int selPos = Math.Min(cursorPos + selLength' cursorPos);  					CharacterRange[] charRanges = new [] { new CharacterRange(selPos' Math.Abs(selLength)) };  					Region[] charRegions = MeasureStringLine(g' text' charRanges' font' textRectScrolled);  					RectangleF selectionRect = charRegions.Length > 0 ? charRegions[0].GetBounds(g) : RectangleF.Empty;  					selectionRect.Inflate(0' 2);  					selectionRect.Y += GetFontYOffset(font);  					if (selPos == 0)  					{  						selectionRect.X -= 2;  						selectionRect.Width += 2;  					}  					if (selPos + Math.Abs(selLength) == text.Length)  					{  						selectionRect.Width += 2;  					}    					if ((state & TextBoxState.ReadOnlyFlag) == TextBoxState.ReadOnlyFlag)  						g.FillRectangle(new SolidBrush(Color.FromArgb(128' this.ColorGrayText))' selectionRect);  					else  						g.FillRectangle(new SolidBrush(Color.FromArgb(128' this.ColorHightlight))' selectionRect);  				}    				// Draw Text  				if ((state & TextBoxState.Disabled) == TextBoxState.Disabled ||  					(state & TextBoxState.ReadOnlyFlag) == TextBoxState.ReadOnlyFlag)  					textColor = Color.FromArgb(128' textColor);  				DrawStringLine(g' text' font' textRectScrolled' textColor);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextField,The following statement contains a magic number: if (text != null)  			{  				// Draw Selection  				if ((state & TextBoxState.Focus) == TextBoxState.Focus && cursorPos >= 0 && selLength != 0)  				{  					int selPos = Math.Min(cursorPos + selLength' cursorPos);  					CharacterRange[] charRanges = new [] { new CharacterRange(selPos' Math.Abs(selLength)) };  					Region[] charRegions = MeasureStringLine(g' text' charRanges' font' textRectScrolled);  					RectangleF selectionRect = charRegions.Length > 0 ? charRegions[0].GetBounds(g) : RectangleF.Empty;  					selectionRect.Inflate(0' 2);  					selectionRect.Y += GetFontYOffset(font);  					if (selPos == 0)  					{  						selectionRect.X -= 2;  						selectionRect.Width += 2;  					}  					if (selPos + Math.Abs(selLength) == text.Length)  					{  						selectionRect.Width += 2;  					}    					if ((state & TextBoxState.ReadOnlyFlag) == TextBoxState.ReadOnlyFlag)  						g.FillRectangle(new SolidBrush(Color.FromArgb(128' this.ColorGrayText))' selectionRect);  					else  						g.FillRectangle(new SolidBrush(Color.FromArgb(128' this.ColorHightlight))' selectionRect);  				}    				// Draw Text  				if ((state & TextBoxState.Disabled) == TextBoxState.Disabled ||  					(state & TextBoxState.ReadOnlyFlag) == TextBoxState.ReadOnlyFlag)  					textColor = Color.FromArgb(128' textColor);  				DrawStringLine(g' text' font' textRectScrolled' textColor);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextField,The following statement contains a magic number: if (text != null)  			{  				// Draw Selection  				if ((state & TextBoxState.Focus) == TextBoxState.Focus && cursorPos >= 0 && selLength != 0)  				{  					int selPos = Math.Min(cursorPos + selLength' cursorPos);  					CharacterRange[] charRanges = new [] { new CharacterRange(selPos' Math.Abs(selLength)) };  					Region[] charRegions = MeasureStringLine(g' text' charRanges' font' textRectScrolled);  					RectangleF selectionRect = charRegions.Length > 0 ? charRegions[0].GetBounds(g) : RectangleF.Empty;  					selectionRect.Inflate(0' 2);  					selectionRect.Y += GetFontYOffset(font);  					if (selPos == 0)  					{  						selectionRect.X -= 2;  						selectionRect.Width += 2;  					}  					if (selPos + Math.Abs(selLength) == text.Length)  					{  						selectionRect.Width += 2;  					}    					if ((state & TextBoxState.ReadOnlyFlag) == TextBoxState.ReadOnlyFlag)  						g.FillRectangle(new SolidBrush(Color.FromArgb(128' this.ColorGrayText))' selectionRect);  					else  						g.FillRectangle(new SolidBrush(Color.FromArgb(128' this.ColorHightlight))' selectionRect);  				}    				// Draw Text  				if ((state & TextBoxState.Disabled) == TextBoxState.Disabled ||  					(state & TextBoxState.ReadOnlyFlag) == TextBoxState.ReadOnlyFlag)  					textColor = Color.FromArgb(128' textColor);  				DrawStringLine(g' text' font' textRectScrolled' textColor);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextField,The following statement contains a magic number: if ((state & TextBoxState.ReadOnlyFlag) != TextBoxState.ReadOnlyFlag && cursorPos >= 0 && selLength == 0)  			{  				CharacterRange[] charRanges = new [] { new CharacterRange(0' cursorPos) };  				Region[] charRegions = MeasureStringLine(g' text ?? ""' charRanges' font' textRectScrolled);  				RectangleF textRectUntilCursor = charRegions.Length > 0 ? charRegions[0].GetBounds(g) : RectangleF.Empty;  				int curPixelPos = textRectScrolled.X + (int)textRectUntilCursor.Width + 2;  				g.FillRectangle(Brushes.Black' new Rectangle(curPixelPos' textRectScrolled.Top + 1' 1' textRectScrolled.Height - 2));  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawTextField,The following statement contains a magic number: if ((state & TextBoxState.ReadOnlyFlag) != TextBoxState.ReadOnlyFlag && cursorPos >= 0 && selLength == 0)  			{  				CharacterRange[] charRanges = new [] { new CharacterRange(0' cursorPos) };  				Region[] charRegions = MeasureStringLine(g' text ?? ""' charRanges' font' textRectScrolled);  				RectangleF textRectUntilCursor = charRegions.Length > 0 ? charRegions[0].GetBounds(g) : RectangleF.Empty;  				int curPixelPos = textRectScrolled.X + (int)textRectUntilCursor.Width + 2;  				g.FillRectangle(Brushes.Black' new Rectangle(curPixelPos' textRectScrolled.Top + 1' 1' textRectScrolled.Height - 2));  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,PickCharTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,PickCharTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,PickCharTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,PickCharTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,PickCharTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,PickCharTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,PickCharTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,PickCharTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,PickCharTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,PickCharTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,GetCharPosTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,GetCharPosTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,GetCharPosTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,GetCharPosTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,GetCharPosTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,GetCharPosTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,GetCharPosTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,GetCharPosTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,GetCharPosTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,GetCharPosTextField,The following statement contains a magic number: if (style == TextBoxStyle.Plain)  				rect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);  			else if (style == TextBoxStyle.Flat)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);  			else if (style == TextBoxStyle.Sunken)  				rect = new Rectangle(rect.X + 2' rect.Y + 2' rect.Width - 4' rect.Height - 4);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,GetCharPosTextField,The following statement contains a magic number: Rectangle rectScrolled = new Rectangle(  				rect.X - scroll'  				rect.Y'  				rect.Width + scroll + 10000000'  				rect.Height);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawBorder,The following statement contains a magic number: if (style == BorderStyle.Simple || style == BorderStyle.Focus)  				darkColor = this.ColorVeryDarkBackground;  			else if (style == BorderStyle.Sunken)  			{  				darkColor = Color.FromArgb(128' this.ColorDarkBackground);  				lightColor = this.ColorLightBackground;  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawBorder,The following statement contains a magic number: Pen darkPen = new Pen(state == BorderState.Disabled ? Color.FromArgb(darkColor.A / 2' darkColor) : darkColor);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawBorder,The following statement contains a magic number: Pen lightPen = new Pen(state == BorderState.Disabled ? Color.FromArgb(lightColor.A / 2' lightColor) : lightColor);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawBorder,The following statement contains a magic number: if (style == BorderStyle.ContentBox)  			{  				g.DrawRectangle(lightPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  				g.DrawRectangle(darkPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == BorderStyle.Simple)  			{  				g.DrawRectangle(darkPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == BorderStyle.Focus)  			{  				darkPen.DashStyle = DashStyle.Dot;  				g.DrawRectangle(darkPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == BorderStyle.Sunken)  			{  				g.DrawRectangle(lightPen' rect.X + 1' rect.Y + 1' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(darkPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawBorder,The following statement contains a magic number: if (style == BorderStyle.ContentBox)  			{  				g.DrawRectangle(lightPen' rect.X + 1' rect.Y + 1' rect.Width - 3' rect.Height - 3);  				g.DrawRectangle(darkPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == BorderStyle.Simple)  			{  				g.DrawRectangle(darkPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == BorderStyle.Focus)  			{  				darkPen.DashStyle = DashStyle.Dot;  				g.DrawRectangle(darkPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}  			else if (style == BorderStyle.Sunken)  			{  				g.DrawRectangle(lightPen' rect.X + 1' rect.Y + 1' rect.Width - 1' rect.Height - 1);  				g.DrawRectangle(darkPen' rect.X' rect.Y' rect.Width - 1' rect.Height - 1);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: if (rect.Width < 4 || rect.Height < 4) return;
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: if (rect.Width < 4 || rect.Height < 4) return;
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: borderPath.AddPolygon(new [] {  				new Point(rect.Left' rect.Top + 2)'  				new Point(rect.Left + 2' rect.Top)'  				new Point(rect.Right - 3' rect.Top)'  				new Point(rect.Right - 1' rect.Top + 2)'  				new Point(rect.Right - 1' rect.Bottom - 3)'  				new Point(rect.Right - 3' rect.Bottom - 1)'  				new Point(rect.Left + 2' rect.Bottom - 1)'  				new Point(rect.Left' rect.Bottom - 3) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: borderPath.AddPolygon(new [] {  				new Point(rect.Left' rect.Top + 2)'  				new Point(rect.Left + 2' rect.Top)'  				new Point(rect.Right - 3' rect.Top)'  				new Point(rect.Right - 1' rect.Top + 2)'  				new Point(rect.Right - 1' rect.Bottom - 3)'  				new Point(rect.Right - 3' rect.Bottom - 1)'  				new Point(rect.Left + 2' rect.Bottom - 1)'  				new Point(rect.Left' rect.Bottom - 3) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: borderPath.AddPolygon(new [] {  				new Point(rect.Left' rect.Top + 2)'  				new Point(rect.Left + 2' rect.Top)'  				new Point(rect.Right - 3' rect.Top)'  				new Point(rect.Right - 1' rect.Top + 2)'  				new Point(rect.Right - 1' rect.Bottom - 3)'  				new Point(rect.Right - 3' rect.Bottom - 1)'  				new Point(rect.Left + 2' rect.Bottom - 1)'  				new Point(rect.Left' rect.Bottom - 3) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: borderPath.AddPolygon(new [] {  				new Point(rect.Left' rect.Top + 2)'  				new Point(rect.Left + 2' rect.Top)'  				new Point(rect.Right - 3' rect.Top)'  				new Point(rect.Right - 1' rect.Top + 2)'  				new Point(rect.Right - 1' rect.Bottom - 3)'  				new Point(rect.Right - 3' rect.Bottom - 1)'  				new Point(rect.Left + 2' rect.Bottom - 1)'  				new Point(rect.Left' rect.Bottom - 3) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: borderPath.AddPolygon(new [] {  				new Point(rect.Left' rect.Top + 2)'  				new Point(rect.Left + 2' rect.Top)'  				new Point(rect.Right - 3' rect.Top)'  				new Point(rect.Right - 1' rect.Top + 2)'  				new Point(rect.Right - 1' rect.Bottom - 3)'  				new Point(rect.Right - 3' rect.Bottom - 1)'  				new Point(rect.Left + 2' rect.Bottom - 1)'  				new Point(rect.Left' rect.Bottom - 3) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: borderPath.AddPolygon(new [] {  				new Point(rect.Left' rect.Top + 2)'  				new Point(rect.Left + 2' rect.Top)'  				new Point(rect.Right - 3' rect.Top)'  				new Point(rect.Right - 1' rect.Top + 2)'  				new Point(rect.Right - 1' rect.Bottom - 3)'  				new Point(rect.Right - 3' rect.Bottom - 1)'  				new Point(rect.Left + 2' rect.Bottom - 1)'  				new Point(rect.Left' rect.Bottom - 3) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: borderPath.AddPolygon(new [] {  				new Point(rect.Left' rect.Top + 2)'  				new Point(rect.Left + 2' rect.Top)'  				new Point(rect.Right - 3' rect.Top)'  				new Point(rect.Right - 1' rect.Top + 2)'  				new Point(rect.Right - 1' rect.Bottom - 3)'  				new Point(rect.Right - 3' rect.Bottom - 1)'  				new Point(rect.Left + 2' rect.Bottom - 1)'  				new Point(rect.Left' rect.Bottom - 3) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: borderPath.AddPolygon(new [] {  				new Point(rect.Left' rect.Top + 2)'  				new Point(rect.Left + 2' rect.Top)'  				new Point(rect.Right - 3' rect.Top)'  				new Point(rect.Right - 1' rect.Top + 2)'  				new Point(rect.Right - 1' rect.Bottom - 3)'  				new Point(rect.Right - 3' rect.Bottom - 1)'  				new Point(rect.Left + 2' rect.Bottom - 1)'  				new Point(rect.Left' rect.Bottom - 3) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: Rectangle outerRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: Rectangle outerRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: outerPath.AddPolygon(new [] {  				new Point(outerRect.Left' outerRect.Top + 1)'  				new Point(outerRect.Left + 1' outerRect.Top)'  				new Point(outerRect.Right - 2' outerRect.Top)'  				new Point(outerRect.Right - 1' outerRect.Top + 1)'  				new Point(outerRect.Right - 1' outerRect.Bottom - 2)'  				new Point(outerRect.Right - 2' outerRect.Bottom - 1)'  				new Point(outerRect.Left + 1' outerRect.Bottom - 1)'  				new Point(outerRect.Left' outerRect.Bottom - 2) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: outerPath.AddPolygon(new [] {  				new Point(outerRect.Left' outerRect.Top + 1)'  				new Point(outerRect.Left + 1' outerRect.Top)'  				new Point(outerRect.Right - 2' outerRect.Top)'  				new Point(outerRect.Right - 1' outerRect.Top + 1)'  				new Point(outerRect.Right - 1' outerRect.Bottom - 2)'  				new Point(outerRect.Right - 2' outerRect.Bottom - 1)'  				new Point(outerRect.Left + 1' outerRect.Bottom - 1)'  				new Point(outerRect.Left' outerRect.Bottom - 2) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: outerPath.AddPolygon(new [] {  				new Point(outerRect.Left' outerRect.Top + 1)'  				new Point(outerRect.Left + 1' outerRect.Top)'  				new Point(outerRect.Right - 2' outerRect.Top)'  				new Point(outerRect.Right - 1' outerRect.Top + 1)'  				new Point(outerRect.Right - 1' outerRect.Bottom - 2)'  				new Point(outerRect.Right - 2' outerRect.Bottom - 1)'  				new Point(outerRect.Left + 1' outerRect.Bottom - 1)'  				new Point(outerRect.Left' outerRect.Bottom - 2) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: outerPath.AddPolygon(new [] {  				new Point(outerRect.Left' outerRect.Top + 1)'  				new Point(outerRect.Left + 1' outerRect.Top)'  				new Point(outerRect.Right - 2' outerRect.Top)'  				new Point(outerRect.Right - 1' outerRect.Top + 1)'  				new Point(outerRect.Right - 1' outerRect.Bottom - 2)'  				new Point(outerRect.Right - 2' outerRect.Bottom - 1)'  				new Point(outerRect.Left + 1' outerRect.Bottom - 1)'  				new Point(outerRect.Left' outerRect.Bottom - 2) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: Rectangle innerRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: Rectangle innerRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: Rectangle innerRectUpper = new Rectangle(innerRect.X' innerRect.Y' innerRect.Width' innerRect.Height / 2);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: if (state == ButtonState.Normal)  			{  				colorInner = this.ColorVeryLightBackground;  				colorBorder = this.ColorVeryDarkBackground;    				Color colorGradBase = this.ColorVeryDarkBackground;  				Color gradLight2 = colorGradBase.MixWith(colorInner' 0.9f);  				Color gradLight = colorGradBase.MixWith(colorInner' 0.8f);  				Color gradDark = colorGradBase.MixWith(colorInner' 0.725f);  				Color gradDark2 = colorGradBase.MixWith(colorInner' 0.625f);    				upperBrush = new LinearGradientBrush(innerRectUpper' gradLight2' gradLight' 90.0f);  				lowerBrush = new LinearGradientBrush(innerRectUpper' gradDark' gradDark2' 90.0f);  			}  			else if (state == ButtonState.Hot)  			{  				colorInner = this.ColorVeryLightBackground;  				colorBorder = this.ColorVeryDarkBackground.MixWith(this.ColorHightlight' 0.4f);    				Color colorGradBase = this.ColorHightlight;  				Color gradLight2 = colorGradBase.MixWith(colorInner' 0.9f);  				Color gradLight = colorGradBase.MixWith(colorInner' 0.8f);  				Color gradDark = colorGradBase.MixWith(colorInner' 0.7f);  				Color gradDark2 = colorGradBase.MixWith(colorInner' 0.6f);    				upperBrush = new LinearGradientBrush(innerRectUpper' gradLight2' gradLight' 90.0f);  				lowerBrush = new LinearGradientBrush(innerRectUpper' gradDark' gradDark2' 90.0f);  			}  			else if (state == ButtonState.Pressed)  			{  				colorBorder = this.ColorVeryDarkBackground.MixWith(this.ColorHightlight' 1.0f' true);  				colorInner = colorBorder;    				Color colorGradBase = this.ColorHightlight;  				Color colorGradBase2 = this.ColorVeryLightBackground;  				Color gradLight2 = colorGradBase.MixWith(colorGradBase2' 0.9f);  				Color gradLight = colorGradBase.MixWith(colorGradBase2' 0.7f);  				Color gradDark = colorGradBase.MixWith(colorGradBase2' 0.5f);  				Color gradDark2 = colorGradBase.MixWith(colorGradBase2' 0.2f);    				innerRectUpper.Height += 1;  				innerRectLower.Y += 1;  				innerRectLower.Height -= 1;    				upperBrush = new LinearGradientBrush(innerRectUpper' gradLight2' gradLight' 90.0f);  				lowerBrush = new LinearGradientBrush(innerRectUpper' gradDark' gradDark2' 90.0f);  			}  			else  			{  				colorInner = Color.FromArgb(128' this.ColorVeryLightBackground);  				colorBorder = Color.FromArgb(128' this.ColorVeryDarkBackground);  				upperBrush = new SolidBrush(Color.Transparent);  				lowerBrush = new SolidBrush(Color.Transparent);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: if (state == ButtonState.Normal)  			{  				colorInner = this.ColorVeryLightBackground;  				colorBorder = this.ColorVeryDarkBackground;    				Color colorGradBase = this.ColorVeryDarkBackground;  				Color gradLight2 = colorGradBase.MixWith(colorInner' 0.9f);  				Color gradLight = colorGradBase.MixWith(colorInner' 0.8f);  				Color gradDark = colorGradBase.MixWith(colorInner' 0.725f);  				Color gradDark2 = colorGradBase.MixWith(colorInner' 0.625f);    				upperBrush = new LinearGradientBrush(innerRectUpper' gradLight2' gradLight' 90.0f);  				lowerBrush = new LinearGradientBrush(innerRectUpper' gradDark' gradDark2' 90.0f);  			}  			else if (state == ButtonState.Hot)  			{  				colorInner = this.ColorVeryLightBackground;  				colorBorder = this.ColorVeryDarkBackground.MixWith(this.ColorHightlight' 0.4f);    				Color colorGradBase = this.ColorHightlight;  				Color gradLight2 = colorGradBase.MixWith(colorInner' 0.9f);  				Color gradLight = colorGradBase.MixWith(colorInner' 0.8f);  				Color gradDark = colorGradBase.MixWith(colorInner' 0.7f);  				Color gradDark2 = colorGradBase.MixWith(colorInner' 0.6f);    				upperBrush = new LinearGradientBrush(innerRectUpper' gradLight2' gradLight' 90.0f);  				lowerBrush = new LinearGradientBrush(innerRectUpper' gradDark' gradDark2' 90.0f);  			}  			else if (state == ButtonState.Pressed)  			{  				colorBorder = this.ColorVeryDarkBackground.MixWith(this.ColorHightlight' 1.0f' true);  				colorInner = colorBorder;    				Color colorGradBase = this.ColorHightlight;  				Color colorGradBase2 = this.ColorVeryLightBackground;  				Color gradLight2 = colorGradBase.MixWith(colorGradBase2' 0.9f);  				Color gradLight = colorGradBase.MixWith(colorGradBase2' 0.7f);  				Color gradDark = colorGradBase.MixWith(colorGradBase2' 0.5f);  				Color gradDark2 = colorGradBase.MixWith(colorGradBase2' 0.2f);    				innerRectUpper.Height += 1;  				innerRectLower.Y += 1;  				innerRectLower.Height -= 1;    				upperBrush = new LinearGradientBrush(innerRectUpper' gradLight2' gradLight' 90.0f);  				lowerBrush = new LinearGradientBrush(innerRectUpper' gradDark' gradDark2' 90.0f);  			}  			else  			{  				colorInner = Color.FromArgb(128' this.ColorVeryLightBackground);  				colorBorder = Color.FromArgb(128' this.ColorVeryDarkBackground);  				upperBrush = new SolidBrush(Color.Transparent);  				lowerBrush = new SolidBrush(Color.Transparent);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: g.DrawPath(new Pen(Color.FromArgb(128' colorInner))' outerPath);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButtonBackground,The following statement contains a magic number: if (state == ButtonState.Pressed)  				g.DrawLine(new Pen((lowerBrush as LinearGradientBrush).LinearColors[1])' innerRectLower.X + 1' innerRectLower.Bottom - 1' innerRectLower.Right - 2' innerRectLower.Bottom - 1);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The following statement contains a magic number: if (rect.Width < 4 || rect.Height < 4) return;
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The following statement contains a magic number: if (rect.Width < 4 || rect.Height < 4) return;
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The following statement contains a magic number: Rectangle innerRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The following statement contains a magic number: Rectangle innerRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The following statement contains a magic number: if (icon == null && !string.IsNullOrEmpty(text))  			{  				DrawStringLine(g' text' this.FontRegular' innerRect' colorText' StringAlignment.Center);  			}  			else if (string.IsNullOrEmpty(text))  			{  				Rectangle iconRect;  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - icon.Width / 2'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				g.DrawImageUnscaled(icon' iconRect);  			}  			else  			{  				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect);  				SizeF textSize = charRegions[0].GetBounds(g).Size;  				Size iconTextSize;  				Rectangle textRect;  				Rectangle iconRect;    				iconTextSize = new Size(icon.Width + (int)textSize.Width' innerRect.Height);  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - (int)textSize.Width / 2 - icon.Width * 3 / 4'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				textRect = new Rectangle(  					iconRect.Right'   					innerRect.Y'   					innerRect.Width - iconRect.Width'   					innerRect.Height);    				g.DrawImageUnscaled(icon' iconRect);  				DrawStringLine(g' text' this.FontRegular' textRect' colorText);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The following statement contains a magic number: if (icon == null && !string.IsNullOrEmpty(text))  			{  				DrawStringLine(g' text' this.FontRegular' innerRect' colorText' StringAlignment.Center);  			}  			else if (string.IsNullOrEmpty(text))  			{  				Rectangle iconRect;  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - icon.Width / 2'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				g.DrawImageUnscaled(icon' iconRect);  			}  			else  			{  				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect);  				SizeF textSize = charRegions[0].GetBounds(g).Size;  				Size iconTextSize;  				Rectangle textRect;  				Rectangle iconRect;    				iconTextSize = new Size(icon.Width + (int)textSize.Width' innerRect.Height);  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - (int)textSize.Width / 2 - icon.Width * 3 / 4'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				textRect = new Rectangle(  					iconRect.Right'   					innerRect.Y'   					innerRect.Width - iconRect.Width'   					innerRect.Height);    				g.DrawImageUnscaled(icon' iconRect);  				DrawStringLine(g' text' this.FontRegular' textRect' colorText);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The following statement contains a magic number: if (icon == null && !string.IsNullOrEmpty(text))  			{  				DrawStringLine(g' text' this.FontRegular' innerRect' colorText' StringAlignment.Center);  			}  			else if (string.IsNullOrEmpty(text))  			{  				Rectangle iconRect;  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - icon.Width / 2'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				g.DrawImageUnscaled(icon' iconRect);  			}  			else  			{  				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect);  				SizeF textSize = charRegions[0].GetBounds(g).Size;  				Size iconTextSize;  				Rectangle textRect;  				Rectangle iconRect;    				iconTextSize = new Size(icon.Width + (int)textSize.Width' innerRect.Height);  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - (int)textSize.Width / 2 - icon.Width * 3 / 4'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				textRect = new Rectangle(  					iconRect.Right'   					innerRect.Y'   					innerRect.Width - iconRect.Width'   					innerRect.Height);    				g.DrawImageUnscaled(icon' iconRect);  				DrawStringLine(g' text' this.FontRegular' textRect' colorText);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The following statement contains a magic number: if (icon == null && !string.IsNullOrEmpty(text))  			{  				DrawStringLine(g' text' this.FontRegular' innerRect' colorText' StringAlignment.Center);  			}  			else if (string.IsNullOrEmpty(text))  			{  				Rectangle iconRect;  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - icon.Width / 2'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				g.DrawImageUnscaled(icon' iconRect);  			}  			else  			{  				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect);  				SizeF textSize = charRegions[0].GetBounds(g).Size;  				Size iconTextSize;  				Rectangle textRect;  				Rectangle iconRect;    				iconTextSize = new Size(icon.Width + (int)textSize.Width' innerRect.Height);  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - (int)textSize.Width / 2 - icon.Width * 3 / 4'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				textRect = new Rectangle(  					iconRect.Right'   					innerRect.Y'   					innerRect.Width - iconRect.Width'   					innerRect.Height);    				g.DrawImageUnscaled(icon' iconRect);  				DrawStringLine(g' text' this.FontRegular' textRect' colorText);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The following statement contains a magic number: if (icon == null && !string.IsNullOrEmpty(text))  			{  				DrawStringLine(g' text' this.FontRegular' innerRect' colorText' StringAlignment.Center);  			}  			else if (string.IsNullOrEmpty(text))  			{  				Rectangle iconRect;  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - icon.Width / 2'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				g.DrawImageUnscaled(icon' iconRect);  			}  			else  			{  				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect);  				SizeF textSize = charRegions[0].GetBounds(g).Size;  				Size iconTextSize;  				Rectangle textRect;  				Rectangle iconRect;    				iconTextSize = new Size(icon.Width + (int)textSize.Width' innerRect.Height);  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - (int)textSize.Width / 2 - icon.Width * 3 / 4'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				textRect = new Rectangle(  					iconRect.Right'   					innerRect.Y'   					innerRect.Width - iconRect.Width'   					innerRect.Height);    				g.DrawImageUnscaled(icon' iconRect);  				DrawStringLine(g' text' this.FontRegular' textRect' colorText);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The following statement contains a magic number: if (icon == null && !string.IsNullOrEmpty(text))  			{  				DrawStringLine(g' text' this.FontRegular' innerRect' colorText' StringAlignment.Center);  			}  			else if (string.IsNullOrEmpty(text))  			{  				Rectangle iconRect;  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - icon.Width / 2'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				g.DrawImageUnscaled(icon' iconRect);  			}  			else  			{  				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect);  				SizeF textSize = charRegions[0].GetBounds(g).Size;  				Size iconTextSize;  				Rectangle textRect;  				Rectangle iconRect;    				iconTextSize = new Size(icon.Width + (int)textSize.Width' innerRect.Height);  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - (int)textSize.Width / 2 - icon.Width * 3 / 4'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				textRect = new Rectangle(  					iconRect.Right'   					innerRect.Y'   					innerRect.Width - iconRect.Width'   					innerRect.Height);    				g.DrawImageUnscaled(icon' iconRect);  				DrawStringLine(g' text' this.FontRegular' textRect' colorText);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The following statement contains a magic number: if (icon == null && !string.IsNullOrEmpty(text))  			{  				DrawStringLine(g' text' this.FontRegular' innerRect' colorText' StringAlignment.Center);  			}  			else if (string.IsNullOrEmpty(text))  			{  				Rectangle iconRect;  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - icon.Width / 2'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				g.DrawImageUnscaled(icon' iconRect);  			}  			else  			{  				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect);  				SizeF textSize = charRegions[0].GetBounds(g).Size;  				Size iconTextSize;  				Rectangle textRect;  				Rectangle iconRect;    				iconTextSize = new Size(icon.Width + (int)textSize.Width' innerRect.Height);  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - (int)textSize.Width / 2 - icon.Width * 3 / 4'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				textRect = new Rectangle(  					iconRect.Right'   					innerRect.Y'   					innerRect.Width - iconRect.Width'   					innerRect.Height);    				g.DrawImageUnscaled(icon' iconRect);  				DrawStringLine(g' text' this.FontRegular' textRect' colorText);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The following statement contains a magic number: if (icon == null && !string.IsNullOrEmpty(text))  			{  				DrawStringLine(g' text' this.FontRegular' innerRect' colorText' StringAlignment.Center);  			}  			else if (string.IsNullOrEmpty(text))  			{  				Rectangle iconRect;  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - icon.Width / 2'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				g.DrawImageUnscaled(icon' iconRect);  			}  			else  			{  				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect);  				SizeF textSize = charRegions[0].GetBounds(g).Size;  				Size iconTextSize;  				Rectangle textRect;  				Rectangle iconRect;    				iconTextSize = new Size(icon.Width + (int)textSize.Width' innerRect.Height);  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - (int)textSize.Width / 2 - icon.Width * 3 / 4'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				textRect = new Rectangle(  					iconRect.Right'   					innerRect.Y'   					innerRect.Width - iconRect.Width'   					innerRect.Height);    				g.DrawImageUnscaled(icon' iconRect);  				DrawStringLine(g' text' this.FontRegular' textRect' colorText);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The following statement contains a magic number: if (icon == null && !string.IsNullOrEmpty(text))  			{  				DrawStringLine(g' text' this.FontRegular' innerRect' colorText' StringAlignment.Center);  			}  			else if (string.IsNullOrEmpty(text))  			{  				Rectangle iconRect;  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - icon.Width / 2'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				g.DrawImageUnscaled(icon' iconRect);  			}  			else  			{  				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect);  				SizeF textSize = charRegions[0].GetBounds(g).Size;  				Size iconTextSize;  				Rectangle textRect;  				Rectangle iconRect;    				iconTextSize = new Size(icon.Width + (int)textSize.Width' innerRect.Height);  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - (int)textSize.Width / 2 - icon.Width * 3 / 4'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				textRect = new Rectangle(  					iconRect.Right'   					innerRect.Y'   					innerRect.Width - iconRect.Width'   					innerRect.Height);    				g.DrawImageUnscaled(icon' iconRect);  				DrawStringLine(g' text' this.FontRegular' textRect' colorText);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawButton,The following statement contains a magic number: if (icon == null && !string.IsNullOrEmpty(text))  			{  				DrawStringLine(g' text' this.FontRegular' innerRect' colorText' StringAlignment.Center);  			}  			else if (string.IsNullOrEmpty(text))  			{  				Rectangle iconRect;  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - icon.Width / 2'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				g.DrawImageUnscaled(icon' iconRect);  			}  			else  			{  				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect);  				SizeF textSize = charRegions[0].GetBounds(g).Size;  				Size iconTextSize;  				Rectangle textRect;  				Rectangle iconRect;    				iconTextSize = new Size(icon.Width + (int)textSize.Width' innerRect.Height);  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - (int)textSize.Width / 2 - icon.Width * 3 / 4'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				textRect = new Rectangle(  					iconRect.Right'   					innerRect.Y'   					innerRect.Width - iconRect.Width'   					innerRect.Height);    				g.DrawImageUnscaled(icon' iconRect);  				DrawStringLine(g' text' this.FontRegular' textRect' colorText);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The following statement contains a magic number: if (rect.Width < 8 + dropDownIcon.Width || rect.Height < 4) return;
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The following statement contains a magic number: if (rect.Width < 8 + dropDownIcon.Width || rect.Height < 4) return;
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The following statement contains a magic number: Rectangle innerRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The following statement contains a magic number: Rectangle innerRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The following statement contains a magic number: Rectangle dropDownIconRect = new Rectangle(  				innerRect.Right - dropDownIcon.Width - 4'  				innerRect.Y + innerRect.Height / 2 - dropDownIcon.Height / 2'  				dropDownIcon.Width'  				dropDownIcon.Height);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The following statement contains a magic number: Rectangle dropDownIconRect = new Rectangle(  				innerRect.Right - dropDownIcon.Width - 4'  				innerRect.Y + innerRect.Height / 2 - dropDownIcon.Height / 2'  				dropDownIcon.Width'  				dropDownIcon.Height);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The following statement contains a magic number: Rectangle dropDownIconRect = new Rectangle(  				innerRect.Right - dropDownIcon.Width - 4'  				innerRect.Y + innerRect.Height / 2 - dropDownIcon.Height / 2'  				dropDownIcon.Width'  				dropDownIcon.Height);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The following statement contains a magic number: innerRect = new Rectangle(innerRect.X + 2' innerRect.Y' innerRect.Width - dropDownIconRect.Width - 6' innerRect.Height);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The following statement contains a magic number: innerRect = new Rectangle(innerRect.X + 2' innerRect.Y' innerRect.Width - dropDownIconRect.Width - 6' innerRect.Height);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The following statement contains a magic number: if (icon != null && !string.IsNullOrEmpty(text))  			{  				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect);  				SizeF textSize = charRegions[0].GetBounds(g).Size;  				Size iconTextSize;  				Rectangle textRect;  				Rectangle iconRect;    				iconTextSize = new Size(icon.Width + (int)textSize.Width' innerRect.Height);  				iconRect = new Rectangle(  					innerRect.X'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				textRect = new Rectangle(  					iconRect.Right'   					innerRect.Y'   					innerRect.Width - iconRect.Width'   					innerRect.Height);    				g.DrawImageUnscaled(icon' iconRect);  				DrawStringLine(g' text' this.FontRegular' textRect' colorText);  			}  			else if (!string.IsNullOrEmpty(text))  			{  				DrawStringLine(g' text' this.FontRegular' innerRect' colorText);  			}  			else if (icon != null)  			{  				Rectangle iconRect;  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - icon.Width / 2'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				g.DrawImageUnscaled(icon' iconRect);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The following statement contains a magic number: if (icon != null && !string.IsNullOrEmpty(text))  			{  				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect);  				SizeF textSize = charRegions[0].GetBounds(g).Size;  				Size iconTextSize;  				Rectangle textRect;  				Rectangle iconRect;    				iconTextSize = new Size(icon.Width + (int)textSize.Width' innerRect.Height);  				iconRect = new Rectangle(  					innerRect.X'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				textRect = new Rectangle(  					iconRect.Right'   					innerRect.Y'   					innerRect.Width - iconRect.Width'   					innerRect.Height);    				g.DrawImageUnscaled(icon' iconRect);  				DrawStringLine(g' text' this.FontRegular' textRect' colorText);  			}  			else if (!string.IsNullOrEmpty(text))  			{  				DrawStringLine(g' text' this.FontRegular' innerRect' colorText);  			}  			else if (icon != null)  			{  				Rectangle iconRect;  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - icon.Width / 2'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				g.DrawImageUnscaled(icon' iconRect);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The following statement contains a magic number: if (icon != null && !string.IsNullOrEmpty(text))  			{  				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect);  				SizeF textSize = charRegions[0].GetBounds(g).Size;  				Size iconTextSize;  				Rectangle textRect;  				Rectangle iconRect;    				iconTextSize = new Size(icon.Width + (int)textSize.Width' innerRect.Height);  				iconRect = new Rectangle(  					innerRect.X'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				textRect = new Rectangle(  					iconRect.Right'   					innerRect.Y'   					innerRect.Width - iconRect.Width'   					innerRect.Height);    				g.DrawImageUnscaled(icon' iconRect);  				DrawStringLine(g' text' this.FontRegular' textRect' colorText);  			}  			else if (!string.IsNullOrEmpty(text))  			{  				DrawStringLine(g' text' this.FontRegular' innerRect' colorText);  			}  			else if (icon != null)  			{  				Rectangle iconRect;  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - icon.Width / 2'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				g.DrawImageUnscaled(icon' iconRect);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The following statement contains a magic number: if (icon != null && !string.IsNullOrEmpty(text))  			{  				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect);  				SizeF textSize = charRegions[0].GetBounds(g).Size;  				Size iconTextSize;  				Rectangle textRect;  				Rectangle iconRect;    				iconTextSize = new Size(icon.Width + (int)textSize.Width' innerRect.Height);  				iconRect = new Rectangle(  					innerRect.X'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				textRect = new Rectangle(  					iconRect.Right'   					innerRect.Y'   					innerRect.Width - iconRect.Width'   					innerRect.Height);    				g.DrawImageUnscaled(icon' iconRect);  				DrawStringLine(g' text' this.FontRegular' textRect' colorText);  			}  			else if (!string.IsNullOrEmpty(text))  			{  				DrawStringLine(g' text' this.FontRegular' innerRect' colorText);  			}  			else if (icon != null)  			{  				Rectangle iconRect;  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - icon.Width / 2'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				g.DrawImageUnscaled(icon' iconRect);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The following statement contains a magic number: if (icon != null && !string.IsNullOrEmpty(text))  			{  				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect);  				SizeF textSize = charRegions[0].GetBounds(g).Size;  				Size iconTextSize;  				Rectangle textRect;  				Rectangle iconRect;    				iconTextSize = new Size(icon.Width + (int)textSize.Width' innerRect.Height);  				iconRect = new Rectangle(  					innerRect.X'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				textRect = new Rectangle(  					iconRect.Right'   					innerRect.Y'   					innerRect.Width - iconRect.Width'   					innerRect.Height);    				g.DrawImageUnscaled(icon' iconRect);  				DrawStringLine(g' text' this.FontRegular' textRect' colorText);  			}  			else if (!string.IsNullOrEmpty(text))  			{  				DrawStringLine(g' text' this.FontRegular' innerRect' colorText);  			}  			else if (icon != null)  			{  				Rectangle iconRect;  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - icon.Width / 2'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				g.DrawImageUnscaled(icon' iconRect);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawComboBox,The following statement contains a magic number: if (icon != null && !string.IsNullOrEmpty(text))  			{  				Region[] charRegions = MeasureStringLine(g' text' new [] { new CharacterRange(0' text.Length) }' this.FontRegular' innerRect);  				SizeF textSize = charRegions[0].GetBounds(g).Size;  				Size iconTextSize;  				Rectangle textRect;  				Rectangle iconRect;    				iconTextSize = new Size(icon.Width + (int)textSize.Width' innerRect.Height);  				iconRect = new Rectangle(  					innerRect.X'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				textRect = new Rectangle(  					iconRect.Right'   					innerRect.Y'   					innerRect.Width - iconRect.Width'   					innerRect.Height);    				g.DrawImageUnscaled(icon' iconRect);  				DrawStringLine(g' text' this.FontRegular' textRect' colorText);  			}  			else if (!string.IsNullOrEmpty(text))  			{  				DrawStringLine(g' text' this.FontRegular' innerRect' colorText);  			}  			else if (icon != null)  			{  				Rectangle iconRect;  				iconRect = new Rectangle(  					innerRect.X + innerRect.Width / 2 - icon.Width / 2'   					innerRect.Y + innerRect.Height / 2 - icon.Height / 2'   					icon.Width'   					icon.Height);  				g.DrawImageUnscaled(icon' iconRect);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: if (rect.Width < 4 || rect.Height < 4) return;
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: if (rect.Width < 4 || rect.Height < 4) return;
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: borderPath.AddPolygon(new [] {  				new Point(rect.Left' rect.Top + 2)'  				new Point(rect.Left + 2' rect.Top)'  				new Point(rect.Right - 3' rect.Top)'  				new Point(rect.Right - 1' rect.Top + 2)'  				new Point(rect.Right - 1' rect.Bottom - 3)'  				new Point(rect.Right - 3' rect.Bottom - 1)'  				new Point(rect.Left + 2' rect.Bottom - 1)'  				new Point(rect.Left' rect.Bottom - 3) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: borderPath.AddPolygon(new [] {  				new Point(rect.Left' rect.Top + 2)'  				new Point(rect.Left + 2' rect.Top)'  				new Point(rect.Right - 3' rect.Top)'  				new Point(rect.Right - 1' rect.Top + 2)'  				new Point(rect.Right - 1' rect.Bottom - 3)'  				new Point(rect.Right - 3' rect.Bottom - 1)'  				new Point(rect.Left + 2' rect.Bottom - 1)'  				new Point(rect.Left' rect.Bottom - 3) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: borderPath.AddPolygon(new [] {  				new Point(rect.Left' rect.Top + 2)'  				new Point(rect.Left + 2' rect.Top)'  				new Point(rect.Right - 3' rect.Top)'  				new Point(rect.Right - 1' rect.Top + 2)'  				new Point(rect.Right - 1' rect.Bottom - 3)'  				new Point(rect.Right - 3' rect.Bottom - 1)'  				new Point(rect.Left + 2' rect.Bottom - 1)'  				new Point(rect.Left' rect.Bottom - 3) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: borderPath.AddPolygon(new [] {  				new Point(rect.Left' rect.Top + 2)'  				new Point(rect.Left + 2' rect.Top)'  				new Point(rect.Right - 3' rect.Top)'  				new Point(rect.Right - 1' rect.Top + 2)'  				new Point(rect.Right - 1' rect.Bottom - 3)'  				new Point(rect.Right - 3' rect.Bottom - 1)'  				new Point(rect.Left + 2' rect.Bottom - 1)'  				new Point(rect.Left' rect.Bottom - 3) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: borderPath.AddPolygon(new [] {  				new Point(rect.Left' rect.Top + 2)'  				new Point(rect.Left + 2' rect.Top)'  				new Point(rect.Right - 3' rect.Top)'  				new Point(rect.Right - 1' rect.Top + 2)'  				new Point(rect.Right - 1' rect.Bottom - 3)'  				new Point(rect.Right - 3' rect.Bottom - 1)'  				new Point(rect.Left + 2' rect.Bottom - 1)'  				new Point(rect.Left' rect.Bottom - 3) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: borderPath.AddPolygon(new [] {  				new Point(rect.Left' rect.Top + 2)'  				new Point(rect.Left + 2' rect.Top)'  				new Point(rect.Right - 3' rect.Top)'  				new Point(rect.Right - 1' rect.Top + 2)'  				new Point(rect.Right - 1' rect.Bottom - 3)'  				new Point(rect.Right - 3' rect.Bottom - 1)'  				new Point(rect.Left + 2' rect.Bottom - 1)'  				new Point(rect.Left' rect.Bottom - 3) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: borderPath.AddPolygon(new [] {  				new Point(rect.Left' rect.Top + 2)'  				new Point(rect.Left + 2' rect.Top)'  				new Point(rect.Right - 3' rect.Top)'  				new Point(rect.Right - 1' rect.Top + 2)'  				new Point(rect.Right - 1' rect.Bottom - 3)'  				new Point(rect.Right - 3' rect.Bottom - 1)'  				new Point(rect.Left + 2' rect.Bottom - 1)'  				new Point(rect.Left' rect.Bottom - 3) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: borderPath.AddPolygon(new [] {  				new Point(rect.Left' rect.Top + 2)'  				new Point(rect.Left + 2' rect.Top)'  				new Point(rect.Right - 3' rect.Top)'  				new Point(rect.Right - 1' rect.Top + 2)'  				new Point(rect.Right - 1' rect.Bottom - 3)'  				new Point(rect.Right - 3' rect.Bottom - 1)'  				new Point(rect.Left + 2' rect.Bottom - 1)'  				new Point(rect.Left' rect.Bottom - 3) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: Rectangle innerRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: Rectangle innerRect = new Rectangle(rect.X + 1' rect.Y + 1' rect.Width - 2' rect.Height - 2);
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: innerPath.AddPolygon(new [] {  				new Point(innerRect.Left' innerRect.Top + 1)'  				new Point(innerRect.Left + 1' innerRect.Top)'  				new Point(innerRect.Right - 2' innerRect.Top)'  				new Point(innerRect.Right - 1' innerRect.Top + 1)'  				new Point(innerRect.Right - 1' innerRect.Bottom - 2)'  				new Point(innerRect.Right - 2' innerRect.Bottom - 1)'  				new Point(innerRect.Left + 1' innerRect.Bottom - 1)'  				new Point(innerRect.Left' innerRect.Bottom - 2) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: innerPath.AddPolygon(new [] {  				new Point(innerRect.Left' innerRect.Top + 1)'  				new Point(innerRect.Left + 1' innerRect.Top)'  				new Point(innerRect.Right - 2' innerRect.Top)'  				new Point(innerRect.Right - 1' innerRect.Top + 1)'  				new Point(innerRect.Right - 1' innerRect.Bottom - 2)'  				new Point(innerRect.Right - 2' innerRect.Bottom - 1)'  				new Point(innerRect.Left + 1' innerRect.Bottom - 1)'  				new Point(innerRect.Left' innerRect.Bottom - 2) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: innerPath.AddPolygon(new [] {  				new Point(innerRect.Left' innerRect.Top + 1)'  				new Point(innerRect.Left + 1' innerRect.Top)'  				new Point(innerRect.Right - 2' innerRect.Top)'  				new Point(innerRect.Right - 1' innerRect.Top + 1)'  				new Point(innerRect.Right - 1' innerRect.Bottom - 2)'  				new Point(innerRect.Right - 2' innerRect.Bottom - 1)'  				new Point(innerRect.Left + 1' innerRect.Bottom - 1)'  				new Point(innerRect.Left' innerRect.Bottom - 2) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: innerPath.AddPolygon(new [] {  				new Point(innerRect.Left' innerRect.Top + 1)'  				new Point(innerRect.Left + 1' innerRect.Top)'  				new Point(innerRect.Right - 2' innerRect.Top)'  				new Point(innerRect.Right - 1' innerRect.Top + 1)'  				new Point(innerRect.Right - 1' innerRect.Bottom - 2)'  				new Point(innerRect.Right - 2' innerRect.Bottom - 1)'  				new Point(innerRect.Left + 1' innerRect.Bottom - 1)'  				new Point(innerRect.Left' innerRect.Bottom - 2) });
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: if (!solid)  			{  				colorBorder = Color.FromArgb(128' colorBorder);  				colorInner = Color.FromArgb(64' colorInner);  				gradLight = Color.FromArgb(64' gradLight);  				gradLight2 = Color.FromArgb(0' gradLight2);  			}  			else  			{  				colorBorder = Color.FromArgb(192' colorBorder);  				colorInner = Color.FromArgb(128' colorInner);  				gradLight = Color.FromArgb(128' gradLight);  				gradLight2 = Color.FromArgb(128' gradLight2);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: if (!solid)  			{  				colorBorder = Color.FromArgb(128' colorBorder);  				colorInner = Color.FromArgb(64' colorInner);  				gradLight = Color.FromArgb(64' gradLight);  				gradLight2 = Color.FromArgb(0' gradLight2);  			}  			else  			{  				colorBorder = Color.FromArgb(192' colorBorder);  				colorInner = Color.FromArgb(128' colorInner);  				gradLight = Color.FromArgb(128' gradLight);  				gradLight2 = Color.FromArgb(128' gradLight2);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: if (!solid)  			{  				colorBorder = Color.FromArgb(128' colorBorder);  				colorInner = Color.FromArgb(64' colorInner);  				gradLight = Color.FromArgb(64' gradLight);  				gradLight2 = Color.FromArgb(0' gradLight2);  			}  			else  			{  				colorBorder = Color.FromArgb(192' colorBorder);  				colorInner = Color.FromArgb(128' colorInner);  				gradLight = Color.FromArgb(128' gradLight);  				gradLight2 = Color.FromArgb(128' gradLight2);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: if (!solid)  			{  				colorBorder = Color.FromArgb(128' colorBorder);  				colorInner = Color.FromArgb(64' colorInner);  				gradLight = Color.FromArgb(64' gradLight);  				gradLight2 = Color.FromArgb(0' gradLight2);  			}  			else  			{  				colorBorder = Color.FromArgb(192' colorBorder);  				colorInner = Color.FromArgb(128' colorInner);  				gradLight = Color.FromArgb(128' gradLight);  				gradLight2 = Color.FromArgb(128' gradLight2);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: if (!solid)  			{  				colorBorder = Color.FromArgb(128' colorBorder);  				colorInner = Color.FromArgb(64' colorInner);  				gradLight = Color.FromArgb(64' gradLight);  				gradLight2 = Color.FromArgb(0' gradLight2);  			}  			else  			{  				colorBorder = Color.FromArgb(192' colorBorder);  				colorInner = Color.FromArgb(128' colorInner);  				gradLight = Color.FromArgb(128' gradLight);  				gradLight2 = Color.FromArgb(128' gradLight2);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: if (!solid)  			{  				colorBorder = Color.FromArgb(128' colorBorder);  				colorInner = Color.FromArgb(64' colorInner);  				gradLight = Color.FromArgb(64' gradLight);  				gradLight2 = Color.FromArgb(0' gradLight2);  			}  			else  			{  				colorBorder = Color.FromArgb(192' colorBorder);  				colorInner = Color.FromArgb(128' colorInner);  				gradLight = Color.FromArgb(128' gradLight);  				gradLight2 = Color.FromArgb(128' gradLight2);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,DrawSelection,The following statement contains a magic number: if (!solid)  			{  				colorBorder = Color.FromArgb(128' colorBorder);  				colorInner = Color.FromArgb(64' colorInner);  				gradLight = Color.FromArgb(64' gradLight);  				gradLight2 = Color.FromArgb(0' gradLight2);  			}  			else  			{  				colorBorder = Color.FromArgb(192' colorBorder);  				colorInner = Color.FromArgb(128' colorInner);  				gradLight = Color.FromArgb(128' gradLight);  				gradLight2 = Color.FromArgb(128' gradLight2);  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandBox,The following statement contains a magic number: using (Graphics checkBoxGraphics = Graphics.FromImage(image))  			{  				Color plusSignColor;  				Pen expandLineShadowPen;  				Pen expandLinePen;    				if (state == ExpandBoxState.ExpandNormal || state == ExpandBoxState.CollapseNormal)  				{  					plusSignColor = Color.FromArgb(24' 32' 82);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);  				}  				else if (state == ExpandBoxState.ExpandHot || state == ExpandBoxState.CollapseHot)  				{  					plusSignColor = Color.FromArgb(32' 48' 123);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(64' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot);  				}  				else if (state == ExpandBoxState.ExpandPressed || state == ExpandBoxState.CollapsePressed)  				{  					plusSignColor = Color.FromArgb(48' 64' 164);  					expandLinePen = new Pen(Color.FromArgb(255' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(96' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed);  				}  				else  				{  					plusSignColor = Color.FromArgb(24' 28' 41);  					expandLinePen = new Pen(Color.FromArgb(128' plusSignColor));  					expandLineShadowPen = new Pen(Color.FromArgb(32' plusSignColor));  					CheckBoxRenderer.DrawCheckBox(checkBoxGraphics' Point.Empty' System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled);  				}    				// Plus Shadow  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 + 1'  					image.Width - 4'  					image.Height / 2 + 1);  				checkBoxGraphics.DrawLine(expandLineShadowPen'   					3'  					image.Height / 2 - 1'  					image.Width - 4'  					image.Height / 2 - 1);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 + 1'  						3'  						image.Width / 2 + 1'  						image.Height - 4);  					checkBoxGraphics.DrawLine(expandLineShadowPen'   						image.Width / 2 - 1'  						3'  						image.Width / 2 - 1'  						image.Height - 4);  				}    				// Plus  				checkBoxGraphics.DrawLine(expandLinePen'   					3'  					image.Height / 2'  					image.Width - 4'  					image.Height / 2);  				if (state == ExpandBoxState.ExpandDisabled ||  					state == ExpandBoxState.ExpandHot ||  					state == ExpandBoxState.ExpandNormal ||  					state == ExpandBoxState.ExpandPressed)  				{  					checkBoxGraphics.DrawLine(expandLinePen'   						image.Width / 2'  						3'  						image.Width / 2'  						image.Height - 4);  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OriginSelector,The following statement contains a magic number: this.arrows[2] = Properties.ResourcesCache.ArrowUpRight;
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OriginSelector,The following statement contains a magic number: this.arrows[3] = Properties.ResourcesCache.ArrowLeft;
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OriginSelector,The following statement contains a magic number: this.arrows[4] = null;
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OriginSelector,The following statement contains a magic number: this.arrows[5] = Properties.ResourcesCache.ArrowRight;
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OriginSelector,The following statement contains a magic number: this.arrows[6] = Properties.ResourcesCache.ArrowDownLeft;
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OriginSelector,The following statement contains a magic number: this.arrows[7] = Properties.ResourcesCache.ArrowDown;
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OriginSelector,The following statement contains a magic number: this.arrows[8] = Properties.ResourcesCache.ArrowDownRight;
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: Pen gridPen = new Pen(Color.FromArgb(96' this.ForeColor));
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int x = 1; x < 3; x++)  			{  				g.DrawLine(gridPen'  					x * buttonSize.Width' this.ClientRectangle.Top'  					x * buttonSize.Width' this.ClientRectangle.Bottom);  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 1; y < 3; y++)  			{  				g.DrawLine(gridPen'  					this.ClientRectangle.Left' y * buttonSize.Height'  					this.ClientRectangle.Right' y * buttonSize.Height);  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: for (int y = 0; y < 3; y++)  			{  				for (int x = 0; x < 3; x++)  				{  					origTemp = (Origin)(x + y * 3);    					posUL.X = x * buttonSize.Width;  					posUL.Y = y * buttonSize.Width;  					posLR.X = -1 + (x + 1) * buttonSize.Width;  					posLR.Y = -1 + (y + 1) * buttonSize.Height;    					Image imgTemp = null;    					if (((int)origTemp + 1) % 3 != 0 && origTemp == this.selOrigin - 1)  						imgTemp = this.arrows[(int)Origin.Left];  					else if (((int)origTemp - 3) % 3 != 0 && origTemp == this.selOrigin + 1)  						imgTemp = this.arrows[(int)Origin.Right];  					else if ((int)origTemp < 6 && origTemp == this.selOrigin - 3)  						imgTemp = this.arrows[(int)Origin.Top];  					else if ((int)origTemp > 2 && origTemp == this.selOrigin + 3)  						imgTemp = this.arrows[(int)Origin.Bottom];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 4)  						imgTemp = this.arrows[(int)Origin.TopLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp < 6 && origTemp == this.selOrigin - 2)  						imgTemp = this.arrows[(int)Origin.TopRight];  					else if (((int)origTemp + 1) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 2)  						imgTemp = this.arrows[(int)Origin.BottomLeft];  					else if (((int)origTemp - 3) % 3 != 0 && (int)origTemp > 2 && origTemp == this.selOrigin + 4)  						imgTemp = this.arrows[(int)Origin.BottomRight];    					if (this.invertArrowsH)  					{  						if (imgTemp == this.arrows[(int)Origin.Left])  							imgTemp = this.arrows[(int)Origin.Right];  						else if (imgTemp == this.arrows[(int)Origin.Right])  							imgTemp = this.arrows[(int)Origin.Left];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.TopRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.BottomRight];  					}  					if (this.invertArrowsV)  					{  						if (imgTemp == this.arrows[(int)Origin.Top])  							imgTemp = this.arrows[(int)Origin.Bottom];  						else if (imgTemp == this.arrows[(int)Origin.Bottom])  							imgTemp = this.arrows[(int)Origin.Top];  						else if (imgTemp == this.arrows[(int)Origin.TopLeft])  							imgTemp = this.arrows[(int)Origin.BottomLeft];  						else if (imgTemp == this.arrows[(int)Origin.TopRight])  							imgTemp = this.arrows[(int)Origin.BottomRight];  						else if (imgTemp == this.arrows[(int)Origin.BottomLeft])  							imgTemp = this.arrows[(int)Origin.TopLeft];  						else if (imgTemp == this.arrows[(int)Origin.BottomRight])  							imgTemp = this.arrows[(int)Origin.TopRight];  					}    					if (imgTemp != null)  					{  						Size displayedSize = new Size(  							Math.Min(Math.Min(imgTemp.Width' buttonSize.Width - 2)' buttonSize.Width * 3 / 5)'  							Math.Min(Math.Min(imgTemp.Height' buttonSize.Height - 2)' buttonSize.Height * 3 / 5));  						g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;  						g.DrawImage(imgTemp'  							new Rectangle(  								posUL.X + buttonSize.Width / 2 - displayedSize.Width / 2'   								posUL.Y + buttonSize.Height / 2 - displayedSize.Width / 2'  								displayedSize.Width'  								displayedSize.Height)'  							0' 0' imgTemp.Width' imgTemp.Height'  							GraphicsUnit.Pixel'  							arrowAttributes);  					}  				}  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: if (this.selOrigin != Origin.None)  			{  				int x = ((int)this.selOrigin) % 3;  				int y = ((int)this.selOrigin) / 3;    				posUL.X = x * buttonSize.Width;  				posUL.Y = y * buttonSize.Width;  				posLR.X = -1 + (x + 1) * buttonSize.Width;  				posLR.Y = -1 + (y + 1) * buttonSize.Height;    				g.FillRectangle(new SolidBrush(Color.FromArgb(64' this.selColor))'   					posUL.X'   					posUL.Y'   					posLR.X - posUL.X + 1'   					posLR.Y - posUL.Y + 1);  				g.DrawRectangle(new Pen(this.selColor)'   					posUL.X'   					posUL.Y'   					posLR.X - posUL.X + 1'   					posLR.Y - posUL.Y + 1);  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: if (this.selOrigin != Origin.None)  			{  				int x = ((int)this.selOrigin) % 3;  				int y = ((int)this.selOrigin) / 3;    				posUL.X = x * buttonSize.Width;  				posUL.Y = y * buttonSize.Width;  				posLR.X = -1 + (x + 1) * buttonSize.Width;  				posLR.Y = -1 + (y + 1) * buttonSize.Height;    				g.FillRectangle(new SolidBrush(Color.FromArgb(64' this.selColor))'   					posUL.X'   					posUL.Y'   					posLR.X - posUL.X + 1'   					posLR.Y - posUL.Y + 1);  				g.DrawRectangle(new Pen(this.selColor)'   					posUL.X'   					posUL.Y'   					posLR.X - posUL.X + 1'   					posLR.Y - posUL.Y + 1);  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: if (this.selOrigin != Origin.None)  			{  				int x = ((int)this.selOrigin) % 3;  				int y = ((int)this.selOrigin) / 3;    				posUL.X = x * buttonSize.Width;  				posUL.Y = y * buttonSize.Width;  				posLR.X = -1 + (x + 1) * buttonSize.Width;  				posLR.Y = -1 + (y + 1) * buttonSize.Height;    				g.FillRectangle(new SolidBrush(Color.FromArgb(64' this.selColor))'   					posUL.X'   					posUL.Y'   					posLR.X - posUL.X + 1'   					posLR.Y - posUL.Y + 1);  				g.DrawRectangle(new Pen(this.selColor)'   					posUL.X'   					posUL.Y'   					posLR.X - posUL.X + 1'   					posLR.Y - posUL.Y + 1);  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: if (this.hoverOrigin != Origin.None)  			{  				int x = ((int)this.hoverOrigin) % 3;  				int y = ((int)this.hoverOrigin) / 3;    				posUL.X = x * buttonSize.Width;  				posUL.Y = y * buttonSize.Width;  				posLR.X = -1 + (x + 1) * buttonSize.Width;  				posLR.Y = -1 + (y + 1) * buttonSize.Height;    				g.FillRectangle(new SolidBrush(Color.FromArgb(32' this.selColor))'   					posUL.X'   					posUL.Y'   					posLR.X - posUL.X + 1'   					posLR.Y - posUL.Y + 1);  				g.DrawRectangle(new Pen(Color.FromArgb(96' this.selColor))'  					posUL.X'   					posUL.Y'   					posLR.X - posUL.X + 1'   					posLR.Y - posUL.Y + 1);  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: if (this.hoverOrigin != Origin.None)  			{  				int x = ((int)this.hoverOrigin) % 3;  				int y = ((int)this.hoverOrigin) / 3;    				posUL.X = x * buttonSize.Width;  				posUL.Y = y * buttonSize.Width;  				posLR.X = -1 + (x + 1) * buttonSize.Width;  				posLR.Y = -1 + (y + 1) * buttonSize.Height;    				g.FillRectangle(new SolidBrush(Color.FromArgb(32' this.selColor))'   					posUL.X'   					posUL.Y'   					posLR.X - posUL.X + 1'   					posLR.Y - posUL.Y + 1);  				g.DrawRectangle(new Pen(Color.FromArgb(96' this.selColor))'  					posUL.X'   					posUL.Y'   					posLR.X - posUL.X + 1'   					posLR.Y - posUL.Y + 1);  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: if (this.hoverOrigin != Origin.None)  			{  				int x = ((int)this.hoverOrigin) % 3;  				int y = ((int)this.hoverOrigin) / 3;    				posUL.X = x * buttonSize.Width;  				posUL.Y = y * buttonSize.Width;  				posLR.X = -1 + (x + 1) * buttonSize.Width;  				posLR.Y = -1 + (y + 1) * buttonSize.Height;    				g.FillRectangle(new SolidBrush(Color.FromArgb(32' this.selColor))'   					posUL.X'   					posUL.Y'   					posLR.X - posUL.X + 1'   					posLR.Y - posUL.Y + 1);  				g.DrawRectangle(new Pen(Color.FromArgb(96' this.selColor))'  					posUL.X'   					posUL.Y'   					posLR.X - posUL.X + 1'   					posLR.Y - posUL.Y + 1);  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: if (this.hoverOrigin != Origin.None)  			{  				int x = ((int)this.hoverOrigin) % 3;  				int y = ((int)this.hoverOrigin) / 3;    				posUL.X = x * buttonSize.Width;  				posUL.Y = y * buttonSize.Width;  				posLR.X = -1 + (x + 1) * buttonSize.Width;  				posLR.Y = -1 + (y + 1) * buttonSize.Height;    				g.FillRectangle(new SolidBrush(Color.FromArgb(32' this.selColor))'   					posUL.X'   					posUL.Y'   					posLR.X - posUL.X + 1'   					posLR.Y - posUL.Y + 1);  				g.DrawRectangle(new Pen(Color.FromArgb(96' this.selColor))'  					posUL.X'   					posUL.Y'   					posLR.X - posUL.X + 1'   					posLR.Y - posUL.Y + 1);  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnPaint,The following statement contains a magic number: if (!this.Enabled)  			{  				g.FillRectangle(new SolidBrush(Color.FromArgb(128' this.BackColor))' this.ClientRectangle);  			}
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnMouseMove,The following statement contains a magic number: hoverInt += Math.Min(2' e.X / buttonSize.Width);
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnMouseMove,The following statement contains a magic number: hoverInt += 3 * Math.Min(2' e.Y / buttonSize.Height);
Magic Number,AdamsLair.WinForms,OriginSelector,C:\repos\AdamsLair_winforms\WinForms\OriginSelector.cs,OnMouseMove,The following statement contains a magic number: hoverInt += 3 * Math.Min(2' e.Y / buttonSize.Height);
Magic Number,AdamsLair.WinForms,ExtMethodsColor,C:\repos\AdamsLair_winforms\WinForms\Internal\ExtMethodsColor.cs,ColorFromHSV,The following statement contains a magic number: int hi = Convert.ToInt32(Math.Floor(hue / 60)) % 6;
Magic Number,AdamsLair.WinForms,ExtMethodsColor,C:\repos\AdamsLair_winforms\WinForms\Internal\ExtMethodsColor.cs,ColorFromHSV,The following statement contains a magic number: int hi = Convert.ToInt32(Math.Floor(hue / 60)) % 6;
Magic Number,AdamsLair.WinForms,ExtMethodsColor,C:\repos\AdamsLair_winforms\WinForms\Internal\ExtMethodsColor.cs,ColorFromHSV,The following statement contains a magic number: double f = hue / 60 - Math.Floor(hue / 60);
Magic Number,AdamsLair.WinForms,ExtMethodsColor,C:\repos\AdamsLair_winforms\WinForms\Internal\ExtMethodsColor.cs,ColorFromHSV,The following statement contains a magic number: double f = hue / 60 - Math.Floor(hue / 60);
Magic Number,AdamsLair.WinForms,ExtMethodsColor,C:\repos\AdamsLair_winforms\WinForms\Internal\ExtMethodsColor.cs,ColorFromHSV,The following statement contains a magic number: value = value * 255;
Magic Number,AdamsLair.WinForms,ExtMethodsColor,C:\repos\AdamsLair_winforms\WinForms\Internal\ExtMethodsColor.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  				return Color.FromArgb(255' v' t' p);  			else if (hi == 1)  				return Color.FromArgb(255' q' v' p);  			else if (hi == 2)  				return Color.FromArgb(255' p' v' t);  			else if (hi == 3)  				return Color.FromArgb(255' p' q' v);  			else if (hi == 4)  				return Color.FromArgb(255' t' p' v);  			else  				return Color.FromArgb(255' v' p' q);
Magic Number,AdamsLair.WinForms,ExtMethodsColor,C:\repos\AdamsLair_winforms\WinForms\Internal\ExtMethodsColor.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  				return Color.FromArgb(255' v' t' p);  			else if (hi == 1)  				return Color.FromArgb(255' q' v' p);  			else if (hi == 2)  				return Color.FromArgb(255' p' v' t);  			else if (hi == 3)  				return Color.FromArgb(255' p' q' v);  			else if (hi == 4)  				return Color.FromArgb(255' t' p' v);  			else  				return Color.FromArgb(255' v' p' q);
Magic Number,AdamsLair.WinForms,ExtMethodsColor,C:\repos\AdamsLair_winforms\WinForms\Internal\ExtMethodsColor.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  				return Color.FromArgb(255' v' t' p);  			else if (hi == 1)  				return Color.FromArgb(255' q' v' p);  			else if (hi == 2)  				return Color.FromArgb(255' p' v' t);  			else if (hi == 3)  				return Color.FromArgb(255' p' q' v);  			else if (hi == 4)  				return Color.FromArgb(255' t' p' v);  			else  				return Color.FromArgb(255' v' p' q);
Magic Number,AdamsLair.WinForms,ExtMethodsColor,C:\repos\AdamsLair_winforms\WinForms\Internal\ExtMethodsColor.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  				return Color.FromArgb(255' v' t' p);  			else if (hi == 1)  				return Color.FromArgb(255' q' v' p);  			else if (hi == 2)  				return Color.FromArgb(255' p' v' t);  			else if (hi == 3)  				return Color.FromArgb(255' p' q' v);  			else if (hi == 4)  				return Color.FromArgb(255' t' p' v);  			else  				return Color.FromArgb(255' v' p' q);
Magic Number,AdamsLair.WinForms,ExtMethodsColor,C:\repos\AdamsLair_winforms\WinForms\Internal\ExtMethodsColor.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  				return Color.FromArgb(255' v' t' p);  			else if (hi == 1)  				return Color.FromArgb(255' q' v' p);  			else if (hi == 2)  				return Color.FromArgb(255' p' v' t);  			else if (hi == 3)  				return Color.FromArgb(255' p' q' v);  			else if (hi == 4)  				return Color.FromArgb(255' t' p' v);  			else  				return Color.FromArgb(255' v' p' q);
Magic Number,AdamsLair.WinForms,ExtMethodsColor,C:\repos\AdamsLair_winforms\WinForms\Internal\ExtMethodsColor.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  				return Color.FromArgb(255' v' t' p);  			else if (hi == 1)  				return Color.FromArgb(255' q' v' p);  			else if (hi == 2)  				return Color.FromArgb(255' p' v' t);  			else if (hi == 3)  				return Color.FromArgb(255' p' q' v);  			else if (hi == 4)  				return Color.FromArgb(255' t' p' v);  			else  				return Color.FromArgb(255' v' p' q);
Magic Number,AdamsLair.WinForms,ExtMethodsColor,C:\repos\AdamsLair_winforms\WinForms\Internal\ExtMethodsColor.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  				return Color.FromArgb(255' v' t' p);  			else if (hi == 1)  				return Color.FromArgb(255' q' v' p);  			else if (hi == 2)  				return Color.FromArgb(255' p' v' t);  			else if (hi == 3)  				return Color.FromArgb(255' p' q' v);  			else if (hi == 4)  				return Color.FromArgb(255' t' p' v);  			else  				return Color.FromArgb(255' v' p' q);
Magic Number,AdamsLair.WinForms,ExtMethodsColor,C:\repos\AdamsLair_winforms\WinForms\Internal\ExtMethodsColor.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  				return Color.FromArgb(255' v' t' p);  			else if (hi == 1)  				return Color.FromArgb(255' q' v' p);  			else if (hi == 2)  				return Color.FromArgb(255' p' v' t);  			else if (hi == 3)  				return Color.FromArgb(255' p' q' v);  			else if (hi == 4)  				return Color.FromArgb(255' t' p' v);  			else  				return Color.FromArgb(255' v' p' q);
Magic Number,AdamsLair.WinForms,ExtMethodsColor,C:\repos\AdamsLair_winforms\WinForms\Internal\ExtMethodsColor.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  				return Color.FromArgb(255' v' t' p);  			else if (hi == 1)  				return Color.FromArgb(255' q' v' p);  			else if (hi == 2)  				return Color.FromArgb(255' p' v' t);  			else if (hi == 3)  				return Color.FromArgb(255' p' q' v);  			else if (hi == 4)  				return Color.FromArgb(255' t' p' v);  			else  				return Color.FromArgb(255' v' p' q);
Magic Number,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,PickModelIndexAt,The following statement contains a magic number: x -= this.ClientRectangle.X + this.Padding.Left - this.spacing.Width / 2;
Magic Number,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,PickModelIndexAt,The following statement contains a magic number: y -= this.ClientRectangle.Y + this.Padding.Top - this.spacing.Height / 2;
Magic Number,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,PickModelIndexAt,The following statement contains a magic number: switch (this.rowAlignment)  			{  				default:  				case HorizontalAlignment.Left:  					break;  				case HorizontalAlignment.Right:  					x -= this.additionalSpace;  					break;  				case HorizontalAlignment.Center:  					x -= this.additionalSpace / 2;  					break;  			}
Magic Number,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,GetModelIndexLocation,The following statement contains a magic number: switch (this.rowAlignment)  			{  				default:  				case HorizontalAlignment.Left:  					break;  				case HorizontalAlignment.Right:  					result.X += this.additionalSpace;  					break;  				case HorizontalAlignment.Center:  					result.X += this.additionalSpace / 2;  					break;  			}
Magic Number,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,CreateItemEditor,The following statement contains a magic number: if (icon == null) iconOffset /= 2;
Magic Number,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,OnPaintItem,The following statement contains a magic number: if (icon != null)  			{  				int iconAreaHeight = itemRect.Height - (int)Math.Ceiling(textSize.Height);  				if (icon.Width > itemRect.Width || icon.Height > itemRect.Height)  				{  					SizeF iconSize = icon.Size;  					float factor = 1.0f;  					if ((float)itemRect.Width / iconSize.Width < (float)itemRect.Height / iconSize.Height)  						factor = (float)itemRect.Width / iconSize.Width;  					else  						factor = (float)itemRect.Height / iconSize.Height;  					iconSize.Height = iconSize.Height * factor;  					iconSize.Width = iconSize.Width * factor;  					e.Graphics.DrawImage(icon' new RectangleF(  						itemRect.X + (itemRect.Width - iconSize.Width) * 0.5f'   						itemRect.Y + Math.Max(0' iconAreaHeight - iconSize.Height) * 0.5f'   						iconSize.Width'   						iconSize.Height));  				}  				else  				{  					e.Graphics.DrawImageUnscaled(icon' new Rectangle(  						itemRect.X + (itemRect.Width - icon.Width) / 2'   						itemRect.Y + Math.Max(0' iconAreaHeight - icon.Height) / 2'   						icon.Width'   						icon.Height));  				}  			}
Magic Number,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,OnPaintItem,The following statement contains a magic number: if (icon != null)  			{  				int iconAreaHeight = itemRect.Height - (int)Math.Ceiling(textSize.Height);  				if (icon.Width > itemRect.Width || icon.Height > itemRect.Height)  				{  					SizeF iconSize = icon.Size;  					float factor = 1.0f;  					if ((float)itemRect.Width / iconSize.Width < (float)itemRect.Height / iconSize.Height)  						factor = (float)itemRect.Width / iconSize.Width;  					else  						factor = (float)itemRect.Height / iconSize.Height;  					iconSize.Height = iconSize.Height * factor;  					iconSize.Width = iconSize.Width * factor;  					e.Graphics.DrawImage(icon' new RectangleF(  						itemRect.X + (itemRect.Width - iconSize.Width) * 0.5f'   						itemRect.Y + Math.Max(0' iconAreaHeight - iconSize.Height) * 0.5f'   						iconSize.Width'   						iconSize.Height));  				}  				else  				{  					e.Graphics.DrawImageUnscaled(icon' new Rectangle(  						itemRect.X + (itemRect.Width - icon.Width) / 2'   						itemRect.Y + Math.Max(0' iconAreaHeight - icon.Height) / 2'   						icon.Width'   						icon.Height));  				}  			}
Magic Number,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,OnPaint,The following statement contains a magic number: if (!this.Enabled)  			{  				e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(128' this.renderer.ColorBackground))' this.ClientRectangle);  			}
Magic Number,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,OnMouseMove,The following statement contains a magic number: if (this.dragIndex != -1 && this.IsItemSelected(this.dragIndex))  			{  				Point diff = new Point(e.X - this.mouseDownLoc.X' e.Y - this.mouseDownLoc.Y);  				bool dragSizeReached =   					Math.Abs(diff.X) > SystemInformation.DragSize.Width / 2 ||   					Math.Abs(diff.Y) > SystemInformation.DragSize.Height / 2;  				if (dragSizeReached)  				{  					Point itemPos = this.GetModelIndexLocation(this.dragIndex);  					this.OnItemDrag(new TiledViewItemMouseEventArgs(this' this.dragIndex' this.model.GetItemAt(this.dragIndex)' new Point(e.X - itemPos.X' e.Y - itemPos.Y)' e.Button));  					this.dragIndex = -1;  				}  			}
Magic Number,AdamsLair.WinForms.ItemViews,TiledView,C:\repos\AdamsLair_winforms\WinForms\ItemViews\TiledView.cs,OnMouseMove,The following statement contains a magic number: if (this.dragIndex != -1 && this.IsItemSelected(this.dragIndex))  			{  				Point diff = new Point(e.X - this.mouseDownLoc.X' e.Y - this.mouseDownLoc.Y);  				bool dragSizeReached =   					Math.Abs(diff.X) > SystemInformation.DragSize.Width / 2 ||   					Math.Abs(diff.Y) > SystemInformation.DragSize.Height / 2;  				if (dragSizeReached)  				{  					Point itemPos = this.GetModelIndexLocation(this.dragIndex);  					this.OnItemDrag(new TiledViewItemMouseEventArgs(this' this.dragIndex' this.model.GetItemAt(this.dragIndex)' new Point(e.X - itemPos.X' e.Y - itemPos.Y)' e.Button));  					this.dragIndex = -1;  				}  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,LabelPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\LabelPropertyEditor.cs,OnParentEditorChanged,The following statement contains a magic number: this.Height = 5 + (int)Math.Round((float)this.ControlRenderer.FontRegular.Height);
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,LabelPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\LabelPropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: this.selectableLabel.Rect = new Rectangle(  				this.ClientRectangle.X + 1'  				this.ClientRectangle.Y + 1'  				this.ClientRectangle.Width - 2'  				this.ClientRectangle.Height - 1);
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,BoolPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\BoolPropertyEditor.cs,OnParentEditorChanged,The following statement contains a magic number: this.Height = Math.Max(13' 3 + (int)Math.Round((float)this.ControlRenderer.FontRegular.Height));
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,BoolPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\BoolPropertyEditor.cs,OnParentEditorChanged,The following statement contains a magic number: this.Height = Math.Max(13' 3 + (int)Math.Round((float)this.ControlRenderer.FontRegular.Height));
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,BoolPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\BoolPropertyEditor.cs,OnPaint,The following statement contains a magic number: Point boxLoc = new Point(  				this.ClientRectangle.X + 2'  				this.ClientRectangle.Y + this.ClientRectangle.Height / 2 - boxSize.Height / 2);
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,BoolPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\BoolPropertyEditor.cs,OnPaint,The following statement contains a magic number: Point boxLoc = new Point(  				this.ClientRectangle.X + 2'  				this.ClientRectangle.Y + this.ClientRectangle.Height / 2 - boxSize.Height / 2);
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,BoolPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\BoolPropertyEditor.cs,OnPaint,The following statement contains a magic number: Point boxLoc = new Point(  				this.ClientRectangle.X + 2'  				this.ClientRectangle.Y + this.ClientRectangle.Height / 2 - boxSize.Height / 2);
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,EnumPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\EnumPropertyEditor.cs,OnParentEditorChanged,The following statement contains a magic number: this.Height = 5 + (int)Math.Round((float)this.ControlRenderer.FontRegular.Height);
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,EnumPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\EnumPropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: this.stringSelector.Rect = new Rectangle(  				this.ClientRectangle.X + 1'  				this.ClientRectangle.Y + 1'  				this.ClientRectangle.Width - 2'  				this.ClientRectangle.Height - 1);
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,BitmaskPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\BitmaskPropertyEditor.cs,OnParentEditorChanged,The following statement contains a magic number: this.Height = 5 + (int)Math.Round((float)this.ControlRenderer.FontRegular.Height);
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,BitmaskPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\BitmaskPropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: this.bitmaskSelector.Rect = new Rectangle(  				this.ClientRectangle.X + 1'  				this.ClientRectangle.Y + 1'  				this.ClientRectangle.Width - 2'  				this.ClientRectangle.Height - 1);
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,IListPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IListPropertyEditor.cs,UpdateElementEditors,The following statement contains a magic number: if (visibleElementCount > 10)  			{  				this.offset = Math.Min(this.offset' visibleElementCount - 10);  				this.offsetEditor.Maximum = visibleElementCount - 10;  				this.offsetEditor.ValueBarMaximum = this.offsetEditor.Maximum;  				visibleElementCount = 10;  				showOffset = true;  			}  			else  			{  				this.offset = 0;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,IListPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IListPropertyEditor.cs,UpdateElementEditors,The following statement contains a magic number: if (visibleElementCount > 10)  			{  				this.offset = Math.Min(this.offset' visibleElementCount - 10);  				this.offsetEditor.Maximum = visibleElementCount - 10;  				this.offsetEditor.ValueBarMaximum = this.offsetEditor.Maximum;  				visibleElementCount = 10;  				showOffset = true;  			}  			else  			{  				this.offset = 0;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,IListPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IListPropertyEditor.cs,UpdateElementEditors,The following statement contains a magic number: if (visibleElementCount > 10)  			{  				this.offset = Math.Min(this.offset' visibleElementCount - 10);  				this.offsetEditor.Maximum = visibleElementCount - 10;  				this.offsetEditor.ValueBarMaximum = this.offsetEditor.Maximum;  				visibleElementCount = 10;  				showOffset = true;  			}  			else  			{  				this.offset = 0;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,IListPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IListPropertyEditor.cs,UpdateElementEditors,The following statement contains a magic number: if (visibleElementCount > 10)  			{  				this.offset = Math.Min(this.offset' visibleElementCount - 10);  				this.offsetEditor.Maximum = visibleElementCount - 10;  				this.offsetEditor.ValueBarMaximum = this.offsetEditor.Maximum;  				visibleElementCount = 10;  				showOffset = true;  			}  			else  			{  				this.offset = 0;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,IListPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IListPropertyEditor.cs,UpdateElementEditors,The following statement contains a magic number: this.internalEditors = showOffset ? 2 : 1;
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,IDictionaryPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IDictionaryPropertyEditor.cs,UpdateElementEditors,The following statement contains a magic number: if (visibleElementCount > 10)  			{  				this.offset = Math.Min(this.offset' visibleElementCount - 10);  				this.offsetEditor.Maximum = visibleElementCount - 10;  				this.offsetEditor.ValueBarMaximum = this.offsetEditor.Maximum;  				visibleElementCount = 10;  				showOffset = true;  			}  			else  			{  				this.offset = 0;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,IDictionaryPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IDictionaryPropertyEditor.cs,UpdateElementEditors,The following statement contains a magic number: if (visibleElementCount > 10)  			{  				this.offset = Math.Min(this.offset' visibleElementCount - 10);  				this.offsetEditor.Maximum = visibleElementCount - 10;  				this.offsetEditor.ValueBarMaximum = this.offsetEditor.Maximum;  				visibleElementCount = 10;  				showOffset = true;  			}  			else  			{  				this.offset = 0;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,IDictionaryPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IDictionaryPropertyEditor.cs,UpdateElementEditors,The following statement contains a magic number: if (visibleElementCount > 10)  			{  				this.offset = Math.Min(this.offset' visibleElementCount - 10);  				this.offsetEditor.Maximum = visibleElementCount - 10;  				this.offsetEditor.ValueBarMaximum = this.offsetEditor.Maximum;  				visibleElementCount = 10;  				showOffset = true;  			}  			else  			{  				this.offset = 0;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,IDictionaryPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IDictionaryPropertyEditor.cs,UpdateElementEditors,The following statement contains a magic number: if (visibleElementCount > 10)  			{  				this.offset = Math.Min(this.offset' visibleElementCount - 10);  				this.offsetEditor.Maximum = visibleElementCount - 10;  				this.offsetEditor.ValueBarMaximum = this.offsetEditor.Maximum;  				visibleElementCount = 10;  				showOffset = true;  			}  			else  			{  				this.offset = 0;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,IDictionaryPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\IDictionaryPropertyEditor.cs,UpdateElementEditors,The following statement contains a magic number: this.internalEditors = showOffset ? 2 : 1;
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,ObjectSelectorPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\ObjectSelectorPropertyEditor.cs,OnParentEditorChanged,The following statement contains a magic number: this.Height = 5 + (int)Math.Round((float)this.ControlRenderer.FontRegular.Height);
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,ObjectSelectorPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\ObjectSelectorPropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: this.objSelector.Rect = new Rectangle(  				this.ClientRectangle.X + 1'  				this.ClientRectangle.Y + 1'  				this.ClientRectangle.Width - 2'  				this.ClientRectangle.Height - 1);
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,StringPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\StringPropertyEditor.cs,OnParentEditorChanged,The following statement contains a magic number: this.Height = 5 + (int)Math.Round((float)this.ControlRenderer.FontRegular.Height);
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,StringPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\StringPropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: this.stringEditor.Rect = new Rectangle(  				this.ClientRectangle.X + 1'  				this.ClientRectangle.Y + 1'  				this.ClientRectangle.Width - 2'  				this.ClientRectangle.Height - 1);
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,NumericPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\NumericPropertyEditor.cs,UpdateHeight,The following statement contains a magic number: if (this.ValueBarMinimum > decimal.MinValue / 2 && this.ValueBarMaximum < decimal.MaxValue / 2)  			{  				showMinMaxBar = (float)((this.ValueBarMaximum - this.ValueBarMinimum) / this.Increment) < 10000.0f;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,NumericPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\NumericPropertyEditor.cs,UpdateHeight,The following statement contains a magic number: if (this.ValueBarMinimum > decimal.MinValue / 2 && this.ValueBarMaximum < decimal.MaxValue / 2)  			{  				showMinMaxBar = (float)((this.ValueBarMaximum - this.ValueBarMinimum) / this.Increment) < 10000.0f;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,NumericPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\NumericPropertyEditor.cs,UpdateHeight,The following statement contains a magic number: int prefHeight = 5 + (int)Math.Round((float)this.ControlRenderer.FontRegular.Height);
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,NumericPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\NumericPropertyEditor.cs,UpdateHeight,The following statement contains a magic number: if (showMinMaxBar) prefHeight += 3;
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,NumericPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\NumericPropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: this.numEditor.Rect = new Rectangle(  				this.ClientRectangle.X + 1'  				this.ClientRectangle.Y + 1'  				this.ClientRectangle.Width - 2'  				this.ClientRectangle.Height - 1);
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,NumericPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\NumericPropertyEditor.cs,OnEditedTypeChanged,The following statement contains a magic number: if (this.EditedType == typeof(byte))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = byte.MinValue;  				this.numEditor.Maximum = byte.MaxValue;  			}  			else if (this.EditedType == typeof(sbyte))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = sbyte.MinValue;  				this.numEditor.Maximum = sbyte.MaxValue;  			}  			else if (this.EditedType == typeof(short))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = short.MinValue;  				this.numEditor.Maximum = short.MaxValue;  			}  			else if (this.EditedType == typeof(ushort))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = ushort.MinValue;  				this.numEditor.Maximum = ushort.MaxValue;  			}  			else if (this.EditedType == typeof(int))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = int.MinValue;  				this.numEditor.Maximum = int.MaxValue;  			}  			else if (this.EditedType == typeof(uint))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = uint.MinValue;  				this.numEditor.Maximum = uint.MaxValue;  			}  			else if (this.EditedType == typeof(long))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = long.MinValue;  				this.numEditor.Maximum = long.MaxValue;  			}  			else if (this.EditedType == typeof(ulong))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = ulong.MinValue;  				this.numEditor.Maximum = ulong.MaxValue;  			}  			else if (this.EditedType == typeof(float))  			{  				this.numEditor.DecimalPlaces = 2;  				this.numEditor.Increment = 0.1m;  				this.numEditor.Minimum = decimal.MinValue;  				this.numEditor.Maximum = decimal.MaxValue;  			}  			else if (this.EditedType == typeof(double))  			{  				this.numEditor.DecimalPlaces = 2;  				this.numEditor.Minimum = decimal.MinValue;  				this.numEditor.Maximum = decimal.MaxValue;  			}  			else if (this.EditedType == typeof(decimal))  			{  				this.numEditor.DecimalPlaces = 2;  				this.numEditor.Minimum = decimal.MinValue;  				this.numEditor.Maximum = decimal.MaxValue;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,NumericPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\NumericPropertyEditor.cs,OnEditedTypeChanged,The following statement contains a magic number: if (this.EditedType == typeof(byte))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = byte.MinValue;  				this.numEditor.Maximum = byte.MaxValue;  			}  			else if (this.EditedType == typeof(sbyte))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = sbyte.MinValue;  				this.numEditor.Maximum = sbyte.MaxValue;  			}  			else if (this.EditedType == typeof(short))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = short.MinValue;  				this.numEditor.Maximum = short.MaxValue;  			}  			else if (this.EditedType == typeof(ushort))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = ushort.MinValue;  				this.numEditor.Maximum = ushort.MaxValue;  			}  			else if (this.EditedType == typeof(int))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = int.MinValue;  				this.numEditor.Maximum = int.MaxValue;  			}  			else if (this.EditedType == typeof(uint))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = uint.MinValue;  				this.numEditor.Maximum = uint.MaxValue;  			}  			else if (this.EditedType == typeof(long))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = long.MinValue;  				this.numEditor.Maximum = long.MaxValue;  			}  			else if (this.EditedType == typeof(ulong))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = ulong.MinValue;  				this.numEditor.Maximum = ulong.MaxValue;  			}  			else if (this.EditedType == typeof(float))  			{  				this.numEditor.DecimalPlaces = 2;  				this.numEditor.Increment = 0.1m;  				this.numEditor.Minimum = decimal.MinValue;  				this.numEditor.Maximum = decimal.MaxValue;  			}  			else if (this.EditedType == typeof(double))  			{  				this.numEditor.DecimalPlaces = 2;  				this.numEditor.Minimum = decimal.MinValue;  				this.numEditor.Maximum = decimal.MaxValue;  			}  			else if (this.EditedType == typeof(decimal))  			{  				this.numEditor.DecimalPlaces = 2;  				this.numEditor.Minimum = decimal.MinValue;  				this.numEditor.Maximum = decimal.MaxValue;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Editors,NumericPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditors\NumericPropertyEditor.cs,OnEditedTypeChanged,The following statement contains a magic number: if (this.EditedType == typeof(byte))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = byte.MinValue;  				this.numEditor.Maximum = byte.MaxValue;  			}  			else if (this.EditedType == typeof(sbyte))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = sbyte.MinValue;  				this.numEditor.Maximum = sbyte.MaxValue;  			}  			else if (this.EditedType == typeof(short))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = short.MinValue;  				this.numEditor.Maximum = short.MaxValue;  			}  			else if (this.EditedType == typeof(ushort))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = ushort.MinValue;  				this.numEditor.Maximum = ushort.MaxValue;  			}  			else if (this.EditedType == typeof(int))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = int.MinValue;  				this.numEditor.Maximum = int.MaxValue;  			}  			else if (this.EditedType == typeof(uint))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = uint.MinValue;  				this.numEditor.Maximum = uint.MaxValue;  			}  			else if (this.EditedType == typeof(long))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = long.MinValue;  				this.numEditor.Maximum = long.MaxValue;  			}  			else if (this.EditedType == typeof(ulong))  			{  				this.numEditor.DecimalPlaces = 0;  				this.numEditor.Minimum = ulong.MinValue;  				this.numEditor.Maximum = ulong.MaxValue;  			}  			else if (this.EditedType == typeof(float))  			{  				this.numEditor.DecimalPlaces = 2;  				this.numEditor.Increment = 0.1m;  				this.numEditor.Minimum = decimal.MinValue;  				this.numEditor.Maximum = decimal.MaxValue;  			}  			else if (this.EditedType == typeof(double))  			{  				this.numEditor.DecimalPlaces = 2;  				this.numEditor.Minimum = decimal.MinValue;  				this.numEditor.Maximum = decimal.MaxValue;  			}  			else if (this.EditedType == typeof(decimal))  			{  				this.numEditor.DecimalPlaces = 2;  				this.numEditor.Minimum = decimal.MinValue;  				this.numEditor.Maximum = decimal.MaxValue;  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineLinearGraphModel,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\Models\TimelineLinearGraphModel.cs,SearchIndexBelow,The following statement contains a magic number: while (right >= left)  			{  				int mid = (left + right) / 2;  				float midTime = this.values[mid].X;  				if (midTime > x)  				{  					right = mid - 1;  				}  				else if (midTime <= x)  				{  					if (left != mid)  					{  						left = mid;  					}  					else  					{  						float rightTime = this.values[right].X;  						if (rightTime <= x)  							return right;  						else  							return left;  					}  				}  				else if (left == right)  				{  					break;  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaint,The following statement contains a magic number: if (pixelWidth < 5) e.Graphics.SmoothingMode = SmoothingMode.HighSpeed;
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaint,The following statement contains a magic number: if (pixelWidth > 2)  			{  				this.OnPaintCurve(e);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The following statement contains a magic number: minPixelStep = Math.Min(minPixelStep' 4);
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The following statement contains a magic number: if (this.curveCacheDirty)  			{  				// Begin a little sooner' so interpolation / error checking can gather some data  				beginUnitX -= minUnitStep * 5.0f;    				// Determine sample points  				PointF[] curvePointsEnvMax = null;  				PointF[] curvePointsEnvMin = null;  				if (this.curveOpacity > 0.0f)  				{  					this.cacheCurveVertices = this.GetCurvePoints(rect' e.GetAdjustedQuality(this.parentTrack.CurvePrecision)' this.model.GetValueAtX' minPixelStep' beginUnitX' endUnitX);  				}  				if (this.envelopeOpacity > 0.0f && !this.skipEnvelope)  				{  					float envelopeUnitRadius = this.ParentView.ConvertPixelsToUnits(EnvelopeBasePixelRadius);  					float minEnvelopeStepFactor;  					switch (e.GetAdjustedQuality(this.parentTrack.EnvelopePrecision))  					{  						case QualityLevel.High:  							minEnvelopeStepFactor = 0.1f;  							break;  						default:  						case QualityLevel.Medium:  							minEnvelopeStepFactor = 0.5f;  							break;  						case QualityLevel.Low:  							minEnvelopeStepFactor = 1.0f;  							break;  					}  					float envelopePixelStep = minEnvelopeStepFactor * EnvelopeBasePixelRadius;  					float envelopeUnitStep = minEnvelopeStepFactor * envelopeUnitRadius;  					curvePointsEnvMax = this.GetCurvePoints(  						rect'   						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMaxValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'   						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));  					curvePointsEnvMin = this.GetCurvePoints(  						rect'    						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMinValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'  						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));    					if (curvePointsEnvMax == null || curvePointsEnvMin == null || curvePointsEnvMax.Length + curvePointsEnvMin.Length < 3)  						this.skipEnvelope = true;  				}    				if (curvePointsEnvMax != null && curvePointsEnvMin != null && curvePointsEnvMax.Length + curvePointsEnvMin.Length >= 3)  				{  					// Calculate the visible envelope polygon  					this.cacheEnvelopeVertices = new PointF[curvePointsEnvMax.Length + curvePointsEnvMin.Length];  					for (int i = 0; i < curvePointsEnvMax.Length; i++)  					{  						this.cacheEnvelopeVertices[i] = curvePointsEnvMax[i];  					}  					for (int i = 0; i < curvePointsEnvMin.Length; i++)  					{  						this.cacheEnvelopeVertices[curvePointsEnvMax.Length + i] = curvePointsEnvMin[curvePointsEnvMin.Length - i - 1];  					}    					// Calculate the envelope and curve gradients  					if (this.cacheCurveVertices != null)  					{  						float varianceUnitRadius = this.ParentView.ConvertPixelsToUnits(0.5f);  						KeyValuePair<float'float>[] baseBlend = new KeyValuePair<float'float>[Math.Max(this.cacheCurveVertices.Length' 2)];  						for (int i = 0; i < baseBlend.Length; i++)  						{  							float relativeX = (float)(this.cacheCurveVertices[(int)((float)i * (this.cacheCurveVertices.Length - 1) / (float)(baseBlend.Length - 1))].X - rect.X) / (float)rect.Width;  							float unitX = this.ParentView.GetUnitAtPos(rect.X + relativeX * rect.Width);  							float localOpacity = this.GetEnvelopeVisibility(  								this.model.GetMaxValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius) -   								this.model.GetMinValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius));  							baseBlend[i] = new KeyValuePair<float'float>(relativeX' localOpacity);  						}    						this.cacheEnvelopeGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);  						this.cacheCurveGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);    						const int Samples = 21;  						const int SamplesHalf = Samples / 2;  						const int BlendSamplesPerChunk = 4;  						float highestOpacity = 0.0f;  						ColorBlend envelopeBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						ColorBlend curveBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						for (int i = 0; i < envelopeBlend.Colors.Length; i++)  						{  							int firstIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk - SamplesHalf' 0)' baseBlend.Length - 1);  							int lastIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk + SamplesHalf' 0)' baseBlend.Length - 1);  							float sum = 0.0f;  							for (int j = firstIndex; j <= lastIndex; j++)  							{  								sum += baseBlend[j].Value;  							}  							float localOpacity = sum / (float)(1 + lastIndex - firstIndex);  							highestOpacity = Math.Max(highestOpacity' localOpacity);  							envelopeBlend.Colors[i] = Color.FromArgb((int)(localOpacity * this.envelopeOpacity * 255.0f)' this.baseColor);  							envelopeBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  							curveBlend.Colors[i] = Color.FromArgb((int)((1.0f - localOpacity) * (1.0f - localOpacity) * this.curveOpacity * 255.0f)' this.baseColor);  							curveBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  						}    						if (highestOpacity <= 0.05f)  						{  							this.cacheEnvelopeGradient = null;  							this.cacheCurveGradient = null;  							this.skipEnvelope = true;  						}  						else  						{  							envelopeBlend.Positions[0] = 0.0f;  							envelopeBlend.Positions[envelopeBlend.Positions.Length - 1] = 1.0f;  							this.cacheEnvelopeGradient.InterpolationColors = envelopeBlend;  							curveBlend.Positions[0] = 0.0f;  							curveBlend.Positions[curveBlend.Positions.Length - 1] = 1.0f;  							this.cacheCurveGradient.InterpolationColors = curveBlend;  						}  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The following statement contains a magic number: if (this.curveCacheDirty)  			{  				// Begin a little sooner' so interpolation / error checking can gather some data  				beginUnitX -= minUnitStep * 5.0f;    				// Determine sample points  				PointF[] curvePointsEnvMax = null;  				PointF[] curvePointsEnvMin = null;  				if (this.curveOpacity > 0.0f)  				{  					this.cacheCurveVertices = this.GetCurvePoints(rect' e.GetAdjustedQuality(this.parentTrack.CurvePrecision)' this.model.GetValueAtX' minPixelStep' beginUnitX' endUnitX);  				}  				if (this.envelopeOpacity > 0.0f && !this.skipEnvelope)  				{  					float envelopeUnitRadius = this.ParentView.ConvertPixelsToUnits(EnvelopeBasePixelRadius);  					float minEnvelopeStepFactor;  					switch (e.GetAdjustedQuality(this.parentTrack.EnvelopePrecision))  					{  						case QualityLevel.High:  							minEnvelopeStepFactor = 0.1f;  							break;  						default:  						case QualityLevel.Medium:  							minEnvelopeStepFactor = 0.5f;  							break;  						case QualityLevel.Low:  							minEnvelopeStepFactor = 1.0f;  							break;  					}  					float envelopePixelStep = minEnvelopeStepFactor * EnvelopeBasePixelRadius;  					float envelopeUnitStep = minEnvelopeStepFactor * envelopeUnitRadius;  					curvePointsEnvMax = this.GetCurvePoints(  						rect'   						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMaxValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'   						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));  					curvePointsEnvMin = this.GetCurvePoints(  						rect'    						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMinValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'  						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));    					if (curvePointsEnvMax == null || curvePointsEnvMin == null || curvePointsEnvMax.Length + curvePointsEnvMin.Length < 3)  						this.skipEnvelope = true;  				}    				if (curvePointsEnvMax != null && curvePointsEnvMin != null && curvePointsEnvMax.Length + curvePointsEnvMin.Length >= 3)  				{  					// Calculate the visible envelope polygon  					this.cacheEnvelopeVertices = new PointF[curvePointsEnvMax.Length + curvePointsEnvMin.Length];  					for (int i = 0; i < curvePointsEnvMax.Length; i++)  					{  						this.cacheEnvelopeVertices[i] = curvePointsEnvMax[i];  					}  					for (int i = 0; i < curvePointsEnvMin.Length; i++)  					{  						this.cacheEnvelopeVertices[curvePointsEnvMax.Length + i] = curvePointsEnvMin[curvePointsEnvMin.Length - i - 1];  					}    					// Calculate the envelope and curve gradients  					if (this.cacheCurveVertices != null)  					{  						float varianceUnitRadius = this.ParentView.ConvertPixelsToUnits(0.5f);  						KeyValuePair<float'float>[] baseBlend = new KeyValuePair<float'float>[Math.Max(this.cacheCurveVertices.Length' 2)];  						for (int i = 0; i < baseBlend.Length; i++)  						{  							float relativeX = (float)(this.cacheCurveVertices[(int)((float)i * (this.cacheCurveVertices.Length - 1) / (float)(baseBlend.Length - 1))].X - rect.X) / (float)rect.Width;  							float unitX = this.ParentView.GetUnitAtPos(rect.X + relativeX * rect.Width);  							float localOpacity = this.GetEnvelopeVisibility(  								this.model.GetMaxValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius) -   								this.model.GetMinValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius));  							baseBlend[i] = new KeyValuePair<float'float>(relativeX' localOpacity);  						}    						this.cacheEnvelopeGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);  						this.cacheCurveGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);    						const int Samples = 21;  						const int SamplesHalf = Samples / 2;  						const int BlendSamplesPerChunk = 4;  						float highestOpacity = 0.0f;  						ColorBlend envelopeBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						ColorBlend curveBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						for (int i = 0; i < envelopeBlend.Colors.Length; i++)  						{  							int firstIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk - SamplesHalf' 0)' baseBlend.Length - 1);  							int lastIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk + SamplesHalf' 0)' baseBlend.Length - 1);  							float sum = 0.0f;  							for (int j = firstIndex; j <= lastIndex; j++)  							{  								sum += baseBlend[j].Value;  							}  							float localOpacity = sum / (float)(1 + lastIndex - firstIndex);  							highestOpacity = Math.Max(highestOpacity' localOpacity);  							envelopeBlend.Colors[i] = Color.FromArgb((int)(localOpacity * this.envelopeOpacity * 255.0f)' this.baseColor);  							envelopeBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  							curveBlend.Colors[i] = Color.FromArgb((int)((1.0f - localOpacity) * (1.0f - localOpacity) * this.curveOpacity * 255.0f)' this.baseColor);  							curveBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  						}    						if (highestOpacity <= 0.05f)  						{  							this.cacheEnvelopeGradient = null;  							this.cacheCurveGradient = null;  							this.skipEnvelope = true;  						}  						else  						{  							envelopeBlend.Positions[0] = 0.0f;  							envelopeBlend.Positions[envelopeBlend.Positions.Length - 1] = 1.0f;  							this.cacheEnvelopeGradient.InterpolationColors = envelopeBlend;  							curveBlend.Positions[0] = 0.0f;  							curveBlend.Positions[curveBlend.Positions.Length - 1] = 1.0f;  							this.cacheCurveGradient.InterpolationColors = curveBlend;  						}  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The following statement contains a magic number: if (this.curveCacheDirty)  			{  				// Begin a little sooner' so interpolation / error checking can gather some data  				beginUnitX -= minUnitStep * 5.0f;    				// Determine sample points  				PointF[] curvePointsEnvMax = null;  				PointF[] curvePointsEnvMin = null;  				if (this.curveOpacity > 0.0f)  				{  					this.cacheCurveVertices = this.GetCurvePoints(rect' e.GetAdjustedQuality(this.parentTrack.CurvePrecision)' this.model.GetValueAtX' minPixelStep' beginUnitX' endUnitX);  				}  				if (this.envelopeOpacity > 0.0f && !this.skipEnvelope)  				{  					float envelopeUnitRadius = this.ParentView.ConvertPixelsToUnits(EnvelopeBasePixelRadius);  					float minEnvelopeStepFactor;  					switch (e.GetAdjustedQuality(this.parentTrack.EnvelopePrecision))  					{  						case QualityLevel.High:  							minEnvelopeStepFactor = 0.1f;  							break;  						default:  						case QualityLevel.Medium:  							minEnvelopeStepFactor = 0.5f;  							break;  						case QualityLevel.Low:  							minEnvelopeStepFactor = 1.0f;  							break;  					}  					float envelopePixelStep = minEnvelopeStepFactor * EnvelopeBasePixelRadius;  					float envelopeUnitStep = minEnvelopeStepFactor * envelopeUnitRadius;  					curvePointsEnvMax = this.GetCurvePoints(  						rect'   						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMaxValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'   						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));  					curvePointsEnvMin = this.GetCurvePoints(  						rect'    						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMinValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'  						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));    					if (curvePointsEnvMax == null || curvePointsEnvMin == null || curvePointsEnvMax.Length + curvePointsEnvMin.Length < 3)  						this.skipEnvelope = true;  				}    				if (curvePointsEnvMax != null && curvePointsEnvMin != null && curvePointsEnvMax.Length + curvePointsEnvMin.Length >= 3)  				{  					// Calculate the visible envelope polygon  					this.cacheEnvelopeVertices = new PointF[curvePointsEnvMax.Length + curvePointsEnvMin.Length];  					for (int i = 0; i < curvePointsEnvMax.Length; i++)  					{  						this.cacheEnvelopeVertices[i] = curvePointsEnvMax[i];  					}  					for (int i = 0; i < curvePointsEnvMin.Length; i++)  					{  						this.cacheEnvelopeVertices[curvePointsEnvMax.Length + i] = curvePointsEnvMin[curvePointsEnvMin.Length - i - 1];  					}    					// Calculate the envelope and curve gradients  					if (this.cacheCurveVertices != null)  					{  						float varianceUnitRadius = this.ParentView.ConvertPixelsToUnits(0.5f);  						KeyValuePair<float'float>[] baseBlend = new KeyValuePair<float'float>[Math.Max(this.cacheCurveVertices.Length' 2)];  						for (int i = 0; i < baseBlend.Length; i++)  						{  							float relativeX = (float)(this.cacheCurveVertices[(int)((float)i * (this.cacheCurveVertices.Length - 1) / (float)(baseBlend.Length - 1))].X - rect.X) / (float)rect.Width;  							float unitX = this.ParentView.GetUnitAtPos(rect.X + relativeX * rect.Width);  							float localOpacity = this.GetEnvelopeVisibility(  								this.model.GetMaxValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius) -   								this.model.GetMinValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius));  							baseBlend[i] = new KeyValuePair<float'float>(relativeX' localOpacity);  						}    						this.cacheEnvelopeGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);  						this.cacheCurveGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);    						const int Samples = 21;  						const int SamplesHalf = Samples / 2;  						const int BlendSamplesPerChunk = 4;  						float highestOpacity = 0.0f;  						ColorBlend envelopeBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						ColorBlend curveBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						for (int i = 0; i < envelopeBlend.Colors.Length; i++)  						{  							int firstIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk - SamplesHalf' 0)' baseBlend.Length - 1);  							int lastIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk + SamplesHalf' 0)' baseBlend.Length - 1);  							float sum = 0.0f;  							for (int j = firstIndex; j <= lastIndex; j++)  							{  								sum += baseBlend[j].Value;  							}  							float localOpacity = sum / (float)(1 + lastIndex - firstIndex);  							highestOpacity = Math.Max(highestOpacity' localOpacity);  							envelopeBlend.Colors[i] = Color.FromArgb((int)(localOpacity * this.envelopeOpacity * 255.0f)' this.baseColor);  							envelopeBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  							curveBlend.Colors[i] = Color.FromArgb((int)((1.0f - localOpacity) * (1.0f - localOpacity) * this.curveOpacity * 255.0f)' this.baseColor);  							curveBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  						}    						if (highestOpacity <= 0.05f)  						{  							this.cacheEnvelopeGradient = null;  							this.cacheCurveGradient = null;  							this.skipEnvelope = true;  						}  						else  						{  							envelopeBlend.Positions[0] = 0.0f;  							envelopeBlend.Positions[envelopeBlend.Positions.Length - 1] = 1.0f;  							this.cacheEnvelopeGradient.InterpolationColors = envelopeBlend;  							curveBlend.Positions[0] = 0.0f;  							curveBlend.Positions[curveBlend.Positions.Length - 1] = 1.0f;  							this.cacheCurveGradient.InterpolationColors = curveBlend;  						}  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The following statement contains a magic number: if (this.curveCacheDirty)  			{  				// Begin a little sooner' so interpolation / error checking can gather some data  				beginUnitX -= minUnitStep * 5.0f;    				// Determine sample points  				PointF[] curvePointsEnvMax = null;  				PointF[] curvePointsEnvMin = null;  				if (this.curveOpacity > 0.0f)  				{  					this.cacheCurveVertices = this.GetCurvePoints(rect' e.GetAdjustedQuality(this.parentTrack.CurvePrecision)' this.model.GetValueAtX' minPixelStep' beginUnitX' endUnitX);  				}  				if (this.envelopeOpacity > 0.0f && !this.skipEnvelope)  				{  					float envelopeUnitRadius = this.ParentView.ConvertPixelsToUnits(EnvelopeBasePixelRadius);  					float minEnvelopeStepFactor;  					switch (e.GetAdjustedQuality(this.parentTrack.EnvelopePrecision))  					{  						case QualityLevel.High:  							minEnvelopeStepFactor = 0.1f;  							break;  						default:  						case QualityLevel.Medium:  							minEnvelopeStepFactor = 0.5f;  							break;  						case QualityLevel.Low:  							minEnvelopeStepFactor = 1.0f;  							break;  					}  					float envelopePixelStep = minEnvelopeStepFactor * EnvelopeBasePixelRadius;  					float envelopeUnitStep = minEnvelopeStepFactor * envelopeUnitRadius;  					curvePointsEnvMax = this.GetCurvePoints(  						rect'   						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMaxValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'   						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));  					curvePointsEnvMin = this.GetCurvePoints(  						rect'    						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMinValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'  						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));    					if (curvePointsEnvMax == null || curvePointsEnvMin == null || curvePointsEnvMax.Length + curvePointsEnvMin.Length < 3)  						this.skipEnvelope = true;  				}    				if (curvePointsEnvMax != null && curvePointsEnvMin != null && curvePointsEnvMax.Length + curvePointsEnvMin.Length >= 3)  				{  					// Calculate the visible envelope polygon  					this.cacheEnvelopeVertices = new PointF[curvePointsEnvMax.Length + curvePointsEnvMin.Length];  					for (int i = 0; i < curvePointsEnvMax.Length; i++)  					{  						this.cacheEnvelopeVertices[i] = curvePointsEnvMax[i];  					}  					for (int i = 0; i < curvePointsEnvMin.Length; i++)  					{  						this.cacheEnvelopeVertices[curvePointsEnvMax.Length + i] = curvePointsEnvMin[curvePointsEnvMin.Length - i - 1];  					}    					// Calculate the envelope and curve gradients  					if (this.cacheCurveVertices != null)  					{  						float varianceUnitRadius = this.ParentView.ConvertPixelsToUnits(0.5f);  						KeyValuePair<float'float>[] baseBlend = new KeyValuePair<float'float>[Math.Max(this.cacheCurveVertices.Length' 2)];  						for (int i = 0; i < baseBlend.Length; i++)  						{  							float relativeX = (float)(this.cacheCurveVertices[(int)((float)i * (this.cacheCurveVertices.Length - 1) / (float)(baseBlend.Length - 1))].X - rect.X) / (float)rect.Width;  							float unitX = this.ParentView.GetUnitAtPos(rect.X + relativeX * rect.Width);  							float localOpacity = this.GetEnvelopeVisibility(  								this.model.GetMaxValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius) -   								this.model.GetMinValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius));  							baseBlend[i] = new KeyValuePair<float'float>(relativeX' localOpacity);  						}    						this.cacheEnvelopeGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);  						this.cacheCurveGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);    						const int Samples = 21;  						const int SamplesHalf = Samples / 2;  						const int BlendSamplesPerChunk = 4;  						float highestOpacity = 0.0f;  						ColorBlend envelopeBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						ColorBlend curveBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						for (int i = 0; i < envelopeBlend.Colors.Length; i++)  						{  							int firstIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk - SamplesHalf' 0)' baseBlend.Length - 1);  							int lastIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk + SamplesHalf' 0)' baseBlend.Length - 1);  							float sum = 0.0f;  							for (int j = firstIndex; j <= lastIndex; j++)  							{  								sum += baseBlend[j].Value;  							}  							float localOpacity = sum / (float)(1 + lastIndex - firstIndex);  							highestOpacity = Math.Max(highestOpacity' localOpacity);  							envelopeBlend.Colors[i] = Color.FromArgb((int)(localOpacity * this.envelopeOpacity * 255.0f)' this.baseColor);  							envelopeBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  							curveBlend.Colors[i] = Color.FromArgb((int)((1.0f - localOpacity) * (1.0f - localOpacity) * this.curveOpacity * 255.0f)' this.baseColor);  							curveBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  						}    						if (highestOpacity <= 0.05f)  						{  							this.cacheEnvelopeGradient = null;  							this.cacheCurveGradient = null;  							this.skipEnvelope = true;  						}  						else  						{  							envelopeBlend.Positions[0] = 0.0f;  							envelopeBlend.Positions[envelopeBlend.Positions.Length - 1] = 1.0f;  							this.cacheEnvelopeGradient.InterpolationColors = envelopeBlend;  							curveBlend.Positions[0] = 0.0f;  							curveBlend.Positions[curveBlend.Positions.Length - 1] = 1.0f;  							this.cacheCurveGradient.InterpolationColors = curveBlend;  						}  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The following statement contains a magic number: if (this.curveCacheDirty)  			{  				// Begin a little sooner' so interpolation / error checking can gather some data  				beginUnitX -= minUnitStep * 5.0f;    				// Determine sample points  				PointF[] curvePointsEnvMax = null;  				PointF[] curvePointsEnvMin = null;  				if (this.curveOpacity > 0.0f)  				{  					this.cacheCurveVertices = this.GetCurvePoints(rect' e.GetAdjustedQuality(this.parentTrack.CurvePrecision)' this.model.GetValueAtX' minPixelStep' beginUnitX' endUnitX);  				}  				if (this.envelopeOpacity > 0.0f && !this.skipEnvelope)  				{  					float envelopeUnitRadius = this.ParentView.ConvertPixelsToUnits(EnvelopeBasePixelRadius);  					float minEnvelopeStepFactor;  					switch (e.GetAdjustedQuality(this.parentTrack.EnvelopePrecision))  					{  						case QualityLevel.High:  							minEnvelopeStepFactor = 0.1f;  							break;  						default:  						case QualityLevel.Medium:  							minEnvelopeStepFactor = 0.5f;  							break;  						case QualityLevel.Low:  							minEnvelopeStepFactor = 1.0f;  							break;  					}  					float envelopePixelStep = minEnvelopeStepFactor * EnvelopeBasePixelRadius;  					float envelopeUnitStep = minEnvelopeStepFactor * envelopeUnitRadius;  					curvePointsEnvMax = this.GetCurvePoints(  						rect'   						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMaxValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'   						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));  					curvePointsEnvMin = this.GetCurvePoints(  						rect'    						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMinValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'  						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));    					if (curvePointsEnvMax == null || curvePointsEnvMin == null || curvePointsEnvMax.Length + curvePointsEnvMin.Length < 3)  						this.skipEnvelope = true;  				}    				if (curvePointsEnvMax != null && curvePointsEnvMin != null && curvePointsEnvMax.Length + curvePointsEnvMin.Length >= 3)  				{  					// Calculate the visible envelope polygon  					this.cacheEnvelopeVertices = new PointF[curvePointsEnvMax.Length + curvePointsEnvMin.Length];  					for (int i = 0; i < curvePointsEnvMax.Length; i++)  					{  						this.cacheEnvelopeVertices[i] = curvePointsEnvMax[i];  					}  					for (int i = 0; i < curvePointsEnvMin.Length; i++)  					{  						this.cacheEnvelopeVertices[curvePointsEnvMax.Length + i] = curvePointsEnvMin[curvePointsEnvMin.Length - i - 1];  					}    					// Calculate the envelope and curve gradients  					if (this.cacheCurveVertices != null)  					{  						float varianceUnitRadius = this.ParentView.ConvertPixelsToUnits(0.5f);  						KeyValuePair<float'float>[] baseBlend = new KeyValuePair<float'float>[Math.Max(this.cacheCurveVertices.Length' 2)];  						for (int i = 0; i < baseBlend.Length; i++)  						{  							float relativeX = (float)(this.cacheCurveVertices[(int)((float)i * (this.cacheCurveVertices.Length - 1) / (float)(baseBlend.Length - 1))].X - rect.X) / (float)rect.Width;  							float unitX = this.ParentView.GetUnitAtPos(rect.X + relativeX * rect.Width);  							float localOpacity = this.GetEnvelopeVisibility(  								this.model.GetMaxValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius) -   								this.model.GetMinValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius));  							baseBlend[i] = new KeyValuePair<float'float>(relativeX' localOpacity);  						}    						this.cacheEnvelopeGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);  						this.cacheCurveGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);    						const int Samples = 21;  						const int SamplesHalf = Samples / 2;  						const int BlendSamplesPerChunk = 4;  						float highestOpacity = 0.0f;  						ColorBlend envelopeBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						ColorBlend curveBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						for (int i = 0; i < envelopeBlend.Colors.Length; i++)  						{  							int firstIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk - SamplesHalf' 0)' baseBlend.Length - 1);  							int lastIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk + SamplesHalf' 0)' baseBlend.Length - 1);  							float sum = 0.0f;  							for (int j = firstIndex; j <= lastIndex; j++)  							{  								sum += baseBlend[j].Value;  							}  							float localOpacity = sum / (float)(1 + lastIndex - firstIndex);  							highestOpacity = Math.Max(highestOpacity' localOpacity);  							envelopeBlend.Colors[i] = Color.FromArgb((int)(localOpacity * this.envelopeOpacity * 255.0f)' this.baseColor);  							envelopeBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  							curveBlend.Colors[i] = Color.FromArgb((int)((1.0f - localOpacity) * (1.0f - localOpacity) * this.curveOpacity * 255.0f)' this.baseColor);  							curveBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  						}    						if (highestOpacity <= 0.05f)  						{  							this.cacheEnvelopeGradient = null;  							this.cacheCurveGradient = null;  							this.skipEnvelope = true;  						}  						else  						{  							envelopeBlend.Positions[0] = 0.0f;  							envelopeBlend.Positions[envelopeBlend.Positions.Length - 1] = 1.0f;  							this.cacheEnvelopeGradient.InterpolationColors = envelopeBlend;  							curveBlend.Positions[0] = 0.0f;  							curveBlend.Positions[curveBlend.Positions.Length - 1] = 1.0f;  							this.cacheCurveGradient.InterpolationColors = curveBlend;  						}  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The following statement contains a magic number: if (this.curveCacheDirty)  			{  				// Begin a little sooner' so interpolation / error checking can gather some data  				beginUnitX -= minUnitStep * 5.0f;    				// Determine sample points  				PointF[] curvePointsEnvMax = null;  				PointF[] curvePointsEnvMin = null;  				if (this.curveOpacity > 0.0f)  				{  					this.cacheCurveVertices = this.GetCurvePoints(rect' e.GetAdjustedQuality(this.parentTrack.CurvePrecision)' this.model.GetValueAtX' minPixelStep' beginUnitX' endUnitX);  				}  				if (this.envelopeOpacity > 0.0f && !this.skipEnvelope)  				{  					float envelopeUnitRadius = this.ParentView.ConvertPixelsToUnits(EnvelopeBasePixelRadius);  					float minEnvelopeStepFactor;  					switch (e.GetAdjustedQuality(this.parentTrack.EnvelopePrecision))  					{  						case QualityLevel.High:  							minEnvelopeStepFactor = 0.1f;  							break;  						default:  						case QualityLevel.Medium:  							minEnvelopeStepFactor = 0.5f;  							break;  						case QualityLevel.Low:  							minEnvelopeStepFactor = 1.0f;  							break;  					}  					float envelopePixelStep = minEnvelopeStepFactor * EnvelopeBasePixelRadius;  					float envelopeUnitStep = minEnvelopeStepFactor * envelopeUnitRadius;  					curvePointsEnvMax = this.GetCurvePoints(  						rect'   						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMaxValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'   						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));  					curvePointsEnvMin = this.GetCurvePoints(  						rect'    						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMinValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'  						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));    					if (curvePointsEnvMax == null || curvePointsEnvMin == null || curvePointsEnvMax.Length + curvePointsEnvMin.Length < 3)  						this.skipEnvelope = true;  				}    				if (curvePointsEnvMax != null && curvePointsEnvMin != null && curvePointsEnvMax.Length + curvePointsEnvMin.Length >= 3)  				{  					// Calculate the visible envelope polygon  					this.cacheEnvelopeVertices = new PointF[curvePointsEnvMax.Length + curvePointsEnvMin.Length];  					for (int i = 0; i < curvePointsEnvMax.Length; i++)  					{  						this.cacheEnvelopeVertices[i] = curvePointsEnvMax[i];  					}  					for (int i = 0; i < curvePointsEnvMin.Length; i++)  					{  						this.cacheEnvelopeVertices[curvePointsEnvMax.Length + i] = curvePointsEnvMin[curvePointsEnvMin.Length - i - 1];  					}    					// Calculate the envelope and curve gradients  					if (this.cacheCurveVertices != null)  					{  						float varianceUnitRadius = this.ParentView.ConvertPixelsToUnits(0.5f);  						KeyValuePair<float'float>[] baseBlend = new KeyValuePair<float'float>[Math.Max(this.cacheCurveVertices.Length' 2)];  						for (int i = 0; i < baseBlend.Length; i++)  						{  							float relativeX = (float)(this.cacheCurveVertices[(int)((float)i * (this.cacheCurveVertices.Length - 1) / (float)(baseBlend.Length - 1))].X - rect.X) / (float)rect.Width;  							float unitX = this.ParentView.GetUnitAtPos(rect.X + relativeX * rect.Width);  							float localOpacity = this.GetEnvelopeVisibility(  								this.model.GetMaxValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius) -   								this.model.GetMinValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius));  							baseBlend[i] = new KeyValuePair<float'float>(relativeX' localOpacity);  						}    						this.cacheEnvelopeGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);  						this.cacheCurveGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);    						const int Samples = 21;  						const int SamplesHalf = Samples / 2;  						const int BlendSamplesPerChunk = 4;  						float highestOpacity = 0.0f;  						ColorBlend envelopeBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						ColorBlend curveBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						for (int i = 0; i < envelopeBlend.Colors.Length; i++)  						{  							int firstIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk - SamplesHalf' 0)' baseBlend.Length - 1);  							int lastIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk + SamplesHalf' 0)' baseBlend.Length - 1);  							float sum = 0.0f;  							for (int j = firstIndex; j <= lastIndex; j++)  							{  								sum += baseBlend[j].Value;  							}  							float localOpacity = sum / (float)(1 + lastIndex - firstIndex);  							highestOpacity = Math.Max(highestOpacity' localOpacity);  							envelopeBlend.Colors[i] = Color.FromArgb((int)(localOpacity * this.envelopeOpacity * 255.0f)' this.baseColor);  							envelopeBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  							curveBlend.Colors[i] = Color.FromArgb((int)((1.0f - localOpacity) * (1.0f - localOpacity) * this.curveOpacity * 255.0f)' this.baseColor);  							curveBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  						}    						if (highestOpacity <= 0.05f)  						{  							this.cacheEnvelopeGradient = null;  							this.cacheCurveGradient = null;  							this.skipEnvelope = true;  						}  						else  						{  							envelopeBlend.Positions[0] = 0.0f;  							envelopeBlend.Positions[envelopeBlend.Positions.Length - 1] = 1.0f;  							this.cacheEnvelopeGradient.InterpolationColors = envelopeBlend;  							curveBlend.Positions[0] = 0.0f;  							curveBlend.Positions[curveBlend.Positions.Length - 1] = 1.0f;  							this.cacheCurveGradient.InterpolationColors = curveBlend;  						}  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The following statement contains a magic number: if (this.curveCacheDirty)  			{  				// Begin a little sooner' so interpolation / error checking can gather some data  				beginUnitX -= minUnitStep * 5.0f;    				// Determine sample points  				PointF[] curvePointsEnvMax = null;  				PointF[] curvePointsEnvMin = null;  				if (this.curveOpacity > 0.0f)  				{  					this.cacheCurveVertices = this.GetCurvePoints(rect' e.GetAdjustedQuality(this.parentTrack.CurvePrecision)' this.model.GetValueAtX' minPixelStep' beginUnitX' endUnitX);  				}  				if (this.envelopeOpacity > 0.0f && !this.skipEnvelope)  				{  					float envelopeUnitRadius = this.ParentView.ConvertPixelsToUnits(EnvelopeBasePixelRadius);  					float minEnvelopeStepFactor;  					switch (e.GetAdjustedQuality(this.parentTrack.EnvelopePrecision))  					{  						case QualityLevel.High:  							minEnvelopeStepFactor = 0.1f;  							break;  						default:  						case QualityLevel.Medium:  							minEnvelopeStepFactor = 0.5f;  							break;  						case QualityLevel.Low:  							minEnvelopeStepFactor = 1.0f;  							break;  					}  					float envelopePixelStep = minEnvelopeStepFactor * EnvelopeBasePixelRadius;  					float envelopeUnitStep = minEnvelopeStepFactor * envelopeUnitRadius;  					curvePointsEnvMax = this.GetCurvePoints(  						rect'   						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMaxValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'   						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));  					curvePointsEnvMin = this.GetCurvePoints(  						rect'    						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMinValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'  						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));    					if (curvePointsEnvMax == null || curvePointsEnvMin == null || curvePointsEnvMax.Length + curvePointsEnvMin.Length < 3)  						this.skipEnvelope = true;  				}    				if (curvePointsEnvMax != null && curvePointsEnvMin != null && curvePointsEnvMax.Length + curvePointsEnvMin.Length >= 3)  				{  					// Calculate the visible envelope polygon  					this.cacheEnvelopeVertices = new PointF[curvePointsEnvMax.Length + curvePointsEnvMin.Length];  					for (int i = 0; i < curvePointsEnvMax.Length; i++)  					{  						this.cacheEnvelopeVertices[i] = curvePointsEnvMax[i];  					}  					for (int i = 0; i < curvePointsEnvMin.Length; i++)  					{  						this.cacheEnvelopeVertices[curvePointsEnvMax.Length + i] = curvePointsEnvMin[curvePointsEnvMin.Length - i - 1];  					}    					// Calculate the envelope and curve gradients  					if (this.cacheCurveVertices != null)  					{  						float varianceUnitRadius = this.ParentView.ConvertPixelsToUnits(0.5f);  						KeyValuePair<float'float>[] baseBlend = new KeyValuePair<float'float>[Math.Max(this.cacheCurveVertices.Length' 2)];  						for (int i = 0; i < baseBlend.Length; i++)  						{  							float relativeX = (float)(this.cacheCurveVertices[(int)((float)i * (this.cacheCurveVertices.Length - 1) / (float)(baseBlend.Length - 1))].X - rect.X) / (float)rect.Width;  							float unitX = this.ParentView.GetUnitAtPos(rect.X + relativeX * rect.Width);  							float localOpacity = this.GetEnvelopeVisibility(  								this.model.GetMaxValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius) -   								this.model.GetMinValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius));  							baseBlend[i] = new KeyValuePair<float'float>(relativeX' localOpacity);  						}    						this.cacheEnvelopeGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);  						this.cacheCurveGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);    						const int Samples = 21;  						const int SamplesHalf = Samples / 2;  						const int BlendSamplesPerChunk = 4;  						float highestOpacity = 0.0f;  						ColorBlend envelopeBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						ColorBlend curveBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						for (int i = 0; i < envelopeBlend.Colors.Length; i++)  						{  							int firstIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk - SamplesHalf' 0)' baseBlend.Length - 1);  							int lastIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk + SamplesHalf' 0)' baseBlend.Length - 1);  							float sum = 0.0f;  							for (int j = firstIndex; j <= lastIndex; j++)  							{  								sum += baseBlend[j].Value;  							}  							float localOpacity = sum / (float)(1 + lastIndex - firstIndex);  							highestOpacity = Math.Max(highestOpacity' localOpacity);  							envelopeBlend.Colors[i] = Color.FromArgb((int)(localOpacity * this.envelopeOpacity * 255.0f)' this.baseColor);  							envelopeBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  							curveBlend.Colors[i] = Color.FromArgb((int)((1.0f - localOpacity) * (1.0f - localOpacity) * this.curveOpacity * 255.0f)' this.baseColor);  							curveBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  						}    						if (highestOpacity <= 0.05f)  						{  							this.cacheEnvelopeGradient = null;  							this.cacheCurveGradient = null;  							this.skipEnvelope = true;  						}  						else  						{  							envelopeBlend.Positions[0] = 0.0f;  							envelopeBlend.Positions[envelopeBlend.Positions.Length - 1] = 1.0f;  							this.cacheEnvelopeGradient.InterpolationColors = envelopeBlend;  							curveBlend.Positions[0] = 0.0f;  							curveBlend.Positions[curveBlend.Positions.Length - 1] = 1.0f;  							this.cacheCurveGradient.InterpolationColors = curveBlend;  						}  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The following statement contains a magic number: if (this.curveCacheDirty)  			{  				// Begin a little sooner' so interpolation / error checking can gather some data  				beginUnitX -= minUnitStep * 5.0f;    				// Determine sample points  				PointF[] curvePointsEnvMax = null;  				PointF[] curvePointsEnvMin = null;  				if (this.curveOpacity > 0.0f)  				{  					this.cacheCurveVertices = this.GetCurvePoints(rect' e.GetAdjustedQuality(this.parentTrack.CurvePrecision)' this.model.GetValueAtX' minPixelStep' beginUnitX' endUnitX);  				}  				if (this.envelopeOpacity > 0.0f && !this.skipEnvelope)  				{  					float envelopeUnitRadius = this.ParentView.ConvertPixelsToUnits(EnvelopeBasePixelRadius);  					float minEnvelopeStepFactor;  					switch (e.GetAdjustedQuality(this.parentTrack.EnvelopePrecision))  					{  						case QualityLevel.High:  							minEnvelopeStepFactor = 0.1f;  							break;  						default:  						case QualityLevel.Medium:  							minEnvelopeStepFactor = 0.5f;  							break;  						case QualityLevel.Low:  							minEnvelopeStepFactor = 1.0f;  							break;  					}  					float envelopePixelStep = minEnvelopeStepFactor * EnvelopeBasePixelRadius;  					float envelopeUnitStep = minEnvelopeStepFactor * envelopeUnitRadius;  					curvePointsEnvMax = this.GetCurvePoints(  						rect'   						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMaxValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'   						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));  					curvePointsEnvMin = this.GetCurvePoints(  						rect'    						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMinValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'  						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));    					if (curvePointsEnvMax == null || curvePointsEnvMin == null || curvePointsEnvMax.Length + curvePointsEnvMin.Length < 3)  						this.skipEnvelope = true;  				}    				if (curvePointsEnvMax != null && curvePointsEnvMin != null && curvePointsEnvMax.Length + curvePointsEnvMin.Length >= 3)  				{  					// Calculate the visible envelope polygon  					this.cacheEnvelopeVertices = new PointF[curvePointsEnvMax.Length + curvePointsEnvMin.Length];  					for (int i = 0; i < curvePointsEnvMax.Length; i++)  					{  						this.cacheEnvelopeVertices[i] = curvePointsEnvMax[i];  					}  					for (int i = 0; i < curvePointsEnvMin.Length; i++)  					{  						this.cacheEnvelopeVertices[curvePointsEnvMax.Length + i] = curvePointsEnvMin[curvePointsEnvMin.Length - i - 1];  					}    					// Calculate the envelope and curve gradients  					if (this.cacheCurveVertices != null)  					{  						float varianceUnitRadius = this.ParentView.ConvertPixelsToUnits(0.5f);  						KeyValuePair<float'float>[] baseBlend = new KeyValuePair<float'float>[Math.Max(this.cacheCurveVertices.Length' 2)];  						for (int i = 0; i < baseBlend.Length; i++)  						{  							float relativeX = (float)(this.cacheCurveVertices[(int)((float)i * (this.cacheCurveVertices.Length - 1) / (float)(baseBlend.Length - 1))].X - rect.X) / (float)rect.Width;  							float unitX = this.ParentView.GetUnitAtPos(rect.X + relativeX * rect.Width);  							float localOpacity = this.GetEnvelopeVisibility(  								this.model.GetMaxValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius) -   								this.model.GetMinValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius));  							baseBlend[i] = new KeyValuePair<float'float>(relativeX' localOpacity);  						}    						this.cacheEnvelopeGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);  						this.cacheCurveGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);    						const int Samples = 21;  						const int SamplesHalf = Samples / 2;  						const int BlendSamplesPerChunk = 4;  						float highestOpacity = 0.0f;  						ColorBlend envelopeBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						ColorBlend curveBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						for (int i = 0; i < envelopeBlend.Colors.Length; i++)  						{  							int firstIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk - SamplesHalf' 0)' baseBlend.Length - 1);  							int lastIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk + SamplesHalf' 0)' baseBlend.Length - 1);  							float sum = 0.0f;  							for (int j = firstIndex; j <= lastIndex; j++)  							{  								sum += baseBlend[j].Value;  							}  							float localOpacity = sum / (float)(1 + lastIndex - firstIndex);  							highestOpacity = Math.Max(highestOpacity' localOpacity);  							envelopeBlend.Colors[i] = Color.FromArgb((int)(localOpacity * this.envelopeOpacity * 255.0f)' this.baseColor);  							envelopeBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  							curveBlend.Colors[i] = Color.FromArgb((int)((1.0f - localOpacity) * (1.0f - localOpacity) * this.curveOpacity * 255.0f)' this.baseColor);  							curveBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  						}    						if (highestOpacity <= 0.05f)  						{  							this.cacheEnvelopeGradient = null;  							this.cacheCurveGradient = null;  							this.skipEnvelope = true;  						}  						else  						{  							envelopeBlend.Positions[0] = 0.0f;  							envelopeBlend.Positions[envelopeBlend.Positions.Length - 1] = 1.0f;  							this.cacheEnvelopeGradient.InterpolationColors = envelopeBlend;  							curveBlend.Positions[0] = 0.0f;  							curveBlend.Positions[curveBlend.Positions.Length - 1] = 1.0f;  							this.cacheCurveGradient.InterpolationColors = curveBlend;  						}  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The following statement contains a magic number: if (this.curveCacheDirty)  			{  				// Begin a little sooner' so interpolation / error checking can gather some data  				beginUnitX -= minUnitStep * 5.0f;    				// Determine sample points  				PointF[] curvePointsEnvMax = null;  				PointF[] curvePointsEnvMin = null;  				if (this.curveOpacity > 0.0f)  				{  					this.cacheCurveVertices = this.GetCurvePoints(rect' e.GetAdjustedQuality(this.parentTrack.CurvePrecision)' this.model.GetValueAtX' minPixelStep' beginUnitX' endUnitX);  				}  				if (this.envelopeOpacity > 0.0f && !this.skipEnvelope)  				{  					float envelopeUnitRadius = this.ParentView.ConvertPixelsToUnits(EnvelopeBasePixelRadius);  					float minEnvelopeStepFactor;  					switch (e.GetAdjustedQuality(this.parentTrack.EnvelopePrecision))  					{  						case QualityLevel.High:  							minEnvelopeStepFactor = 0.1f;  							break;  						default:  						case QualityLevel.Medium:  							minEnvelopeStepFactor = 0.5f;  							break;  						case QualityLevel.Low:  							minEnvelopeStepFactor = 1.0f;  							break;  					}  					float envelopePixelStep = minEnvelopeStepFactor * EnvelopeBasePixelRadius;  					float envelopeUnitStep = minEnvelopeStepFactor * envelopeUnitRadius;  					curvePointsEnvMax = this.GetCurvePoints(  						rect'   						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMaxValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'   						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));  					curvePointsEnvMin = this.GetCurvePoints(  						rect'    						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMinValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'  						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));    					if (curvePointsEnvMax == null || curvePointsEnvMin == null || curvePointsEnvMax.Length + curvePointsEnvMin.Length < 3)  						this.skipEnvelope = true;  				}    				if (curvePointsEnvMax != null && curvePointsEnvMin != null && curvePointsEnvMax.Length + curvePointsEnvMin.Length >= 3)  				{  					// Calculate the visible envelope polygon  					this.cacheEnvelopeVertices = new PointF[curvePointsEnvMax.Length + curvePointsEnvMin.Length];  					for (int i = 0; i < curvePointsEnvMax.Length; i++)  					{  						this.cacheEnvelopeVertices[i] = curvePointsEnvMax[i];  					}  					for (int i = 0; i < curvePointsEnvMin.Length; i++)  					{  						this.cacheEnvelopeVertices[curvePointsEnvMax.Length + i] = curvePointsEnvMin[curvePointsEnvMin.Length - i - 1];  					}    					// Calculate the envelope and curve gradients  					if (this.cacheCurveVertices != null)  					{  						float varianceUnitRadius = this.ParentView.ConvertPixelsToUnits(0.5f);  						KeyValuePair<float'float>[] baseBlend = new KeyValuePair<float'float>[Math.Max(this.cacheCurveVertices.Length' 2)];  						for (int i = 0; i < baseBlend.Length; i++)  						{  							float relativeX = (float)(this.cacheCurveVertices[(int)((float)i * (this.cacheCurveVertices.Length - 1) / (float)(baseBlend.Length - 1))].X - rect.X) / (float)rect.Width;  							float unitX = this.ParentView.GetUnitAtPos(rect.X + relativeX * rect.Width);  							float localOpacity = this.GetEnvelopeVisibility(  								this.model.GetMaxValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius) -   								this.model.GetMinValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius));  							baseBlend[i] = new KeyValuePair<float'float>(relativeX' localOpacity);  						}    						this.cacheEnvelopeGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);  						this.cacheCurveGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);    						const int Samples = 21;  						const int SamplesHalf = Samples / 2;  						const int BlendSamplesPerChunk = 4;  						float highestOpacity = 0.0f;  						ColorBlend envelopeBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						ColorBlend curveBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						for (int i = 0; i < envelopeBlend.Colors.Length; i++)  						{  							int firstIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk - SamplesHalf' 0)' baseBlend.Length - 1);  							int lastIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk + SamplesHalf' 0)' baseBlend.Length - 1);  							float sum = 0.0f;  							for (int j = firstIndex; j <= lastIndex; j++)  							{  								sum += baseBlend[j].Value;  							}  							float localOpacity = sum / (float)(1 + lastIndex - firstIndex);  							highestOpacity = Math.Max(highestOpacity' localOpacity);  							envelopeBlend.Colors[i] = Color.FromArgb((int)(localOpacity * this.envelopeOpacity * 255.0f)' this.baseColor);  							envelopeBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  							curveBlend.Colors[i] = Color.FromArgb((int)((1.0f - localOpacity) * (1.0f - localOpacity) * this.curveOpacity * 255.0f)' this.baseColor);  							curveBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  						}    						if (highestOpacity <= 0.05f)  						{  							this.cacheEnvelopeGradient = null;  							this.cacheCurveGradient = null;  							this.skipEnvelope = true;  						}  						else  						{  							envelopeBlend.Positions[0] = 0.0f;  							envelopeBlend.Positions[envelopeBlend.Positions.Length - 1] = 1.0f;  							this.cacheEnvelopeGradient.InterpolationColors = envelopeBlend;  							curveBlend.Positions[0] = 0.0f;  							curveBlend.Positions[curveBlend.Positions.Length - 1] = 1.0f;  							this.cacheCurveGradient.InterpolationColors = curveBlend;  						}  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The following statement contains a magic number: if (this.curveCacheDirty)  			{  				// Begin a little sooner' so interpolation / error checking can gather some data  				beginUnitX -= minUnitStep * 5.0f;    				// Determine sample points  				PointF[] curvePointsEnvMax = null;  				PointF[] curvePointsEnvMin = null;  				if (this.curveOpacity > 0.0f)  				{  					this.cacheCurveVertices = this.GetCurvePoints(rect' e.GetAdjustedQuality(this.parentTrack.CurvePrecision)' this.model.GetValueAtX' minPixelStep' beginUnitX' endUnitX);  				}  				if (this.envelopeOpacity > 0.0f && !this.skipEnvelope)  				{  					float envelopeUnitRadius = this.ParentView.ConvertPixelsToUnits(EnvelopeBasePixelRadius);  					float minEnvelopeStepFactor;  					switch (e.GetAdjustedQuality(this.parentTrack.EnvelopePrecision))  					{  						case QualityLevel.High:  							minEnvelopeStepFactor = 0.1f;  							break;  						default:  						case QualityLevel.Medium:  							minEnvelopeStepFactor = 0.5f;  							break;  						case QualityLevel.Low:  							minEnvelopeStepFactor = 1.0f;  							break;  					}  					float envelopePixelStep = minEnvelopeStepFactor * EnvelopeBasePixelRadius;  					float envelopeUnitStep = minEnvelopeStepFactor * envelopeUnitRadius;  					curvePointsEnvMax = this.GetCurvePoints(  						rect'   						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMaxValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'   						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));  					curvePointsEnvMin = this.GetCurvePoints(  						rect'    						e.GetAdjustedQuality(this.parentTrack.CurvePrecision)'  						x => this.model.GetMinValueInRange(x - envelopeUnitRadius' x + envelopeUnitRadius)'   						envelopePixelStep'  						envelopeUnitStep * (int)(beginUnitX / envelopeUnitStep)'   						envelopeUnitStep * ((int)(endUnitX / envelopeUnitStep) + 1));    					if (curvePointsEnvMax == null || curvePointsEnvMin == null || curvePointsEnvMax.Length + curvePointsEnvMin.Length < 3)  						this.skipEnvelope = true;  				}    				if (curvePointsEnvMax != null && curvePointsEnvMin != null && curvePointsEnvMax.Length + curvePointsEnvMin.Length >= 3)  				{  					// Calculate the visible envelope polygon  					this.cacheEnvelopeVertices = new PointF[curvePointsEnvMax.Length + curvePointsEnvMin.Length];  					for (int i = 0; i < curvePointsEnvMax.Length; i++)  					{  						this.cacheEnvelopeVertices[i] = curvePointsEnvMax[i];  					}  					for (int i = 0; i < curvePointsEnvMin.Length; i++)  					{  						this.cacheEnvelopeVertices[curvePointsEnvMax.Length + i] = curvePointsEnvMin[curvePointsEnvMin.Length - i - 1];  					}    					// Calculate the envelope and curve gradients  					if (this.cacheCurveVertices != null)  					{  						float varianceUnitRadius = this.ParentView.ConvertPixelsToUnits(0.5f);  						KeyValuePair<float'float>[] baseBlend = new KeyValuePair<float'float>[Math.Max(this.cacheCurveVertices.Length' 2)];  						for (int i = 0; i < baseBlend.Length; i++)  						{  							float relativeX = (float)(this.cacheCurveVertices[(int)((float)i * (this.cacheCurveVertices.Length - 1) / (float)(baseBlend.Length - 1))].X - rect.X) / (float)rect.Width;  							float unitX = this.ParentView.GetUnitAtPos(rect.X + relativeX * rect.Width);  							float localOpacity = this.GetEnvelopeVisibility(  								this.model.GetMaxValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius) -   								this.model.GetMinValueInRange(unitX - varianceUnitRadius' unitX + varianceUnitRadius));  							baseBlend[i] = new KeyValuePair<float'float>(relativeX' localOpacity);  						}    						this.cacheEnvelopeGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);  						this.cacheCurveGradient = new LinearGradientBrush(rect' Color.Transparent' Color.Transparent' LinearGradientMode.Horizontal);    						const int Samples = 21;  						const int SamplesHalf = Samples / 2;  						const int BlendSamplesPerChunk = 4;  						float highestOpacity = 0.0f;  						ColorBlend envelopeBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						ColorBlend curveBlend = new ColorBlend(Math.Max(baseBlend.Length * BlendSamplesPerChunk / Samples' 2));  						for (int i = 0; i < envelopeBlend.Colors.Length; i++)  						{  							int firstIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk - SamplesHalf' 0)' baseBlend.Length - 1);  							int lastIndex = Math.Min(Math.Max(i * Samples / BlendSamplesPerChunk + SamplesHalf' 0)' baseBlend.Length - 1);  							float sum = 0.0f;  							for (int j = firstIndex; j <= lastIndex; j++)  							{  								sum += baseBlend[j].Value;  							}  							float localOpacity = sum / (float)(1 + lastIndex - firstIndex);  							highestOpacity = Math.Max(highestOpacity' localOpacity);  							envelopeBlend.Colors[i] = Color.FromArgb((int)(localOpacity * this.envelopeOpacity * 255.0f)' this.baseColor);  							envelopeBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  							curveBlend.Colors[i] = Color.FromArgb((int)((1.0f - localOpacity) * (1.0f - localOpacity) * this.curveOpacity * 255.0f)' this.baseColor);  							curveBlend.Positions[i] = baseBlend[firstIndex + (lastIndex - firstIndex) / 2].Key;  						}    						if (highestOpacity <= 0.05f)  						{  							this.cacheEnvelopeGradient = null;  							this.cacheCurveGradient = null;  							this.skipEnvelope = true;  						}  						else  						{  							envelopeBlend.Positions[0] = 0.0f;  							envelopeBlend.Positions[envelopeBlend.Positions.Length - 1] = 1.0f;  							this.cacheEnvelopeGradient.InterpolationColors = envelopeBlend;  							curveBlend.Positions[0] = 0.0f;  							curveBlend.Positions[curveBlend.Positions.Length - 1] = 1.0f;  							this.cacheCurveGradient.InterpolationColors = curveBlend;  						}  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The following statement contains a magic number: if (this.cacheEnvelopeGradient != null && this.cacheEnvelopeVertices != null && this.cacheEnvelopeVertices.Length >= 3)  			{  				e.Graphics.FillPolygon(this.cacheEnvelopeGradient' this.cacheEnvelopeVertices);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintCurve,The following statement contains a magic number: if (this.cacheCurveVertices != null && this.cacheCurveVertices.Length >= 2)  			{  				Pen linePen;  				if (this.cacheCurveGradient != null)  				{  					linePen = new Pen(this.cacheCurveGradient);  				}  				else  				{  					linePen = new Pen(Color.FromArgb((int)(this.curveOpacity * 255.0f)' this.baseColor));  				}  				e.Graphics.DrawLines(linePen' this.cacheCurveVertices);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraph,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraph.cs,OnPaintBoundaries,The following statement contains a magic number: {  				Pen boundaryPen = new Pen(Color.FromArgb(128' this.baseColor));  				boundaryPen.DashStyle = DashStyle.Dash;  				e.Graphics.DrawLine(boundaryPen' beginX' rect.Top' beginX' rect.Bottom);  				e.Graphics.DrawLine(boundaryPen' endX' rect.Top' endX' rect.Bottom);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,UpdateMouseoverState,The following statement contains a magic number: foreach (TimelineViewGraph graph in this.graphList)  			{  				if (graph.Model.BeginTime > cursorUnits.X) continue;  				if (graph.Model.EndTime < cursorUnits.X) continue;    				float maxValue = graph.Model.GetMaxValueInRange(cursorUnits.X - unitsPerPixel.X * 2.5f' cursorUnits.X + unitsPerPixel.X * 2.5f);  				float minValue = graph.Model.GetMinValueInRange(cursorUnits.X - unitsPerPixel.X * 2.5f' cursorUnits.X + unitsPerPixel.X * 2.5f);  				float midValue = (maxValue + minValue) * 0.5f;  				float valueSpan = maxValue - minValue;  				valueSpan = Math.Max(valueSpan' unitsPerPixel.Y * 10);  				minValue = midValue - valueSpan * 0.5f;  				maxValue = midValue + valueSpan * 0.5f;  				if (cursorUnits.Y < minValue || cursorUnits.Y > maxValue) continue;    				float distance = Math.Abs(cursorUnits.Y - midValue);  				if (distance < minDistance)  				{  					this.mouseoverGraph = graph;  					minDistance = distance;  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,UpdateDisplayedGraphInfo,The following statement contains a magic number: foreach (TimelineViewGraph graph in this.graphList)  			{  				GraphAreaInfo info = new GraphAreaInfo();    				// Determine selection data  				if (selectionBeginTime != selectionEndTime)  				{  					if (graph.Model.BeginTime > selectionEndTime) continue;  					if (graph.Model.EndTime < selectionBeginTime) continue;    					info.BeginTime = selectionBeginTime;  					info.EndTime = selectionEndTime;  					info.MinValue = graph.Model.GetMinValueInRange(selectionBeginTime' selectionEndTime);  					info.MaxValue = graph.Model.GetMaxValueInRange(selectionBeginTime' selectionEndTime);  					info.EnvelopeVisibility = 1.0f;  					info.AverageValue = 0.0f;  					const int SampleCount = 10;  					float sampleBegin = Math.Max(selectionBeginTime' graph.Model.BeginTime);  					float sampleEnd = Math.Min(selectionEndTime' graph.Model.EndTime);  					float timeRadius = 0.5f * (sampleEnd - sampleBegin);  					float sampleRadius = timeRadius / (float)SampleCount;  					for (int i = 0; i < SampleCount; i++)  					{  						float sampleTime = sampleBegin + ((float)i / (float)(SampleCount - 1)) * 2.0f * timeRadius;  						float localMin = graph.Model.GetMinValueInRange(sampleTime - sampleRadius' sampleTime + sampleRadius);  						float localMax = graph.Model.GetMaxValueInRange(sampleTime - sampleRadius' sampleTime + sampleRadius);  						info.AverageValue += (localMin + localMax) * 0.5f;  					}  					info.AverageValue /= (float)SampleCount;  				}  				// Determine mouseover data  				else if (this.ParentView.MouseoverContent)  				{  					if (graph.Model.BeginTime > mouseoverTime) continue;  					if (graph.Model.EndTime < mouseoverTime) continue;    					info.BeginTime = mouseoverTime;  					info.EndTime = mouseoverTime;  					info.MinValue = graph.Model.GetMinValueInRange(mouseoverTime - unitEnvelopeRadius' mouseoverTime + unitEnvelopeRadius);  					info.MaxValue = graph.Model.GetMaxValueInRange(mouseoverTime - unitEnvelopeRadius' mouseoverTime + unitEnvelopeRadius);  					info.EnvelopeVisibility = Math.Min(1.0f' 10.0f * graph.GetEnvelopeVisibility(  						graph.Model.GetMaxValueInRange(mouseoverTime - unitPixelRadius * 0.5f' mouseoverTime + unitPixelRadius * 0.5f) -   						graph.Model.GetMinValueInRange(mouseoverTime - unitPixelRadius * 0.5f' mouseoverTime + unitPixelRadius * 0.5f)));  					if (info.EnvelopeVisibility > 0.05f)  					{  						info.AverageValue = 0.0f;  						const int SampleCount = 10;  						float sampleRadius = unitEnvelopeRadius / (float)SampleCount;  						for (int i = 0; i < SampleCount; i++)  						{  							float sampleTime = mouseoverTime - unitEnvelopeRadius + ((float)i / (float)(SampleCount - 1)) * 2.0f * unitEnvelopeRadius;  							float localMin = graph.Model.GetMinValueInRange(sampleTime - sampleRadius' sampleTime + sampleRadius);  							float localMax = graph.Model.GetMaxValueInRange(sampleTime - sampleRadius' sampleTime + sampleRadius);  							info.AverageValue += (localMin + localMax) * 0.5f;  						}  						info.AverageValue /= (float)SampleCount;  					}  					else  					{  						info.AverageValue = graph.Model.GetValueAtX(mouseoverTime);  					}  				}    				this.graphDisplayedInfo[graph] = info;  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,UpdateDisplayedGraphInfo,The following statement contains a magic number: foreach (TimelineViewGraph graph in this.graphList)  			{  				GraphAreaInfo info = new GraphAreaInfo();    				// Determine selection data  				if (selectionBeginTime != selectionEndTime)  				{  					if (graph.Model.BeginTime > selectionEndTime) continue;  					if (graph.Model.EndTime < selectionBeginTime) continue;    					info.BeginTime = selectionBeginTime;  					info.EndTime = selectionEndTime;  					info.MinValue = graph.Model.GetMinValueInRange(selectionBeginTime' selectionEndTime);  					info.MaxValue = graph.Model.GetMaxValueInRange(selectionBeginTime' selectionEndTime);  					info.EnvelopeVisibility = 1.0f;  					info.AverageValue = 0.0f;  					const int SampleCount = 10;  					float sampleBegin = Math.Max(selectionBeginTime' graph.Model.BeginTime);  					float sampleEnd = Math.Min(selectionEndTime' graph.Model.EndTime);  					float timeRadius = 0.5f * (sampleEnd - sampleBegin);  					float sampleRadius = timeRadius / (float)SampleCount;  					for (int i = 0; i < SampleCount; i++)  					{  						float sampleTime = sampleBegin + ((float)i / (float)(SampleCount - 1)) * 2.0f * timeRadius;  						float localMin = graph.Model.GetMinValueInRange(sampleTime - sampleRadius' sampleTime + sampleRadius);  						float localMax = graph.Model.GetMaxValueInRange(sampleTime - sampleRadius' sampleTime + sampleRadius);  						info.AverageValue += (localMin + localMax) * 0.5f;  					}  					info.AverageValue /= (float)SampleCount;  				}  				// Determine mouseover data  				else if (this.ParentView.MouseoverContent)  				{  					if (graph.Model.BeginTime > mouseoverTime) continue;  					if (graph.Model.EndTime < mouseoverTime) continue;    					info.BeginTime = mouseoverTime;  					info.EndTime = mouseoverTime;  					info.MinValue = graph.Model.GetMinValueInRange(mouseoverTime - unitEnvelopeRadius' mouseoverTime + unitEnvelopeRadius);  					info.MaxValue = graph.Model.GetMaxValueInRange(mouseoverTime - unitEnvelopeRadius' mouseoverTime + unitEnvelopeRadius);  					info.EnvelopeVisibility = Math.Min(1.0f' 10.0f * graph.GetEnvelopeVisibility(  						graph.Model.GetMaxValueInRange(mouseoverTime - unitPixelRadius * 0.5f' mouseoverTime + unitPixelRadius * 0.5f) -   						graph.Model.GetMinValueInRange(mouseoverTime - unitPixelRadius * 0.5f' mouseoverTime + unitPixelRadius * 0.5f)));  					if (info.EnvelopeVisibility > 0.05f)  					{  						info.AverageValue = 0.0f;  						const int SampleCount = 10;  						float sampleRadius = unitEnvelopeRadius / (float)SampleCount;  						for (int i = 0; i < SampleCount; i++)  						{  							float sampleTime = mouseoverTime - unitEnvelopeRadius + ((float)i / (float)(SampleCount - 1)) * 2.0f * unitEnvelopeRadius;  							float localMin = graph.Model.GetMinValueInRange(sampleTime - sampleRadius' sampleTime + sampleRadius);  							float localMax = graph.Model.GetMaxValueInRange(sampleTime - sampleRadius' sampleTime + sampleRadius);  							info.AverageValue += (localMin + localMax) * 0.5f;  						}  						info.AverageValue /= (float)SampleCount;  					}  					else  					{  						info.AverageValue = graph.Model.GetValueAtX(mouseoverTime);  					}  				}    				this.graphDisplayedInfo[graph] = info;  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnCursorMove,The following statement contains a magic number: if (e.CursorUnitSpeed != 0.0f)  			{  				float unitsPerPixel = this.ParentView.ConvertPixelsToUnits(1.0f);  				this.Invalidate(e.CursorUnits - unitsPerPixel * 6' e.CursorUnits + unitsPerPixel * MaxGraphValueTextWidth);  				this.Invalidate(e.LastCursorUnits - unitsPerPixel * 6' e.LastCursorUnits + unitsPerPixel * MaxGraphValueTextWidth);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnCursorMove,The following statement contains a magic number: if (e.CursorUnitSpeed != 0.0f)  			{  				float unitsPerPixel = this.ParentView.ConvertPixelsToUnits(1.0f);  				this.Invalidate(e.CursorUnits - unitsPerPixel * 6' e.CursorUnits + unitsPerPixel * MaxGraphValueTextWidth);  				this.Invalidate(e.LastCursorUnits - unitsPerPixel * 6' e.LastCursorUnits + unitsPerPixel * MaxGraphValueTextWidth);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnCursorEnter,The following statement contains a magic number: this.Invalidate(e.CursorUnits - unitsPerPixel * 6' e.CursorUnits + unitsPerPixel * MaxGraphValueTextWidth);
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnCursorLeave,The following statement contains a magic number: this.Invalidate(e.LastCursorUnits - unitsPerPixel * 6' e.LastCursorUnits + unitsPerPixel * MaxGraphValueTextWidth);
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: int timeDecimals		= Math.Max(0' -(int)Math.Log10(visibleTimeSpan) + 2);
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: int valueDecimals		= Math.Max(0' -(int)Math.Log10(visibleValueSpan) + 2);
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,OnPaintOverlay,The following statement contains a magic number: if (this.ParentView.SelectionBeginTime != this.ParentView.SelectionEndTime)  			{  				// Draw begin and end time values  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionEndTime);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionEndPixels + 2'   						e.TargetRect.Y + 1'   						textFormat);  				}  				{  					string timeText = string.Format(  						System.Globalization.CultureInfo.InvariantCulture'   						"{0:F" + timeDecimals + "}"'   						selectionBeginTime);  					SizeF textSize = e.Graphics.MeasureString(timeText' textFont);  					e.Graphics.DrawString(  						timeText'  						textFont'   						new SolidBrush(e.Renderer.ColorText)'   						(int)selectionBeginPixels - 2 - textSize.Width'   						e.TargetRect.Y + 1'   						textFormat);  				}    				// Draw display value overlay  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;  					  					// Draw min' max and average values  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minPixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxPixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);    					Color graphInfoColor = graph.BaseColor.ScaleBrightness(0.75f);  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						e.Graphics.FillRectangle(new SolidBrush(graphInfoColor.ScaleAlpha(0.3f))' selectionBeginPixels' Math.Min(minPixels' maxPixels)' selectionEndPixels - selectionBeginPixels' Math.Abs(maxPixels - minPixels));  						e.Graphics.FillRectangle(brush' selectionBeginPixels' minPixels' selectionEndPixels - selectionBeginPixels' 1);  						e.Graphics.FillRectangle(brush' selectionBeginPixels' maxPixels' selectionEndPixels - selectionBeginPixels' 1);  					}    					// Draw min and max texts  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MinValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' minPixels + 2);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = minPixels - 2 - textSize.Height;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  					{  						SolidBrush brush = new SolidBrush(graphInfoColor);  						string text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + valueDecimals + "}"'   							info.MaxValue);  						SizeF textSize = e.Graphics.MeasureString(text' textFont);  						PointF textPos;  						textPos = new PointF((selectionBeginPixels + selectionEndPixels) * 0.5f - textSize.Width * 0.5f' maxPixels - 2 - textSize.Height);  						if (textSize.Width > (selectionEndPixels - selectionBeginPixels) - 4)  							textPos.X = selectionEndPixels + 2;  						if (textSize.Height * 2 <= Math.Abs(maxPixels - minPixels) - 4)  							textPos.Y = maxPixels + 2;  						e.Graphics.DrawString(text' textFont' brush' textPos.X' textPos.Y' textFormat);  					}  				}  			}  			// Display mouseover data / effects  			else if (this.ParentView.MouseoverContent && this.ParentView.ActiveMouseAction == TimelineView.MouseAction.None)  			{  				// Accumulate graph value text information  				Rectangle totalTextRect = Rectangle.Empty;  				List<GraphValueTextInfo> textInfoList = new List<GraphValueTextInfo>();  				{  					int textYAdv = 0;    					// Time text  					{  						GraphValueTextInfo textInfo;  						textInfo.Text = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mouseoverTime);  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = e.Renderer.ColorText;    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}  						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}    					// Graph texts  					foreach (TimelineViewGraph graph in this.graphList)  					{  						GraphAreaInfo info;  						if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    						GraphValueTextInfo textInfo;  						if (info.EnvelopeVisibility < 0.25f)  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"{0:F" + valueDecimals + "}"'   								Math.Round(info.AverageValue' 2));  						}  						else  						{  							textInfo.Text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'   								"[{0:F" + valueDecimals + "}' {1:F" + valueDecimals + "}]"' Math.Round(info.MinValue' 2)'   								Math.Round(info.MaxValue' 2));  						}  						textInfo.TargetRect = new Rectangle((int)mouseoverPixels + 2' e.TargetRect.Y + textYAdv + 1' MaxGraphValueTextWidth - 2' e.TargetRect.Height - textYAdv);  						SizeF textSize = e.Graphics.MeasureString(textInfo.Text' textFont' textInfo.TargetRect.Size' textFormat);  						textInfo.ActualRect = new Rectangle(textInfo.TargetRect.X' textInfo.TargetRect.Y' (int)textSize.Width' (int)textSize.Height);  						textInfo.Color = graph.BaseColor.ScaleBrightness(0.75f);    						if (totalTextRect.IsEmpty)  						{  							totalTextRect = textInfo.ActualRect;  						}  						else  						{  							totalTextRect.X = Math.Min(totalTextRect.X' textInfo.ActualRect.X);  							totalTextRect.Y = Math.Min(totalTextRect.Y' textInfo.ActualRect.Y);  							totalTextRect.Width = Math.Max(totalTextRect.Width' textInfo.ActualRect.Right - totalTextRect.Left);  							totalTextRect.Height = Math.Max(totalTextRect.Height' textInfo.ActualRect.Bottom - totalTextRect.Top);  						}    						textInfoList.Add(textInfo);  						textYAdv += (int)textSize.Height;  					}  				}    				// Draw the texts background rect  				if (!totalTextRect.IsEmpty)  				{  					e.Graphics.FillRectangle(  						new SolidBrush(e.Renderer.ColorLightBackground.ScaleAlpha(0.5f))'   						totalTextRect.X'  						totalTextRect.Y'  						totalTextRect.Width + 2'  						totalTextRect.Height + 2);  				}    				// Draw graph mouseover visualizations  				foreach (TimelineViewGraph graph in this.graphList)  				{  					GraphAreaInfo info;  					if (!this.graphDisplayedInfo.TryGetValue(graph' out info)) continue;    					// Determine mouseover data  					float averagePixels = e.TargetRect.Y + this.GetPosAtUnit(info.AverageValue);  					float minEnvelopePixels = Math.Min(e.TargetRect.Y + this.GetPosAtUnit(info.MinValue)' e.TargetRect.Bottom - 2);  					float maxEnvelopePixels = Math.Max(e.TargetRect.Y + this.GetPosAtUnit(info.MaxValue)' e.TargetRect.Top + 1);  					  					Color valueBaseColor = graph.BaseColor.ScaleBrightness(0.75f);    					// Draw value range  					if (info.EnvelopeVisibility > 0.05f)  					{  						SolidBrush brush = new SolidBrush(valueBaseColor.ScaleAlpha(info.EnvelopeVisibility));  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' minEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels - 3' maxEnvelopePixels' 7' 1);  						e.Graphics.FillRectangle(brush' mouseoverPixels' maxEnvelopePixels' 1' minEnvelopePixels - maxEnvelopePixels);  					}    					// Draw average / exact value knob  					if (info.EnvelopeVisibility < 0.95f)  					{  						e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  						e.Graphics.FillEllipse(  							new SolidBrush(valueBaseColor.ScaleAlpha(1.0f - info.EnvelopeVisibility))'   							mouseoverPixels - 2.5f'   							averagePixels - 2.5f'   							5'   							5);  						e.Graphics.SmoothingMode = SmoothingMode.Default;  					}  				}    				// Draw value information texts  				foreach (GraphValueTextInfo textInfo in textInfoList)  				{  					e.Graphics.DrawString(textInfo.Text' textFont' new SolidBrush(textInfo.Color)' textInfo.TargetRect' textFormat);  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,The following statement contains a magic number: int valueDecimals = Math.Max(0' -(int)Math.Log10(visibleValueSpan) + 2);
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,The following statement contains a magic number: {  				float markingRatio = 0.5f + 0.5f * (1.0f - Math.Max(Math.Min((float)rect.Height / 32.0f' 1.0f)' 0.0f));  				rectTrackName = new Rectangle(  					rect.X'   					rect.Y'   					Math.Min(rect.Width' r.FontRegular.Height + 2)'   					rect.Height);  				rectUnitMarkings = new Rectangle(  					rect.Right - Math.Min((int)(rect.Width * markingRatio)' 16)'  					rect.Y'  					Math.Min((int)(rect.Width * markingRatio)' 16)'  					rect.Height);  				int maxUnitWidth = Math.Max(Math.Max(rectUnitMarkings.Width' (int)verticalTopTextSize.Width + 2)' (int)verticalBottomTextSize.Width + 2);  				rectUnitRuler = new Rectangle(  					rect.Right - maxUnitWidth'  					rect.Y'  					maxUnitWidth'  					rect.Height);    				if (!left)  				{  					rectTrackName.X		= rect.Right - (rectTrackName	.X	- rect.Left) - rectTrackName	.Width;  					rectUnitMarkings.X	= rect.Right - (rectUnitMarkings.X	- rect.Left) - rectUnitMarkings	.Width;  					rectUnitRuler.X		= rect.Right - (rectUnitRuler	.X	- rect.Left) - rectUnitRuler	.Width;  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,The following statement contains a magic number: {  				float markingRatio = 0.5f + 0.5f * (1.0f - Math.Max(Math.Min((float)rect.Height / 32.0f' 1.0f)' 0.0f));  				rectTrackName = new Rectangle(  					rect.X'   					rect.Y'   					Math.Min(rect.Width' r.FontRegular.Height + 2)'   					rect.Height);  				rectUnitMarkings = new Rectangle(  					rect.Right - Math.Min((int)(rect.Width * markingRatio)' 16)'  					rect.Y'  					Math.Min((int)(rect.Width * markingRatio)' 16)'  					rect.Height);  				int maxUnitWidth = Math.Max(Math.Max(rectUnitMarkings.Width' (int)verticalTopTextSize.Width + 2)' (int)verticalBottomTextSize.Width + 2);  				rectUnitRuler = new Rectangle(  					rect.Right - maxUnitWidth'  					rect.Y'  					maxUnitWidth'  					rect.Height);    				if (!left)  				{  					rectTrackName.X		= rect.Right - (rectTrackName	.X	- rect.Left) - rectTrackName	.Width;  					rectUnitMarkings.X	= rect.Right - (rectUnitMarkings.X	- rect.Left) - rectUnitMarkings	.Width;  					rectUnitRuler.X		= rect.Right - (rectUnitRuler	.X	- rect.Left) - rectUnitRuler	.Width;  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,The following statement contains a magic number: {  				float markingRatio = 0.5f + 0.5f * (1.0f - Math.Max(Math.Min((float)rect.Height / 32.0f' 1.0f)' 0.0f));  				rectTrackName = new Rectangle(  					rect.X'   					rect.Y'   					Math.Min(rect.Width' r.FontRegular.Height + 2)'   					rect.Height);  				rectUnitMarkings = new Rectangle(  					rect.Right - Math.Min((int)(rect.Width * markingRatio)' 16)'  					rect.Y'  					Math.Min((int)(rect.Width * markingRatio)' 16)'  					rect.Height);  				int maxUnitWidth = Math.Max(Math.Max(rectUnitMarkings.Width' (int)verticalTopTextSize.Width + 2)' (int)verticalBottomTextSize.Width + 2);  				rectUnitRuler = new Rectangle(  					rect.Right - maxUnitWidth'  					rect.Y'  					maxUnitWidth'  					rect.Height);    				if (!left)  				{  					rectTrackName.X		= rect.Right - (rectTrackName	.X	- rect.Left) - rectTrackName	.Width;  					rectUnitMarkings.X	= rect.Right - (rectUnitMarkings.X	- rect.Left) - rectUnitMarkings	.Width;  					rectUnitRuler.X		= rect.Right - (rectUnitRuler	.X	- rect.Left) - rectUnitRuler	.Width;  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,The following statement contains a magic number: {  				float markingRatio = 0.5f + 0.5f * (1.0f - Math.Max(Math.Min((float)rect.Height / 32.0f' 1.0f)' 0.0f));  				rectTrackName = new Rectangle(  					rect.X'   					rect.Y'   					Math.Min(rect.Width' r.FontRegular.Height + 2)'   					rect.Height);  				rectUnitMarkings = new Rectangle(  					rect.Right - Math.Min((int)(rect.Width * markingRatio)' 16)'  					rect.Y'  					Math.Min((int)(rect.Width * markingRatio)' 16)'  					rect.Height);  				int maxUnitWidth = Math.Max(Math.Max(rectUnitMarkings.Width' (int)verticalTopTextSize.Width + 2)' (int)verticalBottomTextSize.Width + 2);  				rectUnitRuler = new Rectangle(  					rect.Right - maxUnitWidth'  					rect.Y'  					maxUnitWidth'  					rect.Height);    				if (!left)  				{  					rectTrackName.X		= rect.Right - (rectTrackName	.X	- rect.Left) - rectTrackName	.Width;  					rectUnitMarkings.X	= rect.Right - (rectUnitMarkings.X	- rect.Left) - rectUnitMarkings	.Width;  					rectUnitRuler.X		= rect.Right - (rectUnitRuler	.X	- rect.Left) - rectUnitRuler	.Width;  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,The following statement contains a magic number: {  				float markingRatio = 0.5f + 0.5f * (1.0f - Math.Max(Math.Min((float)rect.Height / 32.0f' 1.0f)' 0.0f));  				rectTrackName = new Rectangle(  					rect.X'   					rect.Y'   					Math.Min(rect.Width' r.FontRegular.Height + 2)'   					rect.Height);  				rectUnitMarkings = new Rectangle(  					rect.Right - Math.Min((int)(rect.Width * markingRatio)' 16)'  					rect.Y'  					Math.Min((int)(rect.Width * markingRatio)' 16)'  					rect.Height);  				int maxUnitWidth = Math.Max(Math.Max(rectUnitMarkings.Width' (int)verticalTopTextSize.Width + 2)' (int)verticalBottomTextSize.Width + 2);  				rectUnitRuler = new Rectangle(  					rect.Right - maxUnitWidth'  					rect.Y'  					maxUnitWidth'  					rect.Height);    				if (!left)  				{  					rectTrackName.X		= rect.Right - (rectTrackName	.X	- rect.Left) - rectTrackName	.Width;  					rectUnitMarkings.X	= rect.Right - (rectUnitMarkings.X	- rect.Left) - rectUnitMarkings	.Width;  					rectUnitRuler.X		= rect.Right - (rectUnitRuler	.X	- rect.Left) - rectUnitRuler	.Width;  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,The following statement contains a magic number: {  				Rectangle overlap = rectUnitMarkings;  				overlap.Intersect(rectTrackName);  				float overlapAmount = Math.Max(Math.Min((float)overlap.Width / (float)rectTrackName.Width' 1.0f)' 0.0f);  				float textOverlapAlpha = (1.0f - (overlapAmount));    				StringFormat format = new StringFormat(StringFormat.GenericDefault);  				format.Trimming = StringTrimming.EllipsisCharacter;    				SizeF textSize = g.MeasureString(this.Model.TrackName' r.FontRegular' rectTrackName.Height' format);    				var state = g.Save();  				g.TranslateTransform(  					rectTrackName.X + (int)textSize.Height + 2'   					rectTrackName.Y);  				g.RotateTransform(90);  				g.DrawString(  					this.Model.TrackName'   					r.FontRegular'   					new SolidBrush(Color.FromArgb((int)(textOverlapAlpha * 255)' r.ColorText))'   					new Rectangle(0' 0' rectTrackName.Height' rectTrackName.Width)'   					format);  				g.Restore(state);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,The following statement contains a magic number: {  				Rectangle overlap = rectUnitMarkings;  				overlap.Intersect(rectTrackName);  				float overlapAmount = Math.Max(Math.Min((float)overlap.Width / (float)rectTrackName.Width' 1.0f)' 0.0f);  				float textOverlapAlpha = (1.0f - (overlapAmount));    				StringFormat format = new StringFormat(StringFormat.GenericDefault);  				format.Trimming = StringTrimming.EllipsisCharacter;    				SizeF textSize = g.MeasureString(this.Model.TrackName' r.FontRegular' rectTrackName.Height' format);    				var state = g.Save();  				g.TranslateTransform(  					rectTrackName.X + (int)textSize.Height + 2'   					rectTrackName.Y);  				g.RotateTransform(90);  				g.DrawString(  					this.Model.TrackName'   					r.FontRegular'   					new SolidBrush(Color.FromArgb((int)(textOverlapAlpha * 255)' r.ColorText))'   					new Rectangle(0' 0' rectTrackName.Height' rectTrackName.Width)'   					format);  				g.Restore(state);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,The following statement contains a magic number: {  				Rectangle overlap = rectUnitMarkings;  				overlap.Intersect(rectTrackName);  				float overlapAmount = Math.Max(Math.Min((float)overlap.Width / (float)rectTrackName.Width' 1.0f)' 0.0f);  				float textOverlapAlpha = (1.0f - (overlapAmount));    				StringFormat format = new StringFormat(StringFormat.GenericDefault);  				format.Trimming = StringTrimming.EllipsisCharacter;    				SizeF textSize = g.MeasureString(this.Model.TrackName' r.FontRegular' rectTrackName.Height' format);    				var state = g.Save();  				g.TranslateTransform(  					rectTrackName.X + (int)textSize.Height + 2'   					rectTrackName.Y);  				g.RotateTransform(90);  				g.DrawString(  					this.Model.TrackName'   					r.FontRegular'   					new SolidBrush(Color.FromArgb((int)(textOverlapAlpha * 255)' r.ColorText))'   					new Rectangle(0' 0' rectTrackName.Height' rectTrackName.Width)'   					format);  				g.Restore(state);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,The following statement contains a magic number: {  				Pen bigLinePen = new Pen(new SolidBrush(r.ColorRulerMarkMajor));  				Pen medLinePen = new Pen(new SolidBrush(r.ColorRulerMarkRegular));  				Pen minLinePen = new Pen(new SolidBrush(r.ColorRulerMarkMinor));    				// Static Top and Bottom marks  				SizeF textSize;  				textSize = g.MeasureString(verticalTopText' r.FontSmall);  				g.DrawString(verticalTopText' r.FontSmall' new SolidBrush(r.ColorText)' left ? rectUnitMarkings.Right - textSize.Width : rectUnitMarkings.Left' rectUnitMarkings.Top);  				textSize = g.MeasureString(verticalBottomText' r.FontSmall);  				g.DrawString(verticalBottomText' r.FontSmall' new SolidBrush(r.ColorText)' left ? rectUnitMarkings.Right - textSize.Width : rectUnitMarkings.Left' rectUnitMarkings.Bottom - textSize.Height - 1);    				// Dynamic Inbetween marks  				foreach (TimelineViewRulerMark mark in this.GetVisibleRulerMarks())  				{  					float markLen;  					Pen markPen;  					bool bigMark;  					switch (mark.Weight)  					{  						case TimelineViewRulerMarkWeight.Major:  							markLen = 0.5f;  							markPen = bigLinePen;  							bigMark = true;  							break;  						default:  						case TimelineViewRulerMarkWeight.Regular:  						case TimelineViewRulerMarkWeight.Minor:  							markLen = 0.25f;  							markPen = medLinePen;  							bigMark = false;  							break;  					}    					int borderDistInner = r.FontSmall.Height / 2;  					int borderDistOuter = r.FontSmall.Height / 2 + 15;  					float borderDist = (float)Math.Min(Math.Abs(mark.PixelValue - rect.Top)' Math.Abs(mark.PixelValue - rect.Bottom));  					  					float markTopX;  					float markBottomX;  					if (left)  					{  						markTopX = rectUnitMarkings.Right - markLen * rectUnitMarkings.Width;  						markBottomX = rectUnitMarkings.Right;  					}  					else  					{  						markTopX = rectUnitMarkings.Left;  						markBottomX = rectUnitMarkings.Left + markLen * rectUnitMarkings.Width;  					}    					if (borderDist > borderDistInner)  					{  						float alpha = Math.Min(1.0f' (float)(borderDist - borderDistInner) / (float)(borderDistOuter - borderDistInner));  						Color markColor = Color.FromArgb((int)(alpha * markPen.Color.A)' markPen.Color);  						Color textColor = Color.FromArgb((int)(alpha * markPen.Color.A)' r.ColorText);    						g.DrawLine(new Pen(markColor)' (int)markTopX' (int)mark.PixelValue' (int)markBottomX' (int)mark.PixelValue);    						if (bigMark)  						{  							string text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'  								"{0:F" + valueDecimals + "}"'   								mark.UnitValue);  							textSize = g.MeasureString(text' r.FontSmall);  							g.DrawString(  								text'   								r.FontSmall'   								new SolidBrush(textColor)'   								left ? markTopX - textSize.Width : markBottomX'   								mark.PixelValue - textSize.Height * 0.5f);  						}  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,The following statement contains a magic number: {  				Pen bigLinePen = new Pen(new SolidBrush(r.ColorRulerMarkMajor));  				Pen medLinePen = new Pen(new SolidBrush(r.ColorRulerMarkRegular));  				Pen minLinePen = new Pen(new SolidBrush(r.ColorRulerMarkMinor));    				// Static Top and Bottom marks  				SizeF textSize;  				textSize = g.MeasureString(verticalTopText' r.FontSmall);  				g.DrawString(verticalTopText' r.FontSmall' new SolidBrush(r.ColorText)' left ? rectUnitMarkings.Right - textSize.Width : rectUnitMarkings.Left' rectUnitMarkings.Top);  				textSize = g.MeasureString(verticalBottomText' r.FontSmall);  				g.DrawString(verticalBottomText' r.FontSmall' new SolidBrush(r.ColorText)' left ? rectUnitMarkings.Right - textSize.Width : rectUnitMarkings.Left' rectUnitMarkings.Bottom - textSize.Height - 1);    				// Dynamic Inbetween marks  				foreach (TimelineViewRulerMark mark in this.GetVisibleRulerMarks())  				{  					float markLen;  					Pen markPen;  					bool bigMark;  					switch (mark.Weight)  					{  						case TimelineViewRulerMarkWeight.Major:  							markLen = 0.5f;  							markPen = bigLinePen;  							bigMark = true;  							break;  						default:  						case TimelineViewRulerMarkWeight.Regular:  						case TimelineViewRulerMarkWeight.Minor:  							markLen = 0.25f;  							markPen = medLinePen;  							bigMark = false;  							break;  					}    					int borderDistInner = r.FontSmall.Height / 2;  					int borderDistOuter = r.FontSmall.Height / 2 + 15;  					float borderDist = (float)Math.Min(Math.Abs(mark.PixelValue - rect.Top)' Math.Abs(mark.PixelValue - rect.Bottom));  					  					float markTopX;  					float markBottomX;  					if (left)  					{  						markTopX = rectUnitMarkings.Right - markLen * rectUnitMarkings.Width;  						markBottomX = rectUnitMarkings.Right;  					}  					else  					{  						markTopX = rectUnitMarkings.Left;  						markBottomX = rectUnitMarkings.Left + markLen * rectUnitMarkings.Width;  					}    					if (borderDist > borderDistInner)  					{  						float alpha = Math.Min(1.0f' (float)(borderDist - borderDistInner) / (float)(borderDistOuter - borderDistInner));  						Color markColor = Color.FromArgb((int)(alpha * markPen.Color.A)' markPen.Color);  						Color textColor = Color.FromArgb((int)(alpha * markPen.Color.A)' r.ColorText);    						g.DrawLine(new Pen(markColor)' (int)markTopX' (int)mark.PixelValue' (int)markBottomX' (int)mark.PixelValue);    						if (bigMark)  						{  							string text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'  								"{0:F" + valueDecimals + "}"'   								mark.UnitValue);  							textSize = g.MeasureString(text' r.FontSmall);  							g.DrawString(  								text'   								r.FontSmall'   								new SolidBrush(textColor)'   								left ? markTopX - textSize.Width : markBottomX'   								mark.PixelValue - textSize.Height * 0.5f);  						}  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewGraphTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewGraphTrack.cs,DrawRuler,The following statement contains a magic number: {  				Pen bigLinePen = new Pen(new SolidBrush(r.ColorRulerMarkMajor));  				Pen medLinePen = new Pen(new SolidBrush(r.ColorRulerMarkRegular));  				Pen minLinePen = new Pen(new SolidBrush(r.ColorRulerMarkMinor));    				// Static Top and Bottom marks  				SizeF textSize;  				textSize = g.MeasureString(verticalTopText' r.FontSmall);  				g.DrawString(verticalTopText' r.FontSmall' new SolidBrush(r.ColorText)' left ? rectUnitMarkings.Right - textSize.Width : rectUnitMarkings.Left' rectUnitMarkings.Top);  				textSize = g.MeasureString(verticalBottomText' r.FontSmall);  				g.DrawString(verticalBottomText' r.FontSmall' new SolidBrush(r.ColorText)' left ? rectUnitMarkings.Right - textSize.Width : rectUnitMarkings.Left' rectUnitMarkings.Bottom - textSize.Height - 1);    				// Dynamic Inbetween marks  				foreach (TimelineViewRulerMark mark in this.GetVisibleRulerMarks())  				{  					float markLen;  					Pen markPen;  					bool bigMark;  					switch (mark.Weight)  					{  						case TimelineViewRulerMarkWeight.Major:  							markLen = 0.5f;  							markPen = bigLinePen;  							bigMark = true;  							break;  						default:  						case TimelineViewRulerMarkWeight.Regular:  						case TimelineViewRulerMarkWeight.Minor:  							markLen = 0.25f;  							markPen = medLinePen;  							bigMark = false;  							break;  					}    					int borderDistInner = r.FontSmall.Height / 2;  					int borderDistOuter = r.FontSmall.Height / 2 + 15;  					float borderDist = (float)Math.Min(Math.Abs(mark.PixelValue - rect.Top)' Math.Abs(mark.PixelValue - rect.Bottom));  					  					float markTopX;  					float markBottomX;  					if (left)  					{  						markTopX = rectUnitMarkings.Right - markLen * rectUnitMarkings.Width;  						markBottomX = rectUnitMarkings.Right;  					}  					else  					{  						markTopX = rectUnitMarkings.Left;  						markBottomX = rectUnitMarkings.Left + markLen * rectUnitMarkings.Width;  					}    					if (borderDist > borderDistInner)  					{  						float alpha = Math.Min(1.0f' (float)(borderDist - borderDistInner) / (float)(borderDistOuter - borderDistInner));  						Color markColor = Color.FromArgb((int)(alpha * markPen.Color.A)' markPen.Color);  						Color textColor = Color.FromArgb((int)(alpha * markPen.Color.A)' r.ColorText);    						g.DrawLine(new Pen(markColor)' (int)markTopX' (int)mark.PixelValue' (int)markBottomX' (int)mark.PixelValue);    						if (bigMark)  						{  							string text = string.Format(  								System.Globalization.CultureInfo.InvariantCulture'  								"{0:F" + valueDecimals + "}"'   								mark.UnitValue);  							textSize = g.MeasureString(text' r.FontSmall);  							g.DrawString(  								text'   								r.FontSmall'   								new SolidBrush(textColor)'   								left ? markTopX - textSize.Width : markBottomX'   								mark.PixelValue - textSize.Height * 0.5f);  						}  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,TimelineView,The following statement contains a magic number: this.paintHqTimer.Interval = 50;
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,TimelineView,The following statement contains a magic number: this.mouseActionTimer.Interval = 16;
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,GetVisibleRulerMarks,The following statement contains a magic number: foreach (float markTime in EnumerateRulerMarks(rulerStep' unitScroll' beginTime' endTime' 10))  			{  				float markX = this.GetPosAtUnit(markTime);    				TimelineViewRulerMarkWeight weight;  				if ((lineIndex % 10) == 0)  					weight = TimelineViewRulerMarkWeight.Major;  				else if ((lineIndex % 5) == 0)  					weight = TimelineViewRulerMarkWeight.Regular;  				else  					weight = TimelineViewRulerMarkWeight.Minor;    				yield return new TimelineViewRulerMark(markTime' markX' weight);    				lineIndex++;  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,GetVisibleRulerMarks,The following statement contains a magic number: foreach (float markTime in EnumerateRulerMarks(rulerStep' unitScroll' beginTime' endTime' 10))  			{  				float markX = this.GetPosAtUnit(markTime);    				TimelineViewRulerMarkWeight weight;  				if ((lineIndex % 10) == 0)  					weight = TimelineViewRulerMarkWeight.Major;  				else if ((lineIndex % 5) == 0)  					weight = TimelineViewRulerMarkWeight.Regular;  				else  					weight = TimelineViewRulerMarkWeight.Minor;    				yield return new TimelineViewRulerMark(markTime' markX' weight);    				lineIndex++;  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,GetVisibleRulerMarks,The following statement contains a magic number: foreach (float markTime in EnumerateRulerMarks(rulerStep' unitScroll' beginTime' endTime' 10))  			{  				float markX = this.GetPosAtUnit(markTime);    				TimelineViewRulerMarkWeight weight;  				if ((lineIndex % 10) == 0)  					weight = TimelineViewRulerMarkWeight.Major;  				else if ((lineIndex % 5) == 0)  					weight = TimelineViewRulerMarkWeight.Regular;  				else  					weight = TimelineViewRulerMarkWeight.Minor;    				yield return new TimelineViewRulerMark(markTime' markX' weight);    				lineIndex++;  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,AdjustZoomLevel,The following statement contains a magic number: if (!this.ClientRectangle.Contains(targetPos)) targetPos = new Point(this.ClientRectangle.Width / 2' this.ClientRectangle.Height / 2);
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,AdjustZoomLevel,The following statement contains a magic number: if (!this.ClientRectangle.Contains(targetPos)) targetPos = new Point(this.ClientRectangle.Width / 2' this.ClientRectangle.Height / 2);
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,InvalidateContent,The following statement contains a magic number: float toPixels = Math.Min(this.GetPosAtUnit(toUnits)' invalidateRect.Right) + 2;
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,UpdateGeometry,The following statement contains a magic number: this.rectLeftSidebar = new Rectangle(  				0'  				this.areaTopRuler.Size - 1'  				this.areaLeftSidebar.Size + 1'  				this.ClientRectangle.Height - this.areaTopRuler.Size - this.areaBottomRuler.Size + 2);
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,UpdateGeometry,The following statement contains a magic number: this.rectRightSidebar = new Rectangle(  				this.ClientRectangle.Width - this.areaRightSidebar.Size - 1'  				this.areaTopRuler.Size - 1'  				this.areaRightSidebar.Size + 1'  				this.ClientRectangle.Height - this.areaTopRuler.Size - this.areaBottomRuler.Size + 2);
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,UpdateGeometry,The following statement contains a magic number: this.rectContentArea = new Rectangle(  				this.areaLeftSidebar.Size'  				this.areaTopRuler.Size - 1'  				this.ClientRectangle.Width - this.areaLeftSidebar.Size - this.areaRightSidebar.Size'  				this.ClientRectangle.Height - this.areaTopRuler.Size - this.areaBottomRuler.Size + 2);
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,UpdateContentHeight,The following statement contains a magic number: int additionalHeight = Math.Max(0' this.ClientSize.Height - contentBaseHeight - this.trackSpacing * (this.trackList.Count - 1) + 2);
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,UpdateContentHeight,The following statement contains a magic number: int contentHeight = this.areaTopRuler.Size + this.areaBottomRuler.Size + this.trackList.Sum(t => t.Height) + this.trackSpacing * (this.trackList.Count - 1) - 2;
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnModelTracksAdded,The following statement contains a magic number: foreach (ITimelineTrackModel trackModel in e.Tracks)  			{  				TimelineViewTrack track = this.GetTrackByModel(trackModel);  				if (track != null) continue;    				// Determine Type of the TimelineViewTrack matching the TimelineTrackModel  				if (availableViewTrackTypes == null)  				{  					availableViewTrackTypes = ReflectionHelper.FindConcreteTypes(typeof(TimelineViewTrack));  				}  				Type viewTrackType = null;  				foreach (Type trackType in availableViewTrackTypes)  				{  					foreach (TimelineModelViewAssignmentAttribute attrib in trackType.GetCustomAttributes(true).OfType<TimelineModelViewAssignmentAttribute>())  					{  						foreach (Type validModelType in attrib.ValidModelTypes)  						{  							if (validModelType.IsInstanceOfType(trackModel))  							{  								viewTrackType = trackType;  								break;  							}  						}  						if (viewTrackType != null) break;  					}  					if (viewTrackType != null) break;  				}  				if (viewTrackType == null) continue;    				// Create TimelineViewTrack accordingly  				track = viewTrackType.CreateInstanceOf() as TimelineViewTrack;  				track.Model = trackModel;  				track.BaseHeight = this.defaultTrackHeight;  				track.FillHeight = 100;    				this.trackList.Add(track);  				track.HeightSettingsChanged	+= this.track_HeightSettingsChanged;  				track.ContentWidthChanged	+= this.track_ContentWidthChanged;  				track.ParentView = this;  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnKeyDown,The following statement contains a magic number: if (e.KeyCode == Keys.Add)  			{  				this.AdjustZoomLevel(1.0f);  			}  			else if (e.KeyCode == Keys.Subtract)  			{  				this.AdjustZoomLevel(-1.0f);  			}  			else if (e.KeyCode == Keys.Left)  			{  				this.UnitScroll += this.ConvertPixelsToUnits(this.rectContentArea.Width) / 50.0f;  				this.InvalidateLowQuality();  				this.OnViewScrolled(EventArgs.Empty);  			}  			else if (e.KeyCode == Keys.Right)  			{  				this.UnitScroll -= this.ConvertPixelsToUnits(this.rectContentArea.Width) / 50.0f;  				this.InvalidateLowQuality();  				this.OnViewScrolled(EventArgs.Empty);  			}  			else if (e.KeyCode == Keys.Up)  			{  				this.AutoScrollPosition = new Point(-this.AutoScrollPosition.X' -this.AutoScrollPosition.Y - this.ClientSize.Height / 50);  				this.InvalidateLowQuality();  				this.OnViewScrolled(EventArgs.Empty);  			}  			else if (e.KeyCode == Keys.Down)  			{  				this.AutoScrollPosition = new Point(-this.AutoScrollPosition.X' -this.AutoScrollPosition.Y + this.ClientSize.Height / 50);  				this.InvalidateLowQuality();  				this.OnViewScrolled(EventArgs.Empty);  			}  			else if (e.KeyCode == Keys.F)  			{  				this.ZoomToFit();  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnKeyDown,The following statement contains a magic number: if (e.KeyCode == Keys.Add)  			{  				this.AdjustZoomLevel(1.0f);  			}  			else if (e.KeyCode == Keys.Subtract)  			{  				this.AdjustZoomLevel(-1.0f);  			}  			else if (e.KeyCode == Keys.Left)  			{  				this.UnitScroll += this.ConvertPixelsToUnits(this.rectContentArea.Width) / 50.0f;  				this.InvalidateLowQuality();  				this.OnViewScrolled(EventArgs.Empty);  			}  			else if (e.KeyCode == Keys.Right)  			{  				this.UnitScroll -= this.ConvertPixelsToUnits(this.rectContentArea.Width) / 50.0f;  				this.InvalidateLowQuality();  				this.OnViewScrolled(EventArgs.Empty);  			}  			else if (e.KeyCode == Keys.Up)  			{  				this.AutoScrollPosition = new Point(-this.AutoScrollPosition.X' -this.AutoScrollPosition.Y - this.ClientSize.Height / 50);  				this.InvalidateLowQuality();  				this.OnViewScrolled(EventArgs.Empty);  			}  			else if (e.KeyCode == Keys.Down)  			{  				this.AutoScrollPosition = new Point(-this.AutoScrollPosition.X' -this.AutoScrollPosition.Y + this.ClientSize.Height / 50);  				this.InvalidateLowQuality();  				this.OnViewScrolled(EventArgs.Empty);  			}  			else if (e.KeyCode == Keys.F)  			{  				this.ZoomToFit();  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The following statement contains a magic number: foreach (TimelineViewTrack track in this.trackList)  			{  				if (this.rectContentArea.Y + y + this.AutoScrollPosition.Y + track.Height <= e.Graphics.ClipBounds.Top + 1)  				{  					y += track.Height + this.trackSpacing;  					continue;  				}  				if (this.rectContentArea.Y + y + this.AutoScrollPosition.Y >= e.Graphics.ClipBounds.Bottom - 1) break;    				// Content  				{  					Rectangle targetRect = new Rectangle(  						this.rectContentArea.X + 1'  						this.rectContentArea.Y + y + this.AutoScrollPosition.Y'  						this.rectContentArea.Width - 2'  						track.Height);  					state = e.Graphics.Save();  					e.Graphics.SetClip(this.rectContentArea' CombineMode.Intersect);  					e.Graphics.SetClip(targetRect' CombineMode.Intersect);  					if (!e.Graphics.ClipBounds.IsEmpty)  					{  						track.OnPaint(new TimelineViewTrackPaintEventArgs(track' e.Graphics' qualityHint' targetRect));  					}  					e.Graphics.Restore(state);  				}    				// Left Sidebar  				{  					Rectangle targetRect = new Rectangle(  						this.rectLeftSidebar.X'  						this.rectLeftSidebar.Y + y + this.AutoScrollPosition.Y'  						this.rectLeftSidebar.Width'  						track.Height);  					state = e.Graphics.Save();  					e.Graphics.SetClip(this.rectLeftSidebar' CombineMode.Intersect);  					e.Graphics.SetClip(targetRect' CombineMode.Intersect);  					if (!e.Graphics.ClipBounds.IsEmpty)  					{  						track.OnPaintLeftSidebar(new TimelineViewTrackPaintEventArgs(track' e.Graphics' qualityHint' targetRect));  					}  					e.Graphics.Restore(state);  				}    				// Right Sidebar  				{  					Rectangle targetRect = new Rectangle(  						this.rectRightSidebar.X'  						this.rectRightSidebar.Y + y + this.AutoScrollPosition.Y'  						this.rectRightSidebar.Width'  						track.Height);  					state = e.Graphics.Save();  					e.Graphics.SetClip(this.rectRightSidebar' CombineMode.Intersect);  					e.Graphics.SetClip(targetRect' CombineMode.Intersect);  					if (!e.Graphics.ClipBounds.IsEmpty)  					{  						track.OnPaintRightSidebar(new TimelineViewTrackPaintEventArgs(track' e.Graphics' qualityHint' targetRect));  					}  					e.Graphics.Restore(state);  				}    				y += track.Height + this.trackSpacing;  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The following statement contains a magic number: if (this.selectionTimeA != this.selectionTimeB)  			{  				float selectionPixelsBegin = this.GetPosAtUnit(this.SelectionBeginTime);  				float selectionPixelsEnd = this.GetPosAtUnit(this.SelectionEndTime);  				Pen pen = new Pen(Color.FromArgb(128' this.Renderer.ColorText));  				SolidBrush brush = new SolidBrush(Color.FromArgb(32' this.Renderer.ColorText));  				e.Graphics.FillRectangle(  					brush'  					this.rectContentArea.Left'  					this.rectContentArea.Top'  					selectionPixelsBegin - this.rectContentArea.Left'  					this.rectContentArea.Height);  				e.Graphics.FillRectangle(  					brush'  					selectionPixelsEnd'  					this.rectContentArea.Top'  					this.rectContentArea.Right - selectionPixelsEnd'  					this.rectContentArea.Height);  				e.Graphics.DrawLine(pen' selectionPixelsBegin' this.rectContentArea.Top' selectionPixelsBegin' this.rectContentArea.Bottom);  				e.Graphics.DrawLine(pen' selectionPixelsEnd' this.rectContentArea.Top' selectionPixelsEnd' this.rectContentArea.Bottom);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The following statement contains a magic number: if (this.selectionTimeA != this.selectionTimeB)  			{  				float selectionPixelsBegin = this.GetPosAtUnit(this.SelectionBeginTime);  				float selectionPixelsEnd = this.GetPosAtUnit(this.SelectionEndTime);  				Pen pen = new Pen(Color.FromArgb(128' this.Renderer.ColorText));  				SolidBrush brush = new SolidBrush(Color.FromArgb(32' this.Renderer.ColorText));  				e.Graphics.FillRectangle(  					brush'  					this.rectContentArea.Left'  					this.rectContentArea.Top'  					selectionPixelsBegin - this.rectContentArea.Left'  					this.rectContentArea.Height);  				e.Graphics.FillRectangle(  					brush'  					selectionPixelsEnd'  					this.rectContentArea.Top'  					this.rectContentArea.Right - selectionPixelsEnd'  					this.rectContentArea.Height);  				e.Graphics.DrawLine(pen' selectionPixelsBegin' this.rectContentArea.Top' selectionPixelsBegin' this.rectContentArea.Bottom);  				e.Graphics.DrawLine(pen' selectionPixelsEnd' this.rectContentArea.Top' selectionPixelsEnd' this.rectContentArea.Bottom);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The following statement contains a magic number: if (this.mouseoverContent)  			{  				float mouseoverPixels = this.GetPosAtUnit(this.mouseoverTime);  				Pen mouseoverTimePen = new Pen(Color.FromArgb(128' this.Renderer.ColorText));  				mouseoverTimePen.DashStyle = DashStyle.Dot;  				e.Graphics.DrawLine(mouseoverTimePen' mouseoverPixels' this.rectContentArea.Top' mouseoverPixels' this.rectContentArea.Bottom);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The following statement contains a magic number: {  				y = 0;  				foreach (TimelineViewTrack track in this.trackList)  				{  					if (this.rectContentArea.Y + y + this.AutoScrollPosition.Y + track.Height <= e.Graphics.ClipBounds.Top + 1)  					{  						y += track.Height + this.trackSpacing;  						continue;  					}  					if (this.rectContentArea.Y + y + this.AutoScrollPosition.Y >= e.Graphics.ClipBounds.Bottom - 1) break;  				  					Rectangle targetRect = new Rectangle(  						this.rectContentArea.X + 1'  						this.rectContentArea.Y + y + this.AutoScrollPosition.Y'  						this.rectContentArea.Width - 2'  						track.Height);    					// Overlay  					{  						state = e.Graphics.Save();  						e.Graphics.SetClip(this.rectContentArea' CombineMode.Intersect);  						e.Graphics.SetClip(targetRect' CombineMode.Intersect);  						if (!e.Graphics.ClipBounds.IsEmpty)  						{  							track.OnPaintOverlay(new TimelineViewTrackPaintEventArgs(track' e.Graphics' qualityHint' targetRect));  						}  						e.Graphics.Restore(state);  					}    					y += track.Height + this.trackSpacing;  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The following statement contains a magic number: if (!this.rectContentArea.IsEmpty)  			{  				LinearGradientBrush shadowBrush;  				Color shadowColor = Color.Black;  				ColorBlend shadowBlend = new ColorBlend();  				shadowBlend.Positions	= new[] {	0.0f'								0.5f'								1.0f };  				shadowBlend.Colors		= new[] {	Color.FromArgb(64' shadowColor)'	Color.FromArgb(16' shadowColor)'	Color.FromArgb(0' shadowColor) };    				Rectangle dropShadowH = new Rectangle(this.rectContentArea.Left' this.rectContentArea.Top' this.rectContentArea.Width' Math.Min(12' this.rectContentArea.Height));  				Rectangle dropShadowV = new Rectangle(this.rectContentArea.Left' this.rectContentArea.Top' Math.Min(12' this.rectContentArea.Width)' this.rectContentArea.Height);    				shadowBrush = new LinearGradientBrush(dropShadowH' Color.Black' Color.Black' LinearGradientMode.Vertical);  				shadowBrush.InterpolationColors = shadowBlend;  				e.Graphics.FillRectangle(shadowBrush' dropShadowH);  				shadowBrush = new LinearGradientBrush(dropShadowV' Color.Black' Color.Black' LinearGradientMode.Horizontal);  				shadowBrush.InterpolationColors = shadowBlend;  				e.Graphics.FillRectangle(shadowBrush' dropShadowV);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The following statement contains a magic number: if (!this.rectContentArea.IsEmpty)  			{  				LinearGradientBrush shadowBrush;  				Color shadowColor = Color.Black;  				ColorBlend shadowBlend = new ColorBlend();  				shadowBlend.Positions	= new[] {	0.0f'								0.5f'								1.0f };  				shadowBlend.Colors		= new[] {	Color.FromArgb(64' shadowColor)'	Color.FromArgb(16' shadowColor)'	Color.FromArgb(0' shadowColor) };    				Rectangle dropShadowH = new Rectangle(this.rectContentArea.Left' this.rectContentArea.Top' this.rectContentArea.Width' Math.Min(12' this.rectContentArea.Height));  				Rectangle dropShadowV = new Rectangle(this.rectContentArea.Left' this.rectContentArea.Top' Math.Min(12' this.rectContentArea.Width)' this.rectContentArea.Height);    				shadowBrush = new LinearGradientBrush(dropShadowH' Color.Black' Color.Black' LinearGradientMode.Vertical);  				shadowBrush.InterpolationColors = shadowBlend;  				e.Graphics.FillRectangle(shadowBrush' dropShadowH);  				shadowBrush = new LinearGradientBrush(dropShadowV' Color.Black' Color.Black' LinearGradientMode.Horizontal);  				shadowBrush.InterpolationColors = shadowBlend;  				e.Graphics.FillRectangle(shadowBrush' dropShadowV);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The following statement contains a magic number: if (!this.rectContentArea.IsEmpty)  			{  				LinearGradientBrush shadowBrush;  				Color shadowColor = Color.Black;  				ColorBlend shadowBlend = new ColorBlend();  				shadowBlend.Positions	= new[] {	0.0f'								0.5f'								1.0f };  				shadowBlend.Colors		= new[] {	Color.FromArgb(64' shadowColor)'	Color.FromArgb(16' shadowColor)'	Color.FromArgb(0' shadowColor) };    				Rectangle dropShadowH = new Rectangle(this.rectContentArea.Left' this.rectContentArea.Top' this.rectContentArea.Width' Math.Min(12' this.rectContentArea.Height));  				Rectangle dropShadowV = new Rectangle(this.rectContentArea.Left' this.rectContentArea.Top' Math.Min(12' this.rectContentArea.Width)' this.rectContentArea.Height);    				shadowBrush = new LinearGradientBrush(dropShadowH' Color.Black' Color.Black' LinearGradientMode.Vertical);  				shadowBrush.InterpolationColors = shadowBlend;  				e.Graphics.FillRectangle(shadowBrush' dropShadowH);  				shadowBrush = new LinearGradientBrush(dropShadowV' Color.Black' Color.Black' LinearGradientMode.Horizontal);  				shadowBrush.InterpolationColors = shadowBlend;  				e.Graphics.FillRectangle(shadowBrush' dropShadowV);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The following statement contains a magic number: if (!this.rectContentArea.IsEmpty)  			{  				LinearGradientBrush shadowBrush;  				Color shadowColor = Color.Black;  				ColorBlend shadowBlend = new ColorBlend();  				shadowBlend.Positions	= new[] {	0.0f'								0.5f'								1.0f };  				shadowBlend.Colors		= new[] {	Color.FromArgb(64' shadowColor)'	Color.FromArgb(16' shadowColor)'	Color.FromArgb(0' shadowColor) };    				Rectangle dropShadowH = new Rectangle(this.rectContentArea.Left' this.rectContentArea.Top' this.rectContentArea.Width' Math.Min(12' this.rectContentArea.Height));  				Rectangle dropShadowV = new Rectangle(this.rectContentArea.Left' this.rectContentArea.Top' Math.Min(12' this.rectContentArea.Width)' this.rectContentArea.Height);    				shadowBrush = new LinearGradientBrush(dropShadowH' Color.Black' Color.Black' LinearGradientMode.Vertical);  				shadowBrush.InterpolationColors = shadowBlend;  				e.Graphics.FillRectangle(shadowBrush' dropShadowH);  				shadowBrush = new LinearGradientBrush(dropShadowV' Color.Black' Color.Black' LinearGradientMode.Horizontal);  				shadowBrush.InterpolationColors = shadowBlend;  				e.Graphics.FillRectangle(shadowBrush' dropShadowV);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The following statement contains a magic number: if (this.mouseAction == MouseAction.Scroll)  			{  				e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  				e.Graphics.FillEllipse(new SolidBrush(this.renderer.ColorText.ScaleAlpha(0.5f))' this.mouseActionOrigin.X - 3' this.mouseActionOrigin.Y - 3' 6' 6);  				e.Graphics.DrawLine(new Pen(this.renderer.ColorText.ScaleAlpha(0.5f))' this.mouseActionOrigin' this.PointToClient(Cursor.Position));  				e.Graphics.SmoothingMode = SmoothingMode.Default;  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The following statement contains a magic number: if (this.mouseAction == MouseAction.Scroll)  			{  				e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  				e.Graphics.FillEllipse(new SolidBrush(this.renderer.ColorText.ScaleAlpha(0.5f))' this.mouseActionOrigin.X - 3' this.mouseActionOrigin.Y - 3' 6' 6);  				e.Graphics.DrawLine(new Pen(this.renderer.ColorText.ScaleAlpha(0.5f))' this.mouseActionOrigin' this.PointToClient(Cursor.Position));  				e.Graphics.SmoothingMode = SmoothingMode.Default;  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The following statement contains a magic number: if (this.mouseAction == MouseAction.Scroll)  			{  				e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  				e.Graphics.FillEllipse(new SolidBrush(this.renderer.ColorText.ScaleAlpha(0.5f))' this.mouseActionOrigin.X - 3' this.mouseActionOrigin.Y - 3' 6' 6);  				e.Graphics.DrawLine(new Pen(this.renderer.ColorText.ScaleAlpha(0.5f))' this.mouseActionOrigin' this.PointToClient(Cursor.Position));  				e.Graphics.SmoothingMode = SmoothingMode.Default;  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,OnPaint,The following statement contains a magic number: if (this.mouseAction == MouseAction.Scroll)  			{  				e.Graphics.SmoothingMode = SmoothingMode.HighQuality;  				e.Graphics.FillEllipse(new SolidBrush(this.renderer.ColorText.ScaleAlpha(0.5f))' this.mouseActionOrigin.X - 3' this.mouseActionOrigin.Y - 3' 6' 6);  				e.Graphics.DrawLine(new Pen(this.renderer.ColorText.ScaleAlpha(0.5f))' this.mouseActionOrigin' this.PointToClient(Cursor.Position));  				e.Graphics.SmoothingMode = SmoothingMode.Default;  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,DrawRuler,The following statement contains a magic number: {  				SizeF unitNameSize = g.MeasureString(this.model.UnitName' this.renderer.FontRegular' rect.Width);  				float markingRatio = 0.5f + 0.5f * (1.0f - Math.Max(Math.Min((float)rect.Height / 32.0f' 1.0f)' 0.0f));  				if (unitNameSize.IsEmpty) unitNameSize = new SizeF(1.0f' 1.0f);  				if (top)  				{  					rectUnitName = new Rectangle(  						rect.X'   						rect.Y'   						(int)Math.Ceiling(unitNameSize.Width)'   						(int)Math.Ceiling(unitNameSize.Height));  					rectUnitMarkings = new Rectangle(  						rect.X'  						rect.Bottom - Math.Min((int)(rect.Height * markingRatio)' 16)'  						rect.Width'  						Math.Min((int)(rect.Height * markingRatio)' 16));  				}  				else  				{  					rectUnitName = new Rectangle(  						rect.X'   						rect.Bottom - (int)Math.Ceiling(unitNameSize.Height)'   						(int)Math.Ceiling(unitNameSize.Width)'   						(int)Math.Ceiling(unitNameSize.Height));  					rectUnitMarkings = new Rectangle(  						rect.X'  						rect.Top'  						rect.Width'  						Math.Min((int)(rect.Height * markingRatio)' 16));  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,DrawRuler,The following statement contains a magic number: {  				SizeF unitNameSize = g.MeasureString(this.model.UnitName' this.renderer.FontRegular' rect.Width);  				float markingRatio = 0.5f + 0.5f * (1.0f - Math.Max(Math.Min((float)rect.Height / 32.0f' 1.0f)' 0.0f));  				if (unitNameSize.IsEmpty) unitNameSize = new SizeF(1.0f' 1.0f);  				if (top)  				{  					rectUnitName = new Rectangle(  						rect.X'   						rect.Y'   						(int)Math.Ceiling(unitNameSize.Width)'   						(int)Math.Ceiling(unitNameSize.Height));  					rectUnitMarkings = new Rectangle(  						rect.X'  						rect.Bottom - Math.Min((int)(rect.Height * markingRatio)' 16)'  						rect.Width'  						Math.Min((int)(rect.Height * markingRatio)' 16));  				}  				else  				{  					rectUnitName = new Rectangle(  						rect.X'   						rect.Bottom - (int)Math.Ceiling(unitNameSize.Height)'   						(int)Math.Ceiling(unitNameSize.Width)'   						(int)Math.Ceiling(unitNameSize.Height));  					rectUnitMarkings = new Rectangle(  						rect.X'  						rect.Top'  						rect.Width'  						Math.Min((int)(rect.Height * markingRatio)' 16));  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,DrawRuler,The following statement contains a magic number: {  				SizeF unitNameSize = g.MeasureString(this.model.UnitName' this.renderer.FontRegular' rect.Width);  				float markingRatio = 0.5f + 0.5f * (1.0f - Math.Max(Math.Min((float)rect.Height / 32.0f' 1.0f)' 0.0f));  				if (unitNameSize.IsEmpty) unitNameSize = new SizeF(1.0f' 1.0f);  				if (top)  				{  					rectUnitName = new Rectangle(  						rect.X'   						rect.Y'   						(int)Math.Ceiling(unitNameSize.Width)'   						(int)Math.Ceiling(unitNameSize.Height));  					rectUnitMarkings = new Rectangle(  						rect.X'  						rect.Bottom - Math.Min((int)(rect.Height * markingRatio)' 16)'  						rect.Width'  						Math.Min((int)(rect.Height * markingRatio)' 16));  				}  				else  				{  					rectUnitName = new Rectangle(  						rect.X'   						rect.Bottom - (int)Math.Ceiling(unitNameSize.Height)'   						(int)Math.Ceiling(unitNameSize.Width)'   						(int)Math.Ceiling(unitNameSize.Height));  					rectUnitMarkings = new Rectangle(  						rect.X'  						rect.Top'  						rect.Width'  						Math.Min((int)(rect.Height * markingRatio)' 16));  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,DrawRuler,The following statement contains a magic number: {  				Rectangle overlap = rectUnitMarkings;  				overlap.Intersect(rectUnitName);  				float overlapAmount = Math.Max(Math.Min((float)overlap.Height / (float)rectUnitName.Height' 1.0f)' 0.0f);  				float textOverlapAlpha = (1.0f - (overlapAmount));    				string unitText = null;  				{  					string unitTextPrimary = !string.IsNullOrEmpty(this.model.UnitDescription) ? this.model.UnitDescription : null;  					string unitTextSecondary = !string.IsNullOrEmpty(this.model.UnitName) ? this.model.UnitName : null;    					if (unitTextPrimary != null && unitTextSecondary != null)  					{  						unitText = string.Format("{0} ({1})"' unitTextPrimary' unitTextSecondary);  					}  					else  						unitText = (unitTextPrimary ?? unitTextSecondary) ?? "Units";  				}    				StringFormat format = new StringFormat(StringFormat.GenericDefault);  				format.Alignment = StringAlignment.Near;  				format.LineAlignment = top ? StringAlignment.Near : StringAlignment.Far;    				g.DrawString(  					unitText'   					this.renderer.FontRegular'   					new SolidBrush(Color.FromArgb((int)(textOverlapAlpha * 255)' this.renderer.ColorText))'   					rect'   					format);  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,DrawRuler,The following statement contains a magic number: {  				int timeDecimals = Math.Max(0' -(int)Math.Log10(this.VisibleUnitWidth) + 2);    				Pen bigLinePen = new Pen(new SolidBrush(this.renderer.ColorRulerMarkMajor));  				Pen medLinePen = new Pen(new SolidBrush(this.renderer.ColorRulerMarkRegular));  				Pen minLinePen = new Pen(new SolidBrush(this.renderer.ColorRulerMarkMinor));    				foreach (TimelineViewRulerMark mark in this.GetVisibleRulerMarks((int)g.ClipBounds.Left' (int)g.ClipBounds.Right))  				{  					bool drawMark = (mark.PixelValue - rectUnitMarkings.Left >= 1.0f) && (rectUnitMarkings.Right - mark.PixelValue >= 1.0f);    					float markLen;  					Pen markPen;  					switch (mark.Weight)  					{  						case TimelineViewRulerMarkWeight.Major:  							markLen = 1.0f;  							markPen = bigLinePen;  							break;  						default:  						case TimelineViewRulerMarkWeight.Regular:  							markLen = 0.5f;  							markPen = medLinePen;  							break;  						case TimelineViewRulerMarkWeight.Minor:  							markLen = 0.25f;  							markPen = minLinePen;  							break;  					}    					float markTopY;  					float markBottomY;  					float markTextY;  					if (top)  					{  						markTopY = rectUnitMarkings.Bottom - markLen * rectUnitMarkings.Height;  						markBottomY = rectUnitMarkings.Bottom;  						markTextY = rectUnitMarkings.Bottom - this.renderer.FontRegular.Height - Math.Max(Math.Min(3 + rectUnitMarkings.Top - rectUnitName.Bottom' rectUnitMarkings.Height / 2)' 0);  					}  					else  					{  						markTopY = rectUnitMarkings.Top;  						markBottomY = rectUnitMarkings.Top + markLen * rectUnitMarkings.Height;  						markTextY = rectUnitMarkings.Top + Math.Max(Math.Min(3 + rectUnitName.Top - rectUnitMarkings.Bottom' rectUnitMarkings.Height / 2)' 0);  					}    					if (drawMark)  					{  						g.DrawLine(markPen' (int)mark.PixelValue' (int)markTopY' (int)mark.PixelValue' (int)markBottomY);  					}    					if (mark.Weight == TimelineViewRulerMarkWeight.Major)  					{  						string timeString = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mark.UnitValue);  						g.DrawString(  							timeString'   							this.renderer.FontSmall'   							new SolidBrush(this.renderer.ColorText)'   							mark.PixelValue'   							markTextY);  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,DrawRuler,The following statement contains a magic number: {  				int timeDecimals = Math.Max(0' -(int)Math.Log10(this.VisibleUnitWidth) + 2);    				Pen bigLinePen = new Pen(new SolidBrush(this.renderer.ColorRulerMarkMajor));  				Pen medLinePen = new Pen(new SolidBrush(this.renderer.ColorRulerMarkRegular));  				Pen minLinePen = new Pen(new SolidBrush(this.renderer.ColorRulerMarkMinor));    				foreach (TimelineViewRulerMark mark in this.GetVisibleRulerMarks((int)g.ClipBounds.Left' (int)g.ClipBounds.Right))  				{  					bool drawMark = (mark.PixelValue - rectUnitMarkings.Left >= 1.0f) && (rectUnitMarkings.Right - mark.PixelValue >= 1.0f);    					float markLen;  					Pen markPen;  					switch (mark.Weight)  					{  						case TimelineViewRulerMarkWeight.Major:  							markLen = 1.0f;  							markPen = bigLinePen;  							break;  						default:  						case TimelineViewRulerMarkWeight.Regular:  							markLen = 0.5f;  							markPen = medLinePen;  							break;  						case TimelineViewRulerMarkWeight.Minor:  							markLen = 0.25f;  							markPen = minLinePen;  							break;  					}    					float markTopY;  					float markBottomY;  					float markTextY;  					if (top)  					{  						markTopY = rectUnitMarkings.Bottom - markLen * rectUnitMarkings.Height;  						markBottomY = rectUnitMarkings.Bottom;  						markTextY = rectUnitMarkings.Bottom - this.renderer.FontRegular.Height - Math.Max(Math.Min(3 + rectUnitMarkings.Top - rectUnitName.Bottom' rectUnitMarkings.Height / 2)' 0);  					}  					else  					{  						markTopY = rectUnitMarkings.Top;  						markBottomY = rectUnitMarkings.Top + markLen * rectUnitMarkings.Height;  						markTextY = rectUnitMarkings.Top + Math.Max(Math.Min(3 + rectUnitName.Top - rectUnitMarkings.Bottom' rectUnitMarkings.Height / 2)' 0);  					}    					if (drawMark)  					{  						g.DrawLine(markPen' (int)mark.PixelValue' (int)markTopY' (int)mark.PixelValue' (int)markBottomY);  					}    					if (mark.Weight == TimelineViewRulerMarkWeight.Major)  					{  						string timeString = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mark.UnitValue);  						g.DrawString(  							timeString'   							this.renderer.FontSmall'   							new SolidBrush(this.renderer.ColorText)'   							mark.PixelValue'   							markTextY);  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,DrawRuler,The following statement contains a magic number: {  				int timeDecimals = Math.Max(0' -(int)Math.Log10(this.VisibleUnitWidth) + 2);    				Pen bigLinePen = new Pen(new SolidBrush(this.renderer.ColorRulerMarkMajor));  				Pen medLinePen = new Pen(new SolidBrush(this.renderer.ColorRulerMarkRegular));  				Pen minLinePen = new Pen(new SolidBrush(this.renderer.ColorRulerMarkMinor));    				foreach (TimelineViewRulerMark mark in this.GetVisibleRulerMarks((int)g.ClipBounds.Left' (int)g.ClipBounds.Right))  				{  					bool drawMark = (mark.PixelValue - rectUnitMarkings.Left >= 1.0f) && (rectUnitMarkings.Right - mark.PixelValue >= 1.0f);    					float markLen;  					Pen markPen;  					switch (mark.Weight)  					{  						case TimelineViewRulerMarkWeight.Major:  							markLen = 1.0f;  							markPen = bigLinePen;  							break;  						default:  						case TimelineViewRulerMarkWeight.Regular:  							markLen = 0.5f;  							markPen = medLinePen;  							break;  						case TimelineViewRulerMarkWeight.Minor:  							markLen = 0.25f;  							markPen = minLinePen;  							break;  					}    					float markTopY;  					float markBottomY;  					float markTextY;  					if (top)  					{  						markTopY = rectUnitMarkings.Bottom - markLen * rectUnitMarkings.Height;  						markBottomY = rectUnitMarkings.Bottom;  						markTextY = rectUnitMarkings.Bottom - this.renderer.FontRegular.Height - Math.Max(Math.Min(3 + rectUnitMarkings.Top - rectUnitName.Bottom' rectUnitMarkings.Height / 2)' 0);  					}  					else  					{  						markTopY = rectUnitMarkings.Top;  						markBottomY = rectUnitMarkings.Top + markLen * rectUnitMarkings.Height;  						markTextY = rectUnitMarkings.Top + Math.Max(Math.Min(3 + rectUnitName.Top - rectUnitMarkings.Bottom' rectUnitMarkings.Height / 2)' 0);  					}    					if (drawMark)  					{  						g.DrawLine(markPen' (int)mark.PixelValue' (int)markTopY' (int)mark.PixelValue' (int)markBottomY);  					}    					if (mark.Weight == TimelineViewRulerMarkWeight.Major)  					{  						string timeString = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mark.UnitValue);  						g.DrawString(  							timeString'   							this.renderer.FontSmall'   							new SolidBrush(this.renderer.ColorText)'   							mark.PixelValue'   							markTextY);  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,DrawRuler,The following statement contains a magic number: {  				int timeDecimals = Math.Max(0' -(int)Math.Log10(this.VisibleUnitWidth) + 2);    				Pen bigLinePen = new Pen(new SolidBrush(this.renderer.ColorRulerMarkMajor));  				Pen medLinePen = new Pen(new SolidBrush(this.renderer.ColorRulerMarkRegular));  				Pen minLinePen = new Pen(new SolidBrush(this.renderer.ColorRulerMarkMinor));    				foreach (TimelineViewRulerMark mark in this.GetVisibleRulerMarks((int)g.ClipBounds.Left' (int)g.ClipBounds.Right))  				{  					bool drawMark = (mark.PixelValue - rectUnitMarkings.Left >= 1.0f) && (rectUnitMarkings.Right - mark.PixelValue >= 1.0f);    					float markLen;  					Pen markPen;  					switch (mark.Weight)  					{  						case TimelineViewRulerMarkWeight.Major:  							markLen = 1.0f;  							markPen = bigLinePen;  							break;  						default:  						case TimelineViewRulerMarkWeight.Regular:  							markLen = 0.5f;  							markPen = medLinePen;  							break;  						case TimelineViewRulerMarkWeight.Minor:  							markLen = 0.25f;  							markPen = minLinePen;  							break;  					}    					float markTopY;  					float markBottomY;  					float markTextY;  					if (top)  					{  						markTopY = rectUnitMarkings.Bottom - markLen * rectUnitMarkings.Height;  						markBottomY = rectUnitMarkings.Bottom;  						markTextY = rectUnitMarkings.Bottom - this.renderer.FontRegular.Height - Math.Max(Math.Min(3 + rectUnitMarkings.Top - rectUnitName.Bottom' rectUnitMarkings.Height / 2)' 0);  					}  					else  					{  						markTopY = rectUnitMarkings.Top;  						markBottomY = rectUnitMarkings.Top + markLen * rectUnitMarkings.Height;  						markTextY = rectUnitMarkings.Top + Math.Max(Math.Min(3 + rectUnitName.Top - rectUnitMarkings.Bottom' rectUnitMarkings.Height / 2)' 0);  					}    					if (drawMark)  					{  						g.DrawLine(markPen' (int)mark.PixelValue' (int)markTopY' (int)mark.PixelValue' (int)markBottomY);  					}    					if (mark.Weight == TimelineViewRulerMarkWeight.Major)  					{  						string timeString = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mark.UnitValue);  						g.DrawString(  							timeString'   							this.renderer.FontSmall'   							new SolidBrush(this.renderer.ColorText)'   							mark.PixelValue'   							markTextY);  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,DrawRuler,The following statement contains a magic number: {  				int timeDecimals = Math.Max(0' -(int)Math.Log10(this.VisibleUnitWidth) + 2);    				Pen bigLinePen = new Pen(new SolidBrush(this.renderer.ColorRulerMarkMajor));  				Pen medLinePen = new Pen(new SolidBrush(this.renderer.ColorRulerMarkRegular));  				Pen minLinePen = new Pen(new SolidBrush(this.renderer.ColorRulerMarkMinor));    				foreach (TimelineViewRulerMark mark in this.GetVisibleRulerMarks((int)g.ClipBounds.Left' (int)g.ClipBounds.Right))  				{  					bool drawMark = (mark.PixelValue - rectUnitMarkings.Left >= 1.0f) && (rectUnitMarkings.Right - mark.PixelValue >= 1.0f);    					float markLen;  					Pen markPen;  					switch (mark.Weight)  					{  						case TimelineViewRulerMarkWeight.Major:  							markLen = 1.0f;  							markPen = bigLinePen;  							break;  						default:  						case TimelineViewRulerMarkWeight.Regular:  							markLen = 0.5f;  							markPen = medLinePen;  							break;  						case TimelineViewRulerMarkWeight.Minor:  							markLen = 0.25f;  							markPen = minLinePen;  							break;  					}    					float markTopY;  					float markBottomY;  					float markTextY;  					if (top)  					{  						markTopY = rectUnitMarkings.Bottom - markLen * rectUnitMarkings.Height;  						markBottomY = rectUnitMarkings.Bottom;  						markTextY = rectUnitMarkings.Bottom - this.renderer.FontRegular.Height - Math.Max(Math.Min(3 + rectUnitMarkings.Top - rectUnitName.Bottom' rectUnitMarkings.Height / 2)' 0);  					}  					else  					{  						markTopY = rectUnitMarkings.Top;  						markBottomY = rectUnitMarkings.Top + markLen * rectUnitMarkings.Height;  						markTextY = rectUnitMarkings.Top + Math.Max(Math.Min(3 + rectUnitName.Top - rectUnitMarkings.Bottom' rectUnitMarkings.Height / 2)' 0);  					}    					if (drawMark)  					{  						g.DrawLine(markPen' (int)mark.PixelValue' (int)markTopY' (int)mark.PixelValue' (int)markBottomY);  					}    					if (mark.Weight == TimelineViewRulerMarkWeight.Major)  					{  						string timeString = string.Format(  							System.Globalization.CultureInfo.InvariantCulture'   							"{0:F" + timeDecimals + "}"'   							mark.UnitValue);  						g.DrawString(  							timeString'   							this.renderer.FontSmall'   							new SolidBrush(this.renderer.ColorText)'   							mark.PixelValue'   							markTextY);  					}  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,EnumerateRulerMarks,The following statement contains a magic number: int roundDecimals = 3;
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineView,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineView.cs,EnumerateRulerMarks,The following statement contains a magic number: {  				decimal stepSizeDec = (decimal)stepSize;  				while (Math.Round(stepSizeDec' roundDecimals) != stepSizeDec && roundDecimals < 10)  				{  					roundDecimals++;  				}  			}
Magic Number,AdamsLair.WinForms.TimelineControls,TimelineViewTrack,C:\repos\AdamsLair_winforms\WinForms\TimelineControls\TimelineViewTrack.cs,Invalidate,The following statement contains a magic number: float toPixels = Math.Min(this.parentView.GetPosAtUnit(toUnits)' rectOnParent.Right - this.parentView.RightSidebarSize) + 2;
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: buttonRect.Y = this.Location.Y + this.headerHeight / 2 - buttonRect.Height / 2;
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: buttonRect.Y = this.Location.Y + this.headerHeight / 2 - buttonRect.Height / 2;
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: if (!parentExpand && (this.Hints & HintFlags.HasExpandCheck) != HintFlags.None)  			{  				this.expandCheckRect = new Rectangle(  					this.headerRect.X + 2'  					this.headerRect.Y + this.headerRect.Height / 2 - ControlRenderer.CheckBoxSize.Height / 2 - 1'  					ControlRenderer.CheckBoxSize.Width'  					ControlRenderer.CheckBoxSize.Height);  			}  			else  			{  				this.expandCheckRect = new Rectangle(this.headerRect.X' this.headerRect.Y' 0' 0);  			}
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: if (!parentExpand && (this.Hints & HintFlags.HasExpandCheck) != HintFlags.None)  			{  				this.expandCheckRect = new Rectangle(  					this.headerRect.X + 2'  					this.headerRect.Y + this.headerRect.Height / 2 - ControlRenderer.CheckBoxSize.Height / 2 - 1'  					ControlRenderer.CheckBoxSize.Width'  					ControlRenderer.CheckBoxSize.Height);  			}  			else  			{  				this.expandCheckRect = new Rectangle(this.headerRect.X' this.headerRect.Y' 0' 0);  			}
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: if (!parentExpand && (this.Hints & HintFlags.HasExpandCheck) != HintFlags.None)  			{  				this.expandCheckRect = new Rectangle(  					this.headerRect.X + 2'  					this.headerRect.Y + this.headerRect.Height / 2 - ControlRenderer.CheckBoxSize.Height / 2 - 1'  					ControlRenderer.CheckBoxSize.Width'  					ControlRenderer.CheckBoxSize.Height);  			}  			else  			{  				this.expandCheckRect = new Rectangle(this.headerRect.X' this.headerRect.Y' 0' 0);  			}
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: if ((this.Hints & HintFlags.HasActiveCheck) != HintFlags.None)  			{  				this.activeCheckRect = new Rectangle(  					this.expandCheckRect.Right + 2'  					this.headerRect.Y + this.headerRect.Height / 2 - ControlRenderer.CheckBoxSize.Height / 2 - 1'  					ControlRenderer.CheckBoxSize.Width'  					ControlRenderer.CheckBoxSize.Height);  			}  			else  			{  				this.activeCheckRect = new Rectangle(this.expandCheckRect.Right' this.expandCheckRect.Y' 0' 0);  			}
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: if ((this.Hints & HintFlags.HasActiveCheck) != HintFlags.None)  			{  				this.activeCheckRect = new Rectangle(  					this.expandCheckRect.Right + 2'  					this.headerRect.Y + this.headerRect.Height / 2 - ControlRenderer.CheckBoxSize.Height / 2 - 1'  					ControlRenderer.CheckBoxSize.Width'  					ControlRenderer.CheckBoxSize.Height);  			}  			else  			{  				this.activeCheckRect = new Rectangle(this.expandCheckRect.Right' this.expandCheckRect.Y' 0' 0);  			}
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: if ((this.Hints & HintFlags.HasActiveCheck) != HintFlags.None)  			{  				this.activeCheckRect = new Rectangle(  					this.expandCheckRect.Right + 2'  					this.headerRect.Y + this.headerRect.Height / 2 - ControlRenderer.CheckBoxSize.Height / 2 - 1'  					ControlRenderer.CheckBoxSize.Width'  					ControlRenderer.CheckBoxSize.Height);  			}  			else  			{  				this.activeCheckRect = new Rectangle(this.expandCheckRect.Right' this.expandCheckRect.Y' 0' 0);  			}
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,PaintHeader,The following statement contains a magic number: if (this.headerIcon != null)  			{  				iconRect = new Rectangle(  					this.activeCheckRect.Right + 2'  					this.headerRect.Y + this.headerRect.Height / 2 - this.headerIcon.Height / 2'   					this.headerIcon.Width'  					this.headerIcon.Height);  			}  			else  			{  				iconRect = new Rectangle(this.activeCheckRect.Right' this.headerRect.Y' 0' 0);  			}
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,PaintHeader,The following statement contains a magic number: if (this.headerIcon != null)  			{  				iconRect = new Rectangle(  					this.activeCheckRect.Right + 2'  					this.headerRect.Y + this.headerRect.Height / 2 - this.headerIcon.Height / 2'   					this.headerIcon.Width'  					this.headerIcon.Height);  			}  			else  			{  				iconRect = new Rectangle(this.activeCheckRect.Right' this.headerRect.Y' 0' 0);  			}
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,PaintHeader,The following statement contains a magic number: if (this.headerIcon != null)  			{  				iconRect = new Rectangle(  					this.activeCheckRect.Right + 2'  					this.headerRect.Y + this.headerRect.Height / 2 - this.headerIcon.Height / 2'   					this.headerIcon.Width'  					this.headerIcon.Height);  			}  			else  			{  				iconRect = new Rectangle(this.activeCheckRect.Right' this.headerRect.Y' 0' 0);  			}
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,PaintHeader,The following statement contains a magic number: Rectangle textRect = new Rectangle(  				iconRect.Right'   				this.headerRect.Y'   				this.headerRect.Width - buttonRect.Width - iconRect.Width - this.expandCheckRect.Width - this.activeCheckRect.Width - 2'   				this.headerRect.Height);
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,PaintIndentExpandButton,The following statement contains a magic number: Rectangle expandButtonRect = new Rectangle(  				indentExpandRect.X + indentExpandRect.Width / 2 - ControlRenderer.ExpandNodeSize.Width / 2'  				indentExpandRect.Y + indentExpandRect.Height / 2 - ControlRenderer.ExpandNodeSize.Height / 2 - 1'  				ControlRenderer.ExpandNodeSize.Width'  				ControlRenderer.ExpandNodeSize.Height);
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,PaintIndentExpandButton,The following statement contains a magic number: Rectangle expandButtonRect = new Rectangle(  				indentExpandRect.X + indentExpandRect.Width / 2 - ControlRenderer.ExpandNodeSize.Width / 2'  				indentExpandRect.Y + indentExpandRect.Height / 2 - ControlRenderer.ExpandNodeSize.Height / 2 - 1'  				ControlRenderer.ExpandNodeSize.Width'  				ControlRenderer.ExpandNodeSize.Height);
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,PaintIndentExpandButton,The following statement contains a magic number: Rectangle expandButtonRect = new Rectangle(  				indentExpandRect.X + indentExpandRect.Width / 2 - ControlRenderer.ExpandNodeSize.Width / 2'  				indentExpandRect.Y + indentExpandRect.Height / 2 - ControlRenderer.ExpandNodeSize.Height / 2 - 1'  				ControlRenderer.ExpandNodeSize.Width'  				ControlRenderer.ExpandNodeSize.Height);
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,PaintIndentExpandButton,The following statement contains a magic number: Rectangle expandButtonRect = new Rectangle(  				indentExpandRect.X + indentExpandRect.Width / 2 - ControlRenderer.ExpandNodeSize.Width / 2'  				indentExpandRect.Y + indentExpandRect.Height / 2 - ControlRenderer.ExpandNodeSize.Height / 2 - 1'  				ControlRenderer.ExpandNodeSize.Width'  				ControlRenderer.ExpandNodeSize.Height);
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,OnParentEditorChanged,The following statement contains a magic number: if (this.HeaderHeight == DefaultHeaderHeight)  				this.HeaderHeight = 5 + (int)Math.Round((float)this.ControlRenderer.FontRegular.Height);
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,DrawGroupHeaderBackground,The following statement contains a magic number: g.DrawLine(new Pen(Color.FromArgb(128' Color.White))' rect.Left' rect.Top' rect.Right' rect.Top);
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,DrawGroupHeaderBackground,The following statement contains a magic number: g.DrawLine(new Pen(Color.FromArgb(64' Color.Black))' rect.Left' rect.Bottom - 1' rect.Right' rect.Bottom - 1);
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,DrawGroupHeaderBackground,The following statement contains a magic number: g.DrawLine(new Pen(Color.FromArgb(64' Color.White))' rect.Left' rect.Top' rect.Left' rect.Bottom - 1);
Magic Number,AdamsLair.WinForms.PropertyEditing,GroupedPropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\GroupedPropertyEditor.cs,DrawGroupHeaderBackground,The following statement contains a magic number: g.DrawLine(new Pen(Color.FromArgb(32' Color.Black))' rect.Right' rect.Top' rect.Right' rect.Bottom - 1);
Magic Number,AdamsLair.WinForms.PropertyEditing,PropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: if ((this.hints & HintFlags.HasButton) != HintFlags.None)  			{  				Size buttonSize = this.buttonIcon != null ? this.buttonIcon.Size : new Size(10' 10);  				this.buttonRect.Height = this.Size.Height;  				this.buttonRect.Width = Math.Min(this.rect.Height' buttonSize.Height + 2);  				this.buttonRect.X = this.rect.Right - buttonRect.Width - 1;  				this.buttonRect.Y = this.rect.Y;  			}  			else  				this.buttonRect = Rectangle.Empty;
Magic Number,AdamsLair.WinForms.PropertyEditing,PropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: if ((this.hints & HintFlags.HasButton) != HintFlags.None)  			{  				Size buttonSize = this.buttonIcon != null ? this.buttonIcon.Size : new Size(10' 10);  				this.buttonRect.Height = this.Size.Height;  				this.buttonRect.Width = Math.Min(this.rect.Height' buttonSize.Height + 2);  				this.buttonRect.X = this.rect.Right - buttonRect.Width - 1;  				this.buttonRect.Y = this.rect.Y;  			}  			else  				this.buttonRect = Rectangle.Empty;
Magic Number,AdamsLair.WinForms.PropertyEditing,PropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditor.cs,UpdateGeometry,The following statement contains a magic number: if ((this.hints & HintFlags.HasButton) != HintFlags.None)  			{  				Size buttonSize = this.buttonIcon != null ? this.buttonIcon.Size : new Size(10' 10);  				this.buttonRect.Height = this.Size.Height;  				this.buttonRect.Width = Math.Min(this.rect.Height' buttonSize.Height + 2);  				this.buttonRect.X = this.rect.Right - buttonRect.Width - 1;  				this.buttonRect.Y = this.rect.Y;  			}  			else  				this.buttonRect = Rectangle.Empty;
Magic Number,AdamsLair.WinForms.PropertyEditing,PropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditor.cs,PaintButton,The following statement contains a magic number: Point buttonCenter = new Point(this.buttonRect.X + this.buttonRect.Width / 2' this.buttonRect.Y + this.buttonRect.Height / 2);
Magic Number,AdamsLair.WinForms.PropertyEditing,PropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditor.cs,PaintButton,The following statement contains a magic number: Point buttonCenter = new Point(this.buttonRect.X + this.buttonRect.Width / 2' this.buttonRect.Y + this.buttonRect.Height / 2);
Magic Number,AdamsLair.WinForms.PropertyEditing,PropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditor.cs,PaintButton,The following statement contains a magic number: if (this.stateFlags.HasFlag(StateFlags.ButtonHovered))  			{  				Rectangle buttonBgRect = this.buttonRect;  				buttonBgRect.Height = Math.Min(buttonBgRect.Height' buttonBgRect.Width) - 1;  				buttonBgRect.Width = buttonBgRect.Height;  				buttonBgRect.X = this.buttonRect.X + this.buttonRect.Width / 2 - buttonBgRect.Width / 2 - 1;  				buttonBgRect.Y = this.buttonRect.Y + this.buttonRect.Height / 2 - buttonBgRect.Height / 2 - 1;  				g.FillRectangle(new SolidBrush(Color.FromArgb(128' Color.White))' buttonBgRect);  			}
Magic Number,AdamsLair.WinForms.PropertyEditing,PropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditor.cs,PaintButton,The following statement contains a magic number: if (this.stateFlags.HasFlag(StateFlags.ButtonHovered))  			{  				Rectangle buttonBgRect = this.buttonRect;  				buttonBgRect.Height = Math.Min(buttonBgRect.Height' buttonBgRect.Width) - 1;  				buttonBgRect.Width = buttonBgRect.Height;  				buttonBgRect.X = this.buttonRect.X + this.buttonRect.Width / 2 - buttonBgRect.Width / 2 - 1;  				buttonBgRect.Y = this.buttonRect.Y + this.buttonRect.Height / 2 - buttonBgRect.Height / 2 - 1;  				g.FillRectangle(new SolidBrush(Color.FromArgb(128' Color.White))' buttonBgRect);  			}
Magic Number,AdamsLair.WinForms.PropertyEditing,PropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditor.cs,PaintButton,The following statement contains a magic number: if (this.stateFlags.HasFlag(StateFlags.ButtonHovered))  			{  				Rectangle buttonBgRect = this.buttonRect;  				buttonBgRect.Height = Math.Min(buttonBgRect.Height' buttonBgRect.Width) - 1;  				buttonBgRect.Width = buttonBgRect.Height;  				buttonBgRect.X = this.buttonRect.X + this.buttonRect.Width / 2 - buttonBgRect.Width / 2 - 1;  				buttonBgRect.Y = this.buttonRect.Y + this.buttonRect.Height / 2 - buttonBgRect.Height / 2 - 1;  				g.FillRectangle(new SolidBrush(Color.FromArgb(128' Color.White))' buttonBgRect);  			}
Magic Number,AdamsLair.WinForms.PropertyEditing,PropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditor.cs,PaintButton,The following statement contains a magic number: if (this.stateFlags.HasFlag(StateFlags.ButtonHovered))  			{  				Rectangle buttonBgRect = this.buttonRect;  				buttonBgRect.Height = Math.Min(buttonBgRect.Height' buttonBgRect.Width) - 1;  				buttonBgRect.Width = buttonBgRect.Height;  				buttonBgRect.X = this.buttonRect.X + this.buttonRect.Width / 2 - buttonBgRect.Width / 2 - 1;  				buttonBgRect.Y = this.buttonRect.Y + this.buttonRect.Height / 2 - buttonBgRect.Height / 2 - 1;  				g.FillRectangle(new SolidBrush(Color.FromArgb(128' Color.White))' buttonBgRect);  			}
Magic Number,AdamsLair.WinForms.PropertyEditing,PropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditor.cs,PaintButton,The following statement contains a magic number: if (this.stateFlags.HasFlag(StateFlags.ButtonHovered))  			{  				Rectangle buttonBgRect = this.buttonRect;  				buttonBgRect.Height = Math.Min(buttonBgRect.Height' buttonBgRect.Width) - 1;  				buttonBgRect.Width = buttonBgRect.Height;  				buttonBgRect.X = this.buttonRect.X + this.buttonRect.Width / 2 - buttonBgRect.Width / 2 - 1;  				buttonBgRect.Y = this.buttonRect.Y + this.buttonRect.Height / 2 - buttonBgRect.Height / 2 - 1;  				g.FillRectangle(new SolidBrush(Color.FromArgb(128' Color.White))' buttonBgRect);  			}
Magic Number,AdamsLair.WinForms.PropertyEditing,PropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditor.cs,PaintButton,The following statement contains a magic number: g.DrawImage(buttonImage' buttonCenter.X - buttonSize.Width / 2' buttonCenter.Y - buttonSize.Height / 2' buttonSize.Width' buttonSize.Height);
Magic Number,AdamsLair.WinForms.PropertyEditing,PropertyEditor,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyEditor.cs,PaintButton,The following statement contains a magic number: g.DrawImage(buttonImage' buttonCenter.X - buttonSize.Width / 2' buttonCenter.Y - buttonSize.Height / 2' buttonSize.Width' buttonSize.Height);
Magic Number,AdamsLair.WinForms.PropertyEditing,PropertyGrid,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyGrid.cs,PropertyGrid,The following statement contains a magic number: this.updateTimer.Interval = 100;
Magic Number,AdamsLair.WinForms.PropertyEditing,PropertyGrid,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\PropertyGrid.cs,OnMouseMove,The following statement contains a magic number: if (this.splitterState.HasFlag(SplitterState.Dragged))  			{  				this.SplitterPosition = this.splitterDragValue + e.X - this.splitterDragPos.X;  				if (this.mainEditor != null)  				{  					this.mainEditor.OnGridSplitterChanged();  				}  			}  			else  			{  				int splitterPos = this.SplitterPosition;  				bool splitterHovered = e.Button == MouseButtons.None && e.X < splitterPos && e.X >= splitterPos - 6;  				if (splitterHovered && !this.splitterState.HasFlag(SplitterState.Hovered))  				{  					this.splitterState |= SplitterState.Hovered;  					if (this.mainEditor != null)  					{  						this.mainEditor.OnMouseLeave(EventArgs.Empty);  					}  					this.Cursor = Cursors.VSplit;  				}  				else if (!splitterHovered && this.splitterState.HasFlag(SplitterState.Hovered))  				{  					this.splitterState &= ~SplitterState.Hovered;  					this.Cursor = Cursors.Default;  					if (this.mainEditor != null)  					{  						this.mainEditor.OnMouseEnter(new MouseEventArgs(  							e.Button'   							e.Clicks'   							e.X - this.ClientRectangle.X'   							e.Y - this.ClientRectangle.Y - this.AutoScrollPosition.Y'   							e.Delta));  					}  				}  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,ComboBoxEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\ComboBoxEditorTemplate.cs,OnMouseDown,The following statement contains a magic number: if (this.rect.Contains(e.Location))  			{  				if (this.hovered && (e.Button & MouseButtons.Left) != MouseButtons.None && (DateTime.Now - this.mouseClosed).TotalMilliseconds > 200)  				{  					this.pressed = true;  					this.EmitInvalidate();  				}  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,EditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\EditorTemplate.cs,OnMouseMove,The following statement contains a magic number: this.hovered = new Rectangle(this.rect.X + 2' this.rect.Y' this.rect.Width - 4' this.rect.Height).Contains(e.Location);
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,EditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\EditorTemplate.cs,OnMouseMove,The following statement contains a magic number: this.hovered = new Rectangle(this.rect.X + 2' this.rect.Y' this.rect.Width - 4' this.rect.Height).Contains(e.Location);
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,BitmaskEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\BitmaskEditorTemplate.cs,OnMouseDown,The following statement contains a magic number: if (this.rect.Contains(e.Location))  			{  				if (this.hovered && (e.Button & MouseButtons.Left) != MouseButtons.None && (DateTime.Now - this.mouseClosed).TotalMilliseconds > 200)  				{  					this.pressed = true;  					this.EmitInvalidate();  				}  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,MultiComboBoxEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\MultiComboBoxEditorTemplate.cs,OnMouseDown,The following statement contains a magic number: if (this.rect.Contains(e.Location))  			{  				if (this.hovered && (e.Button & MouseButtons.Left) != MouseButtons.None && (DateTime.Now - this.mouseClosed).TotalMilliseconds > 200)  				{  					this.pressed = true;  					this.EmitInvalidate();  				}  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,NumericEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\NumericEditorTemplate.cs,OnPaint,The following statement contains a magic number: if (!this.minMaxRect.IsEmpty)  			{  				Color minMaxBarColor = this.parent.ControlRenderer.ColorHightlight;  				if (multiple) minMaxBarColor = minMaxBarColor.MixWith(this.parent.ControlRenderer.ColorMultiple' 0.5f' true);  				if (!this.barHovered && !this.barPressed) minMaxBarColor = Color.FromArgb(128' minMaxBarColor);  				e.Graphics.FillRectangle(new SolidBrush(minMaxBarColor)'  					this.minMaxRect.X'  					this.minMaxRect.Y'  					this.minMaxRect.Width * Math.Min(Math.Max((float)((this.value - this.barMin) / (this.barMax - this.barMin))' 0.0f)' 1.0f)'  					this.minMaxRect.Height);  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,NumericEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\NumericEditorTemplate.cs,UpdateGeometry,The following statement contains a magic number: if (this.ShowMinMaxBar)  			{  				this.minMaxRect = new Rectangle(  					this.rect.X'  					this.rect.Bottom - 3'  					this.rect.Width'  					3);  			}  			else  			{  				this.minMaxRect = Rectangle.Empty;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,NumericEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\NumericEditorTemplate.cs,UpdateGeometry,The following statement contains a magic number: if (this.ShowMinMaxBar)  			{  				this.minMaxRect = new Rectangle(  					this.rect.X'  					this.rect.Bottom - 3'  					this.rect.Width'  					3);  			}  			else  			{  				this.minMaxRect = Rectangle.Empty;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,NumericEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\NumericEditorTemplate.cs,UpdateGeometry,The following statement contains a magic number: this.gripRect = new Rectangle(  				this.rect.Right - GripSize + 2'  				this.rect.Y'  				GripSize'  				this.rect.Height - this.minMaxRect.Height);
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,NumericEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\NumericEditorTemplate.cs,UpdateGeometry,The following statement contains a magic number: this.stringEditor.Rect = new Rectangle(  				this.rect.X'   				this.rect.Y'   				this.rect.Width - GripSize + 2'   				this.rect.Height - this.minMaxRect.Height);
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,StringEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\StringEditorTemplate.cs,UpdateScroll,The following statement contains a magic number: if (cursorPixelPos - this.rect.X < 15 && this.scroll > 0)  			{  				this.scroll = Math.Max(this.scroll - (15 - cursorPixelPos + this.rect.X)' 0);  				this.EmitInvalidate();  			}  			else if (cursorPixelPos - this.rect.X > this.rect.Width - 15)  			{  				this.scroll += (cursorPixelPos - this.rect.X) - (this.rect.Width - 15);  				this.EmitInvalidate();  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,StringEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\StringEditorTemplate.cs,UpdateScroll,The following statement contains a magic number: if (cursorPixelPos - this.rect.X < 15 && this.scroll > 0)  			{  				this.scroll = Math.Max(this.scroll - (15 - cursorPixelPos + this.rect.X)' 0);  				this.EmitInvalidate();  			}  			else if (cursorPixelPos - this.rect.X > this.rect.Width - 15)  			{  				this.scroll += (cursorPixelPos - this.rect.X) - (this.rect.Width - 15);  				this.EmitInvalidate();  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,StringEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\StringEditorTemplate.cs,UpdateScroll,The following statement contains a magic number: if (cursorPixelPos - this.rect.X < 15 && this.scroll > 0)  			{  				this.scroll = Math.Max(this.scroll - (15 - cursorPixelPos + this.rect.X)' 0);  				this.EmitInvalidate();  			}  			else if (cursorPixelPos - this.rect.X > this.rect.Width - 15)  			{  				this.scroll += (cursorPixelPos - this.rect.X) - (this.rect.Width - 15);  				this.EmitInvalidate();  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,StringEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\StringEditorTemplate.cs,UpdateScroll,The following statement contains a magic number: if (cursorPixelPos - this.rect.X < 15 && this.scroll > 0)  			{  				this.scroll = Math.Max(this.scroll - (15 - cursorPixelPos + this.rect.X)' 0);  				this.EmitInvalidate();  			}  			else if (cursorPixelPos - this.rect.X > this.rect.Width - 15)  			{  				this.scroll += (cursorPixelPos - this.rect.X) - (this.rect.Width - 15);  				this.EmitInvalidate();  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,StringEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\StringEditorTemplate.cs,OnGotFocus,The following statement contains a magic number: if (this.cursorTimer == null)  			{  				this.cursorTimer = new Timer();  				this.cursorTimer.Interval = 500;  				this.cursorTimer.Tick += this.cursorTimer_Tick;  				this.cursorTimer.Enabled = true;  				this.cursorVisible = true;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,StringEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\StringEditorTemplate.cs,OnMouseDown,The following statement contains a magic number: Point pickLoc = new Point(Math.Min(Math.Max(e.X' rect.X + 2)' rect.Right - 2)' rect.Y + rect.Height / 2);
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,StringEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\StringEditorTemplate.cs,OnMouseDown,The following statement contains a magic number: Point pickLoc = new Point(Math.Min(Math.Max(e.X' rect.X + 2)' rect.Right - 2)' rect.Y + rect.Height / 2);
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,StringEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\StringEditorTemplate.cs,OnMouseDown,The following statement contains a magic number: Point pickLoc = new Point(Math.Min(Math.Max(e.X' rect.X + 2)' rect.Right - 2)' rect.Y + rect.Height / 2);
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,StringEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\StringEditorTemplate.cs,OnMouseMove,The following statement contains a magic number: if (this.mouseSelect)  			{  				this.CurrentCursor = Cursors.IBeam;    				// Pick char  				int pickedCharIndex;  				Point pickLoc = new Point(Math.Min(Math.Max(e.X' rect.X + 2)' rect.Right - 2)' rect.Y + rect.Height / 2);  				pickedCharIndex = ControlRenderer.PickCharTextField(  					this.rect'   					this.text'  					ControlRenderer.FontRegular'  					TextBoxStyle.Sunken'  					pickLoc'  					this.scroll);  				if (pickedCharIndex == -1) pickedCharIndex = this.text != null ? this.text.Length : 0;    				this.selectionLength = (this.cursorIndex + this.selectionLength) - pickedCharIndex;  				this.cursorIndex = pickedCharIndex;  				this.UpdateScroll();  				this.EmitInvalidate();  			}  			else if (this.hovered != lastHovered)  			{  				this.CurrentCursor = this.hovered && (Control.MouseButtons == MouseButtons.None) ? Cursors.IBeam : Cursors.Default;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,StringEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\StringEditorTemplate.cs,OnMouseMove,The following statement contains a magic number: if (this.mouseSelect)  			{  				this.CurrentCursor = Cursors.IBeam;    				// Pick char  				int pickedCharIndex;  				Point pickLoc = new Point(Math.Min(Math.Max(e.X' rect.X + 2)' rect.Right - 2)' rect.Y + rect.Height / 2);  				pickedCharIndex = ControlRenderer.PickCharTextField(  					this.rect'   					this.text'  					ControlRenderer.FontRegular'  					TextBoxStyle.Sunken'  					pickLoc'  					this.scroll);  				if (pickedCharIndex == -1) pickedCharIndex = this.text != null ? this.text.Length : 0;    				this.selectionLength = (this.cursorIndex + this.selectionLength) - pickedCharIndex;  				this.cursorIndex = pickedCharIndex;  				this.UpdateScroll();  				this.EmitInvalidate();  			}  			else if (this.hovered != lastHovered)  			{  				this.CurrentCursor = this.hovered && (Control.MouseButtons == MouseButtons.None) ? Cursors.IBeam : Cursors.Default;  			}
Magic Number,AdamsLair.WinForms.PropertyEditing.Templates,StringEditorTemplate,C:\repos\AdamsLair_winforms\WinForms\PropertyEditing\EditorTemplates\StringEditorTemplate.cs,OnMouseMove,The following statement contains a magic number: if (this.mouseSelect)  			{  				this.CurrentCursor = Cursors.IBeam;    				// Pick char  				int pickedCharIndex;  				Point pickLoc = new Point(Math.Min(Math.Max(e.X' rect.X + 2)' rect.Right - 2)' rect.Y + rect.Height / 2);  				pickedCharIndex = ControlRenderer.PickCharTextField(  					this.rect'   					this.text'  					ControlRenderer.FontRegular'  					TextBoxStyle.Sunken'  					pickLoc'  					this.scroll);  				if (pickedCharIndex == -1) pickedCharIndex = this.text != null ? this.text.Length : 0;    				this.selectionLength = (this.cursorIndex + this.selectionLength) - pickedCharIndex;  				this.cursorIndex = pickedCharIndex;  				this.UpdateScroll();  				this.EmitInvalidate();  			}  			else if (this.hovered != lastHovered)  			{  				this.CurrentCursor = this.hovered && (Control.MouseButtons == MouseButtons.None) ? Cursors.IBeam : Cursors.Default;  			}
Missing Default,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitCheckBox,The following switch statement is missing a default case: switch (state)  				{  					case CheckBoxState.CheckedDisabled:		vsState = System.Windows.Forms.VisualStyles.CheckBoxState.CheckedDisabled;		break;  					case CheckBoxState.CheckedHot:			vsState = System.Windows.Forms.VisualStyles.CheckBoxState.CheckedHot;			break;  					case CheckBoxState.CheckedNormal:		vsState = System.Windows.Forms.VisualStyles.CheckBoxState.CheckedNormal;		break;  					case CheckBoxState.CheckedPressed:		vsState = System.Windows.Forms.VisualStyles.CheckBoxState.CheckedPressed;		break;  					case CheckBoxState.MixedDisabled:		vsState = System.Windows.Forms.VisualStyles.CheckBoxState.MixedDisabled;		break;  					case CheckBoxState.MixedHot:			vsState = System.Windows.Forms.VisualStyles.CheckBoxState.MixedHot;				break;  					case CheckBoxState.MixedNormal:			vsState = System.Windows.Forms.VisualStyles.CheckBoxState.MixedNormal;			break;  					case CheckBoxState.MixedPressed:		vsState = System.Windows.Forms.VisualStyles.CheckBoxState.MixedPressed;			break;  					case CheckBoxState.UncheckedDisabled:	vsState = System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedDisabled;	break;  					case CheckBoxState.UncheckedHot:		vsState = System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedHot;			break;  					case CheckBoxState.UncheckedNormal:		vsState = System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal;		break;  					case CheckBoxState.UncheckedPressed:	vsState = System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedPressed;		break;  				}
Missing Default,AdamsLair.WinForms.Drawing,ControlRenderer,C:\repos\AdamsLair_winforms\WinForms\Drawing\ControlRenderer.cs,InitExpandNode,The following switch statement is missing a default case: switch (expandState)  			{  				case ExpandNodeState.OpenedDisabled:	image = ResourcesCache.ExpandNodeOpenedDisabled;	break;  				case ExpandNodeState.OpenedNormal:		image = ResourcesCache.ExpandNodeOpenedNormal;	break;  				case ExpandNodeState.OpenedHot:			image = ResourcesCache.ExpandNodeOpenedHot;		break;  				case ExpandNodeState.OpenedPressed:		image = ResourcesCache.ExpandNodeOpenedPressed;	break;  				case ExpandNodeState.ClosedDisabled:	image = ResourcesCache.ExpandNodeClosedDisabled;	break;  				case ExpandNodeState.ClosedNormal:		image = ResourcesCache.ExpandNodeClosedNormal;	break;  				case ExpandNodeState.ClosedHot:			image = ResourcesCache.ExpandNodeClosedHot;		break;  				case ExpandNodeState.ClosedPressed:		image = ResourcesCache.ExpandNodeClosedPressed;	break;  			}
