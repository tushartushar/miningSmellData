Implementation smell,Namespace,Class,File,Method,Description
Long Method,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The method has 340 lines of code.
Long Method,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetTVChannels,The method has 118 lines of code.
Long Method,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetRadioChannels,The method has 115 lines of code.
Long Method,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetRecordings,The method has 106 lines of code.
Long Method,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetSchedules,The method has 138 lines of code.
Complex Method,TVServerKodi.Common,ShareExplorer,C:\repos\margro_TVServerXBMC\TVServerKodi\Common\ShareExplorer.cs,TryConvertUncToLocal,Cyclomatic complexity of the method is 8
Complex Method,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetStreamingStatus,Cyclomatic complexity of the method is 10
Complex Method,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetChannelInfosForGroup,Cyclomatic complexity of the method is 9
Complex Method,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetTVChannels,Cyclomatic complexity of the method is 14
Complex Method,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetRadioChannels,Cyclomatic complexity of the method is 14
Complex Method,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetSchedules,Cyclomatic complexity of the method is 12
Complex Method,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,UpdateSchedule,Cyclomatic complexity of the method is 10
Long Parameter List,TVServerKodi.Common,ShareExplorer,C:\repos\margro_TVServerXBMC\TVServerKodi\Common\ShareExplorer.cs,NetShareEnum,The method has 7 parameters. Parameters: lpServerName' dwLevel' lpBuffer' dwPrefMaxLen' entriesRead' totalEntries' hResume
Long Parameter List,TVServerKodi.Common,ShareExplorer,C:\repos\margro_TVServerXBMC\TVServerKodi\Common\ShareExplorer.cs,NetShareEnum,The method has 6 parameters. Parameters: lpServerName' dwLevel' lpBuffer' cbBuffer' entriesRead' totalEntries
Long Parameter List,TVServerKodi.Common,ShareInfo,C:\repos\margro_TVServerXBMC\TVServerKodi\Common\ShareInfo.cs,ShareInfo,The method has 5 parameters. Parameters: serverName' netName' path' shareType' remark
Long Parameter List,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,StartTimeShifting,The method has 7 parameters. Parameters: idChannel' rtspURL' remoteserver' user' timeshiftfilename' timeShiftBufPos' timeShiftBufNr
Long Parameter List,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,FormatSchedule,The method has 13 parameters. Parameters: strSchedId' strStartTime' strEndTime' strIdChannel' strchannelname' strProgramName' sched' strIsRecording' stridProgram' Canceled' iParentSchedule' strGenre' strProgramDescription
Long Parameter List,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,AddSchedule,The method has 10 parameters. Parameters: channelId' programName' startTime' endTime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval
Long Parameter List,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,UpdateSchedule,The method has 13 parameters. Parameters: scheduleindex' channelId' active' programName' startTime' endTime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' programId
Long Parameter List,TVServerKodi,TVServerConnection,C:\repos\margro_TVServerXBMC\TVServerKodi\TVServerConnection.cs,playChannel,The method has 7 parameters. Parameters: chanId' resolveHostnames' OriginalURL' me' timeShiftFileName' timeShiftBufPos' timeShiftBufNr
Long Parameter List,TVServerKodi,TVServerConnection,C:\repos\margro_TVServerXBMC\TVServerKodi\TVServerConnection.cs,AddSchedule,The method has 10 parameters. Parameters: channelId' programName' startTime' endTime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval
Long Parameter List,TVServerKodi,TVServerConnection,C:\repos\margro_TVServerXBMC\TVServerKodi\TVServerConnection.cs,UpdateSchedule,The method has 13 parameters. Parameters: scheduleindex' channelId' active' programName' startTime' endTime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id
Long Identifier,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,,The length of the parameter uncRecordingPathsBindingSource is 30.
Long Identifier,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,,The length of the parameter uncTimeshiftPathsBindingSource is 30.
Long Statement,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The length of the statement  "              bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval); " is 168.
Long Statement,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The length of the statement  "              bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id); " is 203.
Long Statement,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The length of the statement  "                  + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)"); " is 153.
Long Statement,TVServerKodi.Commands,IsTimeshifting,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\IsTimeshifting.cs,handleCommand,The length of the statement  "            if (timeShiftURLs == null || String.IsNullOrEmpty(timeShiftURLs.RTSPUrl) || String.IsNullOrEmpty(timeShiftURLs.TimeShiftFileName)) " is 130.
Long Statement,TVServerKodi.Commands,Program,C:\repos\margro_TVServerXBMC\TVServerKodi\Program.cs,Main,The length of the statement  "              Console.WriteLine("An exception occurred while connecting to the database. Did you select the right backend? TVServerKodi default=MySQL; change your Gentle.conf file if you are using MSSQL."); " is 192.
Long Statement,TVServerKodi.Commands,TimeshiftChannel,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\TimeshiftChannel.cs,handleCommand,The length of the statement  "                getConnection().WriteLine("[ERROR]: Usage: " + getCommandToHandle() + ":ChannelId[|ResolveIPs=False][|StopTimeshift=True]"); " is 124.
Long Statement,TVServerKodi.Commands,TimeshiftChannel,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\TimeshiftChannel.cs,handleCommand,The length of the statement  "                    result = TVServerConnection.playChannel(chanId' resolveToIP' ref originalURL' ref me' ref timeShiftFileName' ref timeShiftBufPos' ref timeShiftBufNr); " is 150.
Long Statement,TVServerKodi.Commands,TimeshiftChannel,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\TimeshiftChannel.cs,handleCommand,The length of the statement  "                    result = TVServerConnection.playChannel(chanId' resolveToIP' ref originalURL' ref me' ref timeShiftFileName' ref timeShiftBufPos' ref timeShiftBufNr); " is 150.
Long Statement,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,okButton_Click,The length of the statement  "        MessageBox.Show(this' "Invalid share name' don't use special characters."' null' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 125.
Long Statement,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The length of the statement  "      this.localPathLabel.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 161.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,LoadUncPaths,The length of the statement  "        //  MessageBox.Show(this' "You must set up at least 2 shares with full permissions to access the recordings and timeshift folders on remote Kodi clients!"' null' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 212.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 142.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            this.refreshUncButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            this.uncTimeshiftGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 153.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            this.createTimeshiftShareButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 164.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            this.uncTimeshiftPathsDataGrid.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 161.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            this.uncTimeshiftPathsDataGrid.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 131.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle3.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            this.uncTimeshiftPathsDataGrid.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(this.uncTimeshiftPathsDataGrid_CellFormatting); " is 160.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            this.uncTimeshiftPathsDataGrid.SelectionChanged += new System.EventHandler(this.uncTimeshiftPathsDataGrid_SelectionChanged); " is 124.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            this.uncRecordingGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 153.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            this.createRecordingsShareButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 165.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            this.uncRecordingPathsDataGrid.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 161.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle4.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            this.uncRecordingPathsDataGrid.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 131.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle5.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle6.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            this.uncRecordingPathsDataGrid.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(this.uncRecordingPathsDataGrid_CellFormatting); " is 160.
Long Statement,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The length of the statement  "            this.uncRecordingPathsDataGrid.SelectionChanged += new System.EventHandler(this.uncRecordingPathsDataGrid_SelectionChanged); " is 124.
Long Statement,TVServerKodi,ConnectionHandler,C:\repos\margro_TVServerXBMC\TVServerKodi\ConnectionHandler.cs,HandleConnection,The length of the statement  "                    WriteLine("Protocol Accepted; TVServerKodi version: " + System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString()); " is 136.
Long Statement,TVServerKodi,Listener,C:\repos\margro_TVServerXBMC\TVServerKodi\Listener.cs,StartListening,The length of the statement  "                    Console.WriteLine("Socket error: address already in use. Check if you have other instances of the TVServerKodi running (plugin/exe)"); " is 134.
Long Statement,TVServerKodi,Listener,C:\repos\margro_TVServerXBMC\TVServerKodi\Listener.cs,StartListening,The length of the statement  "                    Log.Error("TVServerKodi: Socket error: address already in use. Check if you have other instances of the TVServerKodi running (plugin/exe)"); " is 140.
Long Statement,TVServerKodi,Listener,C:\repos\margro_TVServerXBMC\TVServerKodi\Listener.cs,ListenForClients,The length of the statement  "                    Log.Debug("TVServerKodi: New Connection! Starting handler thread for client." + client.Client.RemoteEndPoint.ToString()); " is 121.
Long Statement,TVServerKodi,TVServerKodiPlugin,C:\repos\margro_TVServerXBMC\TVServerKodi\Plugin.cs,events_OnTvServerEvent,The length of the statement  "              TvDatabase.Channel mpChannel = layer.GetChannelByTuningDetail(dvbChannel.NetworkId' dvbChannel.TransportId' dvbChannel.ServiceId); " is 130.
Long Statement,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,StartTimeShifting,The length of the statement  "                //result = controller.StartTimeShifting(ref user' idChannel' out vcard' cardId != -1); //This one is faster but we need to know the card id on beforehand " is 153.
Long Statement,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,StartTimeShifting,The length of the statement  "                    isTimeShifting.Remove(user.Name); // Remove user with old timeshift data (on new channel tuning' without stopping the timeshift) " is 128.
Long Statement,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,StartTimeShifting,The length of the statement  "                Console.WriteLine("Timeshift started for channel: '" + vcard.ChannelName + "' on device '" + vcard.Name + "' card id=" + vcard.Id); " is 131.
Long Statement,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,StartTimeShifting,The length of the statement  "                Console.WriteLine("TV Server returned '" + rtspURL + "' as timeshift URL and " + timeshiftfilename + " as timeshift file"); " is 123.
Long Statement,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,StartTimeShifting,The length of the statement  "                Log.Debug("TVServerKodi: TV Server returned '" + rtspURL + "' as timeshift URL and " + timeshiftfilename + " as timeshift file"); " is 129.
Long Statement,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,StartTimeShifting,The length of the statement  "                  Console.WriteLine("Video stream type=" + vidtype.ToString() + " Pid=" + videostream.Pid.ToString("X") + " PcrPid=" + videostream.PcrPid.ToString("X")); " is 151.
Long Statement,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,StartTimeShifting,The length of the statement  "                  Console.WriteLine("Audio stream type=" + audiotype.ToString() + " Pid=" + audiostream.Pid.ToString("X") + " Language=" + audiostream.Language); " is 143.
Long Statement,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetRecordings,The length of the statement  "                        string rtspURL = GetRecordingURL(rec.IdRecording' server' resolveHostnames' ref OriginalURL);//server.GetStreamUrlForFileName(rec.IdRecording); " is 143.
Long Statement,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetSchedules,The length of the statement  "                                        strProgramName.Replace("|"' "")' sched' strIsRecording' idProgram.ToString()' sched.Canceled' sched.IdParentSchedule' ""' ""); " is 126.
Long Statement,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetSchedules,The length of the statement  "                                          strProgramName.Replace("|"' "")' sched' strIsRecording' idProgram.ToString()' dtCanceled' parentSchedule' pr.Genre' pr.Description); " is 132.
Long Statement,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetSchedules,The length of the statement  "                            else //If the schedule did not resolve to any program' typical when creating an Instant Recording from XBMC and the name does not match a program name. " is 151.
Long Statement,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetSchedules,The length of the statement  "                                            strProgramName.Replace("|"' "")' sched' strIsRecording' idProgram.ToString()' sched.Canceled' sched.IdParentSchedule' ""' "");  " is 126.
Long Statement,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,UpdateSchedule,The length of the statement  "                if ((programId != -1) && (scheduleType != (int)TvDatabase.ScheduleRecordingType.Once || updatedSchedule.ScheduleType != (int)TvDatabase.ScheduleRecordingType.Once)) " is 164.
Long Statement,TVServerKodi,TVServerConnection,C:\repos\margro_TVServerXBMC\TVServerKodi\TVServerConnection.cs,playChannel,The length of the statement  "            TvResult result = serverIntf.StartTimeShifting(chanId' ref rtspURL' ref remoteserver' ref me' ref timeShiftFileName' ref timeShiftBufPos' ref timeShiftBufNr); " is 158.
Long Statement,TVServerKodi,TVServerConnection,C:\repos\margro_TVServerXBMC\TVServerKodi\TVServerConnection.cs,AddSchedule,The length of the statement  "            return serverIntf.AddSchedule(channelId' programName' startTime' endTime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval); " is 159.
Long Statement,TVServerKodi,TVServerConnection,C:\repos\margro_TVServerXBMC\TVServerKodi\TVServerConnection.cs,UpdateSchedule,The length of the statement  "            return serverIntf.UpdateSchedule(scheduleindex' channelId' active' programName' startTime' endTime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id); " is 197.
Long Statement,TVServerKodi,Utility,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\Utility.cs,CreateUncShare,The length of the statement  "      using (ManagementClass managementClass = new ManagementClass(scope' new ManagementPath("Win32_Share")' (ObjectGetOptions) null)) " is 128.
Long Statement,TVServerKodi,Utility,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\Utility.cs,CreateUncShare,The length of the statement  "        using (ManagementObject wmiTrustee = new ManagementClass(scope' new ManagementPath("Win32_Trustee")' (ObjectGetOptions) null).CreateInstance()) " is 143.
Long Statement,TVServerKodi,Utility,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\Utility.cs,CreateUncShare,The length of the statement  "          using (ManagementObject wmiACE = new ManagementClass(scope' new ManagementPath("Win32_ACE")' (ObjectGetOptions) null).CreateInstance()) " is 135.
Long Statement,TVServerKodi,Utility,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\Utility.cs,CreateUncShare,The length of the statement  "            using (ManagementObject wmiSecurityDescriptor = new ManagementClass(scope' new ManagementPath("Win32_SecurityDescriptor")' (ObjectGetOptions) null).CreateInstance()) " is 165.
Long Statement,TVServerKodi,Utility,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\Utility.cs,CreateUncShare,The length of the statement  "                using (ManagementBaseObject outParams = managementClass.InvokeMethod("Create"' inParamsCreate' (InvokeMethodOptions) null)) " is 123.
Complex Conditional,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetRecordingURL,The conditional expression  "(ipaddr == null) || (ipaddr.IsIPv6LinkLocal || ipaddr.IsIPv6Multicast || ipaddr.IsIPv6SiteLocal)"  is complex.
Complex Conditional,TVServerKodi,TVServerConnection,C:\repos\margro_TVServerXBMC\TVServerKodi\TVServerConnection.cs,playChannel,The conditional expression  "(ipaddr == null) || (ipaddr.IsIPv6LinkLocal || ipaddr.IsIPv6Multicast || ipaddr.IsIPv6SiteLocal)"  is complex.
Empty Catch Block,TVServerKodi.Commands,Program,C:\repos\margro_TVServerXBMC\TVServerKodi\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,TVServerKodi.Commands,Program,C:\repos\margro_TVServerXBMC\TVServerKodi\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,TVServerKodi.Commands,Program,C:\repos\margro_TVServerXBMC\TVServerKodi\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,TVServerKodi.Common,ShareExplorer,C:\repos\margro_TVServerXBMC\TVServerKodi\Common\ShareExplorer.cs,TryConvertUncToLocal,The method has an empty catch block.
Empty Catch Block,TVServerKodi,ConnectionHandler,C:\repos\margro_TVServerXBMC\TVServerKodi\ConnectionHandler.cs,ProcessConnection,The method has an empty catch block.
Empty Catch Block,TVServerKodi,ConnectionHandler,C:\repos\margro_TVServerXBMC\TVServerKodi\ConnectionHandler.cs,ProcessConnection,The method has an empty catch block.
Empty Catch Block,TVServerKodi,Listener,C:\repos\margro_TVServerXBMC\TVServerKodi\Listener.cs,StartListening,The method has an empty catch block.
Empty Catch Block,TVServerKodi,Listener,C:\repos\margro_TVServerXBMC\TVServerKodi\Listener.cs,Stop,The method has an empty catch block.
Empty Catch Block,TVServerKodi,Listener,C:\repos\margro_TVServerXBMC\TVServerKodi\Listener.cs,ListenForClients,The method has an empty catch block.
Empty Catch Block,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,StartTimeShifting,The method has an empty catch block.
Empty Catch Block,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,StartTimeShifting,The method has an empty catch block.
Empty Catch Block,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetRecordingURL,The method has an empty catch block.
Empty Catch Block,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetRecordingURL,The method has an empty catch block.
Empty Catch Block,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetChannelInfo,The method has an empty catch block.
Empty Catch Block,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetTVChannels,The method has an empty catch block.
Empty Catch Block,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetTVChannels,The method has an empty catch block.
Empty Catch Block,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetRadioChannels,The method has an empty catch block.
Empty Catch Block,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetRadioChannels,The method has an empty catch block.
Empty Catch Block,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetRecordings,The method has an empty catch block.
Empty Catch Block,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetSchedules,The method has an empty catch block.
Empty Catch Block,TVServerKodi,TVServerConnection,C:\repos\margro_TVServerXBMC\TVServerKodi\TVServerConnection.cs,playChannel,The method has an empty catch block.
Empty Catch Block,TVServerKodi,TVServerConnection,C:\repos\margro_TVServerXBMC\TVServerKodi\TVServerConnection.cs,playChannel,The method has an empty catch block.
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,AddSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\AddSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 14))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                DateTime keepdate;                  int channelid = int.Parse(arguments[0]);                String title = arguments[1];                  int year = int.Parse(arguments[2]);                int month = int.Parse(arguments[3]);                int day = int.Parse(arguments[4]);                int hour = int.Parse(arguments[5]);                int min = int.Parse(arguments[6]);                int sec = int.Parse(arguments[7]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[8]);                month = int.Parse(arguments[9]);                day = int.Parse(arguments[10]);                hour = int.Parse(arguments[11]);                min = int.Parse(arguments[12]);                sec = int.Parse(arguments[13]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[14]);                    priority = int.Parse(arguments[15]);                    keepmethod = int.Parse(arguments[16]);                      year = int.Parse(arguments[17]);                    month = int.Parse(arguments[18]);                    day = int.Parse(arguments[19]);                    hour = int.Parse(arguments[20]);                    min = int.Parse(arguments[21]);                    sec = int.Parse(arguments[22]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[23]);                    postRecordInterval = Int32.Parse(arguments[24]);                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.AddSchedule(channelid' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval);                Console.WriteLine("AddSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() +                    ":ChannelId|Title|Y|M|D|H|m|s|Y|M|D|H|m|s|preMin|postMin|schedType");            }
Magic Number,TVServerKodi.Commands,GetChannelThumb,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\GetChannelThumb.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length == 2))              {                try                {                  string strChannelName = arguments[0];                  Boolean bIsRadio = Boolean.Parse(arguments[1]);                  string strThumbName = "False";                  Boolean bFound = false;                    string strThumbPath = TVServerConnection.GetLogoPath(bIsRadio);                    string strThumbBaseName = ToThumbFileName(strChannelName);                    foreach (string strExt in strThumbExt)                  {                    strThumbName = strThumbBaseName + strExt;                    if (File.Exists(strThumbPath + strThumbName))                    {                      bFound = true;                      break;                    }                  }                    if (!bFound)                  {                    writer.write("0|False");                  }                  else                  {                    Byte[] thumbData = File.ReadAllBytes(strThumbPath + strThumbName);                    Int32 fileLength = thumbData.Length;                    Int32 thumbNameLength = strThumbName.Length;                    Byte[] utf8ThumbName = System.Text.Encoding.UTF8.GetBytes(strThumbName);                    Byte[] thumbNameLengthBytes = BitConverter.GetBytes(System.Net.IPAddress.HostToNetworkOrder(utf8ThumbName.Length));                    Byte[] fileLengthBytes = BitConverter.GetBytes(System.Net.IPAddress.HostToNetworkOrder(fileLength));                      Byte[] strThumbInfo = { 0x31' 0x7C }; // ASCII: "1|"                      writer.writeBytes(strThumbInfo);                    writer.writeBytes(thumbNameLengthBytes);                    writer.writeBytes(utf8ThumbName);                    writer.writeBytes(fileLengthBytes);                    writer.writeBytes(thumbData);                      Byte[] strEnd = { 0x7C' 0x45' 0x4E' 0x44 }; // ASCII: "|END"                    writer.writeBytes(strEnd);                    }                }                catch                {                  writer.write("0|Error");                }              }              else              {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() + ":ChannelName|IsRadio");              }
Magic Number,TVServerKodi.Commands,SetRecordingStopTime,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\SetRecordingStopTime.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length == 2))            {              int recindex = int.Parse(arguments[0]);              int stopTime = int.Parse(arguments[1]);                bool result = TVServerConnection.SetRecordingStopTime(recindex' stopTime);              Console.WriteLine("SetRecordingStopTime result : " + result.ToString());              writer.write(result.ToString());            }            else            {              getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() + ":RecordingIndex|stopTime");            }
Magic Number,TVServerKodi.Commands,SetRecordingTimesWatched,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\SetRecordingTimesWatched.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length == 2))            {                int recindex = int.Parse(arguments[0]);                int count = int.Parse(arguments[1]);                  bool result = TVServerConnection.SetRecordingTimesWatched(recindex' count);                Console.WriteLine("SetRecordingTimesWatched result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() + ":RecordingIndex|timesWatched");            }
Magic Number,TVServerKodi.Commands,GetRecordingInfo,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\GetRecordingInfo.cs,handleCommand,The following statement contains a magic number: if (arguments != null)          {              try              {                  int index = Int32.Parse(arguments[0]);                  bool withRTSPurl = false;                  bool useUriEncoding = false;                    if (arguments.Length >= 2)                  {                      withRTSPurl = bool.Parse(arguments[1]);                  }                  if (arguments.Length >= 3)                  {                      useUriEncoding = bool.Parse(arguments[2]);                  }                    result = TVServerConnection.getRecordingInfo(index' withRTSPurl);                  Console.WriteLine(getCommandToHandle() + ":" + index + " " + result);                    writer.write(result' useUriEncoding);              }              catch              {                  Console.WriteLine(getCommandToHandle() + ": failed");                  writer.write("");              }          }          else          {              getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() + ":RecordingID[|withRTSPurl=False]");          }
Magic Number,TVServerKodi.Commands,GetRecordingInfo,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\GetRecordingInfo.cs,handleCommand,The following statement contains a magic number: if (arguments != null)          {              try              {                  int index = Int32.Parse(arguments[0]);                  bool withRTSPurl = false;                  bool useUriEncoding = false;                    if (arguments.Length >= 2)                  {                      withRTSPurl = bool.Parse(arguments[1]);                  }                  if (arguments.Length >= 3)                  {                      useUriEncoding = bool.Parse(arguments[2]);                  }                    result = TVServerConnection.getRecordingInfo(index' withRTSPurl);                  Console.WriteLine(getCommandToHandle() + ":" + index + " " + result);                    writer.write(result' useUriEncoding);              }              catch              {                  Console.WriteLine(getCommandToHandle() + ": failed");                  writer.write("");              }          }          else          {              getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() + ":RecordingID[|withRTSPurl=False]");          }
Magic Number,TVServerKodi.Commands,GetRecordingInfo,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\GetRecordingInfo.cs,handleCommand,The following statement contains a magic number: if (arguments != null)          {              try              {                  int index = Int32.Parse(arguments[0]);                  bool withRTSPurl = false;                  bool useUriEncoding = false;                    if (arguments.Length >= 2)                  {                      withRTSPurl = bool.Parse(arguments[1]);                  }                  if (arguments.Length >= 3)                  {                      useUriEncoding = bool.Parse(arguments[2]);                  }                    result = TVServerConnection.getRecordingInfo(index' withRTSPurl);                  Console.WriteLine(getCommandToHandle() + ":" + index + " " + result);                    writer.write(result' useUriEncoding);              }              catch              {                  Console.WriteLine(getCommandToHandle() + ": failed");                  writer.write("");              }          }          else          {              getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() + ":RecordingID[|withRTSPurl=False]");          }
Magic Number,TVServerKodi.Commands,UpdateRecording,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateRecording.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length == 2))            {                int recindex = int.Parse(arguments[0]);                String name = arguments[1];                  bool result = TVServerConnection.UpdateRecording(recindex' name);                Console.WriteLine("UpdateRecording result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() + ":RecordingIndex|NewName");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,UpdateSchedule,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\UpdateSchedule.cs,handleCommand,The following statement contains a magic number: if ((arguments != null) && (arguments.Length >= 16))            {                Int32 preRecordInterval = -1;                Int32 postRecordInterval = -1;                int scheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                int priority = -1;   // Use MediaPortal default                int keepmethod = -1; // Use MediaPortal default                int program_id = -1;                DateTime keepdate;                  int schedindex = int.Parse(arguments[0]);                int active = int.Parse(arguments[1]);                int channelid = int.Parse(arguments[2]);                String title = arguments[3];                  int year = int.Parse(arguments[4]);                int month = int.Parse(arguments[5]);                int day = int.Parse(arguments[6]);                int hour = int.Parse(arguments[7]);                int min = int.Parse(arguments[8]);                int sec = int.Parse(arguments[9]);                DateTime starttime = new DateTime(year' month' day' hour' min' sec);                  year = int.Parse(arguments[10]);                month = int.Parse(arguments[11]);                day = int.Parse(arguments[12]);                hour = int.Parse(arguments[13]);                min = int.Parse(arguments[14]);                sec = int.Parse(arguments[15]);                DateTime endtime = new DateTime(year' month' day' hour' min' sec);                  if (arguments.Length >= 25)                {                    scheduleType = int.Parse(arguments[16]);                    priority = int.Parse(arguments[17]);                    keepmethod = int.Parse(arguments[18]);                      year = int.Parse(arguments[19]);                    month = int.Parse(arguments[20]);                    day = int.Parse(arguments[21]);                    hour = int.Parse(arguments[22]);                    min = int.Parse(arguments[23]);                    sec = int.Parse(arguments[24]);                    keepdate = new DateTime(year' month' day' hour' min' sec);                      preRecordInterval = Int32.Parse(arguments[25]);                    postRecordInterval = Int32.Parse(arguments[26]);                    if (arguments.Length >= 28)                    {                      program_id = int.Parse(arguments[27]);                    }                }                else                {                    keepdate = new DateTime(2000' 01' 01' 0' 0' 0); //MediaPortal default value 2000-01-01 00:00:00                }                  bool result = TVServerConnection.UpdateSchedule(schedindex' channelid' active' title' starttime' endtime' scheduleType' priority' keepmethod' keepdate' preRecordInterval' postRecordInterval' program_id);                Console.WriteLine("UpdateSchedule result : " + result.ToString());                writer.write(result.ToString());            }            else            {                getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle()                    + ":ScheduleIndex|ChannelId|Active|Title|Y|M|D|H|m|s|Y|M|D|H|m|s[|SchedType|Priority|KeepMethod|Y|M|D|h|m|s|PreRecInt|PostRecInt] (16 or 25 arguments)");            }
Magic Number,TVServerKodi.Commands,GetScheduleInfo,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\GetScheduleInfo.cs,handleCommand,The following statement contains a magic number: if (arguments != null)          {              try              {                  int index = Int32.Parse(arguments[0]);                  bool useUriEncoding = false;                    if (arguments.Length >= 2)                  {                      useUriEncoding = bool.Parse(arguments[1]);                  }                    result = TVServerConnection.GetScheduleInfo(index);                  Console.WriteLine("GetScheduleInfo:" + index + " " + result);                    writer.write(result' useUriEncoding);              }              catch              {                  Console.WriteLine("GetScheduleInfo: failed");                  writer.write("");              }          }          else          {              getConnection().WriteLine("[ERROR]: Expected format: " + getCommandToHandle() + ":ScheduleID");          }
Magic Number,TVServerKodi.Commands,Test,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\Test.cs,handleCommand,The following statement contains a magic number: DateTime startTime = new DateTime(2009' 11' 23' 10' 00' 00);
Magic Number,TVServerKodi.Commands,Test,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\Test.cs,handleCommand,The following statement contains a magic number: DateTime startTime = new DateTime(2009' 11' 23' 10' 00' 00);
Magic Number,TVServerKodi.Commands,Test,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\Test.cs,handleCommand,The following statement contains a magic number: DateTime startTime = new DateTime(2009' 11' 23' 10' 00' 00);
Magic Number,TVServerKodi.Commands,Test,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\Test.cs,handleCommand,The following statement contains a magic number: DateTime startTime = new DateTime(2009' 11' 23' 10' 00' 00);
Magic Number,TVServerKodi.Commands,Test,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\Test.cs,handleCommand,The following statement contains a magic number: DateTime endTime = new DateTime(2009'11'23'11'15'00);
Magic Number,TVServerKodi.Commands,Test,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\Test.cs,handleCommand,The following statement contains a magic number: DateTime endTime = new DateTime(2009'11'23'11'15'00);
Magic Number,TVServerKodi.Commands,Test,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\Test.cs,handleCommand,The following statement contains a magic number: DateTime endTime = new DateTime(2009'11'23'11'15'00);
Magic Number,TVServerKodi.Commands,Test,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\Test.cs,handleCommand,The following statement contains a magic number: DateTime endTime = new DateTime(2009'11'23'11'15'00);
Magic Number,TVServerKodi.Commands,Test,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\Test.cs,handleCommand,The following statement contains a magic number: DateTime endTime = new DateTime(2009'11'23'11'15'00);
Magic Number,TVServerKodi.Commands,Test,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\Test.cs,handleCommand,The following statement contains a magic number: try              {                  newSchedule = layer.AddSchedule(32' "Marcel test"' startTime' endTime' schedtype);                  newSchedule.Persist();                  Console.WriteLine("Schedule added: " + newSchedule.IdChannel.ToString());              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);              }
Magic Number,TVServerKodi.Commands,GetEPG,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\GetEPG.cs,handleCommand,The following statement contains a magic number: if (arguments == null || arguments.Length < 1)              {                  writer.write("[ERROR]: Usage: " + getCommandToHandle() + ":chanNr");              }              else              {                  DateTime starttime;                  DateTime endtime;                  string channel = arguments[0];                                    if (arguments.Length>=3)                  {                      starttime = DateTime.Parse(arguments[1]);                      endtime = DateTime.Parse(arguments[2]);                  } else {                      starttime = DateTime.Now;                      endtime = starttime;                  }                    if (channel != "")                  {                      List<TvDatabase.Program> epgs = TVServerConnection.getEpg(int.Parse(arguments[0])' starttime' endtime);                        foreach (TvDatabase.Program e in epgs)                      {                          string epg = e.StartTime.ToString("u") + "|"                              + e.EndTime.ToString("u") + "|"                              + e.Title.Replace("|"' "") + "|"                              + e.Description.Replace("|"' "") + "|"                              + e.Genre.Replace("|"' "");                          if (arguments.Length >= 3)                          {                              epg += "|"                                  + e.IdProgram.ToString() + "|"                                  + e.IdChannel.ToString() + "|"                                  + e.SeriesNum + "|"                                  + e.EpisodeNum + "|"                                  + e.EpisodeName + "|"                                  + e.EpisodePart + "|"                                  + e.OriginalAirDate.ToString("u") + "|"                                  + e.Classification + "|"                                  + e.StarRating.ToString() + "|"                                  + e.ParentalRating.ToString();                          }                          results.Add(epg);                      }                      writer.writeList(results);                  }                  else                  {                      writer.write("[ERROR]: Usage: " + getCommandToHandle() + ":chanNr[|startDateTime|endDateTime]");                  }              }
Magic Number,TVServerKodi.Commands,GetEPG,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\GetEPG.cs,handleCommand,The following statement contains a magic number: if (arguments == null || arguments.Length < 1)              {                  writer.write("[ERROR]: Usage: " + getCommandToHandle() + ":chanNr");              }              else              {                  DateTime starttime;                  DateTime endtime;                  string channel = arguments[0];                                    if (arguments.Length>=3)                  {                      starttime = DateTime.Parse(arguments[1]);                      endtime = DateTime.Parse(arguments[2]);                  } else {                      starttime = DateTime.Now;                      endtime = starttime;                  }                    if (channel != "")                  {                      List<TvDatabase.Program> epgs = TVServerConnection.getEpg(int.Parse(arguments[0])' starttime' endtime);                        foreach (TvDatabase.Program e in epgs)                      {                          string epg = e.StartTime.ToString("u") + "|"                              + e.EndTime.ToString("u") + "|"                              + e.Title.Replace("|"' "") + "|"                              + e.Description.Replace("|"' "") + "|"                              + e.Genre.Replace("|"' "");                          if (arguments.Length >= 3)                          {                              epg += "|"                                  + e.IdProgram.ToString() + "|"                                  + e.IdChannel.ToString() + "|"                                  + e.SeriesNum + "|"                                  + e.EpisodeNum + "|"                                  + e.EpisodeName + "|"                                  + e.EpisodePart + "|"                                  + e.OriginalAirDate.ToString("u") + "|"                                  + e.Classification + "|"                                  + e.StarRating.ToString() + "|"                                  + e.ParentalRating.ToString();                          }                          results.Add(epg);                      }                      writer.writeList(results);                  }                  else                  {                      writer.write("[ERROR]: Usage: " + getCommandToHandle() + ":chanNr[|startDateTime|endDateTime]");                  }              }
Magic Number,TVServerKodi.Commands,GetEPG,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\GetEPG.cs,handleCommand,The following statement contains a magic number: if (arguments == null || arguments.Length < 1)              {                  writer.write("[ERROR]: Usage: " + getCommandToHandle() + ":chanNr");              }              else              {                  DateTime starttime;                  DateTime endtime;                  string channel = arguments[0];                                    if (arguments.Length>=3)                  {                      starttime = DateTime.Parse(arguments[1]);                      endtime = DateTime.Parse(arguments[2]);                  } else {                      starttime = DateTime.Now;                      endtime = starttime;                  }                    if (channel != "")                  {                      List<TvDatabase.Program> epgs = TVServerConnection.getEpg(int.Parse(arguments[0])' starttime' endtime);                        foreach (TvDatabase.Program e in epgs)                      {                          string epg = e.StartTime.ToString("u") + "|"                              + e.EndTime.ToString("u") + "|"                              + e.Title.Replace("|"' "") + "|"                              + e.Description.Replace("|"' "") + "|"                              + e.Genre.Replace("|"' "");                          if (arguments.Length >= 3)                          {                              epg += "|"                                  + e.IdProgram.ToString() + "|"                                  + e.IdChannel.ToString() + "|"                                  + e.SeriesNum + "|"                                  + e.EpisodeNum + "|"                                  + e.EpisodeName + "|"                                  + e.EpisodePart + "|"                                  + e.OriginalAirDate.ToString("u") + "|"                                  + e.Classification + "|"                                  + e.StarRating.ToString() + "|"                                  + e.ParentalRating.ToString();                          }                          results.Add(epg);                      }                      writer.writeList(results);                  }                  else                  {                      writer.write("[ERROR]: Usage: " + getCommandToHandle() + ":chanNr[|startDateTime|endDateTime]");                  }              }
Magic Number,TVServerKodi.Commands,ListRecordedTV,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\ListRecordedTV.cs,handleCommand,The following statement contains a magic number: foreach (RecordedInfo r in recorded)           {               Int32 runningTime = Convert.ToInt32((r.endTime.Ticks - r.startTime.Ticks) / 10000000);               string streamURL = TVServerConnection.getRecordingURL(Convert.ToInt32(r.ID));               string recitem = writer.makeItem(                   r.ID.ToString()'                   r.title.Replace(";"'"")'                   r.description.Replace(";"' "")'                   r.genre'                   r.played.ToString()'                   r.startTime.ToString()'                   r.endTime.ToString()'                   r.filename'                   r.channelName.Replace(";"' "")'                   runningTime.ToString()'                   streamURL);               results.Add(recitem);               Console.WriteLine("Recorded: " + recitem);           }
Magic Number,TVServerKodi.Commands,Program,C:\repos\margro_TVServerXBMC\TVServerKodi\Program.cs,Main,The following statement contains a magic number: if (plugin.Connected)              {                  Console.WriteLine("Running MediaPortal TV Server -> Kodi wrapper at port: " + plugin.Port);                  try                  {                      while (!Console.ReadLine().Contains("quit"))                      {                          System.Threading.Thread.Sleep(1000);                      }                  }                  catch                  {                    }                  plugin.Stop();              }              else              {                  Console.WriteLine("Press Enter to exit.");                  Console.ReadLine();                  return;              }
Magic Number,TVServerKodi.Commands,TimeshiftChannel,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\TimeshiftChannel.cs,handleCommand,The following statement contains a magic number: try {                  int chanId = int.Parse(arguments[0]);                  bool resolveToIP = true;                  bool stoptimeshift = true;                  string originalURL = "";                  string result;                  string timeShiftFileName = "";                  Int64 timeShiftBufPos = 0;                  long timeShiftBufNr = 0;                    if (arguments.Length >= 2)                  {                      resolveToIP = Boolean.Parse(arguments[1]);                      if (arguments.Length >= 3)                      {                          stoptimeshift = Boolean.Parse(arguments[2]);                      }                        if (stoptimeshift)                      {                          TVServerConnection.StopTimeshift(ref me);                      }                        result = TVServerConnection.playChannel(chanId' resolveToIP' ref originalURL' ref me' ref timeShiftFileName' ref timeShiftBufPos' ref timeShiftBufNr);                      if ( !result.StartsWith("[ERROR]") )                      {                        if (resolveToIP == true)                        {                            result += "|" + originalURL;                        }                        else                        {                            result += "|";                        }                        result += "|" + timeShiftFileName +                          "|" + me.CardId.ToString() +                          "|" + timeShiftBufPos.ToString() +                          "|" + timeShiftBufNr.ToString();                      }                        writer.write(result);                  }                  else                  {   //backward compatibility                      TVServerConnection.StopTimeshift(ref me);                      result = TVServerConnection.playChannel(chanId' resolveToIP' ref originalURL' ref me' ref timeShiftFileName' ref timeShiftBufPos' ref timeShiftBufNr);                      writer.write(result);                  }                                } catch {                  getConnection().WriteLine("[ERROR]: Usage: " + getCommandToHandle() + ":ChannelId[|ResolveIPs][|StopTimeshift]");              }
Magic Number,TVServerKodi.Commands,TimeshiftChannel,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\TimeshiftChannel.cs,handleCommand,The following statement contains a magic number: try {                  int chanId = int.Parse(arguments[0]);                  bool resolveToIP = true;                  bool stoptimeshift = true;                  string originalURL = "";                  string result;                  string timeShiftFileName = "";                  Int64 timeShiftBufPos = 0;                  long timeShiftBufNr = 0;                    if (arguments.Length >= 2)                  {                      resolveToIP = Boolean.Parse(arguments[1]);                      if (arguments.Length >= 3)                      {                          stoptimeshift = Boolean.Parse(arguments[2]);                      }                        if (stoptimeshift)                      {                          TVServerConnection.StopTimeshift(ref me);                      }                        result = TVServerConnection.playChannel(chanId' resolveToIP' ref originalURL' ref me' ref timeShiftFileName' ref timeShiftBufPos' ref timeShiftBufNr);                      if ( !result.StartsWith("[ERROR]") )                      {                        if (resolveToIP == true)                        {                            result += "|" + originalURL;                        }                        else                        {                            result += "|";                        }                        result += "|" + timeShiftFileName +                          "|" + me.CardId.ToString() +                          "|" + timeShiftBufPos.ToString() +                          "|" + timeShiftBufNr.ToString();                      }                        writer.write(result);                  }                  else                  {   //backward compatibility                      TVServerConnection.StopTimeshift(ref me);                      result = TVServerConnection.playChannel(chanId' resolveToIP' ref originalURL' ref me' ref timeShiftFileName' ref timeShiftBufPos' ref timeShiftBufNr);                      writer.write(result);                  }                                } catch {                  getConnection().WriteLine("[ERROR]: Usage: " + getCommandToHandle() + ":ChannelId[|ResolveIPs][|StopTimeshift]");              }
Magic Number,TVServerKodi.Commands,TimeshiftChannel,C:\repos\margro_TVServerXBMC\TVServerKodi\Commands\TimeshiftChannel.cs,handleCommand,The following statement contains a magic number: try {                  int chanId = int.Parse(arguments[0]);                  bool resolveToIP = true;                  bool stoptimeshift = true;                  string originalURL = "";                  string result;                  string timeShiftFileName = "";                  Int64 timeShiftBufPos = 0;                  long timeShiftBufNr = 0;                    if (arguments.Length >= 2)                  {                      resolveToIP = Boolean.Parse(arguments[1]);                      if (arguments.Length >= 3)                      {                          stoptimeshift = Boolean.Parse(arguments[2]);                      }                        if (stoptimeshift)                      {                          TVServerConnection.StopTimeshift(ref me);                      }                        result = TVServerConnection.playChannel(chanId' resolveToIP' ref originalURL' ref me' ref timeShiftFileName' ref timeShiftBufPos' ref timeShiftBufNr);                      if ( !result.StartsWith("[ERROR]") )                      {                        if (resolveToIP == true)                        {                            result += "|" + originalURL;                        }                        else                        {                            result += "|";                        }                        result += "|" + timeShiftFileName +                          "|" + me.CardId.ToString() +                          "|" + timeShiftBufPos.ToString() +                          "|" + timeShiftBufNr.ToString();                      }                        writer.write(result);                  }                  else                  {   //backward compatibility                      TVServerConnection.StopTimeshift(ref me);                      result = TVServerConnection.playChannel(chanId' resolveToIP' ref originalURL' ref me' ref timeShiftFileName' ref timeShiftBufPos' ref timeShiftBufNr);                      writer.write(result);                  }                                } catch {                  getConnection().WriteLine("[ERROR]: Usage: " + getCommandToHandle() + ":ChannelId[|ResolveIPs][|StopTimeshift]");              }
Magic Number,TVServerKodi.Common,ShareExplorer,C:\repos\margro_TVServerXBMC\TVServerKodi\Common\ShareExplorer.cs,IsValidLocalFilePath,The following statement contains a magic number: if (String.IsNullOrEmpty(fileName) || fileName.Length <= 2)              {                  return false;              }
Magic Number,TVServerKodi.Common,ShareExplorer,C:\repos\margro_TVServerXBMC\TVServerKodi\Common\ShareExplorer.cs,IsValidLocalFilePath,The following statement contains a magic number: if ('A' > drive || drive > 'Z')              {                  return false;              }              else if (Path.VolumeSeparatorChar != fileName[1])              {                  return false;              }              else if (Path.DirectorySeparatorChar != fileName[2])              {                  return false;              }
Magic Number,TVServerKodi.Common,ShareExplorer,C:\repos\margro_TVServerXBMC\TVServerKodi\Common\ShareExplorer.cs,GetServerNameFromShareName,The following statement contains a magic number: if (!String.IsNullOrEmpty(shareName) && shareName.StartsWith(@"\\"))              {                  string[] parts = shareName.Substring(2).Split('\\');                  if (parts.Length > 0)                  {                      return parts[0];                  }              }
Magic Number,TVServerKodi.Common,ShareExplorer,C:\repos\margro_TVServerXBMC\TVServerKodi\Common\ShareExplorer.cs,TryConvertUncToLocal,The following statement contains a magic number: if (pathToConvert.StartsWith(@"\\"))              {                  try                  {                      // remove the "\\" from the UNC path and split the path                      string path = pathToConvert.Replace(@"\\"' "");                      string[] uncParts = path.Split(new char[] { '\\' }' StringSplitOptions.RemoveEmptyEntries);                      if (uncParts.Length >= 2)                      {                          if (uncParts[0] == "localhost"                              || uncParts[0].Equals(Dns.GetHostName()' StringComparison.InvariantCultureIgnoreCase)                              || IsLocalMachine(uncParts[0]))                          {                              ManagementScope scope = new ManagementScope(@"\\" + uncParts[0] + @"\root\cimv2");                              SelectQuery query = new SelectQuery("Select * From Win32_Share Where Name = '" + uncParts[1] + "'");                                string localPath = String.Empty;                              using (ManagementObjectSearcher searcher = new ManagementObjectSearcher(scope' query))                              using (var collection = searcher.Get())                              {                                  foreach (ManagementObject obj in collection)                                  {                                      localPath = obj["path"].ToString();                                      break;                                  }                              }                                // Append any additional folders to the local path name                              if (uncParts.Length > 2)                              {                                  for (int i = 2; i < uncParts.Length; i++)                                  {                                      localPath = localPath.EndsWith(@"\") ? localPath + uncParts[i] : localPath + @"\" + uncParts[i];                                  }                              }                              pathToConvert = localPath;                          }                      }                  }                  catch { }              }
Magic Number,TVServerKodi.Common,ShareExplorer,C:\repos\margro_TVServerXBMC\TVServerKodi\Common\ShareExplorer.cs,TryConvertUncToLocal,The following statement contains a magic number: if (pathToConvert.StartsWith(@"\\"))              {                  try                  {                      // remove the "\\" from the UNC path and split the path                      string path = pathToConvert.Replace(@"\\"' "");                      string[] uncParts = path.Split(new char[] { '\\' }' StringSplitOptions.RemoveEmptyEntries);                      if (uncParts.Length >= 2)                      {                          if (uncParts[0] == "localhost"                              || uncParts[0].Equals(Dns.GetHostName()' StringComparison.InvariantCultureIgnoreCase)                              || IsLocalMachine(uncParts[0]))                          {                              ManagementScope scope = new ManagementScope(@"\\" + uncParts[0] + @"\root\cimv2");                              SelectQuery query = new SelectQuery("Select * From Win32_Share Where Name = '" + uncParts[1] + "'");                                string localPath = String.Empty;                              using (ManagementObjectSearcher searcher = new ManagementObjectSearcher(scope' query))                              using (var collection = searcher.Get())                              {                                  foreach (ManagementObject obj in collection)                                  {                                      localPath = obj["path"].ToString();                                      break;                                  }                              }                                // Append any additional folders to the local path name                              if (uncParts.Length > 2)                              {                                  for (int i = 2; i < uncParts.Length; i++)                                  {                                      localPath = localPath.EndsWith(@"\") ? localPath + uncParts[i] : localPath + @"\" + uncParts[i];                                  }                              }                              pathToConvert = localPath;                          }                      }                  }                  catch { }              }
Magic Number,TVServerKodi.Common,ShareExplorer,C:\repos\margro_TVServerXBMC\TVServerKodi\Common\ShareExplorer.cs,TryConvertUncToLocal,The following statement contains a magic number: if (pathToConvert.StartsWith(@"\\"))              {                  try                  {                      // remove the "\\" from the UNC path and split the path                      string path = pathToConvert.Replace(@"\\"' "");                      string[] uncParts = path.Split(new char[] { '\\' }' StringSplitOptions.RemoveEmptyEntries);                      if (uncParts.Length >= 2)                      {                          if (uncParts[0] == "localhost"                              || uncParts[0].Equals(Dns.GetHostName()' StringComparison.InvariantCultureIgnoreCase)                              || IsLocalMachine(uncParts[0]))                          {                              ManagementScope scope = new ManagementScope(@"\\" + uncParts[0] + @"\root\cimv2");                              SelectQuery query = new SelectQuery("Select * From Win32_Share Where Name = '" + uncParts[1] + "'");                                string localPath = String.Empty;                              using (ManagementObjectSearcher searcher = new ManagementObjectSearcher(scope' query))                              using (var collection = searcher.Get())                              {                                  foreach (ManagementObject obj in collection)                                  {                                      localPath = obj["path"].ToString();                                      break;                                  }                              }                                // Append any additional folders to the local path name                              if (uncParts.Length > 2)                              {                                  for (int i = 2; i < uncParts.Length; i++)                                  {                                      localPath = localPath.EndsWith(@"\") ? localPath + uncParts[i] : localPath + @"\" + uncParts[i];                                  }                              }                              pathToConvert = localPath;                          }                      }                  }                  catch { }              }
Magic Number,TVServerKodi.Common,ShareExplorer,C:\repos\margro_TVServerXBMC\TVServerKodi\Common\ShareExplorer.cs,GetShareInfoNT,The following statement contains a magic number: int level = 2;
Magic Number,TVServerKodi.Common,ShareExplorer,C:\repos\margro_TVServerXBMC\TVServerKodi\Common\ShareExplorer.cs,GetShareInfoNT,The following statement contains a magic number: try              {                  nRet = NetShareEnum(serverName' level' out pBuffer' -1' out entriesRead' out totalEntries' ref hResume);                    if (nRet == ERROR_ACCESS_DENIED)                  {                      //Need admin for level 2' drop to level 1                      level = 1;                      nRet = NetShareEnum(serverName' level' out pBuffer' -1' out entriesRead' out totalEntries' ref hResume);                  }                    if (nRet == NO_ERROR && entriesRead > 0)                  {                      Type t = (level == 2) ? typeof(SHARE_INFO_2) : typeof(SHARE_INFO_1);                      int offset = Marshal.SizeOf(t);                        for (int i = 0' lpItem = pBuffer.ToInt32(); i < entriesRead; i++' lpItem += offset)                      {                          IntPtr pItem = new IntPtr(lpItem);                          if (level == 1)                          {                              SHARE_INFO_1 shareInfo = (SHARE_INFO_1)Marshal.PtrToStructure(pItem' t);                              if (shareTypes.Contains(shareInfo.ShareType))                              {                                  shareInfoList.Add(new ShareInfo(serverName' shareInfo.NetName' string.Empty' shareInfo.ShareType' shareInfo.Remark));                              }                          }                          else                          {                              SHARE_INFO_2 shareInfo = (SHARE_INFO_2)Marshal.PtrToStructure(pItem' t);                              if (shareTypes.Contains(shareInfo.ShareType))                              {                                  shareInfoList.Add(new ShareInfo(serverName' shareInfo.NetName' shareInfo.Path' shareInfo.ShareType' shareInfo.Remark));                              }                          }                      }                  }              }              finally              {                  // Clean up buffer allocated by system                  if (IntPtr.Zero != pBuffer)                  {                      NetApiBufferFree(pBuffer);                  }              }
Magic Number,TVServerKodi.Common,ShareExplorer,C:\repos\margro_TVServerXBMC\TVServerKodi\Common\ShareExplorer.cs,GetShareInfo9x,The following statement contains a magic number: int level = 50;
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(302' 65);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(302' 65);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.TabIndex = 11;
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point(221' 65);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point(221' 65);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.okButton.TabIndex = 10;
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.shareNameTextBox.Location = new System.Drawing.Point(80' 31);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.shareNameTextBox.Location = new System.Drawing.Point(80' 31);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.shareNameTextBox.Size = new System.Drawing.Size(297' 20);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.shareNameTextBox.Size = new System.Drawing.Size(297' 20);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.shareNameTextBox.TabIndex = 9;
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this._shareLabel.Location = new System.Drawing.Point(7' 34);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this._shareLabel.Location = new System.Drawing.Point(7' 34);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this._shareLabel.Size = new System.Drawing.Size(67' 13);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this._shareLabel.Size = new System.Drawing.Size(67' 13);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this._shareLabel.TabIndex = 8;
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.localPathLabel.Location = new System.Drawing.Point(80' 8);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.localPathLabel.Location = new System.Drawing.Point(80' 8);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.localPathLabel.Size = new System.Drawing.Size(297' 20);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.localPathLabel.Size = new System.Drawing.Size(297' 20);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.localPathLabel.TabIndex = 7;
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this._pathLabel.Location = new System.Drawing.Point(7' 8);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this._pathLabel.Location = new System.Drawing.Point(7' 8);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this._pathLabel.Size = new System.Drawing.Size(60' 13);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this._pathLabel.Size = new System.Drawing.Size(60' 13);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this._pathLabel.TabIndex = 6;
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(394' 104);
Magic Number,TVServerKodi.Forms,CreateShareForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\CreateShareForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(394' 104);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size(559' 400);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size(559' 400);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Location = new System.Drawing.Point(4' 22);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Location = new System.Drawing.Point(4' 22);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Size = new System.Drawing.Size(551' 374);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Size = new System.Drawing.Size(551' 374);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(6' 6);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(6' 6);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(539' 117);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(539' 117);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.portNumericUpDown.Location = new System.Drawing.Point(64' 18);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.portNumericUpDown.Location = new System.Drawing.Point(64' 18);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.portNumericUpDown.Maximum = new decimal(new int[] {              65535'              0'              0'              0});
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.portNumericUpDown.Size = new System.Drawing.Size(60' 20);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.portNumericUpDown.Size = new System.Drawing.Size(60' 20);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.portNumericUpDown.TabIndex = 15;
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.portNumericUpDown.Value = new decimal(new int[] {              9556'              0'              0'              0});
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this._tcpPortLabel.Location = new System.Drawing.Point(6' 21);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this._tcpPortLabel.Location = new System.Drawing.Point(6' 21);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this._tcpPortLabel.Size = new System.Drawing.Size(52' 13);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this._tcpPortLabel.Size = new System.Drawing.Size(52' 13);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this._tcpPortLabel.TabIndex = 14;
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncPathsTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncPathsTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncPathsTabPage.Padding = new System.Windows.Forms.Padding(3);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncPathsTabPage.Size = new System.Drawing.Size(551' 374);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncPathsTabPage.Size = new System.Drawing.Size(551' 374);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.refreshUncButton.Location = new System.Drawing.Point(470' 321);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.refreshUncButton.Location = new System.Drawing.Point(470' 321);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.refreshUncButton.Size = new System.Drawing.Size(75' 23);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.refreshUncButton.Size = new System.Drawing.Size(75' 23);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.refreshUncButton.TabIndex = 13;
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncTimeshiftGroupBox.Location = new System.Drawing.Point(6' 163);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncTimeshiftGroupBox.Location = new System.Drawing.Point(6' 163);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncTimeshiftGroupBox.Size = new System.Drawing.Size(538' 152);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncTimeshiftGroupBox.Size = new System.Drawing.Size(538' 152);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.createTimeshiftShareButton.Location = new System.Drawing.Point(8' 123);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.createTimeshiftShareButton.Location = new System.Drawing.Point(8' 123);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.createTimeshiftShareButton.Size = new System.Drawing.Size(100' 23);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.createTimeshiftShareButton.Size = new System.Drawing.Size(100' 23);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.createTimeshiftShareButton.TabIndex = 13;
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncTimeshiftPathsDataGrid.Location = new System.Drawing.Point(7' 20);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncTimeshiftPathsDataGrid.Location = new System.Drawing.Point(7' 20);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncTimeshiftPathsDataGrid.Size = new System.Drawing.Size(525' 100);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncTimeshiftPathsDataGrid.Size = new System.Drawing.Size(525' 100);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncRecordingGroupBox.Location = new System.Drawing.Point(7' 7);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncRecordingGroupBox.Location = new System.Drawing.Point(7' 7);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncRecordingGroupBox.Size = new System.Drawing.Size(538' 152);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncRecordingGroupBox.Size = new System.Drawing.Size(538' 152);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.createRecordingsShareButton.Location = new System.Drawing.Point(7' 123);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.createRecordingsShareButton.Location = new System.Drawing.Point(7' 123);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.createRecordingsShareButton.Size = new System.Drawing.Size(100' 23);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.createRecordingsShareButton.Size = new System.Drawing.Size(100' 23);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.createRecordingsShareButton.TabIndex = 12;
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncRecordingPathsDataGrid.Location = new System.Drawing.Point(7' 20);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncRecordingPathsDataGrid.Location = new System.Drawing.Point(7' 20);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncRecordingPathsDataGrid.Size = new System.Drawing.Size(525' 100);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.uncRecordingPathsDataGrid.Size = new System.Drawing.Size(525' 100);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(559' 400);
Magic Number,TVServerKodi.Forms,SetupForm,C:\repos\margro_TVServerXBMC\TVServerKodi\Forms\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(559' 400);
Magic Number,TVServerKodi,ConnectionHandler,C:\repos\margro_TVServerXBMC\TVServerKodi\ConnectionHandler.cs,ProcessConnection,The following statement contains a magic number: try              {                  while (client.Connected)                  {                      String line = reader.ReadLine();                        if (line != null)                      {                          Console.WriteLine("Socket read: " + line);                          // every command is Command:Argument'Argument'Argument                          // where the arguments are uri encoded. Commands are not encoded                          String[] parts = line.Split(cmd_sep.ToCharArray()' 2);                          String command = parts[0];                          String[] arguments = null;                            if (parts.Length > 1)                          {                              arguments = parts[1].Split(arg_sep.ToCharArray());                              for (int i = 0; i < arguments.Length; i++)                              {                                  arguments[i] = System.Uri.UnescapeDataString(arguments[i]);                              }                          }                            Console.WriteLine("Handling command; " + command);                          Log.Debug("TVServerKodi: Handling command: " + command);                          handleCommand(command' arguments);                      }                      else                      {                          break;                      }                  }              }              catch (System.Net.Sockets.SocketException)              {                  Console.WriteLine("Could not read data.");                  Log.Debug("TVServerKodi: Could not read data.");                  try                  {                      client.Close();                      reader.Close();                  }                  catch (Exception)                  { }              }              catch (Exception e)              {                  Console.WriteLine("Exception while processing connection : " + e.ToString());                  Log.Debug("TVServerKodi: Exception while processing connection: " + e.ToString());              }
Magic Number,TVServerKodi,Listener,C:\repos\margro_TVServerXBMC\TVServerKodi\Listener.cs,Listener,The following statement contains a magic number: this.port = 9596;
Magic Number,TVServerKodi,Listener,C:\repos\margro_TVServerXBMC\TVServerKodi\Listener.cs,CreateTCPListener,The following statement contains a magic number: try              {                  if (System.Environment.OSVersion.Version.Major < 6)                  {                      // ipv4 only (older than Vista):                      this.tcpListener = new TcpListener(IPAddress.Any' port);                    }                  else                  {                      // Dual stack: accept ipv6 and ipv4 connections                      this.tcpListener = new TcpListener(IPAddress.IPv6Any' port);                      tcpListener.Server.SetSocketOption(SocketOptionLevel.IPv6' SocketOptionName.IPv6Only' false);                  }              }              catch (Exception ex)              {                  Console.WriteLine(ex.ToString());              }
Magic Number,TVServerKodi,Listener,C:\repos\margro_TVServerXBMC\TVServerKodi\Listener.cs,ListenForClients,The following statement contains a magic number: try              {                  m_clients = new List<TcpClient>();                  m_communicationThreads = new List<Thread>();                  cmdMutex = new Mutex();                    while (!stopme)                  {                      Console.WriteLine("Waiting for clients...");                      Log.Debug("TVServerKodi: Waiting for clients...");                      while (!this.tcpListener.Pending())                      {                          Thread.Sleep(30);                      }                        // blocks until a client has connected to the server                      TcpClient client = this.tcpListener.AcceptTcpClient();                        // Multithreaded version:                      Console.WriteLine("New Connection! Starting handler thread for client." + client.Client.RemoteEndPoint.ToString());                      Log.Debug("TVServerKodi: New Connection! Starting handler thread for client." + client.Client.RemoteEndPoint.ToString());                      //___________________________                      lock (this)                      {                          m_clients.Add(client);                      }                        ConnectionHandler handler = new ConnectionHandler(client' cmdMutex' m_clients.Count);                      ThreadStart thdstHandler = new ThreadStart(handler.HandleConnection);                      Thread communicationThread = new Thread(thdstHandler);                      lock (this)                      {                          m_communicationThreads.Add(communicationThread);                      }                      communicationThread.Start();                  }                    tcpListener.Stop();              }              catch (System.Threading.ThreadAbortException)              {                  //Expected on a shutdown of the TVServer              }              catch (Exception e)              {                  Log.Error("TVServerKodi: Unexpected error in ListenForClients(): " + e.ToString());                  Console.WriteLine(e.ToString());              }
Magic Number,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetTVChannels,The following statement contains a magic number: try              {                  List<string> tvchannels = new List<string>();                  HashSet<Channel> uniqueChannels = new HashSet<Channel>();                    if (groupNames.Count > 0)                  {                      IList<TvDatabase.ChannelGroup> tvGroups = ChannelGroup.ListAll();                        if (tvGroups != null)                      {                          foreach (ChannelGroup group in tvGroups)                          {                              if (groupNames.Contains(group.GroupName))                              {                                  IList<GroupMap> maps = group.ReferringGroupMap();                                  foreach (GroupMap map in maps)                                  {                                      Channel chan = map.ReferencedChannel();                                        if (chan == null)                                          continue;                                        uniqueChannels.Add(chan);                                  }                              }                          }                      }                      else                      {                          Console.WriteLine("TVServerKodi: GetTVChannels: no tv groups?");                          Log.Error("TVServerKodi: GetTVChannels: no tv groups?");                          return null;                      }                  }                  else                  {                      IList<TvDatabase.Channel> channels = Channel.ListAll();                        foreach (Channel chan in channels)                      {                          if (chan.IsTv)                              uniqueChannels.Add(chan);                      }                  }                    foreach (Channel chan in uniqueChannels)                  {                      string tvchannel;                      int channelNumber = 10000;                      bool freetoair = false;                      int majorChannel = -1;                      int minorChannel = -1;                        try                      {                          channelNumber = chan.ChannelNumber;                      }                      catch                      {                      }                        //Determine the channel number given by the provider using this channel's tuning details                      IList<TuningDetail> tuningdetails = chan.ReferringTuningDetail();                        try                      {                          foreach (TuningDetail tuningdetail in tuningdetails)                          {                              freetoair = freetoair || tuningdetail.FreeToAir;                              if (tuningdetail.ChannelType == 1) // ATSC                              {                                  if (tuningdetail.MajorChannel != -1)                                      majorChannel = tuningdetail.MajorChannel;                                  if (tuningdetail.MinorChannel != -1)                                      minorChannel = tuningdetail.MinorChannel;                              }                              if ((channelNumber == 10000) && (tuningdetail.ChannelNumber > 0))                              {                                  channelNumber = tuningdetail.ChannelNumber;                                  break;                              }                          }                      }                      catch                      {                      }                        //Kodi side:                      //uid' number' name' callsign' iconpath' isencrypted'                      //isradio' ishidden' isrecording' bouquet' multifeed'                      //stream_url;                        //[0] = channel uid                      //[1] = channel number                      //[2] = channel name                      tvchannel = chan.IdChannel + "|" + channelNumber + "|" + chan.DisplayName + "|";                      //[3] = isencrypted                      tvchannel += (freetoair ? "0" : "1");                      //[4] = iswebstream                      //[5] = webstream url                      if (chan.IsWebstream())                      {                          tvchannel += "|1|";                          Channel webChannel = chan;                          tvchannel += GetWebStreamURL(ref webChannel) + "|";                      }                      else                      {                          tvchannel += "|0||";                      }                      //[6] = visibleinguide                      tvchannel += (chan.VisibleInGuide ? "1" : "0") + "|";                      //[7] = ATSC majorchannel                      //[8] = ATSC minorchannel                      tvchannel += majorChannel + "|" + minorChannel;                        tvchannels.Add(tvchannel);                  }                    return tvchannels;              }              catch (Exception ex)              {                  lastException = ex;                  Console.WriteLine(ex.ToString());                  Log.Error("TVServerKodi: " + ex.ToString());                  return null;              }
Magic Number,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetTVChannels,The following statement contains a magic number: try              {                  List<string> tvchannels = new List<string>();                  HashSet<Channel> uniqueChannels = new HashSet<Channel>();                    if (groupNames.Count > 0)                  {                      IList<TvDatabase.ChannelGroup> tvGroups = ChannelGroup.ListAll();                        if (tvGroups != null)                      {                          foreach (ChannelGroup group in tvGroups)                          {                              if (groupNames.Contains(group.GroupName))                              {                                  IList<GroupMap> maps = group.ReferringGroupMap();                                  foreach (GroupMap map in maps)                                  {                                      Channel chan = map.ReferencedChannel();                                        if (chan == null)                                          continue;                                        uniqueChannels.Add(chan);                                  }                              }                          }                      }                      else                      {                          Console.WriteLine("TVServerKodi: GetTVChannels: no tv groups?");                          Log.Error("TVServerKodi: GetTVChannels: no tv groups?");                          return null;                      }                  }                  else                  {                      IList<TvDatabase.Channel> channels = Channel.ListAll();                        foreach (Channel chan in channels)                      {                          if (chan.IsTv)                              uniqueChannels.Add(chan);                      }                  }                    foreach (Channel chan in uniqueChannels)                  {                      string tvchannel;                      int channelNumber = 10000;                      bool freetoair = false;                      int majorChannel = -1;                      int minorChannel = -1;                        try                      {                          channelNumber = chan.ChannelNumber;                      }                      catch                      {                      }                        //Determine the channel number given by the provider using this channel's tuning details                      IList<TuningDetail> tuningdetails = chan.ReferringTuningDetail();                        try                      {                          foreach (TuningDetail tuningdetail in tuningdetails)                          {                              freetoair = freetoair || tuningdetail.FreeToAir;                              if (tuningdetail.ChannelType == 1) // ATSC                              {                                  if (tuningdetail.MajorChannel != -1)                                      majorChannel = tuningdetail.MajorChannel;                                  if (tuningdetail.MinorChannel != -1)                                      minorChannel = tuningdetail.MinorChannel;                              }                              if ((channelNumber == 10000) && (tuningdetail.ChannelNumber > 0))                              {                                  channelNumber = tuningdetail.ChannelNumber;                                  break;                              }                          }                      }                      catch                      {                      }                        //Kodi side:                      //uid' number' name' callsign' iconpath' isencrypted'                      //isradio' ishidden' isrecording' bouquet' multifeed'                      //stream_url;                        //[0] = channel uid                      //[1] = channel number                      //[2] = channel name                      tvchannel = chan.IdChannel + "|" + channelNumber + "|" + chan.DisplayName + "|";                      //[3] = isencrypted                      tvchannel += (freetoair ? "0" : "1");                      //[4] = iswebstream                      //[5] = webstream url                      if (chan.IsWebstream())                      {                          tvchannel += "|1|";                          Channel webChannel = chan;                          tvchannel += GetWebStreamURL(ref webChannel) + "|";                      }                      else                      {                          tvchannel += "|0||";                      }                      //[6] = visibleinguide                      tvchannel += (chan.VisibleInGuide ? "1" : "0") + "|";                      //[7] = ATSC majorchannel                      //[8] = ATSC minorchannel                      tvchannel += majorChannel + "|" + minorChannel;                        tvchannels.Add(tvchannel);                  }                    return tvchannels;              }              catch (Exception ex)              {                  lastException = ex;                  Console.WriteLine(ex.ToString());                  Log.Error("TVServerKodi: " + ex.ToString());                  return null;              }
Magic Number,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetRadioChannels,The following statement contains a magic number: try              {                  List<string> radiochannels = new List<string>();                  HashSet<Channel> uniqueChannels = new HashSet<Channel>();                    if (groupNames.Count > 0)                  {                      IList<TvDatabase.RadioChannelGroup> radioGroups = RadioChannelGroup.ListAll();                        if (radioGroups != null)                      {                          foreach (RadioChannelGroup group in radioGroups)                          {                              if (groupNames.Contains(group.GroupName))                              {                                    IList<RadioGroupMap> maps = group.ReferringRadioGroupMap();                                  foreach (RadioGroupMap map in maps)                                  {                                      Channel chan = map.ReferencedChannel();                                        if (chan == null)                                          continue;                                        uniqueChannels.Add(chan);                                  }                              }                          }                      }                      else                      {                         Console.WriteLine("TVServerKodi: GetRadioChannels: no radio groups?");                          Log.Error("TVServerKodi: GetRadioChannels: no radio groups?");                          return null;                      }                  }                  else                  {                      IList<TvDatabase.Channel> channels = Channel.ListAll();                        foreach (Channel chan in channels)                      {                          if (chan.IsRadio)                              uniqueChannels.Add(chan);                      }                  }                    foreach (Channel chan in uniqueChannels)                  {                      string radiochannel;                      int channelNumber = 10000;                      bool freetoair = false;                      int majorChannel = -1;                      int minorChannel = -1;                        try                      {                          channelNumber = chan.ChannelNumber;                      }                      catch                      {                      }                        try                      {                          //Determine the channel number given by the provider using this channel's tuning details                          IList<TuningDetail> tuningdetails = chan.ReferringTuningDetail();                            foreach (TuningDetail tuningdetail in tuningdetails)                          {                              freetoair = freetoair || tuningdetail.FreeToAir;                              if (tuningdetail.ChannelType == 1) // ATSC                              {                                  if (tuningdetail.MajorChannel != -1)                                      majorChannel = tuningdetail.MajorChannel;                                  if (tuningdetail.MinorChannel != -1)                                      minorChannel = tuningdetail.MinorChannel;                              }                              if ((channelNumber == 10000) && (tuningdetail.ChannelNumber > 0))                              {                                  channelNumber = tuningdetail.ChannelNumber;                                  break;                              }                          }                      }                      catch                      {                      }                        //XBMC side:                      //[0] = channel uid                      //[1] = channel number                      //[2] = channel name                      radiochannel = chan.IdChannel + "|" + channelNumber + "|" + chan.DisplayName + "|";                      //[3] = isencrypted                      radiochannel += (freetoair ? "0" : "1");                      //[4] = iswebstream                      //[5] = webstream url                      if (chan.IsWebstream())                      {                          radiochannel += "|1|";                          Channel webChannel = chan;                          radiochannel += GetWebStreamURL(ref webChannel) + "|";                      }                      else                      {                          radiochannel += "|0||";                      }                      //[6] = visibleinguide                      radiochannel += (chan.VisibleInGuide ? "1" : "0") + "|";                      //[7] = ATSC majorchannel                      //[8] = ATSC minorchannel                      radiochannel += majorChannel + "|" + minorChannel;                        radiochannels.Add(radiochannel);                  }                    return radiochannels;              }              catch (Exception ex)              {                  lastException = ex;                  Console.WriteLine(ex.ToString());                  Log.Error("TVServerKodi: " + ex.ToString());                  return null;              }
Magic Number,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetRadioChannels,The following statement contains a magic number: try              {                  List<string> radiochannels = new List<string>();                  HashSet<Channel> uniqueChannels = new HashSet<Channel>();                    if (groupNames.Count > 0)                  {                      IList<TvDatabase.RadioChannelGroup> radioGroups = RadioChannelGroup.ListAll();                        if (radioGroups != null)                      {                          foreach (RadioChannelGroup group in radioGroups)                          {                              if (groupNames.Contains(group.GroupName))                              {                                    IList<RadioGroupMap> maps = group.ReferringRadioGroupMap();                                  foreach (RadioGroupMap map in maps)                                  {                                      Channel chan = map.ReferencedChannel();                                        if (chan == null)                                          continue;                                        uniqueChannels.Add(chan);                                  }                              }                          }                      }                      else                      {                         Console.WriteLine("TVServerKodi: GetRadioChannels: no radio groups?");                          Log.Error("TVServerKodi: GetRadioChannels: no radio groups?");                          return null;                      }                  }                  else                  {                      IList<TvDatabase.Channel> channels = Channel.ListAll();                        foreach (Channel chan in channels)                      {                          if (chan.IsRadio)                              uniqueChannels.Add(chan);                      }                  }                    foreach (Channel chan in uniqueChannels)                  {                      string radiochannel;                      int channelNumber = 10000;                      bool freetoair = false;                      int majorChannel = -1;                      int minorChannel = -1;                        try                      {                          channelNumber = chan.ChannelNumber;                      }                      catch                      {                      }                        try                      {                          //Determine the channel number given by the provider using this channel's tuning details                          IList<TuningDetail> tuningdetails = chan.ReferringTuningDetail();                            foreach (TuningDetail tuningdetail in tuningdetails)                          {                              freetoair = freetoair || tuningdetail.FreeToAir;                              if (tuningdetail.ChannelType == 1) // ATSC                              {                                  if (tuningdetail.MajorChannel != -1)                                      majorChannel = tuningdetail.MajorChannel;                                  if (tuningdetail.MinorChannel != -1)                                      minorChannel = tuningdetail.MinorChannel;                              }                              if ((channelNumber == 10000) && (tuningdetail.ChannelNumber > 0))                              {                                  channelNumber = tuningdetail.ChannelNumber;                                  break;                              }                          }                      }                      catch                      {                      }                        //XBMC side:                      //[0] = channel uid                      //[1] = channel number                      //[2] = channel name                      radiochannel = chan.IdChannel + "|" + channelNumber + "|" + chan.DisplayName + "|";                      //[3] = isencrypted                      radiochannel += (freetoair ? "0" : "1");                      //[4] = iswebstream                      //[5] = webstream url                      if (chan.IsWebstream())                      {                          radiochannel += "|1|";                          Channel webChannel = chan;                          radiochannel += GetWebStreamURL(ref webChannel) + "|";                      }                      else                      {                          radiochannel += "|0||";                      }                      //[6] = visibleinguide                      radiochannel += (chan.VisibleInGuide ? "1" : "0") + "|";                      //[7] = ATSC majorchannel                      //[8] = ATSC minorchannel                      radiochannel += majorChannel + "|" + minorChannel;                        radiochannels.Add(radiochannel);                  }                    return radiochannels;              }              catch (Exception ex)              {                  lastException = ex;                  Console.WriteLine(ex.ToString());                  Log.Error("TVServerKodi: " + ex.ToString());                  return null;              }
Magic Number,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetWebStreamURL,The following statement contains a magic number: foreach (TuningDetail detail in details)              {                  if (detail.ChannelType == 5)                  {                      url = detail.Url;                      break;                  }              }
Magic Number,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,UpdateSchedule,The following statement contains a magic number: try              {                  TvBusinessLayer layer = new TvBusinessLayer();                  Schedule updatedSchedule = Schedule.Retrieve(scheduleindex);                  DateTime defaultCanceled = new DateTime(2000' 01' 01' 0' 0' 0); //Active                    // Note that Kodi 16.x returns once for a program below a series schedule...                  if ((programId != -1) && (scheduleType != (int)TvDatabase.ScheduleRecordingType.Once || updatedSchedule.ScheduleType != (int)TvDatabase.ScheduleRecordingType.Once))                  {                    // Series schedule' retrieve the canceled programs list                    Program program = Program.Retrieve(programId);                      //program.                      IList<CanceledSchedule> canceledSched = updatedSchedule.ReferringCanceledSchedule();                      if (active == 1)                    {                      // Check if this schedule is deactivated and remove it from the CanceledSchedule list                      foreach (CanceledSchedule cs in canceledSched)                      {                        if (cs.CancelDateTime == program.StartTime)                        {                          cs.Remove();                          break;                        }                      }                    }                    else                    {                      Boolean found = false;                      // Add this schedule to the CanceledSchedule list if not already in the list                      foreach (CanceledSchedule cs in canceledSched)                      {                        if (cs.CancelDateTime == program.StartTime)                        {                          found = true;                          break;                        }                      }                        if (!found)                      {                        CanceledSchedule newCs = new CanceledSchedule(scheduleindex' program.IdChannel' program.StartTime);                        newCs.Persist();                      }                    }                      //  if (!found)                    //  {                    //    Program.ProgramState                    //  }                    //}                    return true;                  }                                        updatedSchedule.ProgramName = programName;                  updatedSchedule.StartTime = startTime;                  updatedSchedule.EndTime = endTime;                  if ((active == 0) && (updatedSchedule.Canceled.Equals(defaultCanceled)))                  {   // Canceled from XBMC                      updatedSchedule.Canceled = DateTime.Now;                  }                  else if ((active == 1) && (!updatedSchedule.Canceled.Equals(defaultCanceled)))                  {   // Re-activated                      updatedSchedule.Canceled = defaultCanceled;                  }                    if (scheduleType < 0)                  {   //Unknown' record once                      updatedSchedule.ScheduleType = (int)TvDatabase.ScheduleRecordingType.Once;                  }                  else                  {   //Use the given value                      updatedSchedule.ScheduleType = scheduleType;                  }                    if (priority != -1)                  {                      updatedSchedule.Priority = priority;                  }                    if (keepmethod != -1)                  {                      updatedSchedule.KeepMethod = keepmethod;                      updatedSchedule.KeepDate = keepdate;                  }                    if ((preRecordInterval < 0) && (postRecordInterval < 0))                  {   //Use the settings from Mediaportal                      updatedSchedule.PreRecordInterval = Int32.Parse(layer.GetSetting("preRecordInterval"' "5").Value);                      updatedSchedule.PostRecordInterval = Int32.Parse(layer.GetSetting("postRecordInterval"' "5").Value);                  }                  else                  {   // Use the settings from XBMC                      updatedSchedule.PreRecordInterval = preRecordInterval;                      updatedSchedule.PostRecordInterval = postRecordInterval;                  }                  updatedSchedule.Persist();                  RemoteControl.Instance.OnNewSchedule();                    return true;              }              catch              {                  return false;              }
Magic Number,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetRecordingDriveSpace,The following statement contains a magic number: try              {                  TvBusinessLayer layer = new TvBusinessLayer();                  //Int32.Parse(layer.GetSetting("preRecordInterval"' "5").Value);                  IList<TvDatabase.Card> cards = Card.ListAll();                    System.IO.DriveInfo[] local_allDrives = System.IO.DriveInfo.GetDrives();                    foreach (Card card in cards)                  {                        if (card.RecordingFolder.Length > 0)                      {                          string rec_drive = "";                            if(card.RecordingFolder.StartsWith(@"\\"))                          {                              rec_drive = ShareExplorer.TryConvertUncToLocal(card.RecordingFolder);                              rec_drive = rec_drive.Substring(0' 3);                          }                          else                              rec_drive = card.RecordingFolder.Substring(0' 3);                            if (!processedDrives.Exists(drive => drive == rec_drive))                          {                              foreach (System.IO.DriveInfo local_Drive in local_allDrives)                              {                                  if (local_Drive.Name == rec_drive)                                  {                                      processedDrives.Add(rec_drive);                                      disktotal += (local_Drive.TotalSize / (1024)); // in kb                                      diskused += ((local_Drive.TotalSize - local_Drive.TotalFreeSpace) / (1024)); // in kb                                      break;                                  }                              }                          }                      }                  }                  result = disktotal.ToString() + "|" + diskused.ToString();              }              catch (Exception e)              {                  Console.WriteLine("Error while obtaining the GetRecordingDriveSpace: " + e.Message);                  Log.Debug("TVServerKodi: Error while obtaining the GetRecordingDriveSpace: " + e.Message);              }
Magic Number,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetRecordingDriveSpace,The following statement contains a magic number: try              {                  TvBusinessLayer layer = new TvBusinessLayer();                  //Int32.Parse(layer.GetSetting("preRecordInterval"' "5").Value);                  IList<TvDatabase.Card> cards = Card.ListAll();                    System.IO.DriveInfo[] local_allDrives = System.IO.DriveInfo.GetDrives();                    foreach (Card card in cards)                  {                        if (card.RecordingFolder.Length > 0)                      {                          string rec_drive = "";                            if(card.RecordingFolder.StartsWith(@"\\"))                          {                              rec_drive = ShareExplorer.TryConvertUncToLocal(card.RecordingFolder);                              rec_drive = rec_drive.Substring(0' 3);                          }                          else                              rec_drive = card.RecordingFolder.Substring(0' 3);                            if (!processedDrives.Exists(drive => drive == rec_drive))                          {                              foreach (System.IO.DriveInfo local_Drive in local_allDrives)                              {                                  if (local_Drive.Name == rec_drive)                                  {                                      processedDrives.Add(rec_drive);                                      disktotal += (local_Drive.TotalSize / (1024)); // in kb                                      diskused += ((local_Drive.TotalSize - local_Drive.TotalFreeSpace) / (1024)); // in kb                                      break;                                  }                              }                          }                      }                  }                  result = disktotal.ToString() + "|" + diskused.ToString();              }              catch (Exception e)              {                  Console.WriteLine("Error while obtaining the GetRecordingDriveSpace: " + e.Message);                  Log.Debug("TVServerKodi: Error while obtaining the GetRecordingDriveSpace: " + e.Message);              }
Magic Number,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetRecordingDriveSpace,The following statement contains a magic number: try              {                  TvBusinessLayer layer = new TvBusinessLayer();                  //Int32.Parse(layer.GetSetting("preRecordInterval"' "5").Value);                  IList<TvDatabase.Card> cards = Card.ListAll();                    System.IO.DriveInfo[] local_allDrives = System.IO.DriveInfo.GetDrives();                    foreach (Card card in cards)                  {                        if (card.RecordingFolder.Length > 0)                      {                          string rec_drive = "";                            if(card.RecordingFolder.StartsWith(@"\\"))                          {                              rec_drive = ShareExplorer.TryConvertUncToLocal(card.RecordingFolder);                              rec_drive = rec_drive.Substring(0' 3);                          }                          else                              rec_drive = card.RecordingFolder.Substring(0' 3);                            if (!processedDrives.Exists(drive => drive == rec_drive))                          {                              foreach (System.IO.DriveInfo local_Drive in local_allDrives)                              {                                  if (local_Drive.Name == rec_drive)                                  {                                      processedDrives.Add(rec_drive);                                      disktotal += (local_Drive.TotalSize / (1024)); // in kb                                      diskused += ((local_Drive.TotalSize - local_Drive.TotalFreeSpace) / (1024)); // in kb                                      break;                                  }                              }                          }                      }                  }                  result = disktotal.ToString() + "|" + diskused.ToString();              }              catch (Exception e)              {                  Console.WriteLine("Error while obtaining the GetRecordingDriveSpace: " + e.Message);                  Log.Debug("TVServerKodi: Error while obtaining the GetRecordingDriveSpace: " + e.Message);              }
Magic Number,TVServerKodi,TVServerController,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\ServerInterface.cs,GetRecordingDriveSpace,The following statement contains a magic number: try              {                  TvBusinessLayer layer = new TvBusinessLayer();                  //Int32.Parse(layer.GetSetting("preRecordInterval"' "5").Value);                  IList<TvDatabase.Card> cards = Card.ListAll();                    System.IO.DriveInfo[] local_allDrives = System.IO.DriveInfo.GetDrives();                    foreach (Card card in cards)                  {                        if (card.RecordingFolder.Length > 0)                      {                          string rec_drive = "";                            if(card.RecordingFolder.StartsWith(@"\\"))                          {                              rec_drive = ShareExplorer.TryConvertUncToLocal(card.RecordingFolder);                              rec_drive = rec_drive.Substring(0' 3);                          }                          else                              rec_drive = card.RecordingFolder.Substring(0' 3);                            if (!processedDrives.Exists(drive => drive == rec_drive))                          {                              foreach (System.IO.DriveInfo local_Drive in local_allDrives)                              {                                  if (local_Drive.Name == rec_drive)                                  {                                      processedDrives.Add(rec_drive);                                      disktotal += (local_Drive.TotalSize / (1024)); // in kb                                      diskused += ((local_Drive.TotalSize - local_Drive.TotalFreeSpace) / (1024)); // in kb                                      break;                                  }                              }                          }                      }                  }                  result = disktotal.ToString() + "|" + diskused.ToString();              }              catch (Exception e)              {                  Console.WriteLine("Error while obtaining the GetRecordingDriveSpace: " + e.Message);                  Log.Debug("TVServerKodi: Error while obtaining the GetRecordingDriveSpace: " + e.Message);              }
Magic Number,TVServerKodi,Utility,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\Utility.cs,CreateUncShare,The following statement contains a magic number: using (ManagementClass managementClass = new ManagementClass(scope' new ManagementPath("Win32_Share")' (ObjectGetOptions) null))        {          SecurityIdentifier securityIdentifier = new SecurityIdentifier(WellKnownSidType.WorldSid' (SecurityIdentifier) null);          byte[] binaryForm = new byte[securityIdentifier.BinaryLength];          securityIdentifier.GetBinaryForm(binaryForm' 0);            using (ManagementObject wmiTrustee = new ManagementClass(scope' new ManagementPath("Win32_Trustee")' (ObjectGetOptions) null).CreateInstance())          {            wmiTrustee["SID"] = (object) binaryForm;            using (ManagementObject wmiACE = new ManagementClass(scope' new ManagementPath("Win32_ACE")' (ObjectGetOptions) null).CreateInstance())            {              wmiACE["AccessMask"] = 131241; //READ_CONTROL | FILE_READ | FILE_TRAVERSE | FILE_READ_EA | FILE_LIST_DIRECTORY              wmiACE["AceFlags"] = 3;        //OBJECT_INHERIT_ACE | CONTAINER_INHERIT_ACE              wmiACE["AceType"] = 0; //ACCESS_ALLOWED              wmiACE["Trustee"] = wmiTrustee;              using (ManagementObject wmiSecurityDescriptor = new ManagementClass(scope' new ManagementPath("Win32_SecurityDescriptor")' (ObjectGetOptions) null).CreateInstance())              {                 wmiSecurityDescriptor["ControlFlags"] = 4;                wmiSecurityDescriptor["DACL"] = new ManagementObject[] { wmiACE };                using (ManagementBaseObject inParamsCreate = managementClass.GetMethodParameters("Create"))                {                  inParamsCreate["Access"] = wmiSecurityDescriptor;                  inParamsCreate["Path"] = localPath;                  inParamsCreate["Name"] = shareName;                  inParamsCreate["Type"] = 0;                  inParamsCreate["Description"] = "TVServerXBMC share";                  using (ManagementBaseObject outParams = managementClass.InvokeMethod("Create"' inParamsCreate' (InvokeMethodOptions) null))                    return ((int) (uint) outParams["returnValue"] == 0);                }              }            }          }        }
Magic Number,TVServerKodi,Utility,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\Utility.cs,CreateUncShare,The following statement contains a magic number: using (ManagementClass managementClass = new ManagementClass(scope' new ManagementPath("Win32_Share")' (ObjectGetOptions) null))        {          SecurityIdentifier securityIdentifier = new SecurityIdentifier(WellKnownSidType.WorldSid' (SecurityIdentifier) null);          byte[] binaryForm = new byte[securityIdentifier.BinaryLength];          securityIdentifier.GetBinaryForm(binaryForm' 0);            using (ManagementObject wmiTrustee = new ManagementClass(scope' new ManagementPath("Win32_Trustee")' (ObjectGetOptions) null).CreateInstance())          {            wmiTrustee["SID"] = (object) binaryForm;            using (ManagementObject wmiACE = new ManagementClass(scope' new ManagementPath("Win32_ACE")' (ObjectGetOptions) null).CreateInstance())            {              wmiACE["AccessMask"] = 131241; //READ_CONTROL | FILE_READ | FILE_TRAVERSE | FILE_READ_EA | FILE_LIST_DIRECTORY              wmiACE["AceFlags"] = 3;        //OBJECT_INHERIT_ACE | CONTAINER_INHERIT_ACE              wmiACE["AceType"] = 0; //ACCESS_ALLOWED              wmiACE["Trustee"] = wmiTrustee;              using (ManagementObject wmiSecurityDescriptor = new ManagementClass(scope' new ManagementPath("Win32_SecurityDescriptor")' (ObjectGetOptions) null).CreateInstance())              {                 wmiSecurityDescriptor["ControlFlags"] = 4;                wmiSecurityDescriptor["DACL"] = new ManagementObject[] { wmiACE };                using (ManagementBaseObject inParamsCreate = managementClass.GetMethodParameters("Create"))                {                  inParamsCreate["Access"] = wmiSecurityDescriptor;                  inParamsCreate["Path"] = localPath;                  inParamsCreate["Name"] = shareName;                  inParamsCreate["Type"] = 0;                  inParamsCreate["Description"] = "TVServerXBMC share";                  using (ManagementBaseObject outParams = managementClass.InvokeMethod("Create"' inParamsCreate' (InvokeMethodOptions) null))                    return ((int) (uint) outParams["returnValue"] == 0);                }              }            }          }        }
Magic Number,TVServerKodi,Utility,C:\repos\margro_TVServerXBMC\TVServerKodi\TV\Utility.cs,CreateUncShare,The following statement contains a magic number: using (ManagementClass managementClass = new ManagementClass(scope' new ManagementPath("Win32_Share")' (ObjectGetOptions) null))        {          SecurityIdentifier securityIdentifier = new SecurityIdentifier(WellKnownSidType.WorldSid' (SecurityIdentifier) null);          byte[] binaryForm = new byte[securityIdentifier.BinaryLength];          securityIdentifier.GetBinaryForm(binaryForm' 0);            using (ManagementObject wmiTrustee = new ManagementClass(scope' new ManagementPath("Win32_Trustee")' (ObjectGetOptions) null).CreateInstance())          {            wmiTrustee["SID"] = (object) binaryForm;            using (ManagementObject wmiACE = new ManagementClass(scope' new ManagementPath("Win32_ACE")' (ObjectGetOptions) null).CreateInstance())            {              wmiACE["AccessMask"] = 131241; //READ_CONTROL | FILE_READ | FILE_TRAVERSE | FILE_READ_EA | FILE_LIST_DIRECTORY              wmiACE["AceFlags"] = 3;        //OBJECT_INHERIT_ACE | CONTAINER_INHERIT_ACE              wmiACE["AceType"] = 0; //ACCESS_ALLOWED              wmiACE["Trustee"] = wmiTrustee;              using (ManagementObject wmiSecurityDescriptor = new ManagementClass(scope' new ManagementPath("Win32_SecurityDescriptor")' (ObjectGetOptions) null).CreateInstance())              {                 wmiSecurityDescriptor["ControlFlags"] = 4;                wmiSecurityDescriptor["DACL"] = new ManagementObject[] { wmiACE };                using (ManagementBaseObject inParamsCreate = managementClass.GetMethodParameters("Create"))                {                  inParamsCreate["Access"] = wmiSecurityDescriptor;                  inParamsCreate["Path"] = localPath;                  inParamsCreate["Name"] = shareName;                  inParamsCreate["Type"] = 0;                  inParamsCreate["Description"] = "TVServerXBMC share";                  using (ManagementBaseObject outParams = managementClass.InvokeMethod("Create"' inParamsCreate' (InvokeMethodOptions) null))                    return ((int) (uint) outParams["returnValue"] == 0);                }              }            }          }        }
