Implementation smell,Namespace,Class,File,Method,Description
Long Method,WaveEngine.Components.Cameras,FreeCamera3DBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Cameras\FreeCamera3DBehavior.cs,HandleInput,The method has 108 lines of code.
Long Method,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,DeltaFunction,The method has 101 lines of code.
Long Method,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,DeltaFunction,The method has 100 lines of code.
Long Method,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,DeltaFunction,The method has 100 lines of code.
Long Method,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,DeltaFunction,The method has 100 lines of code.
Long Method,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,The method has 273 lines of code.
Long Method,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The method has 148 lines of code.
Long Method,WaveEngine.Components.Graphics2D,SpriteRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\SpriteRenderer.cs,RefreshSliceCache,The method has 112 lines of code.
Long Method,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The method has 121 lines of code.
Long Method,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The method has 341 lines of code.
Long Method,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The method has 144 lines of code.
Long Method,WaveEngine.Components.UI,GridControl,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Grid\GridControl.cs,Measure,The method has 183 lines of code.
Long Method,WaveEngine.Components.UI,ImageControl,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Image\ImageControl.cs,Arrange,The method has 114 lines of code.
Long Method,WaveEngine.Components.UI,TextControl,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBlock\TextControl.cs,UpdateSize,The method has 199 lines of code.
Long Method,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,Update,The method has 235 lines of code.
Complex Method,WaveEngine.Components.Animation,Animation2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Animation\Animation2D.cs,PlayAnimation,Cyclomatic complexity of the method is 11
Complex Method,WaveEngine.Components.Cameras,FreeCamera3DBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Cameras\FreeCamera3DBehavior.cs,HandleInput,Cyclomatic complexity of the method is 13
Complex Method,WaveEngine.Components.Cameras,ViewCamera3DBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Cameras\ViewCamera3DBehavior.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,DeltaFunction,Cyclomatic complexity of the method is 31
Complex Method,WaveEngine.Components.GameActions,RotateTo3DGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\RotateTo3DGameAction.cs,PerformRun,Cyclomatic complexity of the method is 8
Complex Method,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,DeltaFunction,Cyclomatic complexity of the method is 31
Complex Method,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,DeltaFunction,Cyclomatic complexity of the method is 31
Complex Method,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,DeltaFunction,Cyclomatic complexity of the method is 31
Complex Method,WaveEngine.Components.GameActions,WaitCountGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\WaitCountGameAction.cs,PerformRun,Cyclomatic complexity of the method is 8
Complex Method,WaveEngine.Components.Gestures,TouchGestures,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Gestures\TouchGestures.cs,FreeState,Cyclomatic complexity of the method is 12
Complex Method,WaveEngine.Components.Graphics2D,LineMeshRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\LineMeshRenderer2D.cs,DrawDebugLines,Cyclomatic complexity of the method is 9
Complex Method,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,Cyclomatic complexity of the method is 31
Complex Method,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,Cyclomatic complexity of the method is 17
Complex Method,WaveEngine.Components.Graphics2D,SpriteRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\SpriteRenderer.cs,RefreshSliceCache,Cyclomatic complexity of the method is 11
Complex Method,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,FillStripLines,Cyclomatic complexity of the method is 11
Complex Method,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,Cyclomatic complexity of the method is 12
Complex Method,WaveEngine.Components.Primitives,Sphere,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Sphere.cs,Sphere,Cyclomatic complexity of the method is 10
Complex Method,WaveEngine.Components.Graphics3D,InternalModel,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\InternalModel.cs,FillNode,Cyclomatic complexity of the method is 9
Complex Method,WaveEngine.Components.Graphics3D,LineMeshRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\LineMeshRenderer3D.cs,DrawDebugLines,Cyclomatic complexity of the method is 11
Complex Method,WaveEngine.Components.Graphics3D,MeshRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\MeshRenderer.cs,Draw,Cyclomatic complexity of the method is 8
Complex Method,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,Cyclomatic complexity of the method is 38
Complex Method,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,Cyclomatic complexity of the method is 17
Complex Method,WaveEngine.Components.Transitions,CoverTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CoverTransition.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,WaveEngine.Components.Transitions,UncoverTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\UncoverTransition.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,WaveEngine.Components.UI,GridControl,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Grid\GridControl.cs,Measure,Cyclomatic complexity of the method is 38
Complex Method,WaveEngine.Components.UI,ImageControl,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Image\ImageControl.cs,Arrange,Cyclomatic complexity of the method is 18
Complex Method,WaveEngine.Components.UI,TextControl,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBlock\TextControl.cs,UpdateSize,Cyclomatic complexity of the method is 20
Complex Method,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,Gestures_TouchPressed,Cyclomatic complexity of the method is 10
Complex Method,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,Update,Cyclomatic complexity of the method is 47
Complex Method,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,AppendCharacter,Cyclomatic complexity of the method is 21
Complex Method,WaveEngine.Components.UI,WrapPanelControl,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Wrap\WrapPanelControl.cs,Measure,Cyclomatic complexity of the method is 10
Complex Method,WaveEngine.Components.VR,VRCameraRig,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\VR\VRCameraRig.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,WaveEngine.Components.VR,VRCameraRig,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\VR\VRCameraRig.cs,InstantiateOVRHierarchy,Cyclomatic complexity of the method is 12
Long Parameter List,WaveEngine.Components.Animation,Animation2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Animation\Animation2D.cs,PlayAnimation,The method has 5 parameters. Parameters: name' startFrame' endFrame' loop' playbackRate
Long Parameter List,WaveEngine.Components.Animation,Animation2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Animation\Animation2D.cs,PlayAnimation,The method has 6 parameters. Parameters: name' startFrame' endFrame' loop' playbackRate' framesPerSecond
Long Parameter List,WaveEngine.Components.Animation,Animation3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Animation\Animation3D.cs,PlayAnimation,The method has 6 parameters. Parameters: name' loop' transitionTime' playbackRate' startTime' endTime
Long Parameter List,WaveEngine.Components.Animation,Animation3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Animation\Animation3D.cs,PlayAnimation,The method has 5 parameters. Parameters: name' startTime' endTime' loop' playbackRate
Long Parameter List,WaveEngine.Components.Animation,AnimationBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Animation\AnimationBase.cs,PlayAnimation,The method has 5 parameters. Parameters: name' startFrame' endFrame' loop' playbackRate
Long Parameter List,WaveEngine.Components.Animation,AnimationTrackClip,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Animation\Clips\AnimationTrackClip.cs,AnimationTrackClip,The method has 5 parameters. Parameters: track' looping' playbackRate' startTime' endTime
Long Parameter List,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,FloatAnimationGameAction,The method has 5 parameters. Parameters: entity' from' to' time' ease
Long Parameter List,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,FloatAnimationGameAction,The method has 6 parameters. Parameters: entity' from' to' time' ease' updateAction
Long Parameter List,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,DeltaFunction,The method has 5 parameters. Parameters: function' from' to' time' totalTime
Long Parameter List,WaveEngine.Components.GameActions,MoveTo2DGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\MoveTo2DGameAction.cs,MoveTo2DGameAction,The method has 5 parameters. Parameters: entity' to' time' ease' local
Long Parameter List,WaveEngine.Components.GameActions,MoveTo3DGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\MoveTo3DGameAction.cs,MoveTo3DGameAction,The method has 5 parameters. Parameters: entity' to' time' ease' local
Long Parameter List,WaveEngine.Components.GameActions,RotateTo2DGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\RotateTo2DGameAction.cs,RotateTo2DGameAction,The method has 5 parameters. Parameters: entity' to' time' ease' local
Long Parameter List,WaveEngine.Components.GameActions,RotateTo3DGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\RotateTo3DGameAction.cs,RotateTo3DGameAction,The method has 6 parameters. Parameters: entity' to' time' ease' local' shorterPath
Long Parameter List,WaveEngine.Components.GameActions,ScaleTo2DGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\ScaleTo2DGameAction.cs,ScaleTo2DGameAction,The method has 5 parameters. Parameters: entity' to' time' ease' local
Long Parameter List,WaveEngine.Components.GameActions,ScaleTo3DGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\ScaleTo3DGameAction.cs,ScaleTo3DGameAction,The method has 5 parameters. Parameters: entity' to' time' ease' local
Long Parameter List,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,Vector2AnimationGameAction,The method has 5 parameters. Parameters: entity' from' to' time' ease
Long Parameter List,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,Vector2AnimationGameAction,The method has 6 parameters. Parameters: entity' from' to' time' ease' updateAction
Long Parameter List,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,DeltaFunction,The method has 5 parameters. Parameters: function' from' to' time' totalTime
Long Parameter List,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuaternionAnimationGameAction,The method has 5 parameters. Parameters: entity' from' to' time' ease
Long Parameter List,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuaternionAnimationGameAction,The method has 6 parameters. Parameters: entity' from' to' time' ease' updateAction
Long Parameter List,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,DeltaFunction,The method has 5 parameters. Parameters: function' from' to' time' totalTime
Long Parameter List,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,Vector3AnimationGameAction,The method has 5 parameters. Parameters: entity' from' to' time' ease
Long Parameter List,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,Vector3AnimationGameAction,The method has 6 parameters. Parameters: entity' from' to' time' ease' updateAction
Long Parameter List,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,DeltaFunction,The method has 5 parameters. Parameters: function' from' to' time' totalTime
Long Parameter List,WaveEngine.Components.Primitives,LineBezierMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineBezierMesh.cs,CalculateCubicPoint,The method has 5 parameters. Parameters: t' p0' p1' p2' p3
Long Parameter List,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,AddVertex,The method has 6 parameters. Parameters: info' thicknessDirection' uCoord' vertexIndex' vertices' thicknessFactor
Long Parameter List,WaveEngine.Components.Primitives,Cube,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cube.cs,Cube,The method has 5 parameters. Parameters: size' uvHorizontalFlip' uvVerticalFlip' uTileFactor' vTileFactor
Long Parameter List,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The method has 8 parameters. Parameters: normal' width' height' twoSides' uvHorizontalFlip' uvVerticalFlip' uTileFactor' vTileFactor
Long Parameter List,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,Bezier,The method has 5 parameters. Parameters: p1' p2' p3' p4' t
Long Parameter List,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,Bezier,The method has 5 parameters. Parameters: p1' p2' p3' p4' t
Long Parameter List,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,BezierTangent,The method has 5 parameters. Parameters: p1' p2' p3' p4' t
Long Parameter List,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,BezierTangent,The method has 5 parameters. Parameters: p1' p2' p3' p4' t
Long Statement,WaveEngine.Components.Animation,Animation2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Animation\Animation2D.cs,Update,The length of the statement  "                        this.currentAnimationFrame = this.startFrame + (((int)(this.currentAnimationTime * this.framesPerSecond) + this.frameLength) % this.frameLength); " is 145.
Long Statement,WaveEngine.Components.Animation,Animation2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Animation\Animation2D.cs,Update,The length of the statement  "                        this.currentAnimationFrame = this.startFrame + (((int)(this.currentAnimationTime * this.framesPerSecond) + this.frameLength) % this.frameLength); " is 145.
Long Statement,WaveEngine.Components.Animation,AdditiveBlendingClip,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Animation\Clips\AdditiveBlendingClip.cs,UpdateBinaryClip,The length of the statement  "                    this.clipB.FinalListenKeyframeEvents = this.FinalListenKeyframeEvents && (this.BlendFactor > this.ListenAnimationThreshold); " is 124.
Long Statement,WaveEngine.Components.Animation,SynchronizedTransitionClip,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Animation\Clips\SynchronizedTransitionClip.cs,UpdateBinaryClip,The length of the statement  "                this.clipA.FinalListenKeyframeEvents = this.FinalListenKeyframeEvents && ((1 - this.lerp) >= this.ListenAnimationThreshold); " is 124.
Long Statement,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,Update,The length of the statement  "                var value = this.DeltaFunction(this.easeFunction' this.from' this.to - this.from' (float)this.ellapsedTime.TotalSeconds' (float)this.totalTime.TotalSeconds); " is 157.
Long Statement,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInOutEase,The length of the statement  "                return (-.5f * (a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p))) + b; " is 120.
Long Statement,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInOutEase,The length of the statement  "            return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b; " is 122.
Long Statement,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,Update,The length of the statement  "                var value = this.DeltaFunction(this.easeFunction' this.from' this.to - this.from' (float)this.ellapsedTime.TotalSeconds' (float)this.totalTime.TotalSeconds); " is 157.
Long Statement,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInOutEase,The length of the statement  "                return (-.5f * (a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p))) + b; " is 120.
Long Statement,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInOutEase,The length of the statement  "            return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b; " is 122.
Long Statement,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,Update,The length of the statement  "                var value = this.DeltaFunction(this.easeFunction' this.from' this.to - this.from' (float)this.ellapsedTime.TotalSeconds' (float)this.totalTime.TotalSeconds); " is 157.
Long Statement,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInOutEase,The length of the statement  "                return ((a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) * -0.5f) + b; " is 121.
Long Statement,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInOutEase,The length of the statement  "            return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b; " is 122.
Long Statement,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,Update,The length of the statement  "                var value = this.DeltaFunction(this.easeFunction' this.from' this.to - this.from' (float)this.ellapsedTime.TotalSeconds' (float)this.totalTime.TotalSeconds); " is 157.
Long Statement,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInOutEase,The length of the statement  "                return (-.5f * (a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p))) + b; " is 120.
Long Statement,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInOutEase,The length of the statement  "            return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b; " is 122.
Long Statement,WaveEngine.Components.GameActions,GameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\GameAction.cs,Run,The length of the statement  "                throw new NotSupportedException(string.Format("The GameAction cannot be runned because its state ({0}) does not allow it"' this.State.ToString())); " is 147.
Long Statement,WaveEngine.Components.GameActions,GameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\GameAction.cs,TrySkip,The length of the statement  "            else if (this.Parent != null && (this.Parent.State == GameActionState.Waiting || this.Parent.State == GameActionState.Running)) " is 127.
Long Statement,WaveEngine.Components.GameActions,GameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\GameAction.cs,TrySkip,The length of the statement  "            else if (this.State == GameActionState.None || this.State == GameActionState.Aborted || this.State == GameActionState.Finished) " is 127.
Long Statement,WaveEngine.Components.GameActions,GameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\GameAction.cs,Cancel,The length of the statement  "                throw new NotSupportedException("It cannot be canncelled because it has not been started or already has been cancelled"); " is 121.
Long Statement,WaveEngine.Components.GameActions,GameActionFactory,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\GameActionFactory.cs,ContinueWith,The length of the statement  "                throw new NotSupportedException("It is not possible to continue with' aborted or finised task. Defer the run command to a posterior stage."); " is 141.
Long Statement,WaveEngine.Components.GameActions,WaitGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\WaitGameAction.cs,TimerCompleted,The length of the statement  "                throw new NotSupportedException("This point should be not executed because if it has been skiped or aborted the timer (of the TimerTask)should have been removed"); " is 163.
Long Statement,WaveEngine.Components.Graphics2D,LineMeshRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\LineMeshRenderer2D.cs,GetWorldTransform,The length of the statement  "            var worldTransform = Matrix.CreateTranslation(-rectangle.X - (rectangle.Width * origin.X)' -rectangle.Y - (rectangle.Height * origin.Y)' 0); " is 140.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,The length of the statement  "                            if (this.settings.CollisionType.HasFlag(ParticleSystem2D.ParticleCollisionFlags.Bottom) && (p.Position.Y > this.settings.CollisionBottom)) " is 138.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,The length of the statement  "                                            p.Velocity.X = bounciness * (p.Velocity.X + (this.settings.CollisionSpread.X * (((float)this.random.NextDouble() * 2) - 1))); " is 125.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,The length of the statement  "                                            p.Velocity.Y = -bounciness * (p.Velocity.Y + (this.settings.CollisionSpread.Y * (((float)this.random.NextDouble() * 2) - 1))); " is 126.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,The length of the statement  "                            else if (this.settings.CollisionType.HasFlag(ParticleSystem2D.ParticleCollisionFlags.Top) && (p.Position.Y < this.settings.CollisionTop)) " is 137.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,The length of the statement  "                                            p.Velocity.X = bounciness * (p.Velocity.X + (this.settings.CollisionSpread.X * (((float)this.random.NextDouble() * 2) - 1))); " is 125.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,The length of the statement  "                                            p.Velocity.Y = -bounciness * (p.Velocity.Y + (this.settings.CollisionSpread.Y * (((float)this.random.NextDouble() * 2) - 1))); " is 126.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,The length of the statement  "                            if (this.settings.CollisionType.HasFlag(ParticleSystem2D.ParticleCollisionFlags.Right) && (p.Position.X > this.settings.CollisionRight)) " is 136.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,The length of the statement  "                                            p.Velocity.X = -bounciness * (p.Velocity.X + (this.settings.CollisionSpread.X * (((float)this.random.NextDouble() * 2) - 1))); " is 126.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,The length of the statement  "                                            p.Velocity.Y = bounciness * (p.Velocity.Y + (this.settings.CollisionSpread.Y * (((float)this.random.NextDouble() * 2) - 1))); " is 125.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,The length of the statement  "                            else if (this.settings.CollisionType.HasFlag(ParticleSystem2D.ParticleCollisionFlags.Left) && (p.Position.X < this.settings.CollisionLeft)) " is 139.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,The length of the statement  "                                            p.Velocity.X = -bounciness * (p.Velocity.X + (this.settings.CollisionSpread.X * (((float)this.random.NextDouble() * 2) - 1))); " is 126.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,The length of the statement  "                                            p.Velocity.Y = bounciness * (p.Velocity.Y + (this.settings.CollisionSpread.Y * (((float)this.random.NextDouble() * 2) - 1))); " is 125.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,The length of the statement  "                        if (this.settings.LinearColorEnabled && p.TimeLife != 0 && this.settings.InterpolationColors != null && this.settings.InterpolationColors.Count > 1) " is 148.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The length of the statement  "                double life = (this.settings.EmitRate > 0) ? -1 : TimeSpan.FromSeconds(this.random.NextDouble() * (this.numParticles * InitTimeMultipler)).TotalSeconds; " is 152.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The length of the statement  "            this.mesh = new Mesh(0' vertexBuffer.VertexCount' 0' indexBuffer.IndexCount / 3' vertexBuffer' indexBuffer' PrimitiveType.TriangleList) " is 135.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The length of the statement  "                p.Velocity.X = this.settings.LocalVelocity.X + (this.settings.RandomVelocity.X * (((float)this.random.NextDouble() * 2) - 1)); " is 126.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The length of the statement  "                p.Velocity.Y = this.settings.LocalVelocity.Y + (this.settings.RandomVelocity.Y * (((float)this.random.NextDouble() * 2) - 1)); " is 126.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The length of the statement  "                            float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2); " is 145.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The length of the statement  "                            float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2); " is 145.
Long Statement,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The length of the statement  "                p.VelocityRotation = MathHelper.Lerp(this.settings.MinRotateSpeed' this.settings.MaxRotateSpeed' (float)this.random.NextDouble()); " is 130.
Long Statement,WaveEngine.Components.Graphics2D,SpriteRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\SpriteRenderer.cs,DrawSlice,The length of the statement  "                var finalColor = this.RenderManager.ShouldDrawFlag(DebugLinesFlags.DebugAlphaOpacity) ? color * item.DebugTintColor : color; " is 124.
Long Statement,WaveEngine.Components.Graphics2D,SpriteRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\SpriteRenderer.cs,RefreshSliceCache,The length of the statement  "            var horizontalScalableAnchors = hasHorizontalAnchors ? texture2D.HorizontalScalableAnchors : new Point[] { new Point(0' texture2D.Width) }; " is 139.
Long Statement,WaveEngine.Components.Graphics2D,SpriteRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\SpriteRenderer.cs,RefreshSliceCache,The length of the statement  "            var verticalScalableAnchors = hasVerticalAnchors ? texture2D.VerticalScalableAnchors : new Point[] { new Point(0' texture2D.Height) }; " is 134.
Long Statement,WaveEngine.Components.Graphics2D,SpriteRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\SpriteRenderer.cs,RefreshSliceCache,The length of the statement  "            flippedOrigin.X = this.Transform2D.Effect.HasFlag(SpriteEffects.FlipHorizontally) ? 1 - flippedOrigin.X : flippedOrigin.X; " is 122.
Long Statement,WaveEngine.Components.Graphics2D,SpriteRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\SpriteRenderer.cs,RefreshSliceCache,The length of the statement  "            flippedOrigin.Y = this.Transform2D.Effect.HasFlag(SpriteEffects.FlipVertically) ? 1 - flippedOrigin.Y : flippedOrigin.Y; " is 120.
Long Statement,WaveEngine.Components.Graphics2D,SpriteRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\SpriteRenderer.cs,RefreshSliceCache,The length of the statement  "                    var scolor = vStretchActive ? (hStretchActive ? Color.Pink : Color.LightGreen) : (hStretchActive ? Color.LightGreen : Color.White); " is 131.
Long Statement,WaveEngine.Components.Primitives,BezierPointInfo,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\BezierPointInfo.cs,ToString,The length of the statement  "            return "Position:" + this.Position.ToString() + " Thickness:" + this.Thickness + " Color:" + this.Color.ToHexColorCode(); " is 121.
Long Statement,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,FillStripLines,The length of the statement  "                    this.AddVertex(ref currentPoint' ref thicknessDirection' lenghtByPoint[p] / totalLenght' p * 2' vertices' thicknessFactor); " is 123.
Long Statement,WaveEngine.Components.Primitives,LinePointInfo,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LinePointInfo.cs,ToString,The length of the statement  "            return "Position:" + this.Position.ToString() + " Thickness:" + this.Thickness + " Color:" + this.Color.ToHexColorCode(); " is 121.
Long Statement,WaveEngine.Components.Graphics3D,CapsuleMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\CapsuleMesh.cs,GenerateCapsule,The length of the statement  "            this.InternalModel.FromPrimitive(WaveServices.GraphicsDevice' new Capsule(this.Height' this.Radius' this.Tessellation * 2)); " is 124.
Long Statement,WaveEngine.Components.Graphics3D,CubeMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\CubeMesh.cs,GenerateCube,The length of the statement  "            this.InternalModel.FromPrimitive(WaveServices.GraphicsDevice' new Cube(this.Size' this.UVHorizontalFlip' this.UVVerticalFlip' this.uTileFactor' this.vTileFactor)); " is 163.
Long Statement,WaveEngine.Components.Graphics3D,CylinderMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\CylinderMesh.cs,GenerateCylinder,The length of the statement  "            this.InternalModel.FromPrimitive(WaveServices.GraphicsDevice' new Cylinder(this.Height' this.Diameter' this.Tessellation)); " is 123.
Long Statement,WaveEngine.Components.Graphics3D,SkinnedMeshRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\SkinnedMeshRenderer.cs,Draw,The length of the statement  "            float zOrder = Vector3.DistanceSquared(this.RenderManager.CurrentDrawingCamera3D.Position' this.rootJointTransform.Position); " is 125.
Long Statement,WaveEngine.Components.Graphics3D,MeshRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\MeshRenderer.cs,Draw,The length of the statement  "                        this.ModelMesh.InternalModel.Materials != null && this.ModelMesh.InternalModel.Materials.Count > currentMesh.MaterialIndex) " is 123.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                            if (this.settings.CollisionType.HasFlag(ParticleSystem3D.ParticleCollisionFlags.MaxY) && (p.Position.Y > this.settings.CollisionMax.Y)) " is 135.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.X = bounciness * (p.Velocity.X + (this.settings.CollisionSpread.X * (((float)this.random.NextDouble() * 2) - 1))); " is 125.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.Y = -bounciness * (p.Velocity.Y + (this.settings.CollisionSpread.Y * (((float)this.random.NextDouble() * 2) - 1))); " is 126.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.Z = bounciness * (p.Velocity.Z + (this.settings.CollisionSpread.Z * (((float)this.random.NextDouble() * 2) - 1))); " is 125.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                            else if (this.settings.CollisionType.HasFlag(ParticleSystem3D.ParticleCollisionFlags.MinY) && (p.Position.Y < this.settings.CollisionMin.Y)) " is 140.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.X = bounciness * (p.Velocity.X + (this.settings.CollisionSpread.X * (((float)this.random.NextDouble() * 2) - 1))); " is 125.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.Y = -bounciness * (p.Velocity.Y + (this.settings.CollisionSpread.Y * (((float)this.random.NextDouble() * 2) - 1))); " is 126.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.Z = bounciness * (p.Velocity.Z + (this.settings.CollisionSpread.Z * (((float)this.random.NextDouble() * 2) - 1))); " is 125.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                            if (this.settings.CollisionType.HasFlag(ParticleSystem3D.ParticleCollisionFlags.MaxX) && (p.Position.X > this.settings.CollisionMax.X)) " is 135.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.X = -bounciness * (p.Velocity.X + (this.settings.CollisionSpread.X * (((float)this.random.NextDouble() * 2) - 1))); " is 126.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.Y = bounciness * (p.Velocity.Y + (this.settings.CollisionSpread.Y * (((float)this.random.NextDouble() * 2) - 1))); " is 125.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.Z = bounciness * (p.Velocity.Z + (this.settings.CollisionSpread.Z * (((float)this.random.NextDouble() * 2) - 1))); " is 125.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                            else if (this.settings.CollisionType.HasFlag(ParticleSystem3D.ParticleCollisionFlags.MinX) && (p.Position.X < this.settings.CollisionMin.X)) " is 140.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.X = -bounciness * (p.Velocity.X + (this.settings.CollisionSpread.X * (((float)this.random.NextDouble() * 2) - 1))); " is 126.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.Y = bounciness * (p.Velocity.Y + (this.settings.CollisionSpread.Y * (((float)this.random.NextDouble() * 2) - 1))); " is 125.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.Z = bounciness * (p.Velocity.Z + (this.settings.CollisionSpread.Z * (((float)this.random.NextDouble() * 2) - 1))); " is 125.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                            if (this.settings.CollisionType.HasFlag(ParticleSystem3D.ParticleCollisionFlags.MaxZ) && (p.Position.Z > this.settings.CollisionMax.Z)) " is 135.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.X = bounciness * (p.Velocity.X + (this.settings.CollisionSpread.X * (((float)this.random.NextDouble() * 2) - 1))); " is 125.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.Y = bounciness * (p.Velocity.Y + (this.settings.CollisionSpread.Y * (((float)this.random.NextDouble() * 2) - 1))); " is 125.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.Z = -bounciness * (p.Velocity.Z + (this.settings.CollisionSpread.Z * (((float)this.random.NextDouble() * 2) - 1))); " is 126.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                            else if (this.settings.CollisionType.HasFlag(ParticleSystem3D.ParticleCollisionFlags.MinZ) && (p.Position.Z < this.settings.CollisionMin.Z)) " is 140.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.X = bounciness * (p.Velocity.X + (this.settings.CollisionSpread.X * (((float)this.random.NextDouble() * 2) - 1))); " is 125.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.Y = bounciness * (p.Velocity.Y + (this.settings.CollisionSpread.Y * (((float)this.random.NextDouble() * 2) - 1))); " is 125.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                                            p.Velocity.Z = -bounciness * (p.Velocity.Z + (this.settings.CollisionSpread.Z * (((float)this.random.NextDouble() * 2) - 1))); " is 126.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The length of the statement  "                        if (this.settings.LinearColorEnabled && p.TimeLife != 0 && this.settings.InterpolationColors != null && this.settings.InterpolationColors.Count > 1) " is 148.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The length of the statement  "                double life = (this.settings.EmitRate > 0) ? -1 : TimeSpan.FromSeconds(this.random.NextDouble() * (this.numParticles * InitTimeMultipler)).TotalSeconds; " is 152.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The length of the statement  "            this.mesh = new Mesh(0' vertexBuffer.VertexCount' 0' indexBuffer.IndexCount / 3' vertexBuffer' indexBuffer' PrimitiveType.TriangleList) " is 135.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The length of the statement  "                            float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2); " is 145.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The length of the statement  "                            float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2); " is 145.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The length of the statement  "                p.VelocityRotation = MathHelper.Lerp(this.settings.MinRotateSpeed' this.settings.MaxRotateSpeed' (float)this.random.NextDouble()); " is 130.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The length of the statement  "            if (this.settings.LinearColorEnabled && this.settings.InterpolationColors != null && this.settings.InterpolationColors.Count >= 1) " is 130.
Long Statement,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The length of the statement  "            Matrix.CreateFromYawPitchRoll(this.Transform.Rotation.Y' this.Transform.Rotation.X' this.Transform.Rotation.Z' out this.rotationMatrix); " is 136.
Long Statement,WaveEngine.Components.Graphics3D,PlaneMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\PlaneMesh.cs,GeneratePlane,The length of the statement  "            this.InternalModel.FromPrimitive(WaveServices.GraphicsDevice' new Primitives.Plane(this.Normal' this.Width' this.Height' this.TwoSides' this.UVHorizontalFlip' this.UVVerticalFlip' this.uTileFactor' this.vTileFactor)); " is 217.
Long Statement,WaveEngine.Components.Graphics3D,SphereMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\SphereMesh.cs,GenerateSphere,The length of the statement  "            this.InternalModel.FromPrimitive(WaveServices.GraphicsDevice' new Sphere(this.Diameter' this.Tessellation' this.UVHorizontalFlip' this.UVVerticalFlip)); " is 152.
Long Statement,WaveEngine.Components.Graphics3D,TorusMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\TorusMesh.cs,GenerateTorus,The length of the statement  "            this.InternalModel.FromPrimitive(WaveServices.GraphicsDevice' new Torus(this.Diameter' this.Thickness' this.Tessellation)); " is 123.
Long Statement,WaveEngine.Components.Transitions,ChequeredAppearTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ChequeredAppearTransition.cs,Draw,The length of the statement  "            var sourceRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,ChequeredAppearTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ChequeredAppearTransition.cs,Draw,The length of the statement  "            var targetRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,ChequeredAppearTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ChequeredAppearTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(targetRenderTarget' Vector2.Zero' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f); " is 132.
Long Statement,WaveEngine.Components.Transitions,ColorFadeTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ColorFadeTransition.cs,Draw,The length of the statement  "            var sourceRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,ColorFadeTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ColorFadeTransition.cs,Draw,The length of the statement  "            var targetRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,ColorFadeTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ColorFadeTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(target' new Rectangle(0' 0' target.Width' target.Height)' null' Color.White' 0' Vector2.Zero' SpriteEffects.None' 0.5f); " is 142.
Long Statement,WaveEngine.Components.Transitions,ColorFadeTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ColorFadeTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(StaticResources.WhitePixel' new Rectangle(0' 0' this.platform.ScreenWidth' this.platform.ScreenHeight)' null' blendColor' 0' Vector2.Zero' SpriteEffects.None' 0); " is 184.
Long Statement,WaveEngine.Components.Transitions,CombTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CombTransition.cs,Draw,The length of the statement  "            var sourceRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,CombTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CombTransition.cs,Draw,The length of the statement  "            var targetRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,CoverTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CoverTransition.cs,Draw,The length of the statement  "            var sourceRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,CoverTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CoverTransition.cs,Draw,The length of the statement  "            var targetRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,CoverTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CoverTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(sourceRenderTarget' Vector2.Zero' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f); " is 132.
Long Statement,WaveEngine.Components.Transitions,CoverTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CoverTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(targetRenderTarget' this.position' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0f); " is 131.
Long Statement,WaveEngine.Components.Transitions,CrossFadeTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CrossFadeTransition.cs,Draw,The length of the statement  "            var sourceRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,CrossFadeTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CrossFadeTransition.cs,Draw,The length of the statement  "            var targetRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,CrossFadeTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CrossFadeTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(sourceRenderTarget' new Rectangle(0' 0' sourceRenderTarget.Width' sourceRenderTarget.Height)' null' Color.White' 0' Vector2.Zero' SpriteEffects.None' 0.5f); " is 178.
Long Statement,WaveEngine.Components.Transitions,CrossFadeTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CrossFadeTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(targetRenderTarget' new Rectangle(0' 0' sourceRenderTarget.Width' sourceRenderTarget.Height)' null' blendColor' 0' Vector2.Zero' SpriteEffects.None' 0); " is 174.
Long Statement,WaveEngine.Components.Transitions,CurtainsTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CurtainsTransition.cs,Draw,The length of the statement  "            var sourceRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,CurtainsTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CurtainsTransition.cs,Draw,The length of the statement  "            var targetRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,CurtainsTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CurtainsTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(targetRenderTarget' Vector2.Zero' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f); " is 132.
Long Statement,WaveEngine.Components.Transitions,DoorwayTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\DoorwayTransition.cs,Draw,The length of the statement  "            var sourceRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,DoorwayTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\DoorwayTransition.cs,Draw,The length of the statement  "            var targetRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,FallingLinesTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\FallingLinesTransition.cs,Draw,The length of the statement  "            var sourceRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,FallingLinesTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\FallingLinesTransition.cs,Draw,The length of the statement  "            var targetRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,FallingLinesTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\FallingLinesTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(targetRenderTarget' Vector2.Zero' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f); " is 132.
Long Statement,WaveEngine.Components.Transitions,FallingLinesTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\FallingLinesTransition.cs,Draw,The length of the statement  "                this.spriteBatch.Draw(sourceRenderTarget' pos' rect' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0f); " is 121.
Long Statement,WaveEngine.Components.Transitions,FanTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\FanTransition.cs,Draw,The length of the statement  "            var sourceRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,FanTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\FanTransition.cs,Draw,The length of the statement  "            var targetRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,PushTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\PushTransition.cs,Draw,The length of the statement  "            var sourceRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,PushTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\PushTransition.cs,Draw,The length of the statement  "            var targetRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,PushTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\PushTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(sourceRenderTarget' this.position2' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f); " is 134.
Long Statement,WaveEngine.Components.Transitions,PushTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\PushTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(targetRenderTarget' this.position1' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0f); " is 132.
Long Statement,WaveEngine.Components.Transitions,RotateTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\RotateTransition.cs,Draw,The length of the statement  "            var sourceRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,RotateTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\RotateTransition.cs,Draw,The length of the statement  "            var targetRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,ScaleTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ScaleTransition.cs,Draw,The length of the statement  "            var sourceRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,ScaleTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ScaleTransition.cs,Draw,The length of the statement  "            var targetRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,ScaleTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ScaleTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(sourceRenderTarget' Vector2.Zero' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f); " is 132.
Long Statement,WaveEngine.Components.Transitions,ShrinkAndSpinTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ShrinkAndSpinTransition.cs,Draw,The length of the statement  "            var sourceRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,ShrinkAndSpinTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ShrinkAndSpinTransition.cs,Draw,The length of the statement  "            var targetRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,ShrinkAndSpinTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ShrinkAndSpinTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(targetRenderTarget' Vector2.Zero' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f); " is 132.
Long Statement,WaveEngine.Components.Transitions,ShrinkAndSpinTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ShrinkAndSpinTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(sourceRenderTarget' center + translate' null' tint' rotation' center' scale' SpriteEffects.None' 0); " is 122.
Long Statement,WaveEngine.Components.Transitions,SpinningSquaresTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\SpinningSquaresTransition.cs,Draw,The length of the statement  "            var sourceRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,SpinningSquaresTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\SpinningSquaresTransition.cs,Draw,The length of the statement  "            var targetRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,SpinningSquaresTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\SpinningSquaresTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(targetRenderTarget' Vector2.Zero' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f); " is 132.
Long Statement,WaveEngine.Components.Transitions,UncoverTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\UncoverTransition.cs,Draw,The length of the statement  "            var sourceRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,UncoverTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\UncoverTransition.cs,Draw,The length of the statement  "            var targetRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,UncoverTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\UncoverTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(targetRenderTarget' Vector2.Zero' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f); " is 132.
Long Statement,WaveEngine.Components.Transitions,UncoverTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\UncoverTransition.cs,Draw,The length of the statement  "            this.spriteBatch.Draw(sourceRenderTarget' this.position' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0f); " is 131.
Long Statement,WaveEngine.Components.Transitions,ZoomTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ZoomTransition.cs,Draw,The length of the statement  "            var sourceRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.Transitions,ZoomTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ZoomTransition.cs,Draw,The length of the statement  "            var targetRenderTarget = this.graphicsDevice.RenderTargets.GetTemporalRenderTarget(this.platform.ScreenWidth' this.platform.ScreenHeight); " is 138.
Long Statement,WaveEngine.Components.UI,GridRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Grid\GridRenderer.cs,DrawDebugLines,The length of the statement  "            this.RenderManager.LineBatch2D.DrawPoint(this.Transform2D.Rectangle.Location + this.Transform2D.Origin' 10f' Color.Red' this.Transform2D.DrawOrder); " is 148.
Long Statement,WaveEngine.Components.UI,ImageAtlasRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\ImageAtlasRenderer.cs,DrawDebugLines,The length of the statement  "            this.RenderManager.LineBatch2D.DrawPoint(this.Transform2D.Rectangle.Location + this.Transform2D.Origin' 10f' Color.Red' this.Transform2D.DrawOrder); " is 148.
Long Statement,WaveEngine.Components.UI,ImageControlRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Image\ImageControlRenderer.cs,DrawDebugLines,The length of the statement  "            this.RenderManager.LineBatch2D.DrawPoint(this.Transform2D.Rectangle.Location + this.Transform2D.Origin' 10f' Color.Red' this.Transform2D.DrawOrder); " is 148.
Long Statement,WaveEngine.Components.UI,PanelControlRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Panel\PanelControlRenderer.cs,DrawDebugLines,The length of the statement  "            this.RenderManager.LineBatch2D.DrawPoint(this.Transform2D.Rectangle.Location + this.Transform2D.Origin' 10f' Color.Red' this.Transform2D.DrawOrder); " is 148.
Long Statement,WaveEngine.Components.UI,ProgressBarBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\ProgressBar\ProgressBarBehavior.cs,UpdateDifference,The length of the statement  "                throw new ArgumentException(string.Format("Minimum: {0} can not be greather than Maximum: {1}"' this.minimum' this.maximum)); " is 125.
Long Statement,WaveEngine.Components.UI,SliderBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\SliderBehavior.cs,UpdateOrientation,The length of the statement  "                        this.textControl.Margin = new Thickness(-DefaultTextOffset' this.Panel.Height - (this.bulletImage.Height * 1.5f)' 0' 0); " is 120.
Long Statement,WaveEngine.Components.UI,StackPanelRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Stack\StackPanelRenderer.cs,DrawDebugLines,The length of the statement  "            this.RenderManager.LineBatch2D.DrawPoint(this.Transform2D.Rectangle.Location + this.Transform2D.Origin' 10f' Color.Red' this.Transform2D.DrawOrder); " is 148.
Long Statement,WaveEngine.Components.UI,TextControlRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBlock\TextControlRenderer.cs,DrawDebugLines,The length of the statement  "            this.RenderManager.LineBatch2D.DrawPoint(this.Transform2D.Rectangle.Location + this.Transform2D.Origin' 10f' Color.Red' this.Transform2D.DrawOrder); " is 148.
Long Statement,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,Update,The length of the statement  "                    ((this.inputService.KeyboardState.Enter == ButtonState.Pressed && this.beforeKeyboardState.Enter != ButtonState.Pressed) || " is 123.
Long Statement,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,Update,The length of the statement  "                    (this.inputService.KeyboardState.Execute == ButtonState.Pressed && this.beforeKeyboardState.Execute != ButtonState.Pressed))) " is 125.
Long Statement,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,Update,The length of the statement  "                if (this.inputService.KeyboardState.Delete == ButtonState.Pressed && this.beforeKeyboardState.Delete != ButtonState.Pressed) " is 124.
Long Statement,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,Update,The length of the statement  "                if ((this.inputService.KeyboardState.LeftShift == ButtonState.Pressed && this.beforeKeyboardState.LeftShift != ButtonState.Pressed) || " is 134.
Long Statement,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,Update,The length of the statement  "                     (this.inputService.KeyboardState.RightShift == ButtonState.Pressed && this.beforeKeyboardState.RightShift != ButtonState.Pressed) || " is 132.
Long Statement,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,Update,The length of the statement  "                     (this.inputService.KeyboardState.CapitalLock == ButtonState.Pressed && this.beforeKeyboardState.CapitalLock != ButtonState.Pressed && !this.uppercase)) " is 151.
Long Statement,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,Update,The length of the statement  "                else if ((this.inputService.KeyboardState.LeftShift == ButtonState.Released && this.beforeKeyboardState.LeftShift != ButtonState.Released) || " is 141.
Long Statement,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,Update,The length of the statement  "                     (this.inputService.KeyboardState.RightShift == ButtonState.Released && this.beforeKeyboardState.RightShift != ButtonState.Released) || " is 134.
Long Statement,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,Update,The length of the statement  "                     (this.inputService.KeyboardState.CapitalLock == ButtonState.Pressed && this.beforeKeyboardState.CapitalLock != ButtonState.Pressed && this.uppercase)) " is 150.
Long Statement,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,Update,The length of the statement  "                if (this.inputService.KeyboardState.RightAlt == ButtonState.Pressed && this.beforeKeyboardState.RightAlt != ButtonState.Pressed) " is 128.
Long Statement,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,ShowScreenKeyboard,The length of the statement  "            var newText = await WaveServices.Platform.ShowTextDialogBoxAsync(this.MessageBoxTitle' this.MessageBoxDescription' this.textControl.Text); " is 138.
Long Statement,WaveEngine.Components.UI,WrapPanelRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Wrap\WrapPanelRenderer.cs,DrawDebugLines,The length of the statement  "            this.RenderManager.LineBatch2D.DrawPoint(this.Transform2D.Rectangle.Location + this.Transform2D.Origin' 10f' Color.Red' this.Transform2D.DrawOrder); " is 148.
Long Statement,WaveEngine.Components.VR,VRCameraRig,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\VR\VRCameraRig.cs,RefreshCameraProperties,The length of the statement  "            this.AttachedCamera.BackgroundColor = this.LeftEyeCamera.BackgroundColor = this.RightEyeCamera.BackgroundColor = this.backgroundColor; " is 134.
Long Statement,WaveEngine.Components.VR,VRCameraRig,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\VR\VRCameraRig.cs,UpdateCamera,The length of the statement  "            camera.Transform.LocalOrientation = this.Monoscopic ? this.CenterEyeAnchorTransform.LocalOrientation : eyePose.Orientation; " is 123.
Complex Conditional,WaveEngine.Components.Gestures,TouchGestures,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Gestures\TouchGestures.cs,FreeState,The conditional expression  "scale != 1 && !float.IsNaN(scale) && !float.IsInfinity(scale) && scale > 0.01f"  is complex.
Complex Conditional,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,The conditional expression  "this.settings.LinearColorEnabled && p.TimeLife != 0 && this.settings.InterpolationColors != null && this.settings.InterpolationColors.Count > 1"  is complex.
Complex Conditional,WaveEngine.Components.Graphics3D,FileMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\FileMesh.cs,LoadModel,The conditional expression  "this.ModelMeshName == null &&                      this.InternalModel != null &&                      this.InternalModel.Meshes != null &&                      this.InternalModel.Meshes.Length > 0"  is complex.
Complex Conditional,WaveEngine.Components.Graphics3D,MeshRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\MeshRenderer.cs,Draw,The conditional expression  "this.Materials != null && this.Materials.Length > 0 &&                          this.ModelMesh.InternalModel.Materials != null && this.ModelMesh.InternalModel.Materials.Count > currentMesh.MaterialIndex"  is complex.
Complex Conditional,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The conditional expression  "this.settings.LinearColorEnabled && p.TimeLife != 0 && this.settings.InterpolationColors != null && this.settings.InterpolationColors.Count > 1"  is complex.
Complex Conditional,WaveEngine.Components.UI,SliderBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\SliderBehavior.cs,UpdateOrientation,The conditional expression  "this.backgroundImage != null && this.foregroundImage != null && this.foregroundTransform != null                          && this.bulletImage != null && this.bulletTransform != null && this.textControl != null &&                          this.textTransform != null && this.Panel != null"  is complex.
Complex Conditional,WaveEngine.Components.UI,SliderBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\SliderBehavior.cs,UpdateOrientation,The conditional expression  "this.backgroundImage != null && this.foregroundImage != null && this.foregroundTransform != null                          && this.bulletImage != null && this.bulletTransform != null && this.textControl != null &&                          this.textTransform != null && this.Panel != null"  is complex.
Complex Conditional,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,Update,The conditional expression  "this.acceptsReturn &&                      ((this.inputService.KeyboardState.Enter == ButtonState.Pressed && this.beforeKeyboardState.Enter != ButtonState.Pressed) ||                      (this.inputService.KeyboardState.Execute == ButtonState.Pressed && this.beforeKeyboardState.Execute != ButtonState.Pressed))"  is complex.
Complex Conditional,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,Update,The conditional expression  "(this.inputService.KeyboardState.LeftShift == ButtonState.Pressed && this.beforeKeyboardState.LeftShift != ButtonState.Pressed) ||                       (this.inputService.KeyboardState.RightShift == ButtonState.Pressed && this.beforeKeyboardState.RightShift != ButtonState.Pressed) ||                       (this.inputService.KeyboardState.CapitalLock == ButtonState.Pressed && this.beforeKeyboardState.CapitalLock != ButtonState.Pressed && !this.uppercase)"  is complex.
Complex Conditional,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,Update,The conditional expression  "(this.inputService.KeyboardState.LeftShift == ButtonState.Released && this.beforeKeyboardState.LeftShift != ButtonState.Released) ||                       (this.inputService.KeyboardState.RightShift == ButtonState.Released && this.beforeKeyboardState.RightShift != ButtonState.Released) ||                       (this.inputService.KeyboardState.CapitalLock == ButtonState.Pressed && this.beforeKeyboardState.CapitalLock != ButtonState.Pressed && this.uppercase)"  is complex.
Magic Number,WaveEngine.Components.AR,ARCameraRig,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\AR\ARCameraRig.cs,RenderPointCloud,The following statement contains a magic number: this.RenderManager.LineBatch3D.DrawPoint(pointCloud[i]' 0.01f' Color.Red);
Magic Number,WaveEngine.Components.Cameras,FixedCamera2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Cameras\FixedCamera2D.cs,FixedCamera2D,The following statement contains a magic number: Vector3 position3D = position.ToVector3(-10);
Magic Number,WaveEngine.Components.Cameras,FreeCamera2DBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Cameras\FreeCamera2DBehavior.cs,DefaultValues,The following statement contains a magic number: this.rotationSpeed = .004f;
Magic Number,WaveEngine.Components.Cameras,FreeCamera2DBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Cameras\FreeCamera2DBehavior.cs,DefaultValues,The following statement contains a magic number: this.wheelZoomSpeed = 1 / 4000f;
Magic Number,WaveEngine.Components.Cameras,FreeCamera2DBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Cameras\FreeCamera2DBehavior.cs,DefaultValues,The following statement contains a magic number: this.speed = 200.0f;
Magic Number,WaveEngine.Components.Cameras,FreeCamera2DBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Cameras\FreeCamera2DBehavior.cs,HandleTouch,The following statement contains a magic number: Vector2.Lerp(ref touch1' ref touch2' 0.5f' out dragPosition);
Magic Number,WaveEngine.Components.Cameras,FreeCamera2DBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Cameras\FreeCamera2DBehavior.cs,HandleTouch,The following statement contains a magic number: touchState.Count >= 2
Magic Number,WaveEngine.Components.Cameras,FreeCamera3DBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Cameras\FreeCamera3DBehavior.cs,DefaultValues,The following statement contains a magic number: this.rotationSpeed = .004f;
Magic Number,WaveEngine.Components.Cameras,FreeCamera3DBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Cameras\FreeCamera3DBehavior.cs,DefaultValues,The following statement contains a magic number: this.gamepadRotationSpeed = .75f;
Magic Number,WaveEngine.Components.Cameras,FreeCamera3DBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Cameras\FreeCamera3DBehavior.cs,HandleInput,The following statement contains a magic number: this.input.TouchPanelState.Count == 2
Magic Number,WaveEngine.Components.Cameras,FreeCamera3DBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Cameras\FreeCamera3DBehavior.cs,HandleInput,The following statement contains a magic number: float threshold = 0.2f;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,BackInEase,The following statement contains a magic number: float s = 1.70158f;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,BackOutEase,The following statement contains a magic number: float s = 1.70158f;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: float s = 1.70158f;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (t * t * ((((s *= 1.525f) + 1) * t) - s))) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (t * t * ((((s *= 1.525f) + 1) * t) - s))) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * ((((s *= 1.525f) + 1) * t) + s)) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * ((((s *= 1.525f) + 1) * t) + s)) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * ((((s *= 1.525f) + 1) * t) + s)) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * ((((s *= 1.525f) + 1) * t) + s)) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,BounceOutEase,The following statement contains a magic number: return (c * (7.5625f * t * t)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,BounceOutEase,The following statement contains a magic number: (t /= d) < (1 / 2.75f)
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,BounceInOutEase,The following statement contains a magic number: return (this.BounceInEase(t * 2' 0' c' d) * .5f) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,BounceInOutEase,The following statement contains a magic number: return (this.BounceInEase(t * 2' 0' c' d) * .5f) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,BounceInOutEase,The following statement contains a magic number: t < d / 2
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,CircleInOutEase,The following statement contains a magic number: return (-c / 2 * ((float)Math.Sqrt(1 - (t * t)) - 1)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,CircleInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,CircleInOutEase,The following statement contains a magic number: return (c / 2 * ((float)Math.Sqrt(1 - ((t -= 2) * t)) + 1)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,CircleInOutEase,The following statement contains a magic number: return (c / 2 * ((float)Math.Sqrt(1 - ((t -= 2) * t)) + 1)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: return (c / 2 * t * t * t) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: float p = d * .3f;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: float s = p / 4;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: return -(a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: return -(a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: return -(a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: float p = d * .3f;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: float s = p / 4;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * t) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + c + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * t) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + c + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * t) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + c + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: (t /= d / 2) == 2
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: (t /= d / 2) == 2
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: float p = d * (.3f * 1.5f);
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: float p = d * (.3f * 1.5f);
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: float s = p / 4;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (-.5f * (a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p))) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (-.5f * (a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p))) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (-.5f * (a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p))) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (-.5f * (a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p))) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ExponentialInEase,The following statement contains a magic number: return (t == 0) ? b : (c * (float)Math.Pow(2' 10 * ((t / d) - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ExponentialInEase,The following statement contains a magic number: return (t == 0) ? b : (c * (float)Math.Pow(2' 10 * ((t / d) - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ExponentialOutEase,The following statement contains a magic number: return (t == d) ? b + c : (c * (-(float)Math.Pow(2' -10 * t / d) + 1)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ExponentialOutEase,The following statement contains a magic number: return (t == d) ? b + c : (c * (-(float)Math.Pow(2' -10 * t / d) + 1)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (float)Math.Pow(2' 10 * (t - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (float)Math.Pow(2' 10 * (t - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (float)Math.Pow(2' 10 * (t - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (-(float)Math.Pow(2' -10 * --t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (-(float)Math.Pow(2' -10 * --t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (-(float)Math.Pow(2' -10 * --t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (-(float)Math.Pow(2' -10 * --t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,QuadraticOutEase,The following statement contains a magic number: return (-c * (t /= d) * (t - 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,QuadraticInOutEase,The following statement contains a magic number: return (c / 2 * t * t) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,QuadraticInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,QuadraticInOutEase,The following statement contains a magic number: return (-c / 2 * (((--t) * (t - 2)) - 1)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,QuadraticInOutEase,The following statement contains a magic number: return (-c / 2 * (((--t) * (t - 2)) - 1)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: return (c / 2 * t * t * t * t) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: return (-c / 2 * (((t -= 2) * t * t * t) - 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: return (-c / 2 * (((t -= 2) * t * t * t) - 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: return (-c / 2 * (((t -= 2) * t * t * t) - 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: return (c / 2 * t * t * t * t * t) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,SineInEase,The following statement contains a magic number: return (-c * (float)Math.Cos(t / d * (Math.PI / 2))) + c + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,SineOutEase,The following statement contains a magic number: return (c * (float)Math.Sin(t / d * (Math.PI / 2))) + b;
Magic Number,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,SineInOutEase,The following statement contains a magic number: return (-c / 2 * ((float)Math.Cos(Math.PI * t / d) - 1)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,BackInEase,The following statement contains a magic number: float s = 1.70158f;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,BackOutEase,The following statement contains a magic number: float s = 1.70158f;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: float s = 1.70158f;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (t * t * ((((s *= 1.525f) + 1) * t) - s))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (t * t * ((((s *= 1.525f) + 1) * t) - s))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * ((((s *= 1.525f) + 1) * t) + s)) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * ((((s *= 1.525f) + 1) * t) + s)) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * ((((s *= 1.525f) + 1) * t) + s)) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * ((((s *= 1.525f) + 1) * t) + s)) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,BounceOutEase,The following statement contains a magic number: return (c * (7.5625f * t * t)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,BounceOutEase,The following statement contains a magic number: (t /= d) < (1 / 2.75f)
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,BounceInOutEase,The following statement contains a magic number: return (this.BounceInEase(t * 2' Vector2.Zero' c' d) * .5f) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,BounceInOutEase,The following statement contains a magic number: return (this.BounceInEase(t * 2' Vector2.Zero' c' d) * .5f) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,BounceInOutEase,The following statement contains a magic number: t < d / 2
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,CircleInOutEase,The following statement contains a magic number: return (-c / 2 * ((float)Math.Sqrt(1 - (t * t)) - 1)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,CircleInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,CircleInOutEase,The following statement contains a magic number: return (c / 2 * ((float)Math.Sqrt(1 - ((t -= 2) * t)) + 1)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,CircleInOutEase,The following statement contains a magic number: return (c / 2 * ((float)Math.Sqrt(1 - ((t -= 2) * t)) + 1)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: return (c / 2 * t * t * t) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: float p = d * .3f;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: float s = p / 4;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: return -(a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: return -(a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: return -(a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: float p = d * .3f;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: float s = p / 4;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * t) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + c + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * t) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + c + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * t) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + c + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: (t /= d / 2) == 2
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: (t /= d / 2) == 2
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: float p = d * (.3f * 1.5f);
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: float p = d * (.3f * 1.5f);
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: float s = p / 4;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (-.5f * (a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (-.5f * (a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (-.5f * (a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (-.5f * (a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ExponentialInEase,The following statement contains a magic number: return (t == 0) ? b : (c * (float)Math.Pow(2' 10 * ((t / d) - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ExponentialInEase,The following statement contains a magic number: return (t == 0) ? b : (c * (float)Math.Pow(2' 10 * ((t / d) - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ExponentialOutEase,The following statement contains a magic number: return (t == d) ? b + c : (c * (-(float)Math.Pow(2' -10 * t / d) + 1)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ExponentialOutEase,The following statement contains a magic number: return (t == d) ? b + c : (c * (-(float)Math.Pow(2' -10 * t / d) + 1)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (float)Math.Pow(2' 10 * (t - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (float)Math.Pow(2' 10 * (t - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (float)Math.Pow(2' 10 * (t - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (-(float)Math.Pow(2' -10 * --t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (-(float)Math.Pow(2' -10 * --t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (-(float)Math.Pow(2' -10 * --t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (-(float)Math.Pow(2' -10 * --t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,QuadraticOutEase,The following statement contains a magic number: return (-c * (t /= d) * (t - 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,QuadraticInOutEase,The following statement contains a magic number: return (c / 2 * t * t) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,QuadraticInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,QuadraticInOutEase,The following statement contains a magic number: return (-c / 2 * (((--t) * (t - 2)) - 1)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,QuadraticInOutEase,The following statement contains a magic number: return (-c / 2 * (((--t) * (t - 2)) - 1)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: return (c / 2 * t * t * t * t) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: return (-c / 2 * (((t -= 2) * t * t * t) - 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: return (-c / 2 * (((t -= 2) * t * t * t) - 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: return (-c / 2 * (((t -= 2) * t * t * t) - 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: return (c / 2 * t * t * t * t * t) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,SineInEase,The following statement contains a magic number: return (-c * (float)Math.Cos(t / d * (Math.PI / 2))) + c + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,SineOutEase,The following statement contains a magic number: return (c * (float)Math.Sin(t / d * (Math.PI / 2))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,SineInOutEase,The following statement contains a magic number: return (-c / 2 * ((float)Math.Cos(Math.PI * t / d) - 1)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,BackInEase,The following statement contains a magic number: float s = 1.70158f;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,BackOutEase,The following statement contains a magic number: float s = 1.70158f;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: float s = 1.70158f;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c * 0.5f * (t * t * ((((s *= 1.525f) + 1) * t) - s))) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c * 0.5f * (t * t * ((((s *= 1.525f) + 1) * t) - s))) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c * 0.5f * (((t -= 2) * t * ((((s *= 1.525f) + 1) * t) + s)) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c * 0.5f * (((t -= 2) * t * ((((s *= 1.525f) + 1) * t) + s)) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c * 0.5f * (((t -= 2) * t * ((((s *= 1.525f) + 1) * t) + s)) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c * 0.5f * (((t -= 2) * t * ((((s *= 1.525f) + 1) * t) + s)) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,BounceOutEase,The following statement contains a magic number: return (c * (7.5625f * t * t)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,BounceOutEase,The following statement contains a magic number: (t /= d) < (1 / 2.75f)
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,BounceInOutEase,The following statement contains a magic number: return (this.BounceInEase(t * 2' Quaternion.Identity' c' d) * .5f) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,BounceInOutEase,The following statement contains a magic number: return (this.BounceInEase(t * 2' Quaternion.Identity' c' d) * .5f) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,BounceInOutEase,The following statement contains a magic number: t < d / 2
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,CircleInOutEase,The following statement contains a magic number: return (-c * 0.5f * ((float)Math.Sqrt(1 - (t * t)) - 1)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,CircleInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,CircleInOutEase,The following statement contains a magic number: return (c * 0.5f * ((float)Math.Sqrt(1 - ((t -= 2) * t)) + 1)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,CircleInOutEase,The following statement contains a magic number: return (c * 0.5f * ((float)Math.Sqrt(1 - ((t -= 2) * t)) + 1)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: return (c * 0.5f * t * t * t) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: return (c * 0.5f * (((t -= 2) * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: return (c * 0.5f * (((t -= 2) * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: return (c * 0.5f * (((t -= 2) * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: float p = d * .3f;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: float s = p / 4;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: return -(a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: return -(a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: return -(a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: float p = d * .3f;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: float s = p / 4;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * t) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + c + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * t) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + c + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * t) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + c + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: (t /= d / 2) == 2
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: (t /= d / 2) == 2
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: float p = d * (.3f * 1.5f);
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: float p = d * (.3f * 1.5f);
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: float s = p / 4;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return ((a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) * -0.5f) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return ((a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) * -0.5f) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return ((a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) * -0.5f) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return ((a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) * -0.5f) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ExponentialInEase,The following statement contains a magic number: return (t == 0) ? b : (c * (float)Math.Pow(2' 10 * ((t / d) - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ExponentialInEase,The following statement contains a magic number: return (t == 0) ? b : (c * (float)Math.Pow(2' 10 * ((t / d) - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ExponentialOutEase,The following statement contains a magic number: return (t == d) ? b + c : (c * (-(float)Math.Pow(2' -10 * t / d) + 1)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ExponentialOutEase,The following statement contains a magic number: return (t == d) ? b + c : (c * (-(float)Math.Pow(2' -10 * t / d) + 1)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c * 0.5f * (float)Math.Pow(2' 10 * (t - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c * 0.5f * (float)Math.Pow(2' 10 * (t - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c * 0.5f * (float)Math.Pow(2' 10 * (t - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c * 0.5f * (-(float)Math.Pow(2' -10 * --t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c * 0.5f * (-(float)Math.Pow(2' -10 * --t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c * 0.5f * (-(float)Math.Pow(2' -10 * --t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c * 0.5f * (-(float)Math.Pow(2' -10 * --t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuadraticOutEase,The following statement contains a magic number: return (-c * (t /= d) * (t - 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuadraticInOutEase,The following statement contains a magic number: return (c * 0.5f * t * t) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuadraticInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuadraticInOutEase,The following statement contains a magic number: return (-c * 0.5f * (((--t) * (t - 2)) - 1)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuadraticInOutEase,The following statement contains a magic number: return (-c * 0.5f * (((--t) * (t - 2)) - 1)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: return (c * 0.5f * t * t * t * t) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: return (-c * 0.5f * (((t -= 2) * t * t * t) - 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: return (-c * 0.5f * (((t -= 2) * t * t * t) - 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: return (-c * 0.5f * (((t -= 2) * t * t * t) - 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: return (c * 0.5f * t * t * t * t * t) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: return (c * 0.5f * (((t -= 2) * t * t * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: return (c * 0.5f * (((t -= 2) * t * t * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: return (c * 0.5f * (((t -= 2) * t * t * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,SineInEase,The following statement contains a magic number: return (-c * (float)Math.Cos(t / d * (Math.PI / 2))) + c + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,SineOutEase,The following statement contains a magic number: return (c * (float)Math.Sin(t / d * (Math.PI / 2))) + b;
Magic Number,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,SineInOutEase,The following statement contains a magic number: return (-c * 0.5f * ((float)Math.Cos(Math.PI * t / d) - 1)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,BackInEase,The following statement contains a magic number: float s = 1.70158f;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,BackOutEase,The following statement contains a magic number: float s = 1.70158f;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: float s = 1.70158f;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (t * t * ((((s *= 1.525f) + 1) * t) - s))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (t * t * ((((s *= 1.525f) + 1) * t) - s))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * ((((s *= 1.525f) + 1) * t) + s)) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * ((((s *= 1.525f) + 1) * t) + s)) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * ((((s *= 1.525f) + 1) * t) + s)) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,BackInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * ((((s *= 1.525f) + 1) * t) + s)) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,BounceOutEase,The following statement contains a magic number: return (c * (7.5625f * t * t)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,BounceOutEase,The following statement contains a magic number: (t /= d) < (1 / 2.75f)
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,BounceInOutEase,The following statement contains a magic number: return (this.BounceInEase(t * 2' Vector3.Zero' c' d) * .5f) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,BounceInOutEase,The following statement contains a magic number: return (this.BounceInEase(t * 2' Vector3.Zero' c' d) * .5f) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,BounceInOutEase,The following statement contains a magic number: t < d / 2
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,CircleInOutEase,The following statement contains a magic number: return (-c / 2 * ((float)Math.Sqrt(1 - (t * t)) - 1)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,CircleInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,CircleInOutEase,The following statement contains a magic number: return (c / 2 * ((float)Math.Sqrt(1 - ((t -= 2) * t)) + 1)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,CircleInOutEase,The following statement contains a magic number: return (c / 2 * ((float)Math.Sqrt(1 - ((t -= 2) * t)) + 1)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: return (c / 2 * t * t * t) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,CubicInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: float p = d * .3f;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: float s = p / 4;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: return -(a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: return -(a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInEase,The following statement contains a magic number: return -(a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: float p = d * .3f;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: float s = p / 4;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * t) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + c + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * t) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + c + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * t) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p)) + c + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: (t /= d / 2) == 2
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: (t /= d / 2) == 2
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: float p = d * (.3f * 1.5f);
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: float p = d * (.3f * 1.5f);
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: float s = p / 4;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (-.5f * (a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (-.5f * (a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (-.5f * (a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (-.5f * (a * (float)Math.Pow(2' 10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ElasticInOutEase,The following statement contains a magic number: return (a * (float)Math.Pow(2' -10 * (t -= 1)) * (float)Math.Sin(((t * d) - s) * (2 * (float)Math.PI) / p) * .5f) + c + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ExponentialInEase,The following statement contains a magic number: return (t == 0) ? b : (c * (float)Math.Pow(2' 10 * ((t / d) - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ExponentialInEase,The following statement contains a magic number: return (t == 0) ? b : (c * (float)Math.Pow(2' 10 * ((t / d) - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ExponentialOutEase,The following statement contains a magic number: return (t == d) ? b + c : (c * (-(float)Math.Pow(2' -10 * t / d) + 1)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ExponentialOutEase,The following statement contains a magic number: return (t == d) ? b + c : (c * (-(float)Math.Pow(2' -10 * t / d) + 1)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (float)Math.Pow(2' 10 * (t - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (float)Math.Pow(2' 10 * (t - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (float)Math.Pow(2' 10 * (t - 1))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (-(float)Math.Pow(2' -10 * --t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (-(float)Math.Pow(2' -10 * --t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (-(float)Math.Pow(2' -10 * --t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,ExponentialInOutEase,The following statement contains a magic number: return (c / 2 * (-(float)Math.Pow(2' -10 * --t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,QuadraticOutEase,The following statement contains a magic number: return (-c * (t /= d) * (t - 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,QuadraticInOutEase,The following statement contains a magic number: return (c / 2 * t * t) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,QuadraticInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,QuadraticInOutEase,The following statement contains a magic number: return (-c / 2 * (((--t) * (t - 2)) - 1)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,QuadraticInOutEase,The following statement contains a magic number: return (-c / 2 * (((--t) * (t - 2)) - 1)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: return (c / 2 * t * t * t * t) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: return (-c / 2 * (((t -= 2) * t * t * t) - 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: return (-c / 2 * (((t -= 2) * t * t * t) - 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,QuarticInOutEase,The following statement contains a magic number: return (-c / 2 * (((t -= 2) * t * t * t) - 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: return (c / 2 * t * t * t * t * t) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: (t /= d / 2) < 1
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,QuinticInOutEase,The following statement contains a magic number: return (c / 2 * (((t -= 2) * t * t * t * t) + 2)) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,SineInEase,The following statement contains a magic number: return (-c * (float)Math.Cos(t / d * (Math.PI / 2))) + c + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,SineOutEase,The following statement contains a magic number: return (c * (float)Math.Sin(t / d * (Math.PI / 2))) + b;
Magic Number,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,SineInOutEase,The following statement contains a magic number: return (-c / 2 * ((float)Math.Cos(Math.PI * t / d) - 1)) + b;
Magic Number,WaveEngine.Components.Gestures,TouchGestures,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Gestures\TouchGestures.cs,DefaultValues,The following statement contains a magic number: this.minScale = 0.1f;
Magic Number,WaveEngine.Components.Gestures,TouchGestures,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Gestures\TouchGestures.cs,DefaultValues,The following statement contains a magic number: this.maxScale = 5f;
Magic Number,WaveEngine.Components.Gestures,TouchGestures,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Gestures\TouchGestures.cs,UpdateTouchOrder,The following statement contains a magic number: int numberOfLevels = 100;
Magic Number,WaveEngine.Components.Gestures,TouchGestures,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Gestures\TouchGestures.cs,FreeState,The following statement contains a magic number: this.currentTouches.Count < 2
Magic Number,WaveEngine.Components.Gestures,TouchGestures,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Gestures\TouchGestures.cs,FindTwoFarthestTouches,The following statement contains a magic number: float dis = (float)Math.Sqrt(Math.Pow(jTouch.X - iTouch.X' 2) +                                                   Math.Pow(jTouch.Y - iTouch.Y' 2));
Magic Number,WaveEngine.Components.Gestures,TouchGestures,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Gestures\TouchGestures.cs,FindTwoFarthestTouches,The following statement contains a magic number: float dis = (float)Math.Sqrt(Math.Pow(jTouch.X - iTouch.X' 2) +                                                   Math.Pow(jTouch.Y - iTouch.Y' 2));
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,Draw,The following statement contains a magic number: this.mesh.NumPrimitives = nVertices / 2;
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: this.numPrimitives = this.numParticles * 2;
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: this.numVertices = this.numParticles * 4;
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: this.numIndices = this.numParticles * 6;
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 0] = (ushort)((i * 4) + 0);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 0] = (ushort)((i * 4) + 0);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 1] = (ushort)((i * 4) + 2);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 1] = (ushort)((i * 4) + 2);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 1] = (ushort)((i * 4) + 2);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 2] = (ushort)((i * 4) + 1);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 2] = (ushort)((i * 4) + 1);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 2] = (ushort)((i * 4) + 1);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 3] = (ushort)((i * 4) + 0);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 3] = (ushort)((i * 4) + 0);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 3] = (ushort)((i * 4) + 0);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 4] = (ushort)((i * 4) + 3);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 4] = (ushort)((i * 4) + 3);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 4] = (ushort)((i * 4) + 3);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 4] = (ushort)((i * 4) + 3);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 5] = (ushort)((i * 4) + 2);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 5] = (ushort)((i * 4) + 2);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 5] = (ushort)((i * 4) + 2);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 5] = (ushort)((i * 4) + 2);
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,LoadParticleSystem,The following statement contains a magic number: this.mesh = new Mesh(0' vertexBuffer.VertexCount' 0' indexBuffer.IndexCount / 3' vertexBuffer' indexBuffer' PrimitiveType.TriangleList)                  {                      DisableBatch = true                  };
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: p.Velocity.X = this.settings.LocalVelocity.X + (this.settings.RandomVelocity.X * (((float)this.random.NextDouble() * 2) - 1));
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: p.Velocity.Y = this.settings.LocalVelocity.Y + (this.settings.RandomVelocity.Y * (((float)this.random.NextDouble() * 2) - 1));
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem2D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Y = p.Position.Y + (y * radius);                                break;                          }                        case ParticleSystem2D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Y = p.Position.Y + (y * radius * rnd1);                                break;                          }                        case ParticleSystem2D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Y = p.Position.Y + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Y = p.Position.Y - yside;                                      break;                              }                                break;                          }                        case ParticleSystem2D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        case ParticleSystem2D.Shape.FillBox:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd2 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Y = p.Position.Y + ((this.settings.EmitterSize.Y / 2) * rnd1);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Z / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics2D,ParticleSystemRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\ParticleSystemRenderer2D.cs,ResetParticle,The following statement contains a magic number: float randomAngle = this.settings.InitialAngleVariation * (((float)this.random.NextDouble() * 2) - 1);
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: this.texcoord1 = new Vector2[4]                  {                      new Vector2(0' 0)'                      new Vector2(1' 0)'                      new Vector2(1' 1)'                      new Vector2(0' 1)'                  };
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: this.texcoord2 = new Vector2[4]                  {                      new Vector2(0' 0)'                      new Vector2(1' 0)'                      new Vector2(1' 1)'                      new Vector2(0' 1)'                  };
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: VertexPositionDualTexture[] vertices = new VertexPositionDualTexture[4];
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: vertices[2].Position = new Vector3(halfWidth - originCorrectionWidth' halfHeight - originCorrectionHeight' 0);
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: vertices[2].TexCoord = this.texcoord1[2];
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: vertices[2].TexCoord = this.texcoord1[2];
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: vertices[2].TexCoord2 = this.texcoord2[2];
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: vertices[2].TexCoord2 = this.texcoord2[2];
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: vertices[3].Position = new Vector3(-originCorrectionWidth' halfHeight - originCorrectionHeight' 0);
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: vertices[3].TexCoord = this.texcoord1[3];
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: vertices[3].TexCoord = this.texcoord1[3];
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: vertices[3].TexCoord2 = this.texcoord2[3];
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: vertices[3].TexCoord2 = this.texcoord2[3];
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: vertexBuffer.SetData(vertices' 4);
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: ushort[] indices = new ushort[6];
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: indices[2] = 2;
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: indices[2] = 2;
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: indices[3] = 2;
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: indices[3] = 2;
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: indices[4] = 3;
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: indices[4] = 3;
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: indices[5] = 0;
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: this.quadMesh = new Mesh(0' 4' 0' 2' vertexBuffer' indexBuffer' PrimitiveType.TriangleList);
Magic Number,WaveEngine.Components.Graphics2D,QuadRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\QuadRenderer.cs,RefreshQuadMesh,The following statement contains a magic number: this.quadMesh = new Mesh(0' 4' 0' 2' vertexBuffer' indexBuffer' PrimitiveType.TriangleList);
Magic Number,WaveEngine.Components.Graphics2D,SpriteRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\SpriteRenderer.cs,RefreshSliceCache,The following statement contains a magic number: scalableCenter.X = (hOffset - hStretchAcumm) + (((hWidth * 0.5f) + hStretchAcumm) * stretchScale.X);
Magic Number,WaveEngine.Components.Graphics2D,SpriteRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics2D\SpriteRenderer.cs,RefreshSliceCache,The following statement contains a magic number: scalableCenter.Y = (vOffset - vStretchAcumm) + (((vHeight * 0.5f) + vStretchAcumm) * stretchScale.Y);
Magic Number,WaveEngine.Components.Primitives,LineBezierMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineBezierMesh.cs,DefaultValues,The following statement contains a magic number: this.resolution = 10;
Magic Number,WaveEngine.Components.Primitives,LineBezierMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineBezierMesh.cs,RefreshMeshes,The following statement contains a magic number: this.bezierLinePoints == null || this.bezierLinePoints.Count < 2
Magic Number,WaveEngine.Components.Primitives,LineBezierMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineBezierMesh.cs,CalculateQuadraticPoint,The following statement contains a magic number: return (u * u * p0) + (2 * u * t * p1) + (t * t * p2);
Magic Number,WaveEngine.Components.Primitives,LineBezierMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineBezierMesh.cs,CalculateCubicPoint,The following statement contains a magic number: return (u * uu * p0) + (3 * uu * t * p1) + (3 * u * tt * p2) + (t * tt * p3);
Magic Number,WaveEngine.Components.Primitives,LineBezierMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineBezierMesh.cs,CalculateCubicPoint,The following statement contains a magic number: return (u * uu * p0) + (3 * uu * t * p1) + (3 * u * tt * p2) + (t * tt * p3);
Magic Number,WaveEngine.Components.Primitives,LineBezierMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineBezierMesh.cs,CloneLastPoint,The following statement contains a magic number: var prev = this.bezierLinePoints[this.bezierLinePoints.Count - 2];
Magic Number,WaveEngine.Components.Primitives,LineBezierMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineBezierMesh.cs,CloneLastPoint,The following statement contains a magic number: point.Position = prev.Position + (2 * prev.OutboundHandle);
Magic Number,WaveEngine.Components.Primitives,LineArcMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineArcMeshBase.cs,DefaultValues,The following statement contains a magic number: this.thickness = 0.1f;
Magic Number,WaveEngine.Components.Primitives,LineArcMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineArcMeshBase.cs,DefaultValues,The following statement contains a magic number: this.tessellation = 16;
Magic Number,WaveEngine.Components.Primitives,LinePolygonMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LinePolygonMesh.cs,DefaultValues,The following statement contains a magic number: this.tessellation = 3;
Magic Number,WaveEngine.Components.Primitives,LineRectangleMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineRectangleMesh.cs,DefaultValues,The following statement contains a magic number: this.thickness = 0.1f;
Magic Number,WaveEngine.Components.Primitives,LineRectangleMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineRectangleMesh.cs,RefreshMeshes,The following statement contains a magic number: this.linePoints = new List<LinePointInfo>(4);
Magic Number,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,RefreshMeshes,The following statement contains a magic number: this.linePoints == null || this.linePoints.Count < 2
Magic Number,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,FillStripLines,The following statement contains a magic number: thicknessFactor = 1f / (float)Math.Sin(angle * 0.5);
Magic Number,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,FillStripLines,The following statement contains a magic number: this.AddVertex(ref currentPoint' ref thicknessDirection' lenghtByPoint[p] / totalLenght' p * 2' vertices' thicknessFactor);
Magic Number,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,FillLineList,The following statement contains a magic number: pointIndex += 2;
Magic Number,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,FillLineList,The following statement contains a magic number: pointIndex += 2;
Magic Number,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,FillLineList,The following statement contains a magic number: indices[indexArray + 2] = (ushort)(vertexIndex + 2);
Magic Number,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,FillLineList,The following statement contains a magic number: indices[indexArray + 2] = (ushort)(vertexIndex + 2);
Magic Number,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,FillLineList,The following statement contains a magic number: indices[indexArray + 3] = (ushort)(vertexIndex + 2);
Magic Number,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,FillLineList,The following statement contains a magic number: indices[indexArray + 3] = (ushort)(vertexIndex + 2);
Magic Number,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,FillLineList,The following statement contains a magic number: indices[indexArray + 4] = (ushort)(vertexIndex + 1);
Magic Number,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,FillLineList,The following statement contains a magic number: indices[indexArray + 5] = (ushort)(vertexIndex + 3);
Magic Number,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,FillLineList,The following statement contains a magic number: indices[indexArray + 5] = (ushort)(vertexIndex + 3);
Magic Number,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,FillLineList,The following statement contains a magic number: indexArray += IndicesPerPoint * 2;
Magic Number,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,AddMesh,The following statement contains a magic number: var primitiveCount = primitiveType == PrimitiveType.TriangleStrip ? indices.Length - 2 : indices.Length / 3;
Magic Number,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,AddMesh,The following statement contains a magic number: var primitiveCount = primitiveType == PrimitiveType.TriangleStrip ? indices.Length - 2 : indices.Length / 3;
Magic Number,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,AddVertex,The following statement contains a magic number: float halfThickness = info.Thickness * 0.5f;
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: tessellation % 2 != 0
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: int halfTessellation = tessellation / 2;
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddVertex((Vector3.Down * radius) + (Vector3.Down * 0.5f * height)' Vector3.Down' new Vector2(0.5f' 0.5f));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddVertex((Vector3.Down * radius) + (Vector3.Down * 0.5f * height)' Vector3.Down' new Vector2(0.5f' 0.5f));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddVertex((Vector3.Down * radius) + (Vector3.Down * 0.5f * height)' Vector3.Down' new Vector2(0.5f' 0.5f));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: position += Vector3.Down * 0.5f * height;
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddVertex(position' normal' new Vector2(1 - ((0.5f * dx) + 0.5f)' (0.5f * dz) + 0.5f));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddVertex(position' normal' new Vector2(1 - ((0.5f * dx) + 0.5f)' (0.5f * dz) + 0.5f));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddVertex(position' normal' new Vector2(1 - ((0.5f * dx) + 0.5f)' (0.5f * dz) + 0.5f));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddVertex(position' normal' new Vector2(1 - ((0.5f * dx) + 0.5f)' (0.5f * dz) + 0.5f));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: float cylinderHeight = height * 0.5f;
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddIndex(stride + (i * 2));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddIndex(stride + ((i * 2) + 1));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddIndex(stride + (((i * 2) + 2) % ((tessellation + 1) * 2)));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddIndex(stride + (((i * 2) + 2) % ((tessellation + 1) * 2)));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddIndex(stride + (((i * 2) + 2) % ((tessellation + 1) * 2)));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddIndex(stride + ((i * 2) + 1));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddIndex(stride + (((i * 2) + 3) % ((tessellation + 1) * 2)));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddIndex(stride + (((i * 2) + 3) % ((tessellation + 1) * 2)));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddIndex(stride + (((i * 2) + 3) % ((tessellation + 1) * 2)));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddIndex(stride + (((i * 2) + 2) % ((tessellation + 1) * 2)));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddIndex(stride + (((i * 2) + 2) % ((tessellation + 1) * 2)));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddIndex(stride + (((i * 2) + 2) % ((tessellation + 1) * 2)));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddVertex((Vector3.Up * radius) + (Vector3.Up * 0.5f * height)' Vector3.Up' new Vector2(0.5f' 0.5f));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddVertex((Vector3.Up * radius) + (Vector3.Up * 0.5f * height)' Vector3.Up' new Vector2(0.5f' 0.5f));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddVertex((Vector3.Up * radius) + (Vector3.Up * 0.5f * height)' Vector3.Up' new Vector2(0.5f' 0.5f));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: position += Vector3.Up * 0.5f * height;
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddVertex(position' normal' new Vector2((0.5f * dx) + 0.5f' (0.5f * dz) + 0.5f));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddVertex(position' normal' new Vector2((0.5f * dx) + 0.5f' (0.5f * dz) + 0.5f));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddVertex(position' normal' new Vector2((0.5f * dx) + 0.5f' (0.5f * dz) + 0.5f));
Magic Number,WaveEngine.Components.Primitives,Capsule,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Capsule.cs,Capsule,The following statement contains a magic number: this.AddVertex(position' normal' new Vector2((0.5f * dx) + 0.5f' (0.5f * dz) + 0.5f));
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,Cone,The following statement contains a magic number: tessellation < 3
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,Cone,The following statement contains a magic number: height /= 2;
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,Cone,The following statement contains a magic number: float radius = diameter / 2;
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,Cone,The following statement contains a magic number: this.AddIndex(i * 2);
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,Cone,The following statement contains a magic number: this.AddIndex((i * 2) + 1);
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,Cone,The following statement contains a magic number: this.AddIndex(((i * 2) + 2) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,Cone,The following statement contains a magic number: this.AddIndex(((i * 2) + 2) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,Cone,The following statement contains a magic number: this.AddIndex(((i * 2) + 2) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,Cone,The following statement contains a magic number: this.AddIndex((i * 2) + 1);
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,Cone,The following statement contains a magic number: this.AddIndex(((i * 2) + 3) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,Cone,The following statement contains a magic number: this.AddIndex(((i * 2) + 3) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,Cone,The following statement contains a magic number: this.AddIndex(((i * 2) + 3) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,Cone,The following statement contains a magic number: this.AddIndex(((i * 2) + 2) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,Cone,The following statement contains a magic number: this.AddIndex(((i * 2) + 2) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,Cone,The following statement contains a magic number: this.AddIndex(((i * 2) + 2) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,CreateCap,The following statement contains a magic number: this.AddIndex(this.VerticesCount + ((i + 2) % tessellation));
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,CreateCap,The following statement contains a magic number: i < tessellation - 2
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,CreateCap,The following statement contains a magic number: this.AddVertex(position' normal' new Vector2(1 - ((dx * 0.5f) + 0.5f)' (dz * 0.5f) + 0.5f));
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,CreateCap,The following statement contains a magic number: this.AddVertex(position' normal' new Vector2(1 - ((dx * 0.5f) + 0.5f)' (dz * 0.5f) + 0.5f));
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,CreateCap,The following statement contains a magic number: this.AddVertex(position' normal' new Vector2(1 - ((dx * 0.5f) + 0.5f)' (dz * 0.5f) + 0.5f));
Magic Number,WaveEngine.Components.Primitives,Cone,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cone.cs,CreateCap,The following statement contains a magic number: this.AddVertex(position' normal' new Vector2(1 - ((dx * 0.5f) + 0.5f)' (dz * 0.5f) + 0.5f));
Magic Number,WaveEngine.Components.Primitives,Cube,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cube.cs,Cube,The following statement contains a magic number: this.AddIndex(this.VerticesCount + 3);
Magic Number,WaveEngine.Components.Primitives,Cube,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cube.cs,Cube,The following statement contains a magic number: this.AddIndex(this.VerticesCount + 2);
Magic Number,WaveEngine.Components.Primitives,Cube,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cube.cs,Cube,The following statement contains a magic number: this.AddIndex(this.VerticesCount + 3);
Magic Number,WaveEngine.Components.Primitives,Cube,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cube.cs,Cube,The following statement contains a magic number: float sideOverTwo = size * 0.5f;
Magic Number,WaveEngine.Components.Primitives,Cube,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cube.cs,Cube,The following statement contains a magic number: this.AddVertex((normal + side1 + side2) * sideOverTwo' normal' tangent' texCoord[j + 2]);
Magic Number,WaveEngine.Components.Primitives,Cube,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cube.cs,Cube,The following statement contains a magic number: this.AddVertex((normal + side1 - side2) * sideOverTwo' normal' tangent' texCoord[j + 3]);
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,Cylinder,The following statement contains a magic number: tessellation < 3
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,Cylinder,The following statement contains a magic number: height /= 2;
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,Cylinder,The following statement contains a magic number: float radius = diameter / 2;
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,Cylinder,The following statement contains a magic number: this.AddIndex(i * 2);
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,Cylinder,The following statement contains a magic number: this.AddIndex((i * 2) + 1);
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,Cylinder,The following statement contains a magic number: this.AddIndex(((i * 2) + 2) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,Cylinder,The following statement contains a magic number: this.AddIndex(((i * 2) + 2) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,Cylinder,The following statement contains a magic number: this.AddIndex(((i * 2) + 2) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,Cylinder,The following statement contains a magic number: this.AddIndex((i * 2) + 1);
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,Cylinder,The following statement contains a magic number: this.AddIndex(((i * 2) + 3) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,Cylinder,The following statement contains a magic number: this.AddIndex(((i * 2) + 3) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,Cylinder,The following statement contains a magic number: this.AddIndex(((i * 2) + 3) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,Cylinder,The following statement contains a magic number: this.AddIndex(((i * 2) + 2) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,Cylinder,The following statement contains a magic number: this.AddIndex(((i * 2) + 2) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,Cylinder,The following statement contains a magic number: this.AddIndex(((i * 2) + 2) % ((tessellation + 1) * 2));
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,CreateCap,The following statement contains a magic number: this.AddIndex(this.VerticesCount + ((i + 2) % tessellation));
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,CreateCap,The following statement contains a magic number: i < tessellation - 2
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,CreateCap,The following statement contains a magic number: var uHorizontalCoord = (dx * 0.5f) + 0.5f;
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,CreateCap,The following statement contains a magic number: var uHorizontalCoord = (dx * 0.5f) + 0.5f;
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,CreateCap,The following statement contains a magic number: this.AddVertex(position' normal' new Vector2(uHorizontalCoord' (dz * 0.5f) + 0.5f));
Magic Number,WaveEngine.Components.Primitives,Cylinder,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Cylinder.cs,CreateCap,The following statement contains a magic number: this.AddVertex(position' normal' new Vector2(uHorizontalCoord' (dz * 0.5f) + 0.5f));
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: Vector3 side1 = 0.5f * width * Vector3.UnitX;
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: Vector3 side2 = 0.5f * height * Vector3.UnitY;
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: this.AddIndex(2);
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: this.AddIndex(2);
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: this.AddIndex(3);
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: Vector2[] uv = new Vector2[4];
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: uv[2] = new Vector2(uTileFactor' 0);
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: uv[3] = new Vector2(uTileFactor' vTileFactor);
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: uv[0] = uv[3];
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: uv[3] = aux;
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: uv[1] = uv[2];
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: uv[2] = aux;
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: aux = uv[3];
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: uv[3] = uv[2];
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: uv[3] = uv[2];
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: uv[2] = aux;
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: this.AddVertex(v3' normal' uv[2]);
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: this.AddVertex(v4' normal' uv[3]);
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: this.AddIndex(4);
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: this.AddIndex(6);
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: this.AddIndex(5);
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: this.AddIndex(4);
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: this.AddIndex(7);
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: this.AddIndex(6);
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: this.AddVertex(v1' normal' uv[3]);
Magic Number,WaveEngine.Components.Primitives,Plane,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Plane.cs,Plane,The following statement contains a magic number: this.AddVertex(v2' normal' uv[2]);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: float sizeOverTwo = size / 2;
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddIndex(2);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddIndex(2);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddIndex(3);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddIndex(4);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddIndex(5);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddIndex(6);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddIndex(7);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddIndex(8);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddIndex(9);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddIndex(10);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddIndex(11);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddIndex(12);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddIndex(13);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddIndex(14);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddIndex(15);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: normal = new Vector3(0' 0.5f' 1);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddVertex(basePos * -(size / 2)' normal' new Vector2(0.5f' 0));
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddVertex(basePos * -(size / 2)' normal' new Vector2(0.5f' 0));
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: normal = new Vector3(-1' 0.5f' 0);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddVertex(basePos * -(size / 2)' normal' new Vector2(0.5f' 0));
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddVertex(basePos * -(size / 2)' normal' new Vector2(0.5f' 0));
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: normal = new Vector3(0' 0.5f' -1);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddVertex(basePos * -(size / 2)' normal' new Vector2(0.5f' 0));
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddVertex(basePos * -(size / 2)' normal' new Vector2(0.5f' 0));
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: normal = new Vector3(1' 0.5f' 0);
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddVertex(basePos * -(size / 2)' normal' new Vector2(0.5f' 0));
Magic Number,WaveEngine.Components.Primitives,Pyramid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Pyramid.cs,Pyramid,The following statement contains a magic number: this.AddVertex(basePos * -(size / 2)' normal' new Vector2(0.5f' 0));
Magic Number,WaveEngine.Components.Primitives,Sphere,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Sphere.cs,Sphere,The following statement contains a magic number: tessellation < 3
Magic Number,WaveEngine.Components.Primitives,Sphere,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Sphere.cs,Sphere,The following statement contains a magic number: int horizontalSegments = tessellation * 2;
Magic Number,WaveEngine.Components.Primitives,Sphere,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Sphere.cs,Sphere,The following statement contains a magic number: float radius = diameter / 2;
Magic Number,WaveEngine.Components.Primitives,Sphere,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Sphere.cs,Sphere,The following statement contains a magic number: i < verticalSegments - 2
Magic Number,WaveEngine.Components.Primitives,Sphere,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Sphere.cs,Sphere,The following statement contains a magic number: this.AddIndex(this.VerticesCount - horizontalSegments - 2 - i);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,TessellatePatch,The following statement contains a magic number: Vector3[] controlPoints = new Vector3[16];
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,TessellatePatch,The following statement contains a magic number: i < 16
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 p1 = this.Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 p1 = this.Bezier(patch[0]' patch[1]' patch[2]' patch[3]' ti);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 p2 = this.Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 p2 = this.Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 p2 = this.Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 p2 = this.Bezier(patch[4]' patch[5]' patch[6]' patch[7]' ti);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 p3 = this.Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 p3 = this.Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 p3 = this.Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 p3 = this.Bezier(patch[8]' patch[9]' patch[10]' patch[11]' ti);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 p4 = this.Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 p4 = this.Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 p4 = this.Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 p4 = this.Bezier(patch[12]' patch[13]' patch[14]' patch[15]' ti);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 q1 = this.Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 q1 = this.Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 q1 = this.Bezier(patch[0]' patch[4]' patch[8]' patch[12]' tj);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 q2 = this.Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 q2 = this.Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 q2 = this.Bezier(patch[1]' patch[5]' patch[9]' patch[13]' tj);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 q3 = this.Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 q3 = this.Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 q3 = this.Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 q3 = this.Bezier(patch[2]' patch[6]' patch[10]' patch[14]' tj);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 q4 = this.Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 q4 = this.Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 q4 = this.Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: Vector3 q4 = this.Bezier(patch[3]' patch[7]' patch[11]' patch[15]' tj);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,CreatePatchVertices,The following statement contains a magic number: normal.Length() > 0.0001f
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,Bezier,The following statement contains a magic number: return (p1 * (1 - t) * (1 - t) * (1 - t)) +                     (p2 * 3 * t * (1 - t) * (1 - t)) +                     (p3 * 3 * t * t * (1 - t)) +                     (p4 * t * t * t);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,Bezier,The following statement contains a magic number: return (p1 * (1 - t) * (1 - t) * (1 - t)) +                     (p2 * 3 * t * (1 - t) * (1 - t)) +                     (p3 * 3 * t * t * (1 - t)) +                     (p4 * t * t * t);
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,BezierTangent,The following statement contains a magic number: return (p1 * (-1 + (2 * t) - (t * t))) +                     (p2 * (1 - (4 * t) + (3 * t * t))) +                     (p3 * ((2 * t) - (3 * t * t))) +                     (p4 * (t * t));
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,BezierTangent,The following statement contains a magic number: return (p1 * (-1 + (2 * t) - (t * t))) +                     (p2 * (1 - (4 * t) + (3 * t * t))) +                     (p3 * ((2 * t) - (3 * t * t))) +                     (p4 * (t * t));
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,BezierTangent,The following statement contains a magic number: return (p1 * (-1 + (2 * t) - (t * t))) +                     (p2 * (1 - (4 * t) + (3 * t * t))) +                     (p3 * ((2 * t) - (3 * t * t))) +                     (p4 * (t * t));
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,BezierTangent,The following statement contains a magic number: return (p1 * (-1 + (2 * t) - (t * t))) +                     (p2 * (1 - (4 * t) + (3 * t * t))) +                     (p3 * ((2 * t) - (3 * t * t))) +                     (p4 * (t * t));
Magic Number,WaveEngine.Components.Primitives,Teapot,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Teapot.cs,BezierTangent,The following statement contains a magic number: return (p1 * (-1 + (2 * t) - (t * t))) +                     (p2 * (1 - (4 * t) + (3 * t * t))) +                     (p3 * ((2 * t) - (3 * t * t))) +                     (p4 * (t * t));
Magic Number,WaveEngine.Components.Primitives,Torus,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Torus.cs,Torus,The following statement contains a magic number: tessellation < 3
Magic Number,WaveEngine.Components.Primitives,Torus,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Torus.cs,Torus,The following statement contains a magic number: Matrix transform = Matrix.CreateTranslation(diameter / 2' 0' 0) *                                     Matrix.CreateRotationY(outerAngle);
Magic Number,WaveEngine.Components.Primitives,Torus,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Torus.cs,Torus,The following statement contains a magic number: Vector3 position = normal * thickness / 2;
Magic Number,WaveEngine.Components.Primitives,Torus,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\Torus.cs,Torus,The following statement contains a magic number: this.AddVertex(position' normal' new Vector2(outerPercent' 0.5f - innerPercent));
Magic Number,WaveEngine.Components.Graphics3D,CapsuleMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\CapsuleMesh.cs,DefaultValues,The following statement contains a magic number: this.radius = 0.5f;
Magic Number,WaveEngine.Components.Graphics3D,CapsuleMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\CapsuleMesh.cs,DefaultValues,The following statement contains a magic number: this.tessellation = 16;
Magic Number,WaveEngine.Components.Graphics3D,CapsuleMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\CapsuleMesh.cs,GenerateCapsule,The following statement contains a magic number: this.InternalModel.FromPrimitive(WaveServices.GraphicsDevice' new Capsule(this.Height' this.Radius' this.Tessellation * 2));
Magic Number,WaveEngine.Components.Graphics3D,ConeMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ConeMesh.cs,DefaultValues,The following statement contains a magic number: this.tessellation = 16;
Magic Number,WaveEngine.Components.Graphics3D,CylinderMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\CylinderMesh.cs,DefaultValues,The following statement contains a magic number: this.tessellation = 16;
Magic Number,WaveEngine.Components.Graphics3D,InternalModel,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\InternalModel.cs,FromPrimitive,The following statement contains a magic number: int primitiveCount = indexCount / 3;
Magic Number,WaveEngine.Components.Graphics3D,SkinnedMeshRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\SkinnedMeshRenderer.cs,ShouldRefreshMorph,The following statement contains a magic number: hash += (i * 10) + this.morphTargetWeights[i];
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: this.numPrimitives = this.numParticles * 2;
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: this.numVertices = this.numParticles * 4;
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: this.numIndices = this.numParticles * 6;
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 0] = (ushort)((i * 4) + 0);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 0] = (ushort)((i * 4) + 0);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 1] = (ushort)((i * 4) + 2);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 1] = (ushort)((i * 4) + 2);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 1] = (ushort)((i * 4) + 2);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 2] = (ushort)((i * 4) + 1);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 2] = (ushort)((i * 4) + 1);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 2] = (ushort)((i * 4) + 1);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 3] = (ushort)((i * 4) + 0);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 3] = (ushort)((i * 4) + 0);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 3] = (ushort)((i * 4) + 0);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 4] = (ushort)((i * 4) + 3);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 4] = (ushort)((i * 4) + 3);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 4] = (ushort)((i * 4) + 3);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 4] = (ushort)((i * 4) + 3);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 5] = (ushort)((i * 4) + 2);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 5] = (ushort)((i * 4) + 2);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 5] = (ushort)((i * 4) + 2);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: indices[(i * 6) + 5] = (ushort)((i * 4) + 2);
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,LoadParticleSystem,The following statement contains a magic number: this.mesh = new Mesh(0' vertexBuffer.VertexCount' 0' indexBuffer.IndexCount / 3' vertexBuffer' indexBuffer' PrimitiveType.TriangleList)              {                  DisableBatch = true              };
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: p.Velocity.X = p.Velocity.X + (this.settings.RandomVelocity.X * (((float)this.random.NextDouble() * 2) - 1));
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: p.Velocity.Y = p.Velocity.Y + (this.settings.RandomVelocity.Y * (((float)this.random.NextDouble() * 2) - 1));
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: p.Velocity.Z = p.Velocity.Z + (this.settings.RandomVelocity.Z * (((float)this.random.NextDouble() * 2) - 1));
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem3D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Z = p.Position.Z + (y * radius);                                break;                          }                        case ParticleSystem3D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Z = p.Position.Z + (y * radius * rnd1);                                break;                          }                        case ParticleSystem3D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z - yside;                                      break;                              }                                break;                          }                        case ParticleSystem3D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem3D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Z = p.Position.Z + (y * radius);                                break;                          }                        case ParticleSystem3D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Z = p.Position.Z + (y * radius * rnd1);                                break;                          }                        case ParticleSystem3D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z - yside;                                      break;                              }                                break;                          }                        case ParticleSystem3D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem3D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Z = p.Position.Z + (y * radius);                                break;                          }                        case ParticleSystem3D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Z = p.Position.Z + (y * radius * rnd1);                                break;                          }                        case ParticleSystem3D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z - yside;                                      break;                              }                                break;                          }                        case ParticleSystem3D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem3D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Z = p.Position.Z + (y * radius);                                break;                          }                        case ParticleSystem3D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Z = p.Position.Z + (y * radius * rnd1);                                break;                          }                        case ParticleSystem3D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z - yside;                                      break;                              }                                break;                          }                        case ParticleSystem3D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem3D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Z = p.Position.Z + (y * radius);                                break;                          }                        case ParticleSystem3D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Z = p.Position.Z + (y * radius * rnd1);                                break;                          }                        case ParticleSystem3D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z - yside;                                      break;                              }                                break;                          }                        case ParticleSystem3D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem3D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Z = p.Position.Z + (y * radius);                                break;                          }                        case ParticleSystem3D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Z = p.Position.Z + (y * radius * rnd1);                                break;                          }                        case ParticleSystem3D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z - yside;                                      break;                              }                                break;                          }                        case ParticleSystem3D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem3D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Z = p.Position.Z + (y * radius);                                break;                          }                        case ParticleSystem3D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Z = p.Position.Z + (y * radius * rnd1);                                break;                          }                        case ParticleSystem3D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z - yside;                                      break;                              }                                break;                          }                        case ParticleSystem3D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem3D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Z = p.Position.Z + (y * radius);                                break;                          }                        case ParticleSystem3D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Z = p.Position.Z + (y * radius * rnd1);                                break;                          }                        case ParticleSystem3D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z - yside;                                      break;                              }                                break;                          }                        case ParticleSystem3D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem3D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Z = p.Position.Z + (y * radius);                                break;                          }                        case ParticleSystem3D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Z = p.Position.Z + (y * radius * rnd1);                                break;                          }                        case ParticleSystem3D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z - yside;                                      break;                              }                                break;                          }                        case ParticleSystem3D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem3D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Z = p.Position.Z + (y * radius);                                break;                          }                        case ParticleSystem3D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Z = p.Position.Z + (y * radius * rnd1);                                break;                          }                        case ParticleSystem3D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z - yside;                                      break;                              }                                break;                          }                        case ParticleSystem3D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem3D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Z = p.Position.Z + (y * radius);                                break;                          }                        case ParticleSystem3D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Z = p.Position.Z + (y * radius * rnd1);                                break;                          }                        case ParticleSystem3D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z - yside;                                      break;                              }                                break;                          }                        case ParticleSystem3D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem3D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Z = p.Position.Z + (y * radius);                                break;                          }                        case ParticleSystem3D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Z = p.Position.Z + (y * radius * rnd1);                                break;                          }                        case ParticleSystem3D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z - yside;                                      break;                              }                                break;                          }                        case ParticleSystem3D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem3D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Z = p.Position.Z + (y * radius);                                break;                          }                        case ParticleSystem3D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Z = p.Position.Z + (y * radius * rnd1);                                break;                          }                        case ParticleSystem3D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z - yside;                                      break;                              }                                break;                          }                        case ParticleSystem3D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem3D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Z = p.Position.Z + (y * radius);                                break;                          }                        case ParticleSystem3D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Z = p.Position.Z + (y * radius * rnd1);                                break;                          }                        case ParticleSystem3D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z - yside;                                      break;                              }                                break;                          }                        case ParticleSystem3D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem3D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Z = p.Position.Z + (y * radius);                                break;                          }                        case ParticleSystem3D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Z = p.Position.Z + (y * radius * rnd1);                                break;                          }                        case ParticleSystem3D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z - yside;                                      break;                              }                                break;                          }                        case ParticleSystem3D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: switch (this.settings.EmitterShape)                  {                      case ParticleSystem3D.Shape.Circle:                          {                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius);                              p.Position.Z = p.Position.Z + (y * radius);                                break;                          }                        case ParticleSystem3D.Shape.FillCircle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                              float radius = this.settings.EmitterSize.X > this.settings.EmitterSize.Y ? (this.settings.EmitterSize.X / 2) : (this.settings.EmitterSize.Y / 2);                              double angle = this.random.NextDouble() * MathHelper.TwoPi;                              float x = (float)Math.Cos(angle);                              float y = (float)Math.Sin(angle);                                p.Position.X = p.Position.X + (x * radius * rnd0);                              p.Position.Z = p.Position.Z + (y * radius * rnd1);                                break;                          }                        case ParticleSystem3D.Shape.Rectangle:                          {                              int c = this.random.Next(4);                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float xside = this.settings.EmitterSize.X / 2;                              float yside = this.settings.EmitterSize.Y / 2;                                switch (c)                              {                                  case 0:                                      p.Position.X = p.Position.X + xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 1:                                      p.Position.X = p.Position.X - xside;                                      p.Position.Z = p.Position.Z + (yside * rnd0);                                      break;                                  case 2:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z + yside;                                      break;                                  case 3:                                  default:                                      p.Position.X = p.Position.X + (xside * rnd0);                                      p.Position.Z = p.Position.Z - yside;                                      break;                              }                                break;                          }                        case ParticleSystem3D.Shape.FillRectangle:                          {                              float rnd0 = ((float)this.random.NextDouble() * 2) - 1;                              float rnd1 = ((float)this.random.NextDouble() * 2) - 1;                                p.Position.X = p.Position.X + ((this.settings.EmitterSize.X / 2) * rnd0);                              p.Position.Z = p.Position.Z + ((this.settings.EmitterSize.Y / 2) * rnd1);                              break;                          }                        default:                          {                              throw new ArgumentException("Invalid particleSystem shape");                          }                  }
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,ResetParticle,The following statement contains a magic number: float randomAngle = ((float)this.random.NextDouble() * 2) - 1;
Magic Number,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,CalculateLocalWorld,The following statement contains a magic number: num < 0.0001f
Magic Number,WaveEngine.Components.Graphics3D,SphereMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\SphereMesh.cs,DefaultValues,The following statement contains a magic number: this.tessellation = 16;
Magic Number,WaveEngine.Components.Graphics3D,TeapotMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\TeapotMesh.cs,DefaultValues,The following statement contains a magic number: this.tessellation = 16;
Magic Number,WaveEngine.Components.Graphics3D,TorusMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\TorusMesh.cs,DefaultValues,The following statement contains a magic number: this.thickness = 0.333f;
Magic Number,WaveEngine.Components.Graphics3D,TorusMesh,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\TorusMesh.cs,DefaultValues,The following statement contains a magic number: this.tessellation = 16;
Magic Number,WaveEngine.Framework.Graphics,Skybox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\Skybox.cs,Initialize,The following statement contains a magic number: float sizeOverTwo = 0.5f;
Magic Number,WaveEngine.Framework.Graphics,Skybox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\Skybox.cs,Initialize,The following statement contains a magic number: ushort[] indices = new ushort[36];
Magic Number,WaveEngine.Framework.Graphics,Skybox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\Skybox.cs,Initialize,The following statement contains a magic number: VertexPositionTexture[] vertices = new VertexPositionTexture[24];
Magic Number,WaveEngine.Framework.Graphics,Skybox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\Skybox.cs,Initialize,The following statement contains a magic number: indices[currentIndice++] = (ushort)(currentVertex + 3);
Magic Number,WaveEngine.Framework.Graphics,Skybox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\Skybox.cs,Initialize,The following statement contains a magic number: indices[currentIndice++] = (ushort)(currentVertex + 2);
Magic Number,WaveEngine.Framework.Graphics,Skybox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\Skybox.cs,Initialize,The following statement contains a magic number: indices[currentIndice++] = (ushort)(currentVertex + 3);
Magic Number,WaveEngine.Framework.Graphics,Skybox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\Skybox.cs,Initialize,The following statement contains a magic number: vertices[currentVertex++].TexCoord = texCoord[j + 2];
Magic Number,WaveEngine.Framework.Graphics,Skybox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\Skybox.cs,Initialize,The following statement contains a magic number: vertices[currentVertex++].TexCoord = texCoord[j + 3];
Magic Number,WaveEngine.Framework.Graphics,Skybox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\Skybox.cs,Initialize,The following statement contains a magic number: vertexBuffer.SetData(vertices' 24);
Magic Number,WaveEngine.Framework.Graphics,Skybox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\Skybox.cs,Initialize,The following statement contains a magic number: this.cubeMesh = new Mesh(0' 24' 0' 12' vertexBuffer' indexBuffer' PrimitiveType.TriangleList)              {                  DisableBatch = true              };
Magic Number,WaveEngine.Framework.Graphics,Skybox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\Skybox.cs,Initialize,The following statement contains a magic number: this.cubeMesh = new Mesh(0' 24' 0' 12' vertexBuffer' indexBuffer' PrimitiveType.TriangleList)              {                  DisableBatch = true              };
Magic Number,WaveEngine.Framework.Graphics,Skybox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\Skybox.cs,Draw,The following statement contains a magic number: Matrix scale = Matrix.CreateScale((camera.NearPlane + camera.FarPlane) * 0.5f);
Magic Number,WaveEngine.Components.Particles,ParticleSystem2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Particles\ParticleSystem2D.cs,DefaultValues,The following statement contains a magic number: this.MinSize = 20;
Magic Number,WaveEngine.Components.Particles,ParticleSystem2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Particles\ParticleSystem2D.cs,DefaultValues,The following statement contains a magic number: this.MaxSize = 50;
Magic Number,WaveEngine.Components.Particles,ParticleSystem2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Particles\ParticleSystem2D.cs,DefaultValues,The following statement contains a magic number: this.RandomVelocity = new Vector2(0.5f);
Magic Number,WaveEngine.Components.Particles,ParticleSystem2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Particles\ParticleSystem2D.cs,DefaultValues,The following statement contains a magic number: this.MaxLife = 2;
Magic Number,WaveEngine.Components.Particles,ParticleSystem3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Particles\ParticleSystem3D.cs,DefaultValues,The following statement contains a magic number: this.NumParticles = 100;
Magic Number,WaveEngine.Components.Particles,ParticleSystem3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Particles\ParticleSystem3D.cs,DefaultValues,The following statement contains a magic number: this.MinSize = 0.1f;
Magic Number,WaveEngine.Components.Particles,ParticleSystem3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Particles\ParticleSystem3D.cs,DefaultValues,The following statement contains a magic number: this.MaxSize = 0.5f;
Magic Number,WaveEngine.Components.Particles,ParticleSystem3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Particles\ParticleSystem3D.cs,DefaultValues,The following statement contains a magic number: this.LocalVelocity = new Vector3(0' 0.1f' 0);
Magic Number,WaveEngine.Components.Particles,ParticleSystem3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Particles\ParticleSystem3D.cs,DefaultValues,The following statement contains a magic number: this.RandomVelocity = new Vector3(0.1f);
Magic Number,WaveEngine.Components.Particles,ParticleSystem3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Particles\ParticleSystem3D.cs,DefaultValues,The following statement contains a magic number: this.MinLife = 0.2f;
Magic Number,WaveEngine.Components.Toolkit,Tagalong,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\Tagalong.cs,DefaultValues,The following statement contains a magic number: this.MaxAngle = MathHelper.ToRadians(13);
Magic Number,WaveEngine.Components.Toolkit,Tagalong,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\Tagalong.cs,DefaultValues,The following statement contains a magic number: this.MinDistance = 0.4f;
Magic Number,WaveEngine.Components.Toolkit,Tagalong,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\Tagalong.cs,DefaultValues,The following statement contains a magic number: this.SmoothPositionFactor = 0.1f;
Magic Number,WaveEngine.Components.Toolkit,Tagalong,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\Tagalong.cs,DefaultValues,The following statement contains a magic number: this.SmoothDistanceFactor = 0.5f;
Magic Number,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,DefaultValues,The following statement contains a magic number: this.origin = new Vector2(0.5f);
Magic Number,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,DefaultValues,The following statement contains a magic number: this.width = 300;
Magic Number,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,CalculateAlignmentOffset,The following statement contains a magic number: switch (this.textAlignment)              {                  case TextAlignment.Left:                      break;                  case TextAlignment.Right:                        if (size.X < width)                      {                          offsetX = width - size.X;                      }                        break;                  case TextAlignment.Center:                        if (size.X < width)                      {                          offsetX = (width - size.X) * 0.5f;                      }                        break;              }
Magic Number,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,CreateInfexBuffer,The following statement contains a magic number: indices[j + 1] = (ushort)(v + 2);
Magic Number,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,CreateInfexBuffer,The following statement contains a magic number: indices[j + 2] = (ushort)(v + 1);
Magic Number,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,CreateInfexBuffer,The following statement contains a magic number: indices[j + 3] = (ushort)(v + 1);
Magic Number,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,CreateInfexBuffer,The following statement contains a magic number: indices[j + 4] = (ushort)(v + 2);
Magic Number,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,CreateInfexBuffer,The following statement contains a magic number: indices[j + 4] = (ushort)(v + 2);
Magic Number,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,CreateInfexBuffer,The following statement contains a magic number: indices[j + 5] = (ushort)(v + 3);
Magic Number,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,CreateInfexBuffer,The following statement contains a magic number: indices[j + 5] = (ushort)(v + 3);
Magic Number,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,RefreshMeshes,The following statement contains a magic number: this.vertexBufferData[index + 2].Position = new Vector3(p.Left' p.Bottom' 0);
Magic Number,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,RefreshMeshes,The following statement contains a magic number: this.vertexBufferData[index + 2].Normal = normal;
Magic Number,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,RefreshMeshes,The following statement contains a magic number: this.vertexBufferData[index + 2].TexCoord = new Vector2(s.Left / tW' s.Top / tH);
Magic Number,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,RefreshMeshes,The following statement contains a magic number: this.vertexBufferData[index + 3].Position = new Vector3(p.Right' p.Bottom' 0);
Magic Number,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,RefreshMeshes,The following statement contains a magic number: this.vertexBufferData[index + 3].Normal = normal;
Magic Number,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,RefreshMeshes,The following statement contains a magic number: this.vertexBufferData[index + 3].TexCoord = new Vector2(s.Right / tW' s.Top / tH);
Magic Number,WaveEngine.Components.Toolkit,TextRenderer2D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextRenderer2D.cs,Draw,The following statement contains a magic number: opacity *= 0.5f;
Magic Number,WaveEngine.Components.Toolkit,TextRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextRenderer3D.cs,Draw,The following statement contains a magic number: var scaleTransform = Matrix.CreateScale(new Vector3(0.1f));
Magic Number,WaveEngine.Components.Toolkit,TextRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextRenderer3D.cs,DrawDebugLines,The following statement contains a magic number: var scaleTransform = Matrix.CreateScale(new Vector3(0.1f));
Magic Number,WaveEngine.Components.Toolkit,TextRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextRenderer3D.cs,RefreshBoundingBox,The following statement contains a magic number: Matrix scaleTransform = Matrix.CreateScale(new Vector3(0.1f));
Magic Number,WaveEngine.Components.Transitions,ChequeredAppearTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ChequeredAppearTransition.cs,ChequeredAppearTransition,The following statement contains a magic number: this.segments = 8;
Magic Number,WaveEngine.Components.Transitions,ChequeredAppearTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ChequeredAppearTransition.cs,Draw,The following statement contains a magic number: System.Random random = new System.Random(23);
Magic Number,WaveEngine.Components.Transitions,ChequeredAppearTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ChequeredAppearTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(targetRenderTarget' Vector2.Zero' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f);
Magic Number,WaveEngine.Components.Transitions,ColorFadeTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ColorFadeTransition.cs,Draw,The following statement contains a magic number: float factor = (this.Lerp <= 0.5f) ? 2 * this.Lerp : 1 - (2 * (this.Lerp - 0.5f));
Magic Number,WaveEngine.Components.Transitions,ColorFadeTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ColorFadeTransition.cs,Draw,The following statement contains a magic number: float factor = (this.Lerp <= 0.5f) ? 2 * this.Lerp : 1 - (2 * (this.Lerp - 0.5f));
Magic Number,WaveEngine.Components.Transitions,ColorFadeTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ColorFadeTransition.cs,Draw,The following statement contains a magic number: float factor = (this.Lerp <= 0.5f) ? 2 * this.Lerp : 1 - (2 * (this.Lerp - 0.5f));
Magic Number,WaveEngine.Components.Transitions,ColorFadeTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ColorFadeTransition.cs,Draw,The following statement contains a magic number: float factor = (this.Lerp <= 0.5f) ? 2 * this.Lerp : 1 - (2 * (this.Lerp - 0.5f));
Magic Number,WaveEngine.Components.Transitions,ColorFadeTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ColorFadeTransition.cs,Draw,The following statement contains a magic number: var target = (this.Lerp <= 0.5f) ? sourceRenderTarget : targetRenderTarget;
Magic Number,WaveEngine.Components.Transitions,ColorFadeTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ColorFadeTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(target' new Rectangle(0' 0' target.Width' target.Height)' null' Color.White' 0' Vector2.Zero' SpriteEffects.None' 0.5f);
Magic Number,WaveEngine.Components.Transitions,CombTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CombTransition.cs,CombTransition,The following statement contains a magic number: this.segments = 5;
Magic Number,WaveEngine.Components.Transitions,CombTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CombTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(sourceRenderTarget' destination' rect' Color.White' 0' Vector2.Zero' SpriteEffects.None' 0.5f);
Magic Number,WaveEngine.Components.Transitions,CombTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CombTransition.cs,Draw,The following statement contains a magic number: (i % 2) == 0
Magic Number,WaveEngine.Components.Transitions,CoverTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CoverTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(sourceRenderTarget' Vector2.Zero' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f);
Magic Number,WaveEngine.Components.Transitions,CrossFadeTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CrossFadeTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(sourceRenderTarget' new Rectangle(0' 0' sourceRenderTarget.Width' sourceRenderTarget.Height)' null' Color.White' 0' Vector2.Zero' SpriteEffects.None' 0.5f);
Magic Number,WaveEngine.Components.Transitions,CurtainsTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CurtainsTransition.cs,Draw,The following statement contains a magic number: Vector2 center = new Vector2(sourceRenderTarget.Width / 2' sourceRenderTarget.Height / 2);
Magic Number,WaveEngine.Components.Transitions,CurtainsTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CurtainsTransition.cs,Draw,The following statement contains a magic number: Vector2 center = new Vector2(sourceRenderTarget.Width / 2' sourceRenderTarget.Height / 2);
Magic Number,WaveEngine.Components.Transitions,CurtainsTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CurtainsTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(targetRenderTarget' Vector2.Zero' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f);
Magic Number,WaveEngine.Components.Transitions,CurtainsTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CurtainsTransition.cs,Draw,The following statement contains a magic number: int wMiddle = (int)(sourceRenderTarget.Width / 2f);
Magic Number,WaveEngine.Components.Transitions,DoorwayTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\DoorwayTransition.cs,Draw,The following statement contains a magic number: Vector2 center = new Vector2(sourceRenderTarget.Width / 2' sourceRenderTarget.Height / 2);
Magic Number,WaveEngine.Components.Transitions,DoorwayTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\DoorwayTransition.cs,Draw,The following statement contains a magic number: Vector2 center = new Vector2(sourceRenderTarget.Width / 2' sourceRenderTarget.Height / 2);
Magic Number,WaveEngine.Components.Transitions,DoorwayTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\DoorwayTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(                  targetRenderTarget'                  center'                  null'                  Color.White * this.Lerp'                  0f'                  center'                  new Vector2(this.Lerp)'                  SpriteEffects.None'                  0.5f);
Magic Number,WaveEngine.Components.Transitions,DoorwayTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\DoorwayTransition.cs,Draw,The following statement contains a magic number: int middle = width / 2;
Magic Number,WaveEngine.Components.Transitions,FallingLinesTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\FallingLinesTransition.cs,FallingLinesTransition,The following statement contains a magic number: this.segments = 60;
Magic Number,WaveEngine.Components.Transitions,FallingLinesTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\FallingLinesTransition.cs,Draw,The following statement contains a magic number: var random = new System.Random(23);
Magic Number,WaveEngine.Components.Transitions,FallingLinesTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\FallingLinesTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(targetRenderTarget' Vector2.Zero' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f);
Magic Number,WaveEngine.Components.Transitions,FallingLinesTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\FallingLinesTransition.cs,Draw,The following statement contains a magic number: pos.Y += height * (float)Math.Pow(this.Lerp' random.NextDouble() * 10);
Magic Number,WaveEngine.Components.Transitions,FanTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\FanTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(                  sourceRenderTarget'                  Vector2.Zero'                  null'                  Color.White'                  rotation'                  Vector2.Zero'                  Vector2.One'                  SpriteEffects.None'                  0.5f);
Magic Number,WaveEngine.Components.Transitions,FanTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\FanTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(                  targetRenderTarget'                  Vector2.Zero'                  null'                  Color.White'                  rotation'                  Vector2.Zero'                  Vector2.One'                  SpriteEffects.None'                  0.5f);
Magic Number,WaveEngine.Components.Transitions,PushTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\PushTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(sourceRenderTarget' this.position2' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f);
Magic Number,WaveEngine.Components.Transitions,RotateTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\RotateTransition.cs,Draw,The following statement contains a magic number: var random = new System.Random(23);
Magic Number,WaveEngine.Components.Transitions,RotateTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\RotateTransition.cs,Draw,The following statement contains a magic number: Vector2 center = new Vector2(sourceRenderTarget.Width / 2' sourceRenderTarget.Height / 2);
Magic Number,WaveEngine.Components.Transitions,RotateTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\RotateTransition.cs,Draw,The following statement contains a magic number: Vector2 center = new Vector2(sourceRenderTarget.Width / 2' sourceRenderTarget.Height / 2);
Magic Number,WaveEngine.Components.Transitions,RotateTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\RotateTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(                  targetRenderTarget'                  center'                  null'                  Color.White * this.Lerp'                  rotation'                  center'                  new Vector2(scale)'                  SpriteEffects.None'                  0.5f);
Magic Number,WaveEngine.Components.Transitions,ScaleTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ScaleTransition.cs,Draw,The following statement contains a magic number: Vector2 center = new Vector2(sourceRenderTarget.Width / 2' sourceRenderTarget.Height / 2);
Magic Number,WaveEngine.Components.Transitions,ScaleTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ScaleTransition.cs,Draw,The following statement contains a magic number: Vector2 center = new Vector2(sourceRenderTarget.Width / 2' sourceRenderTarget.Height / 2);
Magic Number,WaveEngine.Components.Transitions,ScaleTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ScaleTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(sourceRenderTarget' Vector2.Zero' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f);
Magic Number,WaveEngine.Components.Transitions,ShrinkAndSpinTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ShrinkAndSpinTransition.cs,Draw,The following statement contains a magic number: var random = new System.Random(23);
Magic Number,WaveEngine.Components.Transitions,ShrinkAndSpinTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ShrinkAndSpinTransition.cs,Draw,The following statement contains a magic number: Vector2 center = new Vector2(sourceRenderTarget.Width / 2' sourceRenderTarget.Height / 2);
Magic Number,WaveEngine.Components.Transitions,ShrinkAndSpinTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ShrinkAndSpinTransition.cs,Draw,The following statement contains a magic number: Vector2 center = new Vector2(sourceRenderTarget.Width / 2' sourceRenderTarget.Height / 2);
Magic Number,WaveEngine.Components.Transitions,ShrinkAndSpinTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ShrinkAndSpinTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(targetRenderTarget' Vector2.Zero' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f);
Magic Number,WaveEngine.Components.Transitions,ShrinkAndSpinTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ShrinkAndSpinTransition.cs,Draw,The following statement contains a magic number: Vector2 translate = (new Vector2(32' sourceRenderTarget.Height - 32) - center) * this.Lerp;
Magic Number,WaveEngine.Components.Transitions,ShrinkAndSpinTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ShrinkAndSpinTransition.cs,Draw,The following statement contains a magic number: Vector2 translate = (new Vector2(32' sourceRenderTarget.Height - 32) - center) * this.Lerp;
Magic Number,WaveEngine.Components.Transitions,ShrinkAndSpinTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ShrinkAndSpinTransition.cs,Draw,The following statement contains a magic number: float rotation = this.Lerp * -2;
Magic Number,WaveEngine.Components.Transitions,SpinningSquaresTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\SpinningSquaresTransition.cs,SpinningSquaresTransition,The following statement contains a magic number: this.segments = 8;
Magic Number,WaveEngine.Components.Transitions,SpinningSquaresTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\SpinningSquaresTransition.cs,Draw,The following statement contains a magic number: Vector2 center = new Vector2(sourceRenderTarget.Width / 2' sourceRenderTarget.Height / 2);
Magic Number,WaveEngine.Components.Transitions,SpinningSquaresTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\SpinningSquaresTransition.cs,Draw,The following statement contains a magic number: Vector2 center = new Vector2(sourceRenderTarget.Width / 2' sourceRenderTarget.Height / 2);
Magic Number,WaveEngine.Components.Transitions,SpinningSquaresTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\SpinningSquaresTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(targetRenderTarget' Vector2.Zero' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f);
Magic Number,WaveEngine.Components.Transitions,SpinningSquaresTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\SpinningSquaresTransition.cs,Draw,The following statement contains a magic number: System.Random random = new System.Random(23);
Magic Number,WaveEngine.Components.Transitions,SpinningSquaresTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\SpinningSquaresTransition.cs,Draw,The following statement contains a magic number: Vector2 origin = new Vector2(rect.Width' rect.Height) / 2;
Magic Number,WaveEngine.Components.Transitions,SpinningSquaresTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\SpinningSquaresTransition.cs,Draw,The following statement contains a magic number: float rotation = (float)(random.NextDouble() - 0.5) * this.Lerp * 2;
Magic Number,WaveEngine.Components.Transitions,SpinningSquaresTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\SpinningSquaresTransition.cs,Draw,The following statement contains a magic number: float rotation = (float)(random.NextDouble() - 0.5) * this.Lerp * 2;
Magic Number,WaveEngine.Components.Transitions,SpinningSquaresTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\SpinningSquaresTransition.cs,Draw,The following statement contains a magic number: Vector2 scale = new Vector2(1 + (float)((random.NextDouble() - 0.5f) * this.Lerp));
Magic Number,WaveEngine.Components.Transitions,SpinningSquaresTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\SpinningSquaresTransition.cs,Draw,The following statement contains a magic number: pos.X += (float)(random.NextDouble() - 0.5) * this.Lerp * (targetRenderTarget.Width / 2);
Magic Number,WaveEngine.Components.Transitions,SpinningSquaresTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\SpinningSquaresTransition.cs,Draw,The following statement contains a magic number: pos.X += (float)(random.NextDouble() - 0.5) * this.Lerp * (targetRenderTarget.Width / 2);
Magic Number,WaveEngine.Components.Transitions,SpinningSquaresTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\SpinningSquaresTransition.cs,Draw,The following statement contains a magic number: pos.Y += (float)(random.NextDouble() - 0.5) * this.Lerp * (targetRenderTarget.Height / 2);
Magic Number,WaveEngine.Components.Transitions,SpinningSquaresTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\SpinningSquaresTransition.cs,Draw,The following statement contains a magic number: pos.Y += (float)(random.NextDouble() - 0.5) * this.Lerp * (targetRenderTarget.Height / 2);
Magic Number,WaveEngine.Components.Transitions,UncoverTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\UncoverTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(targetRenderTarget' Vector2.Zero' null' Color.White' 0f' Vector2.Zero' Vector2.One' SpriteEffects.None' 0.5f);
Magic Number,WaveEngine.Components.Transitions,ZoomTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ZoomTransition.cs,Draw,The following statement contains a magic number: Vector2 center = new Vector2(sourceRenderTarget.Width / 2' sourceRenderTarget.Height / 2);
Magic Number,WaveEngine.Components.Transitions,ZoomTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ZoomTransition.cs,Draw,The following statement contains a magic number: Vector2 center = new Vector2(sourceRenderTarget.Width / 2' sourceRenderTarget.Height / 2);
Magic Number,WaveEngine.Components.Transitions,ZoomTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\ZoomTransition.cs,Draw,The following statement contains a magic number: this.spriteBatch.Draw(                  sourceRenderTarget'                  center'                  null'                  Color.White * (1 - this.Lerp)'                  0f'                  center'                  new Vector2(this.Lerp + 1)'                  SpriteEffects.None'                  0.5f);
Magic Number,WaveEngine.Components.UI,Button,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Button\Button.cs,Button,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new ButtonBehavior())                             .AddComponent(new PanelControl(DefaultWidth' DefaultHeight))                             .AddComponent(new PanelControlRenderer())                             .AddComponent(new BorderRenderer())                             .AddChild(new Entity("TextEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.4f                                  })                                  .AddComponent(new AnimationUI())                                  .AddComponent(new TextControl()                                  {                                      Text = "Button"'                                      Margin = this.defaultMargin'                                      HorizontalAlignment = HorizontalAlignment.Center'                                      VerticalAlignment = VerticalAlignment.Center                                  })                                  .AddComponent(new TextControlRenderer()));
Magic Number,WaveEngine.Components.UI,ButtonBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Button\ButtonBehavior.cs,DefaultValues,The following statement contains a magic number: this.fadeIn = new SingleAnimation(0.2f' 1' new Duration(TimeSpan.FromSeconds(.4f)));
Magic Number,WaveEngine.Components.UI,ButtonBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Button\ButtonBehavior.cs,DefaultValues,The following statement contains a magic number: this.fadeIn = new SingleAnimation(0.2f' 1' new Duration(TimeSpan.FromSeconds(.4f)));
Magic Number,WaveEngine.Components.UI,ButtonBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Button\ButtonBehavior.cs,DefaultValues,The following statement contains a magic number: this.fadeOut = new SingleAnimation(1' 0.2f' new Duration(TimeSpan.FromSeconds(.4f)));
Magic Number,WaveEngine.Components.UI,ButtonBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Button\ButtonBehavior.cs,DefaultValues,The following statement contains a magic number: this.fadeOut = new SingleAnimation(1' 0.2f' new Duration(TimeSpan.FromSeconds(.4f)));
Magic Number,WaveEngine.Components.UI,CheckBox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\CheckBox\CheckBox.cs,CheckBox,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new CheckBoxBehavior())                             .AddComponent(new GridControl(150' 42))                             .AddComponent(new GridRenderer());
Magic Number,WaveEngine.Components.UI,CheckBox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\CheckBox\CheckBox.cs,CheckBox,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new CheckBoxBehavior())                             .AddComponent(new GridControl(150' 42))                             .AddComponent(new GridRenderer());
Magic Number,WaveEngine.Components.UI,CheckBox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\CheckBox\CheckBox.cs,CheckBox,The following statement contains a magic number: Entity imageUnCheckedEntity = new Entity("ImageUncheckedEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.5f                                      })                                      .AddComponent(new ImageControl(Color.White' DefaultUncheckedImage' DefaultUncheckedImage)                                      {                                          Margin = DefaultMargin'                                          HorizontalAlignment = HorizontalAlignment.Center                                      })                                      .AddComponent(new ImageControlRenderer());
Magic Number,WaveEngine.Components.UI,CheckBox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\CheckBox\CheckBox.cs,CheckBox,The following statement contains a magic number: Entity imageCheckedEntity = new Entity("ImageCheckedEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.45f'                                          Opacity = 0                                      })                                      .AddComponent(new AnimationUI())                                      .AddComponent(new ImageControl(Color.Black' DefaultCheckedImage' DefaultCheckedImage)                                      {                                          Margin = DefaultCheckedImageMargin'                                          HorizontalAlignment = HorizontalAlignment.Center                                      })                                      .AddComponent(new ImageControlRenderer());
Magic Number,WaveEngine.Components.UI,CheckBox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\CheckBox\CheckBox.cs,CheckBox,The following statement contains a magic number: Entity textEntity = new Entity("TextEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.4f                                      })                                      .AddComponent(new TextControl()                                      {                                          Text = "CheckBox"'                                          Margin = DefaultMargin                                      })                                      .AddComponent(new TextControlRenderer());
Magic Number,WaveEngine.Components.UI,CheckBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\CheckBox\CheckBoxBehavior.cs,CheckBoxBehavior,The following statement contains a magic number: Duration duration = new Duration(TimeSpan.FromSeconds(.4f));
Magic Number,WaveEngine.Components.UI,Grid,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Grid\Grid.cs,Grid,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D()                             {                                 DrawOrder = 0.6f'                             })                             .AddComponent(new GridControl())                             .AddComponent(new GridRenderer());
Magic Number,WaveEngine.Components.UI,GridRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Grid\GridRenderer.cs,DrawDebugLines,The following statement contains a magic number: this.RenderManager.LineBatch2D.DrawPoint(this.Transform2D.Rectangle.Location + this.Transform2D.Origin' 10f' Color.Red' this.Transform2D.DrawOrder);
Magic Number,WaveEngine.Components.UI,ImageAtlasRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\ImageAtlasRenderer.cs,DrawDebugLines,The following statement contains a magic number: this.RenderManager.LineBatch2D.DrawPoint(this.Transform2D.Rectangle.Location + this.Transform2D.Origin' 10f' Color.Red' this.Transform2D.DrawOrder);
Magic Number,WaveEngine.Components.UI,ImageControl,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Image\ImageControl.cs,Arrange,The following statement contains a magic number: switch (this.HorizontalAlignment)              {                  case HorizontalAlignment.Left:                      currentRect.X = finalSize.X + this.Margin.Left;                      break;                  case HorizontalAlignment.Center:                      currentRect.X = finalSize.X + (finalSize.Width / 2) - (rect.Width / 2) - this.Margin.Right + this.Margin.Left;                      break;                  case HorizontalAlignment.Right:                      currentRect.X = finalSize.X + finalSize.Width - this.Margin.Right - rect.Width;                      break;                  case HorizontalAlignment.Stretch:                      break;              }
Magic Number,WaveEngine.Components.UI,ImageControl,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Image\ImageControl.cs,Arrange,The following statement contains a magic number: switch (this.HorizontalAlignment)              {                  case HorizontalAlignment.Left:                      currentRect.X = finalSize.X + this.Margin.Left;                      break;                  case HorizontalAlignment.Center:                      currentRect.X = finalSize.X + (finalSize.Width / 2) - (rect.Width / 2) - this.Margin.Right + this.Margin.Left;                      break;                  case HorizontalAlignment.Right:                      currentRect.X = finalSize.X + finalSize.Width - this.Margin.Right - rect.Width;                      break;                  case HorizontalAlignment.Stretch:                      break;              }
Magic Number,WaveEngine.Components.UI,ImageControl,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Image\ImageControl.cs,Arrange,The following statement contains a magic number: switch (this.VerticalAlignment)              {                  case VerticalAlignment.Top:                      currentRect.Y = finalSize.Y + this.Margin.Top;                      break;                  case VerticalAlignment.Center:                      currentRect.Y = finalSize.Y + (finalSize.Height / 2) - (rect.Height / 2) - this.Margin.Bottom + this.Margin.Top;                      break;                  case VerticalAlignment.Bottom:                      currentRect.Y = finalSize.Y + finalSize.Height - this.Margin.Bottom - rect.Height;                      break;                  case VerticalAlignment.Stretch:                      break;              }
Magic Number,WaveEngine.Components.UI,ImageControl,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Image\ImageControl.cs,Arrange,The following statement contains a magic number: switch (this.VerticalAlignment)              {                  case VerticalAlignment.Top:                      currentRect.Y = finalSize.Y + this.Margin.Top;                      break;                  case VerticalAlignment.Center:                      currentRect.Y = finalSize.Y + (finalSize.Height / 2) - (rect.Height / 2) - this.Margin.Bottom + this.Margin.Top;                      break;                  case VerticalAlignment.Bottom:                      currentRect.Y = finalSize.Y + finalSize.Height - this.Margin.Bottom - rect.Height;                      break;                  case VerticalAlignment.Stretch:                      break;              }
Magic Number,WaveEngine.Components.UI,ImageControlRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Image\ImageControlRenderer.cs,DrawDebugLines,The following statement contains a magic number: this.RenderManager.LineBatch2D.DrawPoint(this.Transform2D.Rectangle.Location + this.Transform2D.Origin' 10f' Color.Red' this.Transform2D.DrawOrder);
Magic Number,WaveEngine.Components.UI,PanelControlRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Panel\PanelControlRenderer.cs,DrawDebugLines,The following statement contains a magic number: this.RenderManager.LineBatch2D.DrawPoint(this.Transform2D.Rectangle.Location + this.Transform2D.Origin' 10f' Color.Red' this.Transform2D.DrawOrder);
Magic Number,WaveEngine.Components.UI,ProgressBar,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\ProgressBar\ProgressBar.cs,ProgressBar,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new PanelControl(100' 20))                             .AddComponent(new PanelControlRenderer())                             .AddComponent(new ProgressBarBehavior())                             .AddChild(new Entity("BackgroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.5f                                  })                                  .AddComponent(new ImageControl(Color.Blue' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("ForegroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.45f                                  })                                  .AddComponent(new AnimationUI())                                  .AddComponent(new ImageControl(Color.LightBlue' 1' 1))                                  .AddComponent(new ImageControlRenderer()));
Magic Number,WaveEngine.Components.UI,ProgressBar,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\ProgressBar\ProgressBar.cs,ProgressBar,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new PanelControl(100' 20))                             .AddComponent(new PanelControlRenderer())                             .AddComponent(new ProgressBarBehavior())                             .AddChild(new Entity("BackgroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.5f                                  })                                  .AddComponent(new ImageControl(Color.Blue' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("ForegroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.45f                                  })                                  .AddComponent(new AnimationUI())                                  .AddComponent(new ImageControl(Color.LightBlue' 1' 1))                                  .AddComponent(new ImageControlRenderer()));
Magic Number,WaveEngine.Components.UI,ProgressBar,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\ProgressBar\ProgressBar.cs,ProgressBar,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new PanelControl(100' 20))                             .AddComponent(new PanelControlRenderer())                             .AddComponent(new ProgressBarBehavior())                             .AddChild(new Entity("BackgroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.5f                                  })                                  .AddComponent(new ImageControl(Color.Blue' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("ForegroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.45f                                  })                                  .AddComponent(new AnimationUI())                                  .AddComponent(new ImageControl(Color.LightBlue' 1' 1))                                  .AddComponent(new ImageControlRenderer()));
Magic Number,WaveEngine.Components.UI,ProgressBar,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\ProgressBar\ProgressBar.cs,ProgressBar,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new PanelControl(100' 20))                             .AddComponent(new PanelControlRenderer())                             .AddComponent(new ProgressBarBehavior())                             .AddChild(new Entity("BackgroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.5f                                  })                                  .AddComponent(new ImageControl(Color.Blue' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("ForegroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.45f                                  })                                  .AddComponent(new AnimationUI())                                  .AddComponent(new ImageControl(Color.LightBlue' 1' 1))                                  .AddComponent(new ImageControlRenderer()));
Magic Number,WaveEngine.Components.UI,ProgressBarBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\ProgressBar\ProgressBarBehavior.cs,ProgressBarBehavior,The following statement contains a magic number: this.maximum = 100;
Magic Number,WaveEngine.Components.UI,ProgressBarBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\ProgressBar\ProgressBarBehavior.cs,ProgressBarBehavior,The following statement contains a magic number: this.duration = new Duration(TimeSpan.FromSeconds(.4f));
Magic Number,WaveEngine.Components.UI,RadioButton,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\RadioButton\RadioButton.cs,RadioButton,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new RadioButtonBehavior())                             .AddComponent(new GridControl(170' 42))                             .AddComponent(new GridRenderer());
Magic Number,WaveEngine.Components.UI,RadioButton,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\RadioButton\RadioButton.cs,RadioButton,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new RadioButtonBehavior())                             .AddComponent(new GridControl(170' 42))                             .AddComponent(new GridRenderer());
Magic Number,WaveEngine.Components.UI,RadioButton,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\RadioButton\RadioButton.cs,RadioButton,The following statement contains a magic number: Entity imageUnCheckedEntity = new Entity("ImageUncheckedEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.5f                                      })                                      .AddComponent(new ImageControl(Color.White' DefaultUncheckedImage' DefaultUncheckedImage)                                      {                                          Margin = DefaultMargin'                                          HorizontalAlignment = HorizontalAlignment.Center                                      })                                      .AddComponent(new ImageControlRenderer());
Magic Number,WaveEngine.Components.UI,RadioButton,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\RadioButton\RadioButton.cs,RadioButton,The following statement contains a magic number: Entity imageCheckedEntity = new Entity("ImageCheckedEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.45f'                                          Opacity = 0                                      })                                      .AddComponent(new AnimationUI())                                      .AddComponent(new ImageControl(Color.Black' DefaultCheckedImage' DefaultCheckedImage)                                      {                                          Margin = DefaultCheckedImageMargin'                                          HorizontalAlignment = HorizontalAlignment.Center                                      })                                      .AddComponent(new ImageControlRenderer());
Magic Number,WaveEngine.Components.UI,RadioButton,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\RadioButton\RadioButton.cs,RadioButton,The following statement contains a magic number: Entity textEntity = new Entity("TextEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.4f                                      })                                      .AddComponent(new TextControl()                                      {                                          Text = "RadioButton"'                                          Margin = DefaultMargin                                      })                                      .AddComponent(new TextControlRenderer());
Magic Number,WaveEngine.Components.UI,RadioButtonBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\RadioButton\RadioButtonBehavior.cs,RadioButtonBehavior,The following statement contains a magic number: Duration duration = new Duration(TimeSpan.FromSeconds(.4f));
Magic Number,WaveEngine.Components.UI,Slider,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\Slider.cs,Slider,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new PanelControl(100' 20))                             .AddComponent(new PanelControlRenderer())                             .AddComponent(new SliderBehavior())                             .AddChild(new Entity("BackgroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.5f                                  })                                  .AddComponent(new ImageControl(Color.Blue' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("ForegroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.45f                                  })                                  .AddComponent(new ImageControl(Color.LightBlue' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("BulletEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.4f                                  })                                  .AddComponent(new ImageControl(Color.White' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("TextEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.4f'                                      Opacity = 0                                  })                                  .AddComponent(new AnimationUI())                                  .AddComponent(new TextControl())                                  .AddComponent(new TextControlRenderer()));
Magic Number,WaveEngine.Components.UI,Slider,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\Slider.cs,Slider,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new PanelControl(100' 20))                             .AddComponent(new PanelControlRenderer())                             .AddComponent(new SliderBehavior())                             .AddChild(new Entity("BackgroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.5f                                  })                                  .AddComponent(new ImageControl(Color.Blue' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("ForegroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.45f                                  })                                  .AddComponent(new ImageControl(Color.LightBlue' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("BulletEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.4f                                  })                                  .AddComponent(new ImageControl(Color.White' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("TextEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.4f'                                      Opacity = 0                                  })                                  .AddComponent(new AnimationUI())                                  .AddComponent(new TextControl())                                  .AddComponent(new TextControlRenderer()));
Magic Number,WaveEngine.Components.UI,Slider,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\Slider.cs,Slider,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new PanelControl(100' 20))                             .AddComponent(new PanelControlRenderer())                             .AddComponent(new SliderBehavior())                             .AddChild(new Entity("BackgroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.5f                                  })                                  .AddComponent(new ImageControl(Color.Blue' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("ForegroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.45f                                  })                                  .AddComponent(new ImageControl(Color.LightBlue' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("BulletEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.4f                                  })                                  .AddComponent(new ImageControl(Color.White' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("TextEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.4f'                                      Opacity = 0                                  })                                  .AddComponent(new AnimationUI())                                  .AddComponent(new TextControl())                                  .AddComponent(new TextControlRenderer()));
Magic Number,WaveEngine.Components.UI,Slider,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\Slider.cs,Slider,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new PanelControl(100' 20))                             .AddComponent(new PanelControlRenderer())                             .AddComponent(new SliderBehavior())                             .AddChild(new Entity("BackgroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.5f                                  })                                  .AddComponent(new ImageControl(Color.Blue' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("ForegroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.45f                                  })                                  .AddComponent(new ImageControl(Color.LightBlue' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("BulletEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.4f                                  })                                  .AddComponent(new ImageControl(Color.White' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("TextEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.4f'                                      Opacity = 0                                  })                                  .AddComponent(new AnimationUI())                                  .AddComponent(new TextControl())                                  .AddComponent(new TextControlRenderer()));
Magic Number,WaveEngine.Components.UI,Slider,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\Slider.cs,Slider,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new PanelControl(100' 20))                             .AddComponent(new PanelControlRenderer())                             .AddComponent(new SliderBehavior())                             .AddChild(new Entity("BackgroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.5f                                  })                                  .AddComponent(new ImageControl(Color.Blue' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("ForegroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.45f                                  })                                  .AddComponent(new ImageControl(Color.LightBlue' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("BulletEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.4f                                  })                                  .AddComponent(new ImageControl(Color.White' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("TextEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.4f'                                      Opacity = 0                                  })                                  .AddComponent(new AnimationUI())                                  .AddComponent(new TextControl())                                  .AddComponent(new TextControlRenderer()));
Magic Number,WaveEngine.Components.UI,Slider,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\Slider.cs,Slider,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new PanelControl(100' 20))                             .AddComponent(new PanelControlRenderer())                             .AddComponent(new SliderBehavior())                             .AddChild(new Entity("BackgroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.5f                                  })                                  .AddComponent(new ImageControl(Color.Blue' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("ForegroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.45f                                  })                                  .AddComponent(new ImageControl(Color.LightBlue' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("BulletEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.4f                                  })                                  .AddComponent(new ImageControl(Color.White' 1' 1))                                  .AddComponent(new ImageControlRenderer()))                              .AddChild(new Entity("TextEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.4f'                                      Opacity = 0                                  })                                  .AddComponent(new AnimationUI())                                  .AddComponent(new TextControl())                                  .AddComponent(new TextControlRenderer()));
Magic Number,WaveEngine.Components.UI,SliderBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\SliderBehavior.cs,SliderBehavior,The following statement contains a magic number: this.maximum = 100;
Magic Number,WaveEngine.Components.UI,SliderBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\SliderBehavior.cs,SliderBehavior,The following statement contains a magic number: Duration duration = new Duration(TimeSpan.FromSeconds(.4f));
Magic Number,WaveEngine.Components.UI,SliderBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\SliderBehavior.cs,UpdateOrientation,The following statement contains a magic number: switch (this.orientation)              {                  case Orientation.Vertical:                        if (this.backgroundImage != null && this.foregroundImage != null && this.foregroundTransform != null                          && this.bulletImage != null && this.bulletTransform != null && this.textControl != null &&                          this.textTransform != null && this.Panel != null)                      {                          this.maximunOffset = this.Panel.Height - this.bulletImage.Height;                          this.bulletWeightOver2 = this.bulletImage.Height / 2;                          this.maximunOffsetOver2 = this.Panel.Height - this.bulletImage.Height - this.bulletWeightOver2;                            this.backgroundImage.Width = DefaultSliderWeight;                          this.backgroundImage.Height = this.Panel.Height;                            this.foregroundImage.Width = DefaultSliderWeight;                          this.foregroundImage.Height = 1;                          this.foregroundImage.Margin = new Thickness(0' this.Panel.Height' 0' 0);                            this.foregroundTransform.Origin = Vector2.UnitX / 2;                          this.foregroundTransform.Rotation = MathHelper.Pi;                          this.foregroundTransform.XScale = 1;                            this.bulletImage.Margin = new Thickness(0' this.Panel.Height - this.bulletImage.Height' 0' 0);                            this.bulletTransform.X = 0;                            this.bulletTransform.Y = 0;                            this.textControl.Margin = new Thickness(-DefaultTextOffset' this.Panel.Height - (this.bulletImage.Height * 1.5f)' 0' 0);                            this.textTransform.X = 0;                      }                        break;                  case Orientation.Horizontal:                        if (this.backgroundImage != null && this.foregroundImage != null && this.foregroundTransform != null                          && this.bulletImage != null && this.bulletTransform != null && this.textControl != null &&                          this.textTransform != null && this.Panel != null)                      {                          this.maximunOffset = this.Panel.Width - this.bulletImage.Width;                          this.bulletWeightOver2 = this.bulletImage.Width / 2;                          this.maximunOffsetOver2 = this.Panel.Width - this.bulletWeightOver2;                            this.backgroundImage.Width = this.Panel.Width;                          this.backgroundImage.Height = DefaultSliderWeight;                            this.foregroundImage.Height = DefaultSliderWeight;                          this.foregroundImage.Width = 1;                          this.foregroundImage.Margin = Thickness.Zero;                            this.foregroundTransform.Origin = Vector2.Zero;                          this.foregroundTransform.Rotation = 0;                          this.foregroundTransform.YScale = 1;                            this.bulletImage.Margin = Thickness.Zero;                            this.bulletTransform.X = 0;                            this.bulletTransform.Y = 0;                            this.textControl.Margin = new Thickness(0' -DefaultTextOffset' 0' 0);                            this.textTransform.Y = 0;                      }                        break;              }
Magic Number,WaveEngine.Components.UI,SliderBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\SliderBehavior.cs,UpdateOrientation,The following statement contains a magic number: switch (this.orientation)              {                  case Orientation.Vertical:                        if (this.backgroundImage != null && this.foregroundImage != null && this.foregroundTransform != null                          && this.bulletImage != null && this.bulletTransform != null && this.textControl != null &&                          this.textTransform != null && this.Panel != null)                      {                          this.maximunOffset = this.Panel.Height - this.bulletImage.Height;                          this.bulletWeightOver2 = this.bulletImage.Height / 2;                          this.maximunOffsetOver2 = this.Panel.Height - this.bulletImage.Height - this.bulletWeightOver2;                            this.backgroundImage.Width = DefaultSliderWeight;                          this.backgroundImage.Height = this.Panel.Height;                            this.foregroundImage.Width = DefaultSliderWeight;                          this.foregroundImage.Height = 1;                          this.foregroundImage.Margin = new Thickness(0' this.Panel.Height' 0' 0);                            this.foregroundTransform.Origin = Vector2.UnitX / 2;                          this.foregroundTransform.Rotation = MathHelper.Pi;                          this.foregroundTransform.XScale = 1;                            this.bulletImage.Margin = new Thickness(0' this.Panel.Height - this.bulletImage.Height' 0' 0);                            this.bulletTransform.X = 0;                            this.bulletTransform.Y = 0;                            this.textControl.Margin = new Thickness(-DefaultTextOffset' this.Panel.Height - (this.bulletImage.Height * 1.5f)' 0' 0);                            this.textTransform.X = 0;                      }                        break;                  case Orientation.Horizontal:                        if (this.backgroundImage != null && this.foregroundImage != null && this.foregroundTransform != null                          && this.bulletImage != null && this.bulletTransform != null && this.textControl != null &&                          this.textTransform != null && this.Panel != null)                      {                          this.maximunOffset = this.Panel.Width - this.bulletImage.Width;                          this.bulletWeightOver2 = this.bulletImage.Width / 2;                          this.maximunOffsetOver2 = this.Panel.Width - this.bulletWeightOver2;                            this.backgroundImage.Width = this.Panel.Width;                          this.backgroundImage.Height = DefaultSliderWeight;                            this.foregroundImage.Height = DefaultSliderWeight;                          this.foregroundImage.Width = 1;                          this.foregroundImage.Margin = Thickness.Zero;                            this.foregroundTransform.Origin = Vector2.Zero;                          this.foregroundTransform.Rotation = 0;                          this.foregroundTransform.YScale = 1;                            this.bulletImage.Margin = Thickness.Zero;                            this.bulletTransform.X = 0;                            this.bulletTransform.Y = 0;                            this.textControl.Margin = new Thickness(0' -DefaultTextOffset' 0' 0);                            this.textTransform.Y = 0;                      }                        break;              }
Magic Number,WaveEngine.Components.UI,SliderBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\SliderBehavior.cs,UpdateOrientation,The following statement contains a magic number: switch (this.orientation)              {                  case Orientation.Vertical:                        if (this.backgroundImage != null && this.foregroundImage != null && this.foregroundTransform != null                          && this.bulletImage != null && this.bulletTransform != null && this.textControl != null &&                          this.textTransform != null && this.Panel != null)                      {                          this.maximunOffset = this.Panel.Height - this.bulletImage.Height;                          this.bulletWeightOver2 = this.bulletImage.Height / 2;                          this.maximunOffsetOver2 = this.Panel.Height - this.bulletImage.Height - this.bulletWeightOver2;                            this.backgroundImage.Width = DefaultSliderWeight;                          this.backgroundImage.Height = this.Panel.Height;                            this.foregroundImage.Width = DefaultSliderWeight;                          this.foregroundImage.Height = 1;                          this.foregroundImage.Margin = new Thickness(0' this.Panel.Height' 0' 0);                            this.foregroundTransform.Origin = Vector2.UnitX / 2;                          this.foregroundTransform.Rotation = MathHelper.Pi;                          this.foregroundTransform.XScale = 1;                            this.bulletImage.Margin = new Thickness(0' this.Panel.Height - this.bulletImage.Height' 0' 0);                            this.bulletTransform.X = 0;                            this.bulletTransform.Y = 0;                            this.textControl.Margin = new Thickness(-DefaultTextOffset' this.Panel.Height - (this.bulletImage.Height * 1.5f)' 0' 0);                            this.textTransform.X = 0;                      }                        break;                  case Orientation.Horizontal:                        if (this.backgroundImage != null && this.foregroundImage != null && this.foregroundTransform != null                          && this.bulletImage != null && this.bulletTransform != null && this.textControl != null &&                          this.textTransform != null && this.Panel != null)                      {                          this.maximunOffset = this.Panel.Width - this.bulletImage.Width;                          this.bulletWeightOver2 = this.bulletImage.Width / 2;                          this.maximunOffsetOver2 = this.Panel.Width - this.bulletWeightOver2;                            this.backgroundImage.Width = this.Panel.Width;                          this.backgroundImage.Height = DefaultSliderWeight;                            this.foregroundImage.Height = DefaultSliderWeight;                          this.foregroundImage.Width = 1;                          this.foregroundImage.Margin = Thickness.Zero;                            this.foregroundTransform.Origin = Vector2.Zero;                          this.foregroundTransform.Rotation = 0;                          this.foregroundTransform.YScale = 1;                            this.bulletImage.Margin = Thickness.Zero;                            this.bulletTransform.X = 0;                            this.bulletTransform.Y = 0;                            this.textControl.Margin = new Thickness(0' -DefaultTextOffset' 0' 0);                            this.textTransform.Y = 0;                      }                        break;              }
Magic Number,WaveEngine.Components.UI,SliderBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\SliderBehavior.cs,UpdateOrientation,The following statement contains a magic number: switch (this.orientation)              {                  case Orientation.Vertical:                        if (this.backgroundImage != null && this.foregroundImage != null && this.foregroundTransform != null                          && this.bulletImage != null && this.bulletTransform != null && this.textControl != null &&                          this.textTransform != null && this.Panel != null)                      {                          this.maximunOffset = this.Panel.Height - this.bulletImage.Height;                          this.bulletWeightOver2 = this.bulletImage.Height / 2;                          this.maximunOffsetOver2 = this.Panel.Height - this.bulletImage.Height - this.bulletWeightOver2;                            this.backgroundImage.Width = DefaultSliderWeight;                          this.backgroundImage.Height = this.Panel.Height;                            this.foregroundImage.Width = DefaultSliderWeight;                          this.foregroundImage.Height = 1;                          this.foregroundImage.Margin = new Thickness(0' this.Panel.Height' 0' 0);                            this.foregroundTransform.Origin = Vector2.UnitX / 2;                          this.foregroundTransform.Rotation = MathHelper.Pi;                          this.foregroundTransform.XScale = 1;                            this.bulletImage.Margin = new Thickness(0' this.Panel.Height - this.bulletImage.Height' 0' 0);                            this.bulletTransform.X = 0;                            this.bulletTransform.Y = 0;                            this.textControl.Margin = new Thickness(-DefaultTextOffset' this.Panel.Height - (this.bulletImage.Height * 1.5f)' 0' 0);                            this.textTransform.X = 0;                      }                        break;                  case Orientation.Horizontal:                        if (this.backgroundImage != null && this.foregroundImage != null && this.foregroundTransform != null                          && this.bulletImage != null && this.bulletTransform != null && this.textControl != null &&                          this.textTransform != null && this.Panel != null)                      {                          this.maximunOffset = this.Panel.Width - this.bulletImage.Width;                          this.bulletWeightOver2 = this.bulletImage.Width / 2;                          this.maximunOffsetOver2 = this.Panel.Width - this.bulletWeightOver2;                            this.backgroundImage.Width = this.Panel.Width;                          this.backgroundImage.Height = DefaultSliderWeight;                            this.foregroundImage.Height = DefaultSliderWeight;                          this.foregroundImage.Width = 1;                          this.foregroundImage.Margin = Thickness.Zero;                            this.foregroundTransform.Origin = Vector2.Zero;                          this.foregroundTransform.Rotation = 0;                          this.foregroundTransform.YScale = 1;                            this.bulletImage.Margin = Thickness.Zero;                            this.bulletTransform.X = 0;                            this.bulletTransform.Y = 0;                            this.textControl.Margin = new Thickness(0' -DefaultTextOffset' 0' 0);                            this.textTransform.Y = 0;                      }                        break;              }
Magic Number,WaveEngine.Components.UI,StackPanel,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Stack\StackPanel.cs,StackPanel,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D()                             {                                 DrawOrder = 0.6f'                             })                             .AddComponent(new StackPanelControl())                             .AddComponent(new StackPanelRenderer());
Magic Number,WaveEngine.Components.UI,StackPanelRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Stack\StackPanelRenderer.cs,DrawDebugLines,The following statement contains a magic number: this.RenderManager.LineBatch2D.DrawPoint(this.Transform2D.Rectangle.Location + this.Transform2D.Origin' 10f' Color.Red' this.Transform2D.DrawOrder);
Magic Number,WaveEngine.Components.UI,TextBlock,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBlock\TextBlock.cs,TextBlock,The following statement contains a magic number: this.entity = new Entity(name)                                  .AddComponent(new Transform2D())                                  .AddComponent(new PanelControl(100' 30))                                  .AddComponent(new PanelControlRenderer())                                  .AddChild(new Entity("TextEntity")                                      .AddComponent(new Transform2D())                                      .AddComponent(new TextControl()                                      {                                          Text = "TextBlock"                                      })                                      .AddComponent(new TextControlRenderer(layer)));
Magic Number,WaveEngine.Components.UI,TextBlock,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBlock\TextBlock.cs,TextBlock,The following statement contains a magic number: this.entity = new Entity(name)                                  .AddComponent(new Transform2D())                                  .AddComponent(new PanelControl(100' 30))                                  .AddComponent(new PanelControlRenderer())                                  .AddChild(new Entity("TextEntity")                                      .AddComponent(new Transform2D())                                      .AddComponent(new TextControl()                                      {                                          Text = "TextBlock"                                      })                                      .AddComponent(new TextControlRenderer(layer)));
Magic Number,WaveEngine.Components.UI,TextControl,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBlock\TextControl.cs,CalculateAlignmentOffset,The following statement contains a magic number: switch (this.textAlignment)              {                  case TextAlignment.Left:                      break;                  case TextAlignment.Right:                        if (size.X < this.width)                      {                          offsetX = this.width - size.X;                      }                        break;                  case TextAlignment.Center:                        if (size.X < this.width)                      {                          offsetX = (this.width - size.X) / 2;                      }                        break;              }
Magic Number,WaveEngine.Components.UI,TextControlRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBlock\TextControlRenderer.cs,DrawDebugLines,The following statement contains a magic number: this.RenderManager.LineBatch2D.DrawPoint(this.Transform2D.Rectangle.Location + this.Transform2D.Origin' 10f' Color.Red' this.Transform2D.DrawOrder);
Magic Number,WaveEngine.Components.UI,TextBox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBox.cs,TextBox,The following statement contains a magic number: this.entity = new Entity(name)                                  .AddComponent(new Transform2D())                                  .AddComponent(new TextBoxBehavior())                                  .AddComponent(new RectangleCollider2D())                                  .AddComponent(new TouchGestures(false))                                  .AddComponent(new PanelControl(100' 30))                                  .AddComponent(new PanelControlRenderer())                                  .AddChild(new Entity("ImageEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.55f                                      })                                      .AddComponent(new ImageControl(Color.White' 100' 30))                                      .AddComponent(new ImageControlRenderer()))                                  .AddChild(new Entity("TextEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.4f                                      })                                      .AddComponent(new TextControl()                                      {                                          Text = "TextBox"'                                          Foreground = Color.Black                                      })                                      .AddComponent(new TextControlRenderer()))                                  .AddChild(new Entity("CursorEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.35f'                                          Opacity = 0f                                      })                                      .AddComponent(new AnimationUI())                                      .AddComponent(new ImageControl(Color.Black' 2' 30))                                      .AddComponent(new ImageControlRenderer()));
Magic Number,WaveEngine.Components.UI,TextBox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBox.cs,TextBox,The following statement contains a magic number: this.entity = new Entity(name)                                  .AddComponent(new Transform2D())                                  .AddComponent(new TextBoxBehavior())                                  .AddComponent(new RectangleCollider2D())                                  .AddComponent(new TouchGestures(false))                                  .AddComponent(new PanelControl(100' 30))                                  .AddComponent(new PanelControlRenderer())                                  .AddChild(new Entity("ImageEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.55f                                      })                                      .AddComponent(new ImageControl(Color.White' 100' 30))                                      .AddComponent(new ImageControlRenderer()))                                  .AddChild(new Entity("TextEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.4f                                      })                                      .AddComponent(new TextControl()                                      {                                          Text = "TextBox"'                                          Foreground = Color.Black                                      })                                      .AddComponent(new TextControlRenderer()))                                  .AddChild(new Entity("CursorEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.35f'                                          Opacity = 0f                                      })                                      .AddComponent(new AnimationUI())                                      .AddComponent(new ImageControl(Color.Black' 2' 30))                                      .AddComponent(new ImageControlRenderer()));
Magic Number,WaveEngine.Components.UI,TextBox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBox.cs,TextBox,The following statement contains a magic number: this.entity = new Entity(name)                                  .AddComponent(new Transform2D())                                  .AddComponent(new TextBoxBehavior())                                  .AddComponent(new RectangleCollider2D())                                  .AddComponent(new TouchGestures(false))                                  .AddComponent(new PanelControl(100' 30))                                  .AddComponent(new PanelControlRenderer())                                  .AddChild(new Entity("ImageEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.55f                                      })                                      .AddComponent(new ImageControl(Color.White' 100' 30))                                      .AddComponent(new ImageControlRenderer()))                                  .AddChild(new Entity("TextEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.4f                                      })                                      .AddComponent(new TextControl()                                      {                                          Text = "TextBox"'                                          Foreground = Color.Black                                      })                                      .AddComponent(new TextControlRenderer()))                                  .AddChild(new Entity("CursorEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.35f'                                          Opacity = 0f                                      })                                      .AddComponent(new AnimationUI())                                      .AddComponent(new ImageControl(Color.Black' 2' 30))                                      .AddComponent(new ImageControlRenderer()));
Magic Number,WaveEngine.Components.UI,TextBox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBox.cs,TextBox,The following statement contains a magic number: this.entity = new Entity(name)                                  .AddComponent(new Transform2D())                                  .AddComponent(new TextBoxBehavior())                                  .AddComponent(new RectangleCollider2D())                                  .AddComponent(new TouchGestures(false))                                  .AddComponent(new PanelControl(100' 30))                                  .AddComponent(new PanelControlRenderer())                                  .AddChild(new Entity("ImageEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.55f                                      })                                      .AddComponent(new ImageControl(Color.White' 100' 30))                                      .AddComponent(new ImageControlRenderer()))                                  .AddChild(new Entity("TextEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.4f                                      })                                      .AddComponent(new TextControl()                                      {                                          Text = "TextBox"'                                          Foreground = Color.Black                                      })                                      .AddComponent(new TextControlRenderer()))                                  .AddChild(new Entity("CursorEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.35f'                                          Opacity = 0f                                      })                                      .AddComponent(new AnimationUI())                                      .AddComponent(new ImageControl(Color.Black' 2' 30))                                      .AddComponent(new ImageControlRenderer()));
Magic Number,WaveEngine.Components.UI,TextBox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBox.cs,TextBox,The following statement contains a magic number: this.entity = new Entity(name)                                  .AddComponent(new Transform2D())                                  .AddComponent(new TextBoxBehavior())                                  .AddComponent(new RectangleCollider2D())                                  .AddComponent(new TouchGestures(false))                                  .AddComponent(new PanelControl(100' 30))                                  .AddComponent(new PanelControlRenderer())                                  .AddChild(new Entity("ImageEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.55f                                      })                                      .AddComponent(new ImageControl(Color.White' 100' 30))                                      .AddComponent(new ImageControlRenderer()))                                  .AddChild(new Entity("TextEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.4f                                      })                                      .AddComponent(new TextControl()                                      {                                          Text = "TextBox"'                                          Foreground = Color.Black                                      })                                      .AddComponent(new TextControlRenderer()))                                  .AddChild(new Entity("CursorEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.35f'                                          Opacity = 0f                                      })                                      .AddComponent(new AnimationUI())                                      .AddComponent(new ImageControl(Color.Black' 2' 30))                                      .AddComponent(new ImageControlRenderer()));
Magic Number,WaveEngine.Components.UI,TextBox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBox.cs,TextBox,The following statement contains a magic number: this.entity = new Entity(name)                                  .AddComponent(new Transform2D())                                  .AddComponent(new TextBoxBehavior())                                  .AddComponent(new RectangleCollider2D())                                  .AddComponent(new TouchGestures(false))                                  .AddComponent(new PanelControl(100' 30))                                  .AddComponent(new PanelControlRenderer())                                  .AddChild(new Entity("ImageEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.55f                                      })                                      .AddComponent(new ImageControl(Color.White' 100' 30))                                      .AddComponent(new ImageControlRenderer()))                                  .AddChild(new Entity("TextEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.4f                                      })                                      .AddComponent(new TextControl()                                      {                                          Text = "TextBox"'                                          Foreground = Color.Black                                      })                                      .AddComponent(new TextControlRenderer()))                                  .AddChild(new Entity("CursorEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.35f'                                          Opacity = 0f                                      })                                      .AddComponent(new AnimationUI())                                      .AddComponent(new ImageControl(Color.Black' 2' 30))                                      .AddComponent(new ImageControlRenderer()));
Magic Number,WaveEngine.Components.UI,TextBox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBox.cs,TextBox,The following statement contains a magic number: this.entity = new Entity(name)                                  .AddComponent(new Transform2D())                                  .AddComponent(new TextBoxBehavior())                                  .AddComponent(new RectangleCollider2D())                                  .AddComponent(new TouchGestures(false))                                  .AddComponent(new PanelControl(100' 30))                                  .AddComponent(new PanelControlRenderer())                                  .AddChild(new Entity("ImageEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.55f                                      })                                      .AddComponent(new ImageControl(Color.White' 100' 30))                                      .AddComponent(new ImageControlRenderer()))                                  .AddChild(new Entity("TextEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.4f                                      })                                      .AddComponent(new TextControl()                                      {                                          Text = "TextBox"'                                          Foreground = Color.Black                                      })                                      .AddComponent(new TextControlRenderer()))                                  .AddChild(new Entity("CursorEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.35f'                                          Opacity = 0f                                      })                                      .AddComponent(new AnimationUI())                                      .AddComponent(new ImageControl(Color.Black' 2' 30))                                      .AddComponent(new ImageControlRenderer()));
Magic Number,WaveEngine.Components.UI,TextBox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBox.cs,TextBox,The following statement contains a magic number: this.entity = new Entity(name)                                  .AddComponent(new Transform2D())                                  .AddComponent(new TextBoxBehavior())                                  .AddComponent(new RectangleCollider2D())                                  .AddComponent(new TouchGestures(false))                                  .AddComponent(new PanelControl(100' 30))                                  .AddComponent(new PanelControlRenderer())                                  .AddChild(new Entity("ImageEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.55f                                      })                                      .AddComponent(new ImageControl(Color.White' 100' 30))                                      .AddComponent(new ImageControlRenderer()))                                  .AddChild(new Entity("TextEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.4f                                      })                                      .AddComponent(new TextControl()                                      {                                          Text = "TextBox"'                                          Foreground = Color.Black                                      })                                      .AddComponent(new TextControlRenderer()))                                  .AddChild(new Entity("CursorEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.35f'                                          Opacity = 0f                                      })                                      .AddComponent(new AnimationUI())                                      .AddComponent(new ImageControl(Color.Black' 2' 30))                                      .AddComponent(new ImageControlRenderer()));
Magic Number,WaveEngine.Components.UI,TextBox,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBox.cs,TextBox,The following statement contains a magic number: this.entity = new Entity(name)                                  .AddComponent(new Transform2D())                                  .AddComponent(new TextBoxBehavior())                                  .AddComponent(new RectangleCollider2D())                                  .AddComponent(new TouchGestures(false))                                  .AddComponent(new PanelControl(100' 30))                                  .AddComponent(new PanelControlRenderer())                                  .AddChild(new Entity("ImageEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.55f                                      })                                      .AddComponent(new ImageControl(Color.White' 100' 30))                                      .AddComponent(new ImageControlRenderer()))                                  .AddChild(new Entity("TextEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.4f                                      })                                      .AddComponent(new TextControl()                                      {                                          Text = "TextBox"'                                          Foreground = Color.Black                                      })                                      .AddComponent(new TextControlRenderer()))                                  .AddChild(new Entity("CursorEntity")                                      .AddComponent(new Transform2D()                                      {                                          DrawOrder = 0.35f'                                          Opacity = 0f                                      })                                      .AddComponent(new AnimationUI())                                      .AddComponent(new ImageControl(Color.Black' 2' 30))                                      .AddComponent(new ImageControlRenderer()));
Magic Number,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,DefaultValues,The following statement contains a magic number: this.flicker = new SingleAnimation(1' 0' new Duration(TimeSpan.FromSeconds(0.4f)));
Magic Number,WaveEngine.Components.UI,TextBoxBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBox\TextBoxBehavior.cs,RemoveBackCharacter,The following statement contains a magic number: text.Length < 2
Magic Number,WaveEngine.Components.UI,ToggleSwitch,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\ToggleSwitch\ToggleSwitch.cs,ToggleSwitch,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new GridControl(100' 42))                             .AddComponent(new GridRenderer())                             .AddComponent(new ToggleSwitchBehavior());
Magic Number,WaveEngine.Components.UI,ToggleSwitch,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\ToggleSwitch\ToggleSwitch.cs,ToggleSwitch,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D())                             .AddComponent(new RectangleCollider2D())                             .AddComponent(new TouchGestures(false))                             .AddComponent(new GridControl(100' 42))                             .AddComponent(new GridRenderer())                             .AddComponent(new ToggleSwitchBehavior());
Magic Number,WaveEngine.Components.UI,ToggleSwitch,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\ToggleSwitch\ToggleSwitch.cs,ToggleSwitch,The following statement contains a magic number: Entity textEntity = new Entity("TextEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.4f                                  })                                  .AddComponent(new TextControl()                                  {                                      Text = "Off"'                                      Margin = DefaultTextMargin                                  })                                  .AddComponent(new TextControlRenderer());
Magic Number,WaveEngine.Components.UI,ToggleSwitch,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\ToggleSwitch\ToggleSwitch.cs,ToggleSwitch,The following statement contains a magic number: Entity backgroundEntity = new Entity("BackgroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.5f                                  })                                  .AddComponent(new ImageControl(Color.Blue' DefaultWidth' DefaultHeight)                                  {                                      Margin = DefaultSliderMargin                                  })                                  .AddComponent(new ImageControlRenderer());
Magic Number,WaveEngine.Components.UI,ToggleSwitch,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\ToggleSwitch\ToggleSwitch.cs,ToggleSwitch,The following statement contains a magic number: Entity foregroundEntity = new Entity("ForegroundEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.45f                                  })                                  .AddComponent(new AnimationUI())                                  .AddComponent(new ImageControl(Color.LightBlue' 1' DefaultHeight)                                  {                                      Margin = DefaultSliderMargin                                  })                                  .AddComponent(new ImageControlRenderer());
Magic Number,WaveEngine.Components.UI,ToggleSwitch,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\ToggleSwitch\ToggleSwitch.cs,ToggleSwitch,The following statement contains a magic number: Entity bulletEntity = new Entity("BulletEntity")                                  .AddComponent(new Transform2D()                                  {                                      DrawOrder = 0.4f                                  })                                  .AddComponent(new AnimationUI())                                  .AddComponent(new ImageControl(Color.White' DefaultHeight' DefaultHeight)                                  {                                      Margin = DefaultSliderMargin                                  })                                  .AddComponent(new ImageControlRenderer());
Magic Number,WaveEngine.Components.UI,ToggleSwitchBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\ToggleSwitch\ToggleSwitchBehavior.cs,ToggleSwitchBehavior,The following statement contains a magic number: Duration duration = new Duration(TimeSpan.FromSeconds(.4f));
Magic Number,WaveEngine.Components.UI,WrapPanel,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Wrap\WrapPanel.cs,WrapPanel,The following statement contains a magic number: this.entity = new Entity(name)                             .AddComponent(new Transform2D()                             {                                 DrawOrder = 0.6f'                             })                             .AddComponent(new WrapPanelControl())                             .AddComponent(new WrapPanelRenderer());
Magic Number,WaveEngine.Components.UI,WrapPanelRenderer,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Wrap\WrapPanelRenderer.cs,DrawDebugLines,The following statement contains a magic number: this.RenderManager.LineBatch2D.DrawPoint(this.Transform2D.Rectangle.Location + this.Transform2D.Origin' 10f' Color.Red' this.Transform2D.DrawOrder);
Magic Number,WaveEngine.Components.VR,VRCameraRig,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\VR\VRCameraRig.cs,DefaultValues,The following statement contains a magic number: this.nearPlane = 0.05f;
Magic Number,WaveEngine.Components.VR,VRCameraRig,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\VR\VRCameraRig.cs,DefaultValues,The following statement contains a magic number: this.farPlane = 500f;
Magic Number,WaveEngine.Components.VR,VRCameraRig,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\VR\VRCameraRig.cs,InstantiateOVRHierarchy,The following statement contains a magic number: this.RightEyeCamera = new Camera3D() { CameraOrder = 0.1f };
Duplicate Code,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The method contains a code clone-set at the following line numbers (starting from the method definition): ((167' 187)' (202' 222))
Duplicate Code,WaveEngine.Components.Graphics3D,ParticleSystemRenderer3D,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Graphics3D\ParticleSystemRenderer3D.cs,Draw,The method contains a code clone-set at the following line numbers (starting from the method definition): ((239' 259)' (274' 294))
Missing Default,WaveEngine.Components.GameActions,FloatAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\FloatAnimationGameAction.cs,DeltaFunction,The following switch statement is missing a default case: switch (this.easeFunction)              {                  case EaseFunction.BackInEase:                      delta = this.BackInEase(time' from' to' totalTime);                      break;                  case EaseFunction.BackInOutEase:                      delta = this.BackInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.BackOutEase:                      delta = this.BackOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.BounceInEase:                      delta = this.BounceInEase(time' from' to' totalTime);                      break;                  case EaseFunction.BounceOutEase:                      delta = this.BounceOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.BounceInOutEase:                      delta = this.BounceInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.CircleInEase:                      delta = this.CircleInEase(time' from' to' totalTime);                      break;                  case EaseFunction.CircleOutEase:                      delta = this.CircleOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.CircleInOutEase:                      delta = this.CircleInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.CubicInEase:                      delta = this.CubicInEase(time' from' to' totalTime);                      break;                  case EaseFunction.CubicOutEase:                      delta = this.CubicOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.CubicInOutEase:                      delta = this.CubicInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.ElasticInEase:                      delta = this.ElasticInEase(time' from' to' totalTime);                      break;                  case EaseFunction.ElasticOutEase:                      delta = this.ElasticOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.ElasticInOutEase:                      delta = this.ElasticInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.ExponentialInEase:                      delta = this.ExponentialInEase(time' from' to' totalTime);                      break;                  case EaseFunction.ExponentialOutEase:                      delta = this.ExponentialOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.ExponentialInOutEase:                      delta = this.ExponentialInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuadraticInEase:                      delta = this.QuadraticInEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuadraticOutEase:                      delta = this.QuadraticOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuadraticInOutEase:                      delta = this.QuadraticInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuarticInEase:                      delta = this.QuarticInEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuarticOutEase:                      delta = this.QuarticOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuarticInOutEase:                      delta = this.QuarticInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuinticInEase:                      delta = this.QuinticInEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuinticOutEase:                      delta = this.QuinticOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuinticInOutEase:                      delta = this.QuinticInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.SineInEase:                      delta = this.SineInEase(time' from' to' totalTime);                      break;                  case EaseFunction.SineOutEase:                      delta = this.SineOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.SineInOutEase:                      delta = this.SineInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.None:                      delta = this.LinearStep(from' to' lerp);                      break;              }
Missing Default,WaveEngine.Components.GameActions,Vector2AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector2AnimationGameAction.cs,DeltaFunction,The following switch statement is missing a default case: switch (this.easeFunction)              {                  case EaseFunction.BackInEase:                      delta = this.BackInEase(time' from' to' totalTime);                      break;                  case EaseFunction.BackInOutEase:                      delta = this.BackInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.BackOutEase:                      delta = this.BackOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.BounceInEase:                      delta = this.BounceInEase(time' from' to' totalTime);                      break;                  case EaseFunction.BounceOutEase:                      delta = this.BounceOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.BounceInOutEase:                      delta = this.BounceInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.CircleInEase:                      delta = this.CircleInEase(time' from' to' totalTime);                      break;                  case EaseFunction.CircleOutEase:                      delta = this.CircleOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.CircleInOutEase:                      delta = this.CircleInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.CubicInEase:                      delta = this.CubicInEase(time' from' to' totalTime);                      break;                  case EaseFunction.CubicOutEase:                      delta = this.CubicOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.CubicInOutEase:                      delta = this.CubicInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.ElasticInEase:                      delta = this.ElasticInEase(time' from' to' totalTime);                      break;                  case EaseFunction.ElasticOutEase:                      delta = this.ElasticOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.ElasticInOutEase:                      delta = this.ElasticInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.ExponentialInEase:                      delta = this.ExponentialInEase(time' from' to' totalTime);                      break;                  case EaseFunction.ExponentialOutEase:                      delta = this.ExponentialOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.ExponentialInOutEase:                      delta = this.ExponentialInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuadraticInEase:                      delta = this.QuadraticInEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuadraticOutEase:                      delta = this.QuadraticOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuadraticInOutEase:                      delta = this.QuadraticInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuarticInEase:                      delta = this.QuarticInEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuarticOutEase:                      delta = this.QuarticOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuarticInOutEase:                      delta = this.QuarticInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuinticInEase:                      delta = this.QuinticInEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuinticOutEase:                      delta = this.QuinticOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuinticInOutEase:                      delta = this.QuinticInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.SineInEase:                      delta = this.SineInEase(time' from' to' totalTime);                      break;                  case EaseFunction.SineOutEase:                      delta = this.SineOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.SineInOutEase:                      delta = this.SineInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.None:                      delta = this.LinearStep(time' from' to' totalTime);                      break;              }
Missing Default,WaveEngine.Components.GameActions,QuaternionAnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\QuaternionAnimationGameAction.cs,DeltaFunction,The following switch statement is missing a default case: switch (this.easeFunction)              {                  case EaseFunction.BackInEase:                      delta = this.BackInEase(time' from' to' totalTime);                      break;                  case EaseFunction.BackInOutEase:                      delta = this.BackInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.BackOutEase:                      delta = this.BackOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.BounceInEase:                      delta = this.BounceInEase(time' from' to' totalTime);                      break;                  case EaseFunction.BounceOutEase:                      delta = this.BounceOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.BounceInOutEase:                      delta = this.BounceInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.CircleInEase:                      delta = this.CircleInEase(time' from' to' totalTime);                      break;                  case EaseFunction.CircleOutEase:                      delta = this.CircleOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.CircleInOutEase:                      delta = this.CircleInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.CubicInEase:                      delta = this.CubicInEase(time' from' to' totalTime);                      break;                  case EaseFunction.CubicOutEase:                      delta = this.CubitOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.CubicInOutEase:                      delta = this.CubicInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.ElasticInEase:                      delta = this.ElasticInEase(time' from' to' totalTime);                      break;                  case EaseFunction.ElasticOutEase:                      delta = this.ElasticOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.ElasticInOutEase:                      delta = this.ElasticInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.ExponentialInEase:                      delta = this.ExponentialInEase(time' from' to' totalTime);                      break;                  case EaseFunction.ExponentialOutEase:                      delta = this.ExponentialOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.ExponentialInOutEase:                      delta = this.ExponentialInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuadraticInEase:                      delta = this.QuadraticInEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuadraticOutEase:                      delta = this.QuadraticOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuadraticInOutEase:                      delta = this.QuadraticInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuarticInEase:                      delta = this.QuarticInEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuarticOutEase:                      delta = this.QuarticOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuarticInOutEase:                      delta = this.QuarticInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuinticInEase:                      delta = this.QuinticInEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuinticOutEase:                      delta = this.QuinticOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuinticInOutEase:                      delta = this.QuinticInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.SineInEase:                      delta = this.SineInEase(time' from' to' totalTime);                      break;                  case EaseFunction.SineOutEase:                      delta = this.SineOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.SineInOutEase:                      delta = this.SineInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.None:                      delta = this.LinearStep(time' from' to' totalTime);                      break;              }
Missing Default,WaveEngine.Components.GameActions,Vector3AnimationGameAction,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\GameActions\Animations\Vector3AnimationGameAction.cs,DeltaFunction,The following switch statement is missing a default case: switch (this.easeFunction)              {                  case EaseFunction.BackInEase:                      delta = this.BackInEase(time' from' to' totalTime);                      break;                  case EaseFunction.BackInOutEase:                      delta = this.BackInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.BackOutEase:                      delta = this.BackOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.BounceInEase:                      delta = this.BounceInEase(time' from' to' totalTime);                      break;                  case EaseFunction.BounceOutEase:                      delta = this.BounceOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.BounceInOutEase:                      delta = this.BounceInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.CircleInEase:                      delta = this.CircleInEase(time' from' to' totalTime);                      break;                  case EaseFunction.CircleOutEase:                      delta = this.CircleOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.CircleInOutEase:                      delta = this.CircleInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.CubicInEase:                      delta = this.CubicInEase(time' from' to' totalTime);                      break;                  case EaseFunction.CubicOutEase:                      delta = this.CubitOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.CubicInOutEase:                      delta = this.CubicInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.ElasticInEase:                      delta = this.ElasticInEase(time' from' to' totalTime);                      break;                  case EaseFunction.ElasticOutEase:                      delta = this.ElasticOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.ElasticInOutEase:                      delta = this.ElasticInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.ExponentialInEase:                      delta = this.ExponentialInEase(time' from' to' totalTime);                      break;                  case EaseFunction.ExponentialOutEase:                      delta = this.ExponentialOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.ExponentialInOutEase:                      delta = this.ExponentialInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuadraticInEase:                      delta = this.QuadraticInEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuadraticOutEase:                      delta = this.QuadraticOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuadraticInOutEase:                      delta = this.QuadraticInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuarticInEase:                      delta = this.QuarticInEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuarticOutEase:                      delta = this.QuarticOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuarticInOutEase:                      delta = this.QuarticInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuinticInEase:                      delta = this.QuinticInEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuinticOutEase:                      delta = this.QuinticOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.QuinticInOutEase:                      delta = this.QuinticInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.SineInEase:                      delta = this.SineInEase(time' from' to' totalTime);                      break;                  case EaseFunction.SineOutEase:                      delta = this.SineOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.SineInOutEase:                      delta = this.SineInOutEase(time' from' to' totalTime);                      break;                  case EaseFunction.None:                      delta = this.LinearStep(time' from' to' totalTime);                      break;              }
Missing Default,WaveEngine.Components.Gestures,TouchGestures,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Gestures\TouchGestures.cs,Update,The following switch statement is missing a default case: switch (this.state)              {                  case GestureType.None:                      this.NoneState();                      break;                    case GestureType.Pressed:                      this.PressedState();                      break;                    case GestureType.Tap:                      this.TapState();                      break;                    case GestureType.Stopped:                  case GestureType.Drag:                      this.StoppedAndDragState();                      break;                    case GestureType.Free:                      this.FreeState();                      break;              }
Missing Default,WaveEngine.Components.Primitives,LineMeshBase,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Primitives\LinePrimitives\LineMeshBase.cs,RefreshMeshes,The following switch statement is missing a default case: switch (this.lineType)              {                  case LineTypes.LineStrip:                      this.FillStripLines();                      break;                  case LineTypes.LineList:                      this.FillLineList();                      break;              }
Missing Default,WaveEngine.Components.Toolkit,TextComponent,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Toolkit\TextComponent.cs,CalculateAlignmentOffset,The following switch statement is missing a default case: switch (this.textAlignment)              {                  case TextAlignment.Left:                      break;                  case TextAlignment.Right:                        if (size.X < width)                      {                          offsetX = width - size.X;                      }                        break;                  case TextAlignment.Center:                        if (size.X < width)                      {                          offsetX = (width - size.X) * 0.5f;                      }                        break;              }
Missing Default,WaveEngine.Components.Transitions,CombTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CombTransition.cs,Initialize,The following switch statement is missing a default case: switch (this.effectOption)              {                  case EffectOptions.Horizontal:                      this.initialPosition = new Vector2(this.platform.ScreenWidth' 0);                      break;                  case EffectOptions.Vertical:                      this.initialPosition = new Vector2(0' -this.platform.ScreenHeight);                      break;              }
Missing Default,WaveEngine.Components.Transitions,CoverTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\CoverTransition.cs,Initialize,The following switch statement is missing a default case: switch (this.effectOption)              {                  case EffectOptions.FromRight:                      this.initialPosition = new Vector2(this.platform.ScreenWidth' 0);                      break;                  case EffectOptions.FromTop:                      this.initialPosition = new Vector2(0' -this.platform.ScreenHeight);                      break;                  case EffectOptions.FromLeft:                      this.initialPosition = new Vector2(-this.platform.ScreenWidth' 0);                      break;                  case EffectOptions.FromBotton:                      this.initialPosition = new Vector2(0' this.platform.ScreenHeight);                      break;                  case EffectOptions.FromTopRight:                      this.initialPosition = new Vector2(this.platform.ScreenWidth' -this.platform.ScreenHeight);                      break;                  case EffectOptions.FromBottomRight:                      this.initialPosition = new Vector2(this.platform.ScreenWidth' this.platform.ScreenHeight);                      break;                  case EffectOptions.FromTopLeft:                      this.initialPosition = new Vector2(-this.platform.ScreenWidth' -this.platform.ScreenHeight);                      break;                  case EffectOptions.FromBottonLeft:                      this.initialPosition = new Vector2(-this.platform.ScreenWidth' this.platform.ScreenHeight);                      break;              }
Missing Default,WaveEngine.Components.Transitions,PushTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\PushTransition.cs,Initialize,The following switch statement is missing a default case: switch (this.effectOption)              {                  case EffectOptions.FromRight:                      this.initialPosition = new Vector2(this.platform.ScreenWidth' 0);                      break;                  case EffectOptions.FromTop:                      this.initialPosition = new Vector2(0' -this.platform.ScreenHeight);                      break;                  case EffectOptions.FromLeft:                      this.initialPosition = new Vector2(-this.platform.ScreenWidth' 0);                      break;                  case EffectOptions.FromBotton:                      this.initialPosition = new Vector2(0' this.platform.ScreenHeight);                      break;              }
Missing Default,WaveEngine.Components.Transitions,UncoverTransition,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\Transitions\UncoverTransition.cs,Initialize,The following switch statement is missing a default case: switch (this.effectOption)              {                  case EffectOptions.FromRight:                      this.targetPosition = new Vector2(-this.platform.ScreenWidth' 0);                      break;                  case EffectOptions.FromTop:                      this.targetPosition = new Vector2(0' this.platform.ScreenHeight);                      break;                  case EffectOptions.FromLeft:                      this.targetPosition = new Vector2(this.platform.ScreenWidth' 0);                      break;                  case EffectOptions.FromBotton:                      this.targetPosition = new Vector2(0' -this.platform.ScreenHeight);                      break;                  case EffectOptions.FromTopRight:                      this.targetPosition = new Vector2(-this.platform.ScreenWidth' this.platform.ScreenHeight);                      break;                  case EffectOptions.FromBottomRight:                      this.targetPosition = new Vector2(-this.platform.ScreenWidth' -this.platform.ScreenHeight);                      break;                  case EffectOptions.FromTopLeft:                      this.targetPosition = new Vector2(this.platform.ScreenWidth' this.platform.ScreenHeight);                      break;                  case EffectOptions.FromBottonLeft:                      this.targetPosition = new Vector2(this.platform.ScreenWidth' -this.platform.ScreenHeight);                      break;              }
Missing Default,WaveEngine.Components.UI,ImageControl,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Image\ImageControl.cs,Arrange,The following switch statement is missing a default case: switch (this.Stretch)              {                  case Stretch.None:                      break;                  case Stretch.Fill:                      currentRect.Width = finalSize.Width - this.Margin.Left - this.Margin.Right;                      currentRect.Height = finalSize.Height - this.Margin.Top - this.Margin.Bottom;                      break;                  case Stretch.Uniform:                        if (this.width >= this.height)                      {                          float finalProportionalHeight = (this.height * finalSize.Width) / this.width;                            if (finalSize.Height < finalProportionalHeight)                          {                              currentRect.Width = ((this.width * finalSize.Height) / this.height) - this.Margin.Left - this.Margin.Right;                              currentRect.Height = finalSize.Height - this.Margin.Top - this.Margin.Bottom;                          }                          else                          {                              currentRect.Width = finalSize.Width - this.Margin.Left - this.Margin.Right;                              currentRect.Height = finalProportionalHeight - this.Margin.Top - this.Margin.Bottom;                          }                      }                      else                      {                          float finalProportionalWidth = (this.width * finalSize.Height) / this.height;                            if (finalSize.Width < finalProportionalWidth)                          {                              currentRect.Width = finalSize.Width - this.Margin.Left - this.Margin.Right;                              currentRect.Height = ((this.height * finalSize.Width) / this.width) - this.Margin.Top - this.Margin.Bottom;                          }                          else                          {                              currentRect.Width = finalProportionalWidth - this.Margin.Left - this.Margin.Right;                              currentRect.Height = finalSize.Height - this.Margin.Top - this.Margin.Bottom;                          }                      }                        break;                  case Stretch.UniformToFill:                        if (this.width >= this.height)                      {                          float finalProportionalWidth = (this.width * finalSize.Height) / this.height;                            if (finalSize.Width > finalProportionalWidth)                          {                              currentRect.Width = finalSize.Width - this.Margin.Left - this.Margin.Right;                              currentRect.Height = ((this.height * finalSize.Width) / this.width) - this.Margin.Top - this.Margin.Bottom;                          }                          else                          {                              currentRect.Width = finalProportionalWidth - this.Margin.Left - this.Margin.Right;                              currentRect.Height = finalSize.Height - this.Margin.Top - this.Margin.Bottom;                          }                      }                      else                      {                          float finalProportionalHeight = (this.height * finalSize.Width) / this.width;                            if (finalSize.Height > finalProportionalHeight)                          {                              currentRect.Width = ((this.width * finalSize.Height) / this.height) - this.Margin.Left - this.Margin.Right;                              currentRect.Height = finalSize.Height - this.Margin.Top - this.Margin.Bottom;                          }                          else                          {                              currentRect.Width = finalSize.Width - this.Margin.Left - this.Margin.Right;                              currentRect.Height = finalProportionalHeight - this.Margin.Top - this.Margin.Bottom;                          }                      }                        break;              }
Missing Default,WaveEngine.Components.UI,ImageControl,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Image\ImageControl.cs,Arrange,The following switch statement is missing a default case: switch (this.HorizontalAlignment)              {                  case HorizontalAlignment.Left:                      currentRect.X = finalSize.X + this.Margin.Left;                      break;                  case HorizontalAlignment.Center:                      currentRect.X = finalSize.X + (finalSize.Width / 2) - (rect.Width / 2) - this.Margin.Right + this.Margin.Left;                      break;                  case HorizontalAlignment.Right:                      currentRect.X = finalSize.X + finalSize.Width - this.Margin.Right - rect.Width;                      break;                  case HorizontalAlignment.Stretch:                      break;              }
Missing Default,WaveEngine.Components.UI,ImageControl,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Image\ImageControl.cs,Arrange,The following switch statement is missing a default case: switch (this.VerticalAlignment)              {                  case VerticalAlignment.Top:                      currentRect.Y = finalSize.Y + this.Margin.Top;                      break;                  case VerticalAlignment.Center:                      currentRect.Y = finalSize.Y + (finalSize.Height / 2) - (rect.Height / 2) - this.Margin.Bottom + this.Margin.Top;                      break;                  case VerticalAlignment.Bottom:                      currentRect.Y = finalSize.Y + finalSize.Height - this.Margin.Bottom - rect.Height;                      break;                  case VerticalAlignment.Stretch:                      break;              }
Missing Default,WaveEngine.Components.UI,SliderBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\SliderBehavior.cs,ResolveDependencies,The following switch statement is missing a default case: switch (this.orientation)              {                  case Orientation.Vertical:                      float result = this.maximunOffset * (this.value - this.minimum) / this.difference;                      this.bulletTransform.Y = -result;                      this.foregroundTransform.YScale = result;                      break;                  case Orientation.Horizontal:                      this.bulletTransform.X = this.maximunOffset * (this.value - this.minimum) / this.difference;                      this.foregroundTransform.XScale = this.bulletTransform.X;                      break;              }
Missing Default,WaveEngine.Components.UI,SliderBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\SliderBehavior.cs,Gestures_TouchPressed,The following switch statement is missing a default case: switch (this.orientation)              {                  case Orientation.Vertical:                      float offsetY = e.GestureSample.Position.Y - this.bulletTransform.Rectangle.Y;                      this.UpdateWidthVerticalOffset(offsetY);                        break;                  case Orientation.Horizontal:                      float offsetX = e.GestureSample.Position.X - this.bulletTransform.Rectangle.X;                      this.UpdateWidthHorizontalOffset(offsetX);                        break;              }
Missing Default,WaveEngine.Components.UI,SliderBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\SliderBehavior.cs,Gestures_TouchMoved,The following switch statement is missing a default case: switch (this.orientation)              {                  case Orientation.Vertical:                      float offsetY = e.GestureSample.Position.Y - this.bulletTransform.Rectangle.Y;                      this.UpdateWidthVerticalOffset(offsetY);                        break;                  case Orientation.Horizontal:                      float offsetX = e.GestureSample.Position.X - this.bulletTransform.Rectangle.X;                      this.UpdateWidthHorizontalOffset(offsetX);                        break;              }
Missing Default,WaveEngine.Components.UI,SliderBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\SliderBehavior.cs,UpdateValue,The following switch statement is missing a default case: switch (this.orientation)                  {                      case Orientation.Vertical:                          this.value = (int)(this.minimum + ((-this.bulletTransform.Y * this.difference) / this.maximunOffset));                          break;                      case Orientation.Horizontal:                          this.value = (int)(this.minimum + ((this.bulletTransform.X * this.difference) / this.maximunOffset));                          break;                  }
Missing Default,WaveEngine.Components.UI,SliderBehavior,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\Slider\SliderBehavior.cs,UpdateOrientation,The following switch statement is missing a default case: switch (this.orientation)              {                  case Orientation.Vertical:                        if (this.backgroundImage != null && this.foregroundImage != null && this.foregroundTransform != null                          && this.bulletImage != null && this.bulletTransform != null && this.textControl != null &&                          this.textTransform != null && this.Panel != null)                      {                          this.maximunOffset = this.Panel.Height - this.bulletImage.Height;                          this.bulletWeightOver2 = this.bulletImage.Height / 2;                          this.maximunOffsetOver2 = this.Panel.Height - this.bulletImage.Height - this.bulletWeightOver2;                            this.backgroundImage.Width = DefaultSliderWeight;                          this.backgroundImage.Height = this.Panel.Height;                            this.foregroundImage.Width = DefaultSliderWeight;                          this.foregroundImage.Height = 1;                          this.foregroundImage.Margin = new Thickness(0' this.Panel.Height' 0' 0);                            this.foregroundTransform.Origin = Vector2.UnitX / 2;                          this.foregroundTransform.Rotation = MathHelper.Pi;                          this.foregroundTransform.XScale = 1;                            this.bulletImage.Margin = new Thickness(0' this.Panel.Height - this.bulletImage.Height' 0' 0);                            this.bulletTransform.X = 0;                            this.bulletTransform.Y = 0;                            this.textControl.Margin = new Thickness(-DefaultTextOffset' this.Panel.Height - (this.bulletImage.Height * 1.5f)' 0' 0);                            this.textTransform.X = 0;                      }                        break;                  case Orientation.Horizontal:                        if (this.backgroundImage != null && this.foregroundImage != null && this.foregroundTransform != null                          && this.bulletImage != null && this.bulletTransform != null && this.textControl != null &&                          this.textTransform != null && this.Panel != null)                      {                          this.maximunOffset = this.Panel.Width - this.bulletImage.Width;                          this.bulletWeightOver2 = this.bulletImage.Width / 2;                          this.maximunOffsetOver2 = this.Panel.Width - this.bulletWeightOver2;                            this.backgroundImage.Width = this.Panel.Width;                          this.backgroundImage.Height = DefaultSliderWeight;                            this.foregroundImage.Height = DefaultSliderWeight;                          this.foregroundImage.Width = 1;                          this.foregroundImage.Margin = Thickness.Zero;                            this.foregroundTransform.Origin = Vector2.Zero;                          this.foregroundTransform.Rotation = 0;                          this.foregroundTransform.YScale = 1;                            this.bulletImage.Margin = Thickness.Zero;                            this.bulletTransform.X = 0;                            this.bulletTransform.Y = 0;                            this.textControl.Margin = new Thickness(0' -DefaultTextOffset' 0' 0);                            this.textTransform.Y = 0;                      }                        break;              }
Missing Default,WaveEngine.Components.UI,TextControl,D:\research\architectureSmells\repos\WaveEngine_Components\Shared\UI\TextBlock\TextControl.cs,CalculateAlignmentOffset,The following switch statement is missing a default case: switch (this.textAlignment)              {                  case TextAlignment.Left:                      break;                  case TextAlignment.Right:                        if (size.X < this.width)                      {                          offsetX = this.width - size.X;                      }                        break;                  case TextAlignment.Center:                        if (size.X < this.width)                      {                          offsetX = (this.width - size.X) / 2;                      }                        break;              }
