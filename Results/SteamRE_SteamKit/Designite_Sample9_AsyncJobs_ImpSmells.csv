Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,Main,The length of the statement  "            // notice that we're not subscribing to the SteamApps.PICSProductInfoCallback callback here (or other SteamApps callbacks) " is 122.
Long Statement,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The length of the statement  "            // at this point' this request is now in-flight to the steam server' so we'll use te async/await pattern to wait for a response " is 127.
Long Statement,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The length of the statement  "            // if Steam does not reply to the request in a timely fashion (controlled by the `Timeout` field on the AsyncJob object)' the underlying " is 136.
Long Statement,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The length of the statement  "            // additionally' if Steam encounters a remote failure and is unable to process your request' the job will be faulted and an AsyncJobFailedException " is 147.
Long Statement,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The length of the statement  "            // note that with some requests' Steam can return multiple results' so these jobs don't return the callback object directly' but rather " is 135.
Long Statement,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The length of the statement  "                // the request partially completed' and then Steam encountered a remote failure. for async jobs with only a single result (such as " is 130.
Long Statement,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The length of the statement  "                // GetDepotDecryptionKey)' this would normally throw an AsyncJobFailedException. but since Steam had given us a partial set of callbacks " is 136.
Long Statement,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The length of the statement  "                // keep in mind that if Steam immediately fails to provide any data' or times out while waiting for the first result' an " is 120.
Long Statement,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The length of the statement  "                SteamApps.PICSProductInfoCallback productInfo = resultSet.Results.FirstOrDefault( prodCallback => prodCallback.Apps.ContainsKey( 440 ) ); " is 137.
Long Statement,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The length of the statement  "                // the request partially completed' but then we timed out. essentially the same as the previous case' but Steam didn't explicitly fail. " is 135.
Long Statement,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The length of the statement  "                SteamApps.PICSProductInfoCallback productInfo = resultSet.Results.FirstOrDefault( prodCallback => prodCallback.Apps.ContainsKey( 440 ) ); " is 137.
Long Statement,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The length of the statement  "            // lastly' if you're unable to use the async/await pattern (older VS/compiler' etc) you can still directly access the TPL Task associated " is 137.
Magic Number,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,Main,The following statement contains a magic number: if ( args.Length < 2 )              {                  Console.WriteLine( "Sample9: No username and password specified!" );                  return;              }
Magic Number,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The following statement contains a magic number: var depotJob = steamApps.GetDepotDecryptionKey( depotid: 441' appid: 440 );
Magic Number,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The following statement contains a magic number: var depotJob = steamApps.GetDepotDecryptionKey( depotid: 441' appid: 440 );
Magic Number,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The following statement contains a magic number: var productJob = steamApps.PICSGetProductInfo( 440' package: null );
Magic Number,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The following statement contains a magic number: if ( resultSet.Complete )              {                  // the request fully completed' we can handle the data                  SteamApps.PICSProductInfoCallback productInfo = resultSet.Results.First();                    // ... do something with our product info              }              else if ( resultSet.Failed )              {                  // the request partially completed' and then Steam encountered a remote failure. for async jobs with only a single result (such as                  // GetDepotDecryptionKey)' this would normally throw an AsyncJobFailedException. but since Steam had given us a partial set of callbacks                  // we get to decide what to do with the data                    // keep in mind that if Steam immediately fails to provide any data' or times out while waiting for the first result' an                  // AsyncJobFailedException or TaskCanceledException will be thrown                    // the result set might not have our data' so we need to test to see if we have results for our request                  SteamApps.PICSProductInfoCallback productInfo = resultSet.Results.FirstOrDefault( prodCallback => prodCallback.Apps.ContainsKey( 440 ) );                    if ( productInfo != null )                  {                      // we were lucky and Steam gave us the info we requested before failing                  }                  else                  {                      // bad luck                  }              }              else              {                  // the request partially completed' but then we timed out. essentially the same as the previous case' but Steam didn't explicitly fail.                    // we still need to check our result set to see if we have our data                  SteamApps.PICSProductInfoCallback productInfo = resultSet.Results.FirstOrDefault( prodCallback => prodCallback.Apps.ContainsKey( 440 ) );                    if ( productInfo != null )                  {                      // we were lucky and Steam gave us the info we requested before timing out                  }                  else                  {                      // bad luck                  }              }
Magic Number,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The following statement contains a magic number: if ( resultSet.Complete )              {                  // the request fully completed' we can handle the data                  SteamApps.PICSProductInfoCallback productInfo = resultSet.Results.First();                    // ... do something with our product info              }              else if ( resultSet.Failed )              {                  // the request partially completed' and then Steam encountered a remote failure. for async jobs with only a single result (such as                  // GetDepotDecryptionKey)' this would normally throw an AsyncJobFailedException. but since Steam had given us a partial set of callbacks                  // we get to decide what to do with the data                    // keep in mind that if Steam immediately fails to provide any data' or times out while waiting for the first result' an                  // AsyncJobFailedException or TaskCanceledException will be thrown                    // the result set might not have our data' so we need to test to see if we have results for our request                  SteamApps.PICSProductInfoCallback productInfo = resultSet.Results.FirstOrDefault( prodCallback => prodCallback.Apps.ContainsKey( 440 ) );                    if ( productInfo != null )                  {                      // we were lucky and Steam gave us the info we requested before failing                  }                  else                  {                      // bad luck                  }              }              else              {                  // the request partially completed' but then we timed out. essentially the same as the previous case' but Steam didn't explicitly fail.                    // we still need to check our result set to see if we have our data                  SteamApps.PICSProductInfoCallback productInfo = resultSet.Results.FirstOrDefault( prodCallback => prodCallback.Apps.ContainsKey( 440 ) );                    if ( productInfo != null )                  {                      // we were lucky and Steam gave us the info we requested before timing out                  }                  else                  {                      // bad luck                  }              }
Magic Number,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The following statement contains a magic number: var depotTask = steamApps.GetDepotDecryptionKey( depotid: 441' appid: 440 ).ToTask();
Magic Number,Sample9_AsyncJobs,Program,C:\repos\SteamRE_SteamKit\Samples\9.AsyncJobs\Program.cs,OnLoggedOn,The following statement contains a magic number: var depotTask = steamApps.GetDepotDecryptionKey( depotid: 441' appid: 440 ).ToTask();
