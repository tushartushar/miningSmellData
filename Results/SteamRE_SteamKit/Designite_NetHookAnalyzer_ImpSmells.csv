Implementation smell,Namespace,Class,File,Method,Description
Long Method,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,DumpType,The method has 173 lines of code.
Long Method,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,BuildBody,The method has 110 lines of code.
Long Method,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The method has 146 lines of code.
Complex Method,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,BuildBody,Cyclomatic complexity of the method is 9
Long Statement,NetHookAnalyzer,MainForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\MainForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager( typeof( MainForm ) ); " is 132.
Long Statement,NetHookAnalyzer,MainForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\MainForm.cs,InitializeComponent,The length of the statement  "            this.openToolStripMenuItem.Image = ( ( System.Drawing.Image )( resources.GetObject( "openToolStripMenuItem.Image" ) ) ); " is 120.
Long Statement,NetHookAnalyzer,MainForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\MainForm.cs,InitializeComponent,The length of the statement  "            this.openToolStripMenuItem.ShortcutKeys = ( ( System.Windows.Forms.Keys )( ( System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O ) ) ); " is 147.
Long Statement,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,PopulatePackets,The length of the statement  "                PacketItem.PacketItemNameEnhance nameEnhance = chkEnhanceMsgNames.Checked ? PacketItemNameEnhance : (PacketItem.PacketItemNameEnhance)null; " is 139.
Long Statement,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,Dump,The length of the statement  "                if ( MsgUtil.IsProtoBuf( realEMsg ) && eMsg == EMsg.ServiceMethod && !string.IsNullOrEmpty( ((MsgHdrProtoBuf)header).Proto.target_job_name ) ) " is 142.
Long Statement,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,Dump,The length of the statement  "                    body = BuildServiceMethodBody( ((MsgHdrProtoBuf)header).Proto.target_job_name'packetStream' x => x.GetParameters().First().ParameterType ); " is 139.
Long Statement,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,Dump,The length of the statement  "                    var serviceBody = BuildServiceMethodBody( request.method_name' request.serialized_method' x => x.GetParameters().First().ParameterType ); " is 137.
Long Statement,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,Dump,The length of the statement  "                    var serviceBody = BuildServiceMethodBody( response.method_name' response.serialized_method_response' x => x.ReturnType ); " is 121.
Long Statement,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,DumpType,The length of the statement  "                   node.ContextMenu.MenuItems.Add( ( intialMenuItem = new MenuItem( "Display as Hexadecimal"' delegate( object sender' EventArgs e ) " is 129.
Long Statement,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,DumpType,The length of the statement  "                        var hexString = data.Aggregate( new StringBuilder()' ( str' value ) => str.Append( value.ToString( "X2" ) ) ).ToString(); " is 121.
Empty Catch Block,NetHookAnalyzer,Utils,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\Utils.cs,GetSteamDir,The method has an empty catch block.
Magic Number,NetHookAnalyzer,MainForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip.Size = new System.Drawing.Size( 927' 24 );
Magic Number,NetHookAnalyzer,MainForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip.Size = new System.Drawing.Size( 927' 24 );
Magic Number,NetHookAnalyzer,MainForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.fileMenu.Size = new System.Drawing.Size( 37' 20 );
Magic Number,NetHookAnalyzer,MainForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.fileMenu.Size = new System.Drawing.Size( 37' 20 );
Magic Number,NetHookAnalyzer,MainForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.openToolStripMenuItem.Size = new System.Drawing.Size( 146' 22 );
Magic Number,NetHookAnalyzer,MainForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.openToolStripMenuItem.Size = new System.Drawing.Size( 146' 22 );
Magic Number,NetHookAnalyzer,MainForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator3.Size = new System.Drawing.Size( 143' 6 );
Magic Number,NetHookAnalyzer,MainForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator3.Size = new System.Drawing.Size( 143' 6 );
Magic Number,NetHookAnalyzer,MainForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.exitToolStripMenuItem.Size = new System.Drawing.Size( 146' 22 );
Magic Number,NetHookAnalyzer,MainForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.exitToolStripMenuItem.Size = new System.Drawing.Size( 146' 22 );
Magic Number,NetHookAnalyzer,MainForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size( 927' 604 );
Magic Number,NetHookAnalyzer,MainForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size( 927' 604 );
Magic Number,NetHookAnalyzer,PacketComparer,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\Packet.cs,Compare,The following statement contains a magic number: switch ( Column )              {                  case 0:                      return this.Order * Comparer<int>.Default.Compare( l.PacketNum' r.PacketNum );                    case 1:                      return this.Order * StringComparer.OrdinalIgnoreCase.Compare( l.Direction' r.Direction );                    case 2:                      return this.Order * StringComparer.OrdinalIgnoreCase.Compare( l.Name' r.Name );              }
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,DumpType,The following statement contains a magic number: if ( propType != null )              {                  if ( propType.IsValueType )                  {                      node.Text += obj.ToString();                      return;                  }                  else if (propType == typeof( string ) )                  {                      node.Text += string.Format( "\"{0}\""' obj );                      return;                  }                  else if ( propType == typeof( SteamID ) )                  {                      SteamID sId = obj as SteamID;                      node.Text += string.Format( "{0} ({1}) "' sId.ConvertToUInt64()' sId.Render() );                  }                  else if ( obj is byte[] )                  {                      byte[] data = obj as byte[];                        node.Text += string.Format( "byte[ {0} ]"' data.Length );                        if ( data.Length == 0 )                      {                          return;                      }                        node.ContextMenu = new ContextMenu( new[] {                          new MenuItem( "Save to File..."' delegate( object sender' EventArgs e )                          {                              var dialog = new SaveFileDialog { DefaultExt = "bin"' SupportMultiDottedExtensions = true };                              var result = dialog.ShowDialog( this );                              if ( result == DialogResult.OK )                              {                                  File.WriteAllBytes( dialog.FileName' data );                              }                          })'                      });                        const int MaxBinLength = 400;                      if ( data.Length > MaxBinLength )                      {                          node.Nodes.Add( string.Format( "Length exceeded {0} bytes!"' MaxBinLength ) );                          return;                      }                        Action<object> setAsRadioSelected = delegate( object sender )                      {                          var senderItem = (MenuItem)sender;                          foreach ( MenuItem item in senderItem.Parent.MenuItems )                          {                              item.Checked = false;                          }                          senderItem.Checked = true;                      };                        node.ContextMenu.MenuItems.Add( new MenuItem( "-" )); // Separator                        MenuItem intialMenuItem;                        node.ContextMenu.MenuItems.Add( new MenuItem( "Display as ASCII"' delegate( object sender' EventArgs e )                      {                          setAsRadioSelected( sender );                          node.Nodes.Clear();                            var strAscii = Encoding.ASCII.GetString( data ).Replace( "\0"' "\\0" );                          node.Nodes.Add( strAscii );                          node.Expand();                        }) { RadioCheck = true } );                       node.ContextMenu.MenuItems.Add( new MenuItem( "Display as UTF-8"' delegate( object sender' EventArgs e )                      {                          setAsRadioSelected( sender );                          node.Nodes.Clear();                            var strUnicode = Encoding.UTF8.GetString( data ).Replace( "\0"' "\\0" );                          node.Nodes.Add( strUnicode );                          node.Expand();                        }) { RadioCheck = true } );                       node.ContextMenu.MenuItems.Add( ( intialMenuItem = new MenuItem( "Display as Hexadecimal"' delegate( object sender' EventArgs e )                      {                          setAsRadioSelected( sender );                          node.Nodes.Clear();                            var hexString = data.Aggregate( new StringBuilder()' ( str' value ) => str.Append( value.ToString( "X2" ) ) ).ToString();                          node.Nodes.Add( hexString );                          node.Expand();                        }) { RadioCheck = true' Checked = true } ) );                       node.ContextMenu.MenuItems.Add(new MenuItem("Display as Binary KeyValues"' delegate(object sender' EventArgs e)                     {                         setAsRadioSelected(sender);                         node.Nodes.Clear();                           var kv = new KeyValue();                         bool didRead;                         using ( var ms = new MemoryStream( data ) )                         {                             try                             {                                 didRead = kv.ReadAsBinary( ms );                             }                             catch (InvalidDataException)                             {                                 didRead = false;                             }                         }                           if ( !didRead )                         {                             node.Nodes.Add( "Not a valid KeyValues object!" );                         }                         else                         {                             node.Nodes.Add( BuildKeyValuesNode( kv.Children[0] ) );                         }                           node.ExpandAll();                       }) { RadioCheck = true });                        intialMenuItem.PerformClick();                        return;                  }                  else if ( TypeIsDictionary( propType ) )                  {                      IDictionary dict = obj as IDictionary;                      foreach (DictionaryEntry pair in dict)                      {                          TreeNode subNode = new TreeNode(string.Format(                              "[ {0} ]: "' pair.Key.ToString() ));                          node.Nodes.Add(subNode);                            DumpType(pair.Value' subNode);                      }                        return;                  }                  else if ( TypeIsArray( propType ) )                  {                      Type innerType = null;                      int count = 0;                      bool truncated = false;                          foreach ( var subObj in obj as IEnumerable )                      {                          innerType = subObj.GetType();                            count++;                            if ( count <= 100 )                          {                              TreeNode subNode = new TreeNode( string.Format(                                  "[ {0} ]: {1}"'                                  count - 1'                                  ( innerType.IsValueType ? "" : innerType.Name )                              ) );                              node.Nodes.Add( subNode );                                DumpType( subObj' subNode );                          }                          else                          {                              truncated = true;                          }                      }                        if ( truncated )                      {                          TreeNode truncNode = new TreeNode( "Array truncated: more than 100 entries!" );                          node.Nodes.Add( truncNode );                      }                        node.Text += string.Format(                          "{0}[ {1} ]"'                          ( innerType == null ? propType.Name : innerType.Name )'                          count                      );                        return;                  }                    node.Text += propType.Name;              }
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,DumpType,The following statement contains a magic number: if ( propType != null )              {                  if ( propType.IsValueType )                  {                      node.Text += obj.ToString();                      return;                  }                  else if (propType == typeof( string ) )                  {                      node.Text += string.Format( "\"{0}\""' obj );                      return;                  }                  else if ( propType == typeof( SteamID ) )                  {                      SteamID sId = obj as SteamID;                      node.Text += string.Format( "{0} ({1}) "' sId.ConvertToUInt64()' sId.Render() );                  }                  else if ( obj is byte[] )                  {                      byte[] data = obj as byte[];                        node.Text += string.Format( "byte[ {0} ]"' data.Length );                        if ( data.Length == 0 )                      {                          return;                      }                        node.ContextMenu = new ContextMenu( new[] {                          new MenuItem( "Save to File..."' delegate( object sender' EventArgs e )                          {                              var dialog = new SaveFileDialog { DefaultExt = "bin"' SupportMultiDottedExtensions = true };                              var result = dialog.ShowDialog( this );                              if ( result == DialogResult.OK )                              {                                  File.WriteAllBytes( dialog.FileName' data );                              }                          })'                      });                        const int MaxBinLength = 400;                      if ( data.Length > MaxBinLength )                      {                          node.Nodes.Add( string.Format( "Length exceeded {0} bytes!"' MaxBinLength ) );                          return;                      }                        Action<object> setAsRadioSelected = delegate( object sender )                      {                          var senderItem = (MenuItem)sender;                          foreach ( MenuItem item in senderItem.Parent.MenuItems )                          {                              item.Checked = false;                          }                          senderItem.Checked = true;                      };                        node.ContextMenu.MenuItems.Add( new MenuItem( "-" )); // Separator                        MenuItem intialMenuItem;                        node.ContextMenu.MenuItems.Add( new MenuItem( "Display as ASCII"' delegate( object sender' EventArgs e )                      {                          setAsRadioSelected( sender );                          node.Nodes.Clear();                            var strAscii = Encoding.ASCII.GetString( data ).Replace( "\0"' "\\0" );                          node.Nodes.Add( strAscii );                          node.Expand();                        }) { RadioCheck = true } );                       node.ContextMenu.MenuItems.Add( new MenuItem( "Display as UTF-8"' delegate( object sender' EventArgs e )                      {                          setAsRadioSelected( sender );                          node.Nodes.Clear();                            var strUnicode = Encoding.UTF8.GetString( data ).Replace( "\0"' "\\0" );                          node.Nodes.Add( strUnicode );                          node.Expand();                        }) { RadioCheck = true } );                       node.ContextMenu.MenuItems.Add( ( intialMenuItem = new MenuItem( "Display as Hexadecimal"' delegate( object sender' EventArgs e )                      {                          setAsRadioSelected( sender );                          node.Nodes.Clear();                            var hexString = data.Aggregate( new StringBuilder()' ( str' value ) => str.Append( value.ToString( "X2" ) ) ).ToString();                          node.Nodes.Add( hexString );                          node.Expand();                        }) { RadioCheck = true' Checked = true } ) );                       node.ContextMenu.MenuItems.Add(new MenuItem("Display as Binary KeyValues"' delegate(object sender' EventArgs e)                     {                         setAsRadioSelected(sender);                         node.Nodes.Clear();                           var kv = new KeyValue();                         bool didRead;                         using ( var ms = new MemoryStream( data ) )                         {                             try                             {                                 didRead = kv.ReadAsBinary( ms );                             }                             catch (InvalidDataException)                             {                                 didRead = false;                             }                         }                           if ( !didRead )                         {                             node.Nodes.Add( "Not a valid KeyValues object!" );                         }                         else                         {                             node.Nodes.Add( BuildKeyValuesNode( kv.Children[0] ) );                         }                           node.ExpandAll();                       }) { RadioCheck = true });                        intialMenuItem.PerformClick();                        return;                  }                  else if ( TypeIsDictionary( propType ) )                  {                      IDictionary dict = obj as IDictionary;                      foreach (DictionaryEntry pair in dict)                      {                          TreeNode subNode = new TreeNode(string.Format(                              "[ {0} ]: "' pair.Key.ToString() ));                          node.Nodes.Add(subNode);                            DumpType(pair.Value' subNode);                      }                        return;                  }                  else if ( TypeIsArray( propType ) )                  {                      Type innerType = null;                      int count = 0;                      bool truncated = false;                          foreach ( var subObj in obj as IEnumerable )                      {                          innerType = subObj.GetType();                            count++;                            if ( count <= 100 )                          {                              TreeNode subNode = new TreeNode( string.Format(                                  "[ {0} ]: {1}"'                                  count - 1'                                  ( innerType.IsValueType ? "" : innerType.Name )                              ) );                              node.Nodes.Add( subNode );                                DumpType( subObj' subNode );                          }                          else                          {                              truncated = true;                          }                      }                        if ( truncated )                      {                          TreeNode truncNode = new TreeNode( "Array truncated: more than 100 entries!" );                          node.Nodes.Add( truncNode );                      }                        node.Text += string.Format(                          "{0}[ {1} ]"'                          ( innerType == null ? propType.Name : innerType.Name )'                          count                      );                        return;                  }                    node.Text += propType.Name;              }
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,GetPossibleGCTypePrefixes,The following statement contains a magic number: switch (appid)              {                  case 440:                      yield return "SteamKit2.GC.TF.Internal.CMsg";                      break;                    case 570:                      yield return "SteamKit2.GC.Dota.Internal.CMsg";                      break;                    case 730:                      yield return "SteamKit2.GC.CSGO.Internal.CMsg";                      break;              }
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,GetPossibleGCTypePrefixes,The following statement contains a magic number: switch (appid)              {                  case 440:                      yield return "SteamKit2.GC.TF.Internal.CMsg";                      break;                    case 570:                      yield return "SteamKit2.GC.Dota.Internal.CMsg";                      break;                    case 730:                      yield return "SteamKit2.GC.CSGO.Internal.CMsg";                      break;              }
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,GetPossibleGCTypePrefixes,The following statement contains a magic number: switch (appid)              {                  case 440:                      yield return "SteamKit2.GC.TF.Internal.CMsg";                      break;                    case 570:                      yield return "SteamKit2.GC.Dota.Internal.CMsg";                      break;                    case 730:                      yield return "SteamKit2.GC.CSGO.Internal.CMsg";                      break;              }
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,PeekUInt32,The following statement contains a magic number: byte[] eMsgData = new byte[ 4 ];
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,PeekUInt32,The following statement contains a magic number: str.Seek( -4' SeekOrigin.Current );
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(847' 571);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(847' 571);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 363;
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.viewPacket.Location = new System.Drawing.Point(0' 47);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.viewPacket.Size = new System.Drawing.Size(363' 524);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.viewPacket.Size = new System.Drawing.Size(363' 524);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader1.Width = 30;
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader2.Width = 50;
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader3.Width = 276;
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(363' 47);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(363' 47);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.chkEnhanceMsgNames.Location = new System.Drawing.Point(102' 19);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.chkEnhanceMsgNames.Location = new System.Drawing.Point(102' 19);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.chkEnhanceMsgNames.Size = new System.Drawing.Size(151' 17);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.chkEnhanceMsgNames.Size = new System.Drawing.Size(151' 17);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.chkOut.Location = new System.Drawing.Point(53' 19);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.chkOut.Location = new System.Drawing.Point(53' 19);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.chkOut.Size = new System.Drawing.Size(43' 17);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.chkOut.Size = new System.Drawing.Size(43' 17);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.chkIn.Location = new System.Drawing.Point(12' 19);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.chkIn.Location = new System.Drawing.Point(12' 19);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.chkIn.Size = new System.Drawing.Size(35' 17);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.chkIn.Size = new System.Drawing.Size(35' 17);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.treePacket.Size = new System.Drawing.Size(480' 571);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.treePacket.Size = new System.Drawing.Size(480' 571);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(847' 571);
Magic Number,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(847' 571);
Missing Default,NetHookAnalyzer,PacketComparer,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\Packet.cs,Compare,The following switch statement is missing a default case: switch ( Column )              {                  case 0:                      return this.Order * Comparer<int>.Default.Compare( l.PacketNum' r.PacketNum );                    case 1:                      return this.Order * StringComparer.OrdinalIgnoreCase.Compare( l.Direction' r.Direction );                    case 2:                      return this.Order * StringComparer.OrdinalIgnoreCase.Compare( l.Name' r.Name );              }
Missing Default,NetHookAnalyzer,SessionForm,C:\repos\SteamRE_SteamKit\Resources\NetHookAnalyzer\NetHookAnalyzer\SessionForm.cs,GetPossibleGCTypePrefixes,The following switch statement is missing a default case: switch (appid)              {                  case 440:                      yield return "SteamKit2.GC.TF.Internal.CMsg";                      break;                    case 570:                      yield return "SteamKit2.GC.Dota.Internal.CMsg";                      break;                    case 730:                      yield return "SteamKit2.GC.CSGO.Internal.CMsg";                      break;              }
