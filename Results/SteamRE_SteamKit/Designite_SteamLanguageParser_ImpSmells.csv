Implementation smell,Namespace,Class,File,Method,Description
Long Method,SteamLanguageParser,CSharpGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\CSharpGen.cs,EmitClassSerializer,The method has 105 lines of code.
Complex Method,SteamLanguageParser,CSharpGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\CSharpGen.cs,EmitClassSerializer,Cyclomatic complexity of the method is 15
Complex Method,SteamLanguageParser,CSharpGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\CSharpGen.cs,EmitClassDeserializer,Cyclomatic complexity of the method is 8
Complex Method,SteamLanguageParser,JavaGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\JavaGen.cs,EmitClassSerializer,Cyclomatic complexity of the method is 15
Complex Method,SteamLanguageParser,ObjCImplementationGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\ObjCImplementationGen.cs,EmitClassSerializer,Cyclomatic complexity of the method is 14
Complex Method,SteamLanguageParser,TokenAnalyzer,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Parser\TokenAnalyzer.cs,ParseInnerScope,Cyclomatic complexity of the method is 10
Long Parameter List,SteamLanguageParser,CodeGenerator,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\CodeGenerator.cs,EmitCode,The method has 6 parameters. Parameters: root' gen' sb' nspace' supportsGC' internalFile
Long Parameter List,SteamLanguageParser,TokenSourceInfo,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Parser\LanguageParser.cs,TokenSourceInfo,The method has 5 parameters. Parameters: fileName' startLineNumber' startColumnNumber' endLineNumber' endColumnNumber
Long Parameter List,SteamLanguageParser,Program,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Program.cs,ParseFile,The method has 9 parameters. Parameters: projectPath' path' file' nspace' outputPath' outFile' supportsGC' codeGen' fileNameSuffix
Long Statement,SteamLanguageParser,CSharpGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\CSharpGen.cs,EmitNamespace,The length of the statement  "                sb.AppendLine( "#pragma warning disable 1591" ); // this will hide "Missing XML comment for publicly visible type or member 'Type_or_Member'" " is 141.
Long Statement,SteamLanguageParser,CSharpGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\CSharpGen.cs,EmitNamespace,The length of the statement  "                sb.AppendLine( "#pragma warning disable 0219" ); // Warning CS0219: The variable `(variable)' is assigned but its value is never used " is 133.
Long Statement,SteamLanguageParser,CSharpGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\CSharpGen.cs,EmitClassProperties,The length of the statement  "                    sb.AppendLine(padding + "public static readonly " + typestr + " " + propName + " = " + EmitType(prop.Default.FirstOrDefault()) + ";"); " is 134.
Long Statement,SteamLanguageParser,CSharpGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\CSharpGen.cs,EmitClassProperties,The length of the statement  "                    sb.AppendLine( padding + "public SteamID " + propName + " { get { return new SteamID( " + prop.Name + " ); } set { " + prop.Name + " = value.ConvertToUInt64(); } }"); " is 166.
Long Statement,SteamLanguageParser,CSharpGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\CSharpGen.cs,EmitClassProperties,The length of the statement  "                    sb.AppendLine( padding + "public bool " + propName + " { get { return ( " + prop.Name + " == 1 ); } set { " + prop.Name + " = ( byte )( value ? 1 : 0 ); } }" ); " is 160.
Long Statement,SteamLanguageParser,CSharpGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\CSharpGen.cs,EmitClassProperties,The length of the statement  "                    sb.AppendLine( padding + "public GameID " + propName + " { get { return new GameID( " + prop.Name + " ); } set { " + prop.Name + " = value.ToUInt64(); } }" ); " is 158.
Long Statement,SteamLanguageParser,CSharpGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\CSharpGen.cs,EmitClassSerializer,The length of the statement  "                        sb.AppendLine(padding + "\tProtoBuf.Serializer.Serialize<" + typestr + ">(ms" + GetUpperName(prop.Name) + "' " + GetUpperName(prop.Name) + ");"); " is 145.
Long Statement,SteamLanguageParser,CSharpGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\CSharpGen.cs,EmitClassSerializer,The length of the statement  "                        sb.AppendLine(padding + "\tMemoryStream ms" + GetUpperName(prop.Name) + " = " + GetUpperName(prop.Name) + ".serialize();"); " is 123.
Long Statement,SteamLanguageParser,CSharpGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\CSharpGen.cs,EmitClassDeserializer,The length of the statement  "                            sb.AppendLine(padding + "\tusing( MemoryStream ms" + GetUpperName(prop.Name) + " = new MemoryStream( br.ReadBytes( " + GetUpperName(prop.FlagsOpt) + " ) ) )"); " is 159.
Long Statement,SteamLanguageParser,CSharpGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\CSharpGen.cs,EmitClassDeserializer,The length of the statement  "                            sb.AppendLine(padding + "\t\t" + GetUpperName(prop.Name) + " = ProtoBuf.Serializer.Deserialize<" + typestr + ">( ms" + GetUpperName(prop.Name) + " );"); " is 152.
Long Statement,SteamLanguageParser,CSharpGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\CSharpGen.cs,EmitClassDeserializer,The length of the statement  "                            sb.AppendLine(padding + "\t" + GetUpperName(prop.Name) + " = ProtoBuf.Serializer.Deserialize<" + typestr + ">( stream );"); " is 123.
Long Statement,SteamLanguageParser,JavaGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\JavaGen.cs,EmitClassProperties,The length of the statement  "                    sb.AppendLine(padding + "public static final " + typestr + " " + propName + " = " + EmitType(prop.Default.FirstOrDefault()) + ";"); " is 131.
Long Statement,SteamLanguageParser,JavaGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\JavaGen.cs,EmitClassProperties,The length of the statement  "                sbAccessors.AppendLine(padding + "public void set" + upname + "( " + typestr + " value ) { " + propName + " = value; }"); " is 121.
Long Statement,SteamLanguageParser,JavaGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\JavaGen.cs,EmitClassSerializer,The length of the statement  "                        sb.AppendLine(padding + "\tByteBuffer buf" + GetUpperName(prop.Name) + " = " + prop.Name + ".toByteString().asReadOnlyByteBuffer();"); " is 134.
Long Statement,SteamLanguageParser,JavaGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\JavaGen.cs,EmitClassSerializer,The length of the statement  "                        sb.AppendLine(padding + "\tByteBuffer buf" + GetUpperName(prop.Name) + " = " + GetUpperName(prop.Name) + ".serialize();"); " is 122.
Long Statement,SteamLanguageParser,JavaGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\JavaGen.cs,EmitClassSerializer,The length of the statement  "            sb.AppendLine(padding + "\tByteBuffer buffer = ByteBuffer.allocate( " + String.Join(" + "' varLengthProps.ToArray()) + " );"); " is 126.
Long Statement,SteamLanguageParser,JavaGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\JavaGen.cs,EmitClassDeserializer,The length of the statement  "                            sb.AppendLine(padding + "\tbyte[] buf" + GetUpperName(prop.Name) + " = new byte[ buffer.limit() - buffer.position() ];"); " is 121.
Long Statement,SteamLanguageParser,ObjCImplementationGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\ObjCImplementationGen.cs,EmitClassProperties,The length of the statement  "                    sb.AppendLine(padding + "public SteamID " + propName + " { get { return new SteamID( " + prop.Name + " ); } set { " + prop.Name + " = value.ConvertToUint64(); } }"); " is 165.
Long Statement,SteamLanguageParser,ObjCImplementationGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\ObjCImplementationGen.cs,EmitClassProperties,The length of the statement  "                    sb.AppendLine(padding + "public bool " + propName + " { get { return ( " + prop.Name + " == 1 ); } set { " + prop.Name + " = ( byte )( value ? 1 : 0 ); } }"); " is 158.
Long Statement,SteamLanguageParser,ObjCImplementationGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\ObjCImplementationGen.cs,EmitClassProperties,The length of the statement  "                    sb.AppendLine(padding + "public GameID " + propName + " { get { return new GameID( " + prop.Name + " ); } set { " + prop.Name + " = value.ToUint64(); } }"); " is 156.
Long Statement,SteamLanguageParser,ObjCImplementationGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\ObjCImplementationGen.cs,EmitClassSerializer,The length of the statement  "                        sb.AppendLine(padding + "\tMemoryStream ms" + GetUpperName(prop.Name) + " = " + GetUpperName(prop.Name) + ".serialize();"); " is 123.
Long Statement,SteamLanguageParser,ObjCImplementationGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\ObjCImplementationGen.cs,EmitClassSerializer,The length of the statement  "                    if (prop.Default.FirstOrDefault() is StrongSymbol && (prop.Default.FirstOrDefault() as StrongSymbol).Class.Name == "EGCMsg") " is 124.
Long Statement,SteamLanguageParser,ObjCImplementationGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\ObjCImplementationGen.cs,EmitClassDeserializer,The length of the statement  "                            sb.AppendLine(padding + "\tNSData * " + GetPropertyName(prop.Name) + "Data = [reader readDataOfLength:" + prop.FlagsOpt + "];"); " is 128.
Long Statement,SteamLanguageParser,ObjCImplementationGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\ObjCImplementationGen.cs,EmitClassDeserializer,The length of the statement  "                            sb.AppendLine(padding + "\tself." + GetPropertyName(prop.Name) + " = [" + GetLastPartNameFromDottedType(EmitType(prop.Type)).Trim(' '' '*') + " parseFromData:" + GetPropertyName(prop.Name) + "Data];"); " is 201.
Long Statement,SteamLanguageParser,ObjCImplementationGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\ObjCImplementationGen.cs,EmitClassDeserializer,The length of the statement  "                            sb.AppendLine(padding + "\t" + GetPropertyName(prop.Name) + " [" + GetLastPartNameFromDottedType(EmitType(prop.Type)).Trim(' '' '*') + " parseFromData:" + GetPropertyName(prop.Name) + "Data];"); " is 194.
Long Statement,SteamLanguageParser,ObjCImplementationGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\ObjCImplementationGen.cs,EmitClassDeserializer,The length of the statement  "                        if (prop.Default.FirstOrDefault() is StrongSymbol && (prop.Default.FirstOrDefault() as StrongSymbol).Class.Name == "EGCMsg") " is 124.
Long Statement,SteamLanguageParser,ObjCInterfaceGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\ObjCInterfaceGen.cs,EmitClassProperties,The length of the statement  "                    sb.AppendLine(padding + "@property (nonatomic' strong' readwrite) " + GetLastPartNameFromDottedType(typestr) + " * " + propName + ";"); " is 135.
Long Statement,SteamLanguageParser,TokenAnalyzer,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Parser\TokenAnalyzer.cs,Expect,The length of the statement  "                    throw new Exception( $"Expecting {name} '{value}'' but got '{peek.Value}' at {source.FileName} {source.StartLineNumber}'{source.StartColumnNumber}-{source.EndLineNumber}'{source.EndColumnNumber}" ); " is 198.
Long Statement,SteamLanguageParser,Program,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Program.cs,Main,The length of the statement  "            ParseFile( projectPath' Path.Combine( "Resources"' "SteamLanguage" )' "steammsg.steamd"' "SteamKit2"' Path.Combine( "SteamKit2"' "SteamKit2"' "Base"' "Generated")' "SteamLanguage"' true' new CSharpGen()' "cs" ); " is 211.
Long Statement,SteamLanguageParser,Program,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Program.cs,Main,The length of the statement  "            //ParseFile( projectPath' @"Resources\SteamLanguage"' "steammsg.steamd"' "SteamKit2"' @"SteamKit2\ObjC\"' "SteamLanguage"' true' new ObjCInterfaceGen()' "h" ); " is 159.
Long Statement,SteamLanguageParser,Program,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Program.cs,Main,The length of the statement  "            //ParseFile( projectPath' @"Resources\SteamLanguage"' "steammsg.steamd"' "SteamKit2"' @"SteamKit2\ObjC\"' "SteamLanguage"' true' new ObjCImplementationGen()' "m" ); " is 164.
Complex Conditional,SteamLanguageParser,CSharpGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\CSharpGen.cs,EmitClassConstructor,The conditional expression  "defflags != null && ( defflags == "steamidmarshal" || defflags == "gameidmarshal" || defflags == "boolmarshal" )"  is complex.
Complex Conditional,SteamLanguageParser,CSharpGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\CSharpGen.cs,EmitClassDeserializer,The conditional expression  "defflags != null && ( defflags == "steamidmarshal" || defflags == "gameidmarshal" || defflags == "boolmarshal" )"  is complex.
Complex Conditional,SteamLanguageParser,ObjCImplementationGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\ObjCImplementationGen.cs,EmitClassConstructor,The conditional expression  "defflags != null && (defflags == "steamidmarshal" || defflags == "gameidmarshal" || defflags == "boolmarshal")"  is complex.
Complex Conditional,SteamLanguageParser,ObjCImplementationGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\ObjCImplementationGen.cs,EmitClassDeserializer,The conditional expression  "defflags != null && (defflags == "steamidmarshal" || defflags == "gameidmarshal" || defflags == "boolmarshal")"  is complex.
Magic Number,SteamLanguageParser,ObjCInterfaceGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\ObjCInterfaceGen.cs,EmitEnumNode,The following statement contains a magic number: if (lastValue.StartsWith("0x"))                  maxlong = Convert.ToInt64(lastValue.Substring(2' lastValue.Length - 2)' 16);              else                  maxlong = Int64.Parse(lastValue);
Magic Number,SteamLanguageParser,ObjCInterfaceGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\ObjCInterfaceGen.cs,EmitEnumNode,The following statement contains a magic number: if (lastValue.StartsWith("0x"))                  maxlong = Convert.ToInt64(lastValue.Substring(2' lastValue.Length - 2)' 16);              else                  maxlong = Int64.Parse(lastValue);
Magic Number,SteamLanguageParser,ObjCInterfaceGen,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Generator\ObjCInterfaceGen.cs,EmitEnumNode,The following statement contains a magic number: if (lastValue.StartsWith("0x"))                  maxlong = Convert.ToInt64(lastValue.Substring(2' lastValue.Length - 2)' 16);              else                  maxlong = Int64.Parse(lastValue);
Missing Default,SteamLanguageParser,TokenAnalyzer,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Parser\TokenAnalyzer.cs,Analyze,The following switch statement is missing a default case: switch (cur.Name)                  {                      case "EOF":                          break;                      case "preprocess":                          Token text = Expect(tokens' "string");                            if (cur.Value == "import")                          {                              Queue<Token> parentTokens = LanguageParser.TokenizeString( File.ReadAllText( text.Value )' text.Value );                                Node newRoot = Analyze( parentTokens );                                foreach (Node child in newRoot.childNodes)                              {                                  root.childNodes.Add(child);                              }                          }                          break;                      case "identifier":                          switch (cur.Value)                          {                              case "class":                                  {                                      Token name = Expect(tokens' "identifier");                                      Token ident = null' parent = null;                                        Token op1 = Optional(tokens' "operator"' "<");                                      if (op1 != null)                                      {                                          ident = Expect(tokens' "identifier");                                          Token op2 = Expect(tokens' "operator"' ">");                                      }                                        Token expect = Optional(tokens' "identifier"' "expects");                                      if (expect != null)                                      {                                          parent = Expect(tokens' "identifier");                                      }                                        Token removed = Optional(tokens' "identifier"' "removed");                                        ClassNode cnode = new ClassNode();                                      cnode.Name = name.Value;                                        if (ident != null)                                      {                                          cnode.Ident = SymbolLocator.LookupSymbol(root' ident.Value' false);                                      }                                        if (parent != null)                                      {                                          //cnode.Parent = SymbolLocator.LookupSymbol(root' parent.Value' true);                                      }                                        if (removed != null)                                      {                                          cnode.Emit = false;                                      }                                      else                                      {                                          cnode.Emit = true;                                      }                                        root.childNodes.Add(cnode);                                      ParseInnerScope(tokens' cnode' root);                                  }                                  break;                              case "enum":                                  {                                      Token name = Expect(tokens' "identifier");                                      Token datatype = null;                                        Token op1 = Optional(tokens' "operator"' "<");                                      if (op1 != null)                                      {                                          datatype = Expect(tokens' "identifier");                                          Token op2 = Expect(tokens' "operator"' ">");                                      }                                        Token flag = Optional( tokens' "identifier"' "flags" );                                        EnumNode enode = new EnumNode();                                      enode.Name = name.Value;                                        if ( flag != null )                                      {                                          enode.Flags = flag.Value;                                      }                                        if (datatype != null)                                      {                                          enode.Type = SymbolLocator.LookupSymbol(root' datatype.Value' false);                                      }                                          root.childNodes.Add(enode);                                      ParseInnerScope(tokens' enode' root);                                  }                                  break;                          }                          break;                  }
Missing Default,SteamLanguageParser,TokenAnalyzer,C:\repos\SteamRE_SteamKit\Resources\SteamLanguageParser\Parser\TokenAnalyzer.cs,Analyze,The following switch statement is missing a default case: switch (cur.Value)                          {                              case "class":                                  {                                      Token name = Expect(tokens' "identifier");                                      Token ident = null' parent = null;                                        Token op1 = Optional(tokens' "operator"' "<");                                      if (op1 != null)                                      {                                          ident = Expect(tokens' "identifier");                                          Token op2 = Expect(tokens' "operator"' ">");                                      }                                        Token expect = Optional(tokens' "identifier"' "expects");                                      if (expect != null)                                      {                                          parent = Expect(tokens' "identifier");                                      }                                        Token removed = Optional(tokens' "identifier"' "removed");                                        ClassNode cnode = new ClassNode();                                      cnode.Name = name.Value;                                        if (ident != null)                                      {                                          cnode.Ident = SymbolLocator.LookupSymbol(root' ident.Value' false);                                      }                                        if (parent != null)                                      {                                          //cnode.Parent = SymbolLocator.LookupSymbol(root' parent.Value' true);                                      }                                        if (removed != null)                                      {                                          cnode.Emit = false;                                      }                                      else                                      {                                          cnode.Emit = true;                                      }                                        root.childNodes.Add(cnode);                                      ParseInnerScope(tokens' cnode' root);                                  }                                  break;                              case "enum":                                  {                                      Token name = Expect(tokens' "identifier");                                      Token datatype = null;                                        Token op1 = Optional(tokens' "operator"' "<");                                      if (op1 != null)                                      {                                          datatype = Expect(tokens' "identifier");                                          Token op2 = Expect(tokens' "operator"' ">");                                      }                                        Token flag = Optional( tokens' "identifier"' "flags" );                                        EnumNode enode = new EnumNode();                                      enode.Name = name.Value;                                        if ( flag != null )                                      {                                          enode.Flags = flag.Value;                                      }                                        if (datatype != null)                                      {                                          enode.Type = SymbolLocator.LookupSymbol(root' datatype.Value' false);                                      }                                          root.childNodes.Add(enode);                                      ParseInnerScope(tokens' enode' root);                                  }                                  break;                          }
