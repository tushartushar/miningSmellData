Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ProtobufDumper,ImageFile,C:\repos\SteamRE_SteamKit\Resources\ProtobufDumper\ProtobufDumper\ImageFile.cs,ScanFile,Cyclomatic complexity of the method is 8
Complex Method,ProtobufDumper,ImageFile,C:\repos\SteamRE_SteamKit\Resources\ProtobufDumper\ProtobufDumper\ImageFile.cs,DumpOptions,Cyclomatic complexity of the method is 11
Complex Method,ProtobufDumper,ImageFile,C:\repos\SteamRE_SteamKit\Resources\ProtobufDumper\ProtobufDumper\ImageFile.cs,DumpFileDescriptor,Cyclomatic complexity of the method is 15
Complex Method,ProtobufDumper,ImageFile,C:\repos\SteamRE_SteamKit\Resources\ProtobufDumper\ProtobufDumper\ImageFile.cs,DumpDescriptor,Cyclomatic complexity of the method is 10
Long Identifier,google.protobuf,FileOptions,C:\repos\SteamRE_SteamKit\Resources\ProtobufDumper\ProtobufDumper\Descriptor.cs,,The length of the parameter _java_generate_equals_and_hash is 30.
Long Identifier,google.protobuf,MessageOptions,C:\repos\SteamRE_SteamKit\Resources\ProtobufDumper\ProtobufDumper\Descriptor.cs,,The length of the parameter _no_standard_descriptor_accessor is 32.
Magic Number,ProtobufDumper,ImageFile,C:\repos\SteamRE_SteamKit\Resources\ProtobufDumper\ProtobufDumper\ImageFile.cs,Process,The following statement contains a magic number: var safeguard = 10;
Magic Number,ProtobufDumper,ImageFile,C:\repos\SteamRE_SteamKit\Resources\ProtobufDumper\ProtobufDumper\ImageFile.cs,ScanFile,The following statement contains a magic number: while (stream.Position < stream.Length)              {                  var currentByte = stream.ReadByte();                    if (currentByte == marker)                  {                      var nullSkip = false;                      byte[] data = null;                    continueScanning:                      stream.Position--; // Return back to the marker we just read                        using (var ms = new MemoryStream())                      {                          if (data != null)                          {                              ms.Write(data' 0' data.Length);                          }                            while (true)                          {                              var data2 = new byte[characterSize];                              stream.Read(data2' 0' characterSize);                                if (Encoding.ASCII.GetString(data2' 0' characterSize) == "\0")                              {                                  if (!nullSkip)                                  {                                      break;                                  }                                    nullSkip = false;                              }                                ms.Write(data2' 0' data2.Length);                          }                            data = ms.ToArray();                      }                        if (data.Length < 2)                      {                          continue;                      }                        var strLen = data[1];                        if (data.Length - 2 < strLen)                      {                          continue;                      }                        var protoName = Encoding.ASCII.GetString(data' 2' strLen);                        if (!ProtoFileNameRegex.IsMatch(protoName))                      {                          continue;                      }                        if (deferredProtos.Any(x => x.name == protoName))                      {                          continue;                      }                        if (!HandleProto(protoName' data))                      {                          nullSkip = true;                            goto continueScanning;                      }                  }              }
Magic Number,ProtobufDumper,ImageFile,C:\repos\SteamRE_SteamKit\Resources\ProtobufDumper\ProtobufDumper\ImageFile.cs,ScanFile,The following statement contains a magic number: while (stream.Position < stream.Length)              {                  var currentByte = stream.ReadByte();                    if (currentByte == marker)                  {                      var nullSkip = false;                      byte[] data = null;                    continueScanning:                      stream.Position--; // Return back to the marker we just read                        using (var ms = new MemoryStream())                      {                          if (data != null)                          {                              ms.Write(data' 0' data.Length);                          }                            while (true)                          {                              var data2 = new byte[characterSize];                              stream.Read(data2' 0' characterSize);                                if (Encoding.ASCII.GetString(data2' 0' characterSize) == "\0")                              {                                  if (!nullSkip)                                  {                                      break;                                  }                                    nullSkip = false;                              }                                ms.Write(data2' 0' data2.Length);                          }                            data = ms.ToArray();                      }                        if (data.Length < 2)                      {                          continue;                      }                        var strLen = data[1];                        if (data.Length - 2 < strLen)                      {                          continue;                      }                        var protoName = Encoding.ASCII.GetString(data' 2' strLen);                        if (!ProtoFileNameRegex.IsMatch(protoName))                      {                          continue;                      }                        if (deferredProtos.Any(x => x.name == protoName))                      {                          continue;                      }                        if (!HandleProto(protoName' data))                      {                          nullSkip = true;                            goto continueScanning;                      }                  }              }
Magic Number,ProtobufDumper,ImageFile,C:\repos\SteamRE_SteamKit\Resources\ProtobufDumper\ProtobufDumper\ImageFile.cs,ScanFile,The following statement contains a magic number: while (stream.Position < stream.Length)              {                  var currentByte = stream.ReadByte();                    if (currentByte == marker)                  {                      var nullSkip = false;                      byte[] data = null;                    continueScanning:                      stream.Position--; // Return back to the marker we just read                        using (var ms = new MemoryStream())                      {                          if (data != null)                          {                              ms.Write(data' 0' data.Length);                          }                            while (true)                          {                              var data2 = new byte[characterSize];                              stream.Read(data2' 0' characterSize);                                if (Encoding.ASCII.GetString(data2' 0' characterSize) == "\0")                              {                                  if (!nullSkip)                                  {                                      break;                                  }                                    nullSkip = false;                              }                                ms.Write(data2' 0' data2.Length);                          }                            data = ms.ToArray();                      }                        if (data.Length < 2)                      {                          continue;                      }                        var strLen = data[1];                        if (data.Length - 2 < strLen)                      {                          continue;                      }                        var protoName = Encoding.ASCII.GetString(data' 2' strLen);                        if (!ProtoFileNameRegex.IsMatch(protoName))                      {                          continue;                      }                        if (deferredProtos.Any(x => x.name == protoName))                      {                          continue;                      }                        if (!HandleProto(protoName' data))                      {                          nullSkip = true;                            goto continueScanning;                      }                  }              }
Magic Number,ProtobufDumper,ImageFile,C:\repos\SteamRE_SteamKit\Resources\ProtobufDumper\ProtobufDumper\ImageFile.cs,DumpDescriptor,The following statement contains a magic number: foreach (var range in proto.extension_range)              {                  var max = Convert.ToString( range.end );                    // http://code.google.com/apis/protocolbuffers/docs/proto.html#extensions                  // If your numbering convention might involve extensions having very large numbers as tags' you can specify                  // that your extension range goes up to the maximum possible field number using the max keyword:                  // max is 2^29 - 1' or 536'870'911.                   if ( range.end >= 536870911 )                  {                      max = "max";                  }                    sb.AppendLine($"{levelspace}\textensions {range.start} to {max};");              }
