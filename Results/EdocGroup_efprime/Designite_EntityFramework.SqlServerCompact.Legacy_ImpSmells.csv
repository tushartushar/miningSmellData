Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetStoreType,The method has 102 lines of code.
Long Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,Visit,The method has 106 lines of code.
Complex Method,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetEdmType,Cyclomatic complexity of the method is 56
Complex Method,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetStoreType,Cyclomatic complexity of the method is 29
Complex Method,System.Data.Entity.SqlServerCompact,SqlDdlBuilder,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlDdlBuilder.cs,AppendType,Cyclomatic complexity of the method is 20
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 24
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 21
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,VisitConstant,Cyclomatic complexity of the method is 58
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 11
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,VisitIsNullExpression,Cyclomatic complexity of the method is 10
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,VisitJoinExpression,Cyclomatic complexity of the method is 12
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,ProcessJoinInputResult,Cyclomatic complexity of the method is 11
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,AddColumns,Cyclomatic complexity of the method is 10
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,GetSqlPrimitiveType,Cyclomatic complexity of the method is 21
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,IsCompatible,Cyclomatic complexity of the method is 11
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,VisitExpressionEnsureSqlStatement,Cyclomatic complexity of the method is 17
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,SqlSelectStatement,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlSelectStatement.cs,WriteSql,Cyclomatic complexity of the method is 19
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,TypeHelpers,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\TypeHelpers.cs,HasNulledOutFacetValues,Cyclomatic complexity of the method is 12
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,TypeSemantics,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\TypeSemantics.cs,GetDbType,Cyclomatic complexity of the method is 15
Complex Method,System.Data.Entity.SqlServerCompact.SqlGen,ParameterHelpers,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\ParameterHelpers.cs,PopulateParameterFromTypeUsage,Cyclomatic complexity of the method is 15
Complex Method,System.Data.Entity.SqlServerCompact.Legacy,SqlCeMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMigrationSqlGenerator.cs,Generate,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Entity.SqlServerCompact.Legacy,SqlCeMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMigrationSqlGenerator.cs,BuildPropertyType,Cyclomatic complexity of the method is 19
Complex Method,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,CreateSqlCeParameter,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,GetSqlDbType,Cyclomatic complexity of the method is 23
Long Parameter List,System.Data.Entity.SqlServerCompact.Utilities,IEnumerableExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\..\Common\IEnumerableExtensions.cs,Join,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServerCompact.SqlGen,DmlSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\DmlSqlGenerator.cs,GenerateDeleteSql,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServerCompact.SqlGen,DmlSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\DmlSqlGenerator.cs,GenerateInsertSql,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServerCompact.SqlGen,DmlSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\DmlSqlGenerator.cs,HandleIdentity,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,TranslateConstantParameterForLike,The method has 6 parameters.
Long Parameter List,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,AddColumns,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,AddColumn,The method has 6 parameters.
Long Parameter List,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,CreateNewSelectStatement,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,CreateSqlCeParameter,The method has 5 parameters.
Long Identifier,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,InitializeDateAddFunctionNameToDatepartDictionary,The length of the parameter dateAddFunctionNameToDatepartDictionary is 39.
Long Identifier,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,InitializeDateDiffFunctionNameToDatepartDictionary,The length of the parameter dateDiffFunctionNameToDatepartDictionary is 40.
Long Identifier,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,InitializeFunctionNameToOperatorDictionary,The length of the parameter functionNameToOperatorDictionary is 32.
Long Identifier,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,CastReturnTypeToGivenType,The length of the parameter functionsRequiringReturnTypeCast is 32.
Long Statement,System.Data.Entity.SqlServerCompact.Utilities,DatabaseName,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\..\Common\DatabaseName.cs,Equals,The length of the statement  "	return string.Equals (other._name' _name' StringComparison.Ordinal) && string.Equals (other._schema' _schema' StringComparison.Ordinal); " is 136.
Long Statement,System.Data.Entity.SqlServerCompact,SqlCeMultiCommand,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMultiCommand.cs,ExecuteReader,The length of the statement  "		// index == 1' means there are multiple commands in this SqlCeMultiCommand. Which indicates Server generated keys scenario. " is 123.
Long Statement,System.Data.Entity.SqlServerCompact,SqlCeMultiCommand,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMultiCommand.cs,ExecuteResultSet,The length of the statement  "		// index == 1' means there are multiple commands in this SqlCeMultiCommand. Which indicates Server generated keys scenario. " is 123.
Long Statement,System.Data.Entity.SqlServerCompact,SqlCeMultiCommand,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMultiCommand.cs,ExecuteNonQuery,The length of the statement  "		// index == 1' means there are multiple commands in this SqlCeMultiCommand. Which indicates Server generated keys scenario. " is 123.
Long Statement,System.Data.Entity.SqlServerCompact,SqlCeMultiCommand,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMultiCommand.cs,ExecuteScalar,The length of the statement  "		// index == 1' means there are multiple commands in this SqlCeMultiCommand. Which indicates Server generated keys scenario. " is 123.
Long Statement,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetDbInformation,The length of the statement  "	throw ADP1.ProviderIncompatible (EntityRes.GetString (EntityRes.ProviderReturnedNullForGetDbInformation' informationType)); " is 123.
Long Statement,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetEdmType,The length of the statement  "	Debug.Assert (newPrimitiveTypeKind == PrimitiveTypeKind.String || newPrimitiveTypeKind == PrimitiveTypeKind.Binary' "at this point only string and binary types should be present"); " is 180.
Long Statement,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetStoreType,The length of the statement  "		var isFixedLength = null != facets [ProviderManifest.FixedLengthFacetName].Value && (bool)facets [ProviderManifest.FixedLengthFacetName].Value; " is 143.
Long Statement,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetStoreType,The length of the statement  "			tu = TypeUsage.CreateBinaryTypeUsage (StoreTypeNameToStorePrimitiveType ["binary"]' true' (isMaxLength ? binaryMaxSize : maxLength)); " is 133.
Long Statement,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetStoreType,The length of the statement  "		var isFixedLength = null != facets [ProviderManifest.FixedLengthFacetName].Value && (bool)facets [ProviderManifest.FixedLengthFacetName].Value; " is 143.
Long Statement,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetStoreType,The length of the statement  "			tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["nchar"]' true' true' (isMaxLength ? nvarcharMaxSize : maxLength)); " is 140.
Long Statement,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetStoreType,The length of the statement  "		throw ADP1.NotSupported (EntityRes.GetString (EntityRes.NoStoreTypeForEdmType' TypeHelpers.GetIdentity (edmType)' primitiveType.PrimitiveTypeKind)); " is 148.
Long Statement,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,EscapeLikeText,The length of the statement  "	if (!(text.Contains ("%") || text.Contains ("_") || text.Contains ("[") || text.Contains ("^") || alwaysEscapeEscapeChar && text.Contains (LikeEscapeCharToString))) { " is 166.
Long Statement,System.Data.Entity.SqlServerCompact,SqlCeTableExistenceChecker,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeTableExistenceChecker.cs,AnyModelTableExistsInDatabase,The length of the statement  "				return (int)DbInterception.Dispatch.Command.Scalar (command' new DbCommandInterceptionContext (context.InterceptionContext)) > 0; " is 129.
Long Statement,System.Data.Entity.SqlServerCompact,SqlCeTableExistenceChecker,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeTableExistenceChecker.cs,AnyModelTableExistsInDatabase,The length of the statement  "			if (shouldClose && DbInterception.Dispatch.Connection.GetState (connection' context.InterceptionContext) != ConnectionState.Closed) { " is 133.
Long Statement,System.Data.Entity.SqlServerCompact,SqlDdlBuilder,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlDdlBuilder.cs,AppendType,The length of the statement  "	if (type.EdmType.Name == "binary" && 8 == (int)type.Facets ["MaxLength"].Value && column.TypeUsage.Facets.TryGetValue ("StoreGeneratedPattern"' false' out storeGenFacet) && storeGenFacet.Value != null && StoreGeneratedPattern.Computed == (StoreGeneratedPattern)storeGenFacet.Value) { " is 283.
Long Statement,System.Data.Entity.SqlServerCompact,SqlDdlBuilder,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlDdlBuilder.cs,AppendType,The length of the statement  "	if (!isTimestamp && column.TypeUsage.Facets.TryGetValue ("StoreGeneratedPattern"' false' out storeGenFacet) && storeGenFacet.Value != null) { " is 141.
Long Statement,System.Data.Entity.SqlServerCompact,SqlDdlBuilder,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlDdlBuilder.cs,AppendType,The length of the statement  "				//throw EntityUtil.NotSupported(Strings.SqlProvider_DdlGeneration_StoreGeneratedPatternNotSupported(Enum.GetName(typeof(StoreGeneratedPattern)' storeGenPattern))); " is 163.
Long Statement,System.Data.Entity.SqlServerCompact,SqlDdlBuilder,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlDdlBuilder.cs,IsServerGeneratedGuid,The length of the statement  "	return (column.TypeUsage.EdmType.Name == "uniqueidentifier" && column.TypeUsage.Facets.TryGetValue ("StoreGeneratedPattern"' false' out storeGenFacet) && storeGenFacet.Value != null && (StoreGeneratedPattern)storeGenFacet.Value == StoreGeneratedPattern.Identity); " is 263.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,CommonUtils,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\CommonUtils.cs,ReplaceDataDirectory,The length of the statement  "	if (!string.IsNullOrEmpty (inputString) && inputString.StartsWith (DataDirectoryMacro' StringComparison.OrdinalIgnoreCase)) { " is 125.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,DmlSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\DmlSqlGenerator.cs,GenerateInsertSql,The length of the statement  "	var translator = new ExpressionTranslator (commandText' tree' null != tree.Returning' isLocalProvider' createParameters); " is 121.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,VisitConstant,The length of the statement  "			result.Append (EscapeSingleQuote (((DateTime)e.Value).ToString ("yyyy-MM-dd HH:mm:ss.fff"' CultureInfo.InvariantCulture)' false/* IsUnicode */)); " is 145.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,VisitConstant,The length of the statement  "			result.Append (EscapeSingleQuote (((DateTimeOffset)e.Value).UtcDateTime.ToString ("yyyy-MM-ddTHH:mm:ss.fff"' CultureInfo.InvariantCulture)' false/* IsUnicode */)); " is 163.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,GetTargetTSql,The length of the statement  "	if (entitySetBase.MetadataProperties.TryGetValue ("DefiningQuery"' false' out definingQuery) && null != definingQuery.Value) { " is 126.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,GetTargetTSql,The length of the statement  "		if (entitySetBase.MetadataProperties.TryGetValue ("Table"' false' out table) && !string.IsNullOrEmpty ((string)table.Value)) { " is 126.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,Visit,The length of the statement  "	var needsInnerQuery = GroupByAggregatesNeedInnerQuery (e.Aggregates' e.Input.GroupVariableName) || GroupByKeysNeedInnerQuery (e.Keys' e.Input.VariableName); " is 156.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,Visit,The length of the statement  "	Debug.Assert (e.Limit is DbConstantExpression || e.Limit is DbParameterReferenceExpression' "DbLimitExpression.Limit is of invalid expression type"); " is 149.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,Visit,The length of the statement  "			return VisitBinaryExpression (" <> "' DbExpressionKind.NotEquals' comparisonExpression.Left' comparisonExpression.Right); " is 121.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,VisitJoinExpression,The length of the statement  "		var needsJoinContext = (input.Expression.ExpressionKind == DbExpressionKind.Scan) || (isLeftMostInput && (IsJoinExpression (input.Expression) || IsApplyExpression (input.Expression))); " is 184.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleFunctionArgumentsDefault,The length of the statement  "	if (e.Function.MetadataProperties.TryGetValue ("NiladicFunctionAttribute"' false' out niladicFunctionAttribute) && null != niladicFunctionAttribute.Value) { " is 156.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleFunctionArgumentsDefault,The length of the statement  "	Debug.Assert (!(isNiladicFunction && (0 < e.Arguments.Count))' "function attributed as NiladicFunction='true' in the provider manifest cannot have arguments"); " is 159.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleSpecialFunction,The length of the statement  "	Debug.Assert (handlers.ContainsKey (e.Function.Name)' "Special handling should be called only for functions in the list of special functions"); " is 143.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleSpecialFunctionToOperator,The length of the statement  "	Debug.Assert (_functionNameToOperatorDictionary.ContainsKey (e.Function.Name)' "The function can not be mapped to an operator"); " is 128.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleDatepartDateFunction,The length of the statement  "		throw ADP1.InvalidOperation (EntityRes.GetString (EntityRes.InvalidDatePartArgumentExpression' e.Function.NamespaceName' e.Function.Name)); " is 139.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleDatepartDateFunction,The length of the statement  "		throw ADP1.InvalidOperation (EntityRes.GetString (EntityRes.InvalidDatePartArgumentExpression' e.Function.NamespaceName' e.Function.Name)); " is 139.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleDatepartDateFunction,The length of the statement  "		throw ADP1.InvalidOperation (EntityRes.GetString (EntityRes.InvalidDatePartArgumentValue' datepart' e.Function.NamespaceName' e.Function.Name)); " is 144.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,TranslateConstantParameterForLike,The length of the statement  "	searchParamBuilder.Append (SqlCeProviderManifest.EscapeLikeText (constSearchParamExpression.Value as string' false' out escapingOccurred)); " is 139.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionContains,The length of the statement  "	if ((constSearchParamExpression != null) && (string.IsNullOrEmpty (constSearchParamExpression.Value as string) == false)) { " is 123.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionStartsWith,The length of the statement  "	if ((constSearchParamExpression != null) && (string.IsNullOrEmpty (constSearchParamExpression.Value as string) == false)) { " is 123.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionEndsWith,The length of the statement  "	if ((constSearchParamExpression != null) && (string.IsNullOrEmpty (constSearchParamExpression.Value as string) == false)) { " is 123.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionEndsWith,The length of the statement  "	if ((constSearchParamExpression != null) && (string.IsNullOrEmpty (constSearchParamExpression.Value as string) == false)) { " is 123.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,WriteFunctionName,The length of the statement  "	if (function.MetadataProperties.TryGetValue ("StoreFunctionNameAttribute"' false' out storeFunctionNameAttribute) && null != storeFunctionNameAttribute.Value) { " is 160.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,IsJoinExpression,The length of the statement  "	return (DbExpressionKind.CrossJoin == e.ExpressionKind || DbExpressionKind.FullOuterJoin == e.ExpressionKind || DbExpressionKind.InnerJoin == e.ExpressionKind || DbExpressionKind.LeftOuterJoin == e.ExpressionKind); " is 214.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,IsCompatible,The length of the statement  "		return result.Select.IsEmpty && result.Where.IsEmpty && result.GroupBy.IsEmpty && result.Top == null && result.Skip == null; " is 124.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,IsCompatible,The length of the statement  "		return result.Select.IsEmpty && result.GroupBy.IsEmpty && result.OrderBy.IsEmpty && result.Top == null && result.Skip == null; " is 126.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,IsCompatible,The length of the statement  "		return result.Select.IsEmpty && result.GroupBy.IsEmpty // SQLBUDT #513640 - If distinct is specified' the projection may affect " is 127.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,IsCompatible,The length of the statement  "		return result.Select.IsEmpty && result.GroupBy.IsEmpty && result.OrderBy.IsEmpty // SQLBUDT #513640 - A Project may be on the top of the Sort' and if so' it would need " is 167.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,TransformIntersectOrExcept,The length of the statement  "	var newRightSelectStatement = CreateNewSelectStatement (inputRightStatement' "b"' rightCollectionType.TypeUsage' out rightSymbol); " is 130.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,TransformIntersectOrExcept,The length of the statement  "	var newSelectStatement = CreateNewSelectStatement (inputLeftStatement' "a"' leftCollectionType.TypeUsage' out leftSymbol); " is 122.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,TransformIntersectOrExcept,The length of the statement  "	Debug.Assert (leftColumnSymbols.Count == rightColumnSymbols.Count' "The left and the right input to INTERSECT or EXCEPT have a different number of properties"); " is 160.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,TypeHelpers,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\TypeHelpers.cs,TryGetBooleanFacetValue,The length of the statement  "	if (type.Facets.TryGetValue (facetName' false' out boolFacet) && boolFacet.Value != null && !Helper.IsUnboundedFacetValue (boolFacet)) { " is 136.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,TypeHelpers,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\TypeHelpers.cs,TryGetIntFacetValue,The length of the statement  "	if (type.Facets.TryGetValue (facetName' false' out intFacet) && intFacet.Value != null && !Helper.IsUnboundedFacetValue (intFacet)) { " is 133.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,TypeHelpers,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\TypeHelpers.cs,TryGetByteFacetValue,The length of the statement  "	if (type.Facets.TryGetValue (facetName' false' out byteFacet) && byteFacet.Value != null && !Helper.IsUnboundedFacetValue (byteFacet)) { " is 136.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,TypeHelpers,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\TypeHelpers.cs,TryGetIsFixedLength,The length of the statement  "	if (!TypeSemantics.IsPrimitiveType (type' PrimitiveTypeKind.String) && !TypeSemantics.IsPrimitiveType (type' PrimitiveTypeKind.Binary)) { " is 137.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,TypeHelpers,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\TypeHelpers.cs,TryGetMaxLength,The length of the statement  "	if (!TypeSemantics.IsPrimitiveType (type' PrimitiveTypeKind.String) && !TypeSemantics.IsPrimitiveType (type' PrimitiveTypeKind.Binary)) { " is 137.
Long Statement,System.Data.Entity.SqlServerCompact.SqlGen,ParameterHelpers,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\ParameterHelpers.cs,SetParameterSize,The length of the statement  "	if (type.Facets.TryGetValue (ProviderManifest.MaxLengthFacetName' true' out maxLengthFacet) && maxLengthFacet.Value != null) { " is 126.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMigrationSqlGenerator.cs,CreateConnection,The length of the statement  "	return DbConfiguration.DependencyResolver.GetService<DbProviderFactory> (SqlCeProviderManifest.ProviderInvariantName).CreateConnection (); " is 138.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMigrationSqlGenerator.cs,Generate,The length of the statement  "		if ((column.IsNullable != null) && !column.IsNullable.Value && (column.DefaultValue == null) && (string.IsNullOrWhiteSpace (column.DefaultValueSql)) && !column.IsIdentity && !column.IsTimestamp && !column.StoreType.EqualsIgnoreCase ("rowversion") && !column.StoreType.EqualsIgnoreCase ("timestamp")) { " is 301.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMigrationSqlGenerator.cs,Generate,The length of the statement  "				writer.Write (string.Join (Environment.NewLine' DmlSqlGenerator.GenerateInsertSql ((DbInsertCommandTree)commandTree' out _' isLocalProvider: true' upperCaseKeywords: true' createParameters: false))); " is 199.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMigrationSqlGenerator.cs,Generate,The length of the statement  "				writer.Write (string.Join (Environment.NewLine' DmlSqlGenerator.GenerateDeleteSql ((DbDeleteCommandTree)commandTree' out _' isLocalProvider: true' upperCaseKeywords: true' createParameters: false))); " is 199.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMigrationSqlGenerator.cs,BuildPropertyType,The length of the statement  "		storeTypeName += "(" + (propertyModel.Precision ?? (byte)typeUsage.Facets [DbProviderManifest.PrecisionFacetName].Value) + "' " + (propertyModel.Scale ?? (byte)typeUsage.Facets [DbProviderManifest.ScaleFacetName].Value) + ")"; " is 226.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMigrationSqlGenerator.cs,BuildPropertyType,The length of the statement  "		storeTypeName += "(" + (propertyModel.Precision ?? (byte)typeUsage.Facets [DbProviderManifest.PrecisionFacetName].Value) + ")"; " is 127.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMigrationSqlGenerator.cs,BuildPropertyType,The length of the statement  "		storeTypeName += "(" + (propertyModel.MaxLength ?? (int)typeUsage.Facets [DbProviderManifest.MaxLengthFacetName].Value) + ")"; " is 126.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMigrationSqlGenerator.cs,StatementBatch,The length of the statement  "	var batches = Regex.Split (sqlBatch' String.Format (CultureInfo.InvariantCulture' @"^\s*({0}[ \t]+[0-9]+|{0})(?:\s+|$)"' BatchTerminator)' RegexOptions.IgnoreCase | RegexOptions.Multiline); " is 189.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMigrationSqlGenerator.cs,StatementBatch,The length of the statement  "		if (batches [i].StartsWith (BatchTerminator' StringComparison.OrdinalIgnoreCase) || (i == batches.Length - 1 && string.IsNullOrWhiteSpace (batches [i]))) { " is 155.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMigrationSqlGenerator.cs,StatementBatch,The length of the statement  "		if (batches.Length > i + 1 && batches [i + 1].StartsWith (BatchTerminator' StringComparison.OrdinalIgnoreCase) && !batches [i + 1].EqualsIgnoreCase (BatchTerminator)) { " is 168.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,DbDatabaseExists,The length of the statement  "		return CommonUtils.DatabaseExists (DbInterception.Dispatch.Connection.GetDataSource (connection' new DbInterceptionContext ())); " is 128.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,DbDatabaseExists,The length of the statement  "		var engine = RemoteProviderHelper.GetRemoteSqlCeEngine (DbInterception.Dispatch.Connection.GetConnectionString (connection' new DbInterceptionContext ())' out rdpType); " is 168.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,DbDeleteDatabase,The length of the statement  "		CommonUtils.DeleteDatabase (DbInterception.Dispatch.Connection.GetDataSource (connection' new DbInterceptionContext ())); " is 121.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,DbDeleteDatabase,The length of the statement  "			var engine = RemoteProviderHelper.GetRemoteSqlCeEngine (DbInterception.Dispatch.Connection.GetConnectionString (connection' new DbInterceptionContext ())' out rdpType); " is 168.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,DbCreateDatabase,The length of the statement  "		var engine = new SqlCeEngine (DbInterception.Dispatch.Connection.GetConnectionString (connection' new DbInterceptionContext ())); " is 129.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,DbCreateDatabase,The length of the statement  "			var engine = RemoteProviderHelper.GetRemoteSqlCeEngine (DbInterception.Dispatch.Connection.GetConnectionString (connection' new DbInterceptionContext ())' out rdpType); " is 168.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,DbCreateDatabase,The length of the statement  "		transaction = DbInterception.Dispatch.Connection.BeginTransaction (connection' new BeginTransactionInterceptionContext ()); " is 123.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,ValidateConnection,The length of the statement  "	var isValid = _isLocalProvider ? connection is SqlCeConnection : RemoteProviderHelper.CompareObjectEqualsToType (connection' RemoteProvider.SqlCeConnection); " is 157.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,CreateCommand,The length of the statement  "	var command = _isLocalProvider ? new SqlCeMultiCommand () : (DbCommand)RemoteProviderHelper.CreateRemoteProviderType (RemoteProvider.SqlCeCommand); " is 147.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,CreateCommand,The length of the statement  "		parameter = CreateSqlCeParameter (queryParameter.Key' queryParameter.Value' DBNull.Value' ignoreMaxLengthFacet' _isLocalProvider); " is 130.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,CreateCommand,The length of the statement  "		if (!(commandTree is DbDeleteCommandTree || commandTree is DbInsertCommandTree || commandTree is DbUpdateCommandTree)) { " is 120.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,CreateSqlCeParameter,The length of the statement  "	var result = isLocalProvider ? new SqlCeParameter () : (DbParameter)RemoteProviderHelper.CreateRemoteProviderType (RemoteProvider.SqlCeParameter); " is 146.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,CreateSqlCeParameter,The length of the statement  "	if ((null != size) || (!TypeSemantics.IsPrimitiveType (type' PrimitiveTypeKind.String) && !TypeSemantics.IsPrimitiveType (type' PrimitiveTypeKind.Binary))) { " is 157.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,GetStringDbType,The length of the statement  "	Debug.Assert (type.EdmType.BuiltInTypeKind == BuiltInTypeKind.PrimitiveType && PrimitiveTypeKind.String == ((PrimitiveType)type.EdmType).PrimitiveTypeKind' "only valid for string type"); " is 186.
Long Statement,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,GetBinaryDbType,The length of the statement  "	Debug.Assert (type.EdmType.BuiltInTypeKind == BuiltInTypeKind.PrimitiveType && PrimitiveTypeKind.Binary == ((PrimitiveType)type.EdmType).PrimitiveTypeKind' "only valid for binary type"); " is 186.
Complex Conditional,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,EscapeLikeText,The conditional expression  "!(text.Contains ("%") || text.Contains ("_") || text.Contains ("[") || text.Contains ("^") || alwaysEscapeEscapeChar && text.Contains (LikeEscapeCharToString))"  is complex.
Complex Conditional,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,EscapeLikeText,The conditional expression  "c == '%' || c == '_' || c == '[' || c == '^' || c == LikeEscapeChar"  is complex.
Complex Conditional,System.Data.Entity.SqlServerCompact,SqlDdlBuilder,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlDdlBuilder.cs,AppendType,The conditional expression  "type.EdmType.Name == "binary" && 8 == (int)type.Facets ["MaxLength"].Value && column.TypeUsage.Facets.TryGetValue ("StoreGeneratedPattern"' false' out storeGenFacet) && storeGenFacet.Value != null && StoreGeneratedPattern.Computed == (StoreGeneratedPattern)storeGenFacet.Value"  is complex.
Complex Conditional,System.Data.Entity.SqlServerCompact.SqlGen,SqlSelectStatement,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlSelectStatement.cs,WriteSql,The conditional expression  "(null != orderBy) && !OrderBy.IsEmpty && (IsTopMost || Top != null || Skip != null)"  is complex.
Complex Conditional,System.Data.Entity.SqlServerCompact.Legacy,SqlCeMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMigrationSqlGenerator.cs,Generate,The conditional expression  "(column.IsNullable != null) && !column.IsNullable.Value && (column.DefaultValue == null) && (string.IsNullOrWhiteSpace (column.DefaultValueSql)) && !column.IsIdentity && !column.IsTimestamp && !column.StoreType.EqualsIgnoreCase ("rowversion") && !column.StoreType.EqualsIgnoreCase ("timestamp")"  is complex.
Empty Catch Block,System.Data.Entity.SqlServerCompact,RemoteProviderHelper,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\RemoteProviderHelper.cs,GetRemoteProviderType,The method has an empty catch block.
Empty Catch Block,System.Data.Entity.SqlServerCompact,RemoteProviderHelper,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\RemoteProviderHelper.cs,GetRemoteProviderType,The method has an empty catch block.
Empty Catch Block,System.Data.Entity.SqlServerCompact,RemoteProviderHelper,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\RemoteProviderHelper.cs,GetRemoteProviderType,The method has an empty catch block.
Magic Number,System.Data.Entity.SqlServerCompact.Utilities,DatabaseName,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\..\Common\DatabaseName.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (_name.GetHashCode () * 397) ^ (_schema != null ? _schema.GetHashCode () : 0);  }  
Magic Number,System.Data.Entity.SqlServerCompact.Utilities,DatabaseName,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\..\Common\DatabaseName.cs,GetHashCode,The following statement contains a magic number: return (_name.GetHashCode () * 397) ^ (_schema != null ? _schema.GetHashCode () : 0);  
Magic Number,System.Data.Entity.SqlServerCompact.Utilities,StringExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\..\Common\StringExtensions.cs,MigrationName,The following statement contains a magic number: return migrationId.Substring (16);  
Magic Number,System.Data.Entity.SqlServerCompact.Utilities,StringExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\..\Common\StringExtensions.cs,ToAutomaticMigrationId,The following statement contains a magic number: return timeStampInt + migrationId.Substring (15) + "_" + Strings.AutomaticMigration;  
Magic Number,System.Data.Entity.SqlServerCompact,SqlCeMultiCommand,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMultiCommand.cs,ExecuteReader,The following statement contains a magic number: Debug.Assert (CommandTexts.Length == 1 || CommandTexts.Length == 2);  
Magic Number,System.Data.Entity.SqlServerCompact,SqlCeMultiCommand,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMultiCommand.cs,ExecuteResultSet,The following statement contains a magic number: Debug.Assert (CommandTexts.Length == 1 || CommandTexts.Length == 2);  
Magic Number,System.Data.Entity.SqlServerCompact,SqlCeMultiCommand,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMultiCommand.cs,ExecuteNonQuery,The following statement contains a magic number: Debug.Assert (CommandTexts.Length == 1 || CommandTexts.Length == 2);  
Magic Number,System.Data.Entity.SqlServerCompact,SqlCeMultiCommand,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMultiCommand.cs,ExecuteScalar,The following statement contains a magic number: Debug.Assert (CommandTexts.Length == 1 || CommandTexts.Length == 2);  
Magic Number,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName) {  // for some types we just go with simple type usage with no facets  case "tinyint":  case "smallint":  case "bigint":  case "bit":  case "uniqueidentifier":  case "int":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "nvarchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !TypeHelpers.TryGetMaxLength (storeType' out maxLength);  	isFixedLen = false;  	break;  case "nchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !TypeHelpers.TryGetMaxLength (storeType' out maxLength);  	isFixedLen = true;  	break;  case "ntext":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = true;  	isFixedLen = false;  	break;  case "binary":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = !TypeHelpers.TryGetMaxLength (storeType' out maxLength);  	isFixedLen = true;  	break;  case "varbinary":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = !TypeHelpers.TryGetMaxLength (storeType' out maxLength);  	isFixedLen = false;  	break;  case "image":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = true;  	isFixedLen = false;  	break;  case "timestamp":  case "rowversion":  	return TypeUsage.CreateBinaryTypeUsage (edmPrimitiveType' true' 8);  case "float":  case "real":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "decimal":  case "numeric": {  	byte precision;  	byte scale;  	if (TypeHelpers.TryGetPrecision (storeType' out precision) && TypeHelpers.TryGetScale (storeType' out scale)) {  		return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' precision' scale);  	}  	else {  		return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType);  	}  }  case "money":  	return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 19' 4);  case "datetime":  	return TypeUsage.CreateDateTimeTypeUsage (edmPrimitiveType' null);  default:  	throw ADP1.NotSupported (EntityRes.GetString (EntityRes.ProviderDoesNotSupportType' storeTypeName));  }  
Magic Number,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName) {  // for some types we just go with simple type usage with no facets  case "tinyint":  case "smallint":  case "bigint":  case "bit":  case "uniqueidentifier":  case "int":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "nvarchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !TypeHelpers.TryGetMaxLength (storeType' out maxLength);  	isFixedLen = false;  	break;  case "nchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !TypeHelpers.TryGetMaxLength (storeType' out maxLength);  	isFixedLen = true;  	break;  case "ntext":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = true;  	isFixedLen = false;  	break;  case "binary":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = !TypeHelpers.TryGetMaxLength (storeType' out maxLength);  	isFixedLen = true;  	break;  case "varbinary":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = !TypeHelpers.TryGetMaxLength (storeType' out maxLength);  	isFixedLen = false;  	break;  case "image":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = true;  	isFixedLen = false;  	break;  case "timestamp":  case "rowversion":  	return TypeUsage.CreateBinaryTypeUsage (edmPrimitiveType' true' 8);  case "float":  case "real":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "decimal":  case "numeric": {  	byte precision;  	byte scale;  	if (TypeHelpers.TryGetPrecision (storeType' out precision) && TypeHelpers.TryGetScale (storeType' out scale)) {  		return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' precision' scale);  	}  	else {  		return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType);  	}  }  case "money":  	return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 19' 4);  case "datetime":  	return TypeUsage.CreateDateTimeTypeUsage (edmPrimitiveType' null);  default:  	throw ADP1.NotSupported (EntityRes.GetString (EntityRes.ProviderDoesNotSupportType' storeTypeName));  }  
Magic Number,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName) {  // for some types we just go with simple type usage with no facets  case "tinyint":  case "smallint":  case "bigint":  case "bit":  case "uniqueidentifier":  case "int":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "nvarchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !TypeHelpers.TryGetMaxLength (storeType' out maxLength);  	isFixedLen = false;  	break;  case "nchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !TypeHelpers.TryGetMaxLength (storeType' out maxLength);  	isFixedLen = true;  	break;  case "ntext":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = true;  	isFixedLen = false;  	break;  case "binary":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = !TypeHelpers.TryGetMaxLength (storeType' out maxLength);  	isFixedLen = true;  	break;  case "varbinary":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = !TypeHelpers.TryGetMaxLength (storeType' out maxLength);  	isFixedLen = false;  	break;  case "image":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = true;  	isFixedLen = false;  	break;  case "timestamp":  case "rowversion":  	return TypeUsage.CreateBinaryTypeUsage (edmPrimitiveType' true' 8);  case "float":  case "real":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "decimal":  case "numeric": {  	byte precision;  	byte scale;  	if (TypeHelpers.TryGetPrecision (storeType' out precision) && TypeHelpers.TryGetScale (storeType' out scale)) {  		return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' precision' scale);  	}  	else {  		return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType);  	}  }  case "money":  	return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 19' 4);  case "datetime":  	return TypeUsage.CreateDateTimeTypeUsage (edmPrimitiveType' null);  default:  	throw ADP1.NotSupported (EntityRes.GetString (EntityRes.ProviderDoesNotSupportType' storeTypeName));  }  
Magic Number,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetEdmType,The following statement contains a magic number: return TypeUsage.CreateBinaryTypeUsage (edmPrimitiveType' true' 8);  
Magic Number,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetEdmType,The following statement contains a magic number: return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 19' 4);  
Magic Number,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetEdmType,The following statement contains a magic number: return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 19' 4);  
Magic Number,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetStoreType,The following statement contains a magic number: switch (primitiveType.PrimitiveTypeKind) {  case PrimitiveTypeKind.Boolean:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["bit"]);  case PrimitiveTypeKind.Byte:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["tinyint"]);  case PrimitiveTypeKind.Int16:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["smallint"]);  case PrimitiveTypeKind.Int32:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["int"]);  case PrimitiveTypeKind.Int64:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["bigint"]);  case PrimitiveTypeKind.Guid:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["uniqueidentifier"]);  case PrimitiveTypeKind.Double:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["float"]);  case PrimitiveTypeKind.Single:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["real"]);  case PrimitiveTypeKind.Decimal:// decimal' numeric' money   {  	byte precision;  	if (!TypeHelpers.TryGetPrecision (edmType' out precision)) {  		precision = 18;  	}  	byte scale;  	if (!TypeHelpers.TryGetScale (edmType' out scale)) {  		scale = 0;  	}  	var tu = TypeUsage.CreateDecimalTypeUsage (StoreTypeNameToStorePrimitiveType ["decimal"]' precision' scale);  	return tu;  }  case PrimitiveTypeKind.Binary:// binary' varbinary' image' timestamp' rowversion   {  	var isFixedLength = null != facets [ProviderManifest.FixedLengthFacetName].Value && (bool)facets [ProviderManifest.FixedLengthFacetName].Value;  	var f = facets [ProviderManifest.MaxLengthFacetName];  	var isMaxLength = Helper.IsUnboundedFacetValue (f) || null == f.Value || (int)f.Value > binaryMaxSize;  	var maxLength = !isMaxLength ? (int)f.Value : Int32.MinValue;  	TypeUsage tu;  	if (isFixedLength) {  		tu = TypeUsage.CreateBinaryTypeUsage (StoreTypeNameToStorePrimitiveType ["binary"]' true' (isMaxLength ? binaryMaxSize : maxLength));  	}  	else {  		if (null == f.Value) {  			tu = TypeUsage.CreateBinaryTypeUsage (StoreTypeNameToStorePrimitiveType ["varbinary"]' false' binaryMaxSize);  		}  		else if (Helper.IsUnboundedFacetValue (f) || edmType.EdmType.Name == "image") {  			tu = TypeUsage.CreateBinaryTypeUsage (StoreTypeNameToStorePrimitiveType ["image"]' false);  		}  		else if ((int)f.Value > binaryMaxSize) {  			throw ADP1.ColumnGreaterThanMaxLengthNotSupported (edmType.EdmType.Name' binaryMaxSize);  		}  		else {  			tu = TypeUsage.CreateBinaryTypeUsage (StoreTypeNameToStorePrimitiveType ["varbinary"]' false' maxLength);  		}  	}  	return tu;  }  case PrimitiveTypeKind.String://char' nchar' varchar' nvarchar' ntext' text' xml   {  	var isFixedLength = null != facets [ProviderManifest.FixedLengthFacetName].Value && (bool)facets [ProviderManifest.FixedLengthFacetName].Value;  	var f = facets [ProviderManifest.MaxLengthFacetName];  	// maxlen is true if facet value is unbounded' the value is bigger than the limited string sizes *or* the facet  	// value is null. this is needed since functions still have maxlength facet value as null  	var isMaxLength = Helper.IsUnboundedFacetValue (f) || null == f.Value || (int)f.Value > (nvarcharMaxSize);  	var maxLength = !isMaxLength ? (int)f.Value : Int32.MinValue;  	TypeUsage tu;  	if (isFixedLength) {  		tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["nchar"]' true' true' (isMaxLength ? nvarcharMaxSize : maxLength));  	}  	else {  		if (null == f.Value) {  			// if it is unknown' fallback to nvarchar[4000] instead of ntext since it has limited store semantics  			tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["nvarchar"]' true' false' nvarcharMaxSize);  		}  		else if (Helper.IsUnboundedFacetValue (f) || edmType.EdmType.Name == "ntext") {  			tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["ntext"]' true' false);  		}  		else if ((int)f.Value > nvarcharMaxSize) {  			throw ADP1.ColumnGreaterThanMaxLengthNotSupported (edmType.EdmType.Name' nvarcharMaxSize);  		}  		else {  			tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["nvarchar"]' true' false' maxLength);  		}  	}  	return tu;  }  case PrimitiveTypeKind.DateTime:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["datetime"]);  // <<HELM OPS>> Map DateTimeOffset .NET type to NVARCHAR(40) in SQL CE b/c DATETIMEOFFSET is not supported  case PrimitiveTypeKind.DateTimeOffset:  	return TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["nvarchar"]' true' false' 40);  default:  	throw ADP1.NotSupported (EntityRes.GetString (EntityRes.NoStoreTypeForEdmType' TypeHelpers.GetIdentity (edmType)' primitiveType.PrimitiveTypeKind));  }  
Magic Number,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetStoreType,The following statement contains a magic number: switch (primitiveType.PrimitiveTypeKind) {  case PrimitiveTypeKind.Boolean:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["bit"]);  case PrimitiveTypeKind.Byte:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["tinyint"]);  case PrimitiveTypeKind.Int16:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["smallint"]);  case PrimitiveTypeKind.Int32:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["int"]);  case PrimitiveTypeKind.Int64:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["bigint"]);  case PrimitiveTypeKind.Guid:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["uniqueidentifier"]);  case PrimitiveTypeKind.Double:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["float"]);  case PrimitiveTypeKind.Single:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["real"]);  case PrimitiveTypeKind.Decimal:// decimal' numeric' money   {  	byte precision;  	if (!TypeHelpers.TryGetPrecision (edmType' out precision)) {  		precision = 18;  	}  	byte scale;  	if (!TypeHelpers.TryGetScale (edmType' out scale)) {  		scale = 0;  	}  	var tu = TypeUsage.CreateDecimalTypeUsage (StoreTypeNameToStorePrimitiveType ["decimal"]' precision' scale);  	return tu;  }  case PrimitiveTypeKind.Binary:// binary' varbinary' image' timestamp' rowversion   {  	var isFixedLength = null != facets [ProviderManifest.FixedLengthFacetName].Value && (bool)facets [ProviderManifest.FixedLengthFacetName].Value;  	var f = facets [ProviderManifest.MaxLengthFacetName];  	var isMaxLength = Helper.IsUnboundedFacetValue (f) || null == f.Value || (int)f.Value > binaryMaxSize;  	var maxLength = !isMaxLength ? (int)f.Value : Int32.MinValue;  	TypeUsage tu;  	if (isFixedLength) {  		tu = TypeUsage.CreateBinaryTypeUsage (StoreTypeNameToStorePrimitiveType ["binary"]' true' (isMaxLength ? binaryMaxSize : maxLength));  	}  	else {  		if (null == f.Value) {  			tu = TypeUsage.CreateBinaryTypeUsage (StoreTypeNameToStorePrimitiveType ["varbinary"]' false' binaryMaxSize);  		}  		else if (Helper.IsUnboundedFacetValue (f) || edmType.EdmType.Name == "image") {  			tu = TypeUsage.CreateBinaryTypeUsage (StoreTypeNameToStorePrimitiveType ["image"]' false);  		}  		else if ((int)f.Value > binaryMaxSize) {  			throw ADP1.ColumnGreaterThanMaxLengthNotSupported (edmType.EdmType.Name' binaryMaxSize);  		}  		else {  			tu = TypeUsage.CreateBinaryTypeUsage (StoreTypeNameToStorePrimitiveType ["varbinary"]' false' maxLength);  		}  	}  	return tu;  }  case PrimitiveTypeKind.String://char' nchar' varchar' nvarchar' ntext' text' xml   {  	var isFixedLength = null != facets [ProviderManifest.FixedLengthFacetName].Value && (bool)facets [ProviderManifest.FixedLengthFacetName].Value;  	var f = facets [ProviderManifest.MaxLengthFacetName];  	// maxlen is true if facet value is unbounded' the value is bigger than the limited string sizes *or* the facet  	// value is null. this is needed since functions still have maxlength facet value as null  	var isMaxLength = Helper.IsUnboundedFacetValue (f) || null == f.Value || (int)f.Value > (nvarcharMaxSize);  	var maxLength = !isMaxLength ? (int)f.Value : Int32.MinValue;  	TypeUsage tu;  	if (isFixedLength) {  		tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["nchar"]' true' true' (isMaxLength ? nvarcharMaxSize : maxLength));  	}  	else {  		if (null == f.Value) {  			// if it is unknown' fallback to nvarchar[4000] instead of ntext since it has limited store semantics  			tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["nvarchar"]' true' false' nvarcharMaxSize);  		}  		else if (Helper.IsUnboundedFacetValue (f) || edmType.EdmType.Name == "ntext") {  			tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["ntext"]' true' false);  		}  		else if ((int)f.Value > nvarcharMaxSize) {  			throw ADP1.ColumnGreaterThanMaxLengthNotSupported (edmType.EdmType.Name' nvarcharMaxSize);  		}  		else {  			tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["nvarchar"]' true' false' maxLength);  		}  	}  	return tu;  }  case PrimitiveTypeKind.DateTime:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["datetime"]);  // <<HELM OPS>> Map DateTimeOffset .NET type to NVARCHAR(40) in SQL CE b/c DATETIMEOFFSET is not supported  case PrimitiveTypeKind.DateTimeOffset:  	return TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["nvarchar"]' true' false' 40);  default:  	throw ADP1.NotSupported (EntityRes.GetString (EntityRes.NoStoreTypeForEdmType' TypeHelpers.GetIdentity (edmType)' primitiveType.PrimitiveTypeKind));  }  
Magic Number,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetStoreType,The following statement contains a magic number: if (!TypeHelpers.TryGetPrecision (edmType' out precision)) {  	precision = 18;  }  
Magic Number,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetStoreType,The following statement contains a magic number: precision = 18;  
Magic Number,System.Data.Entity.SqlServerCompact,SqlCeProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderManifest.cs,GetStoreType,The following statement contains a magic number: return TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["nvarchar"]' true' false' 40);  
Magic Number,System.Data.Entity.SqlServerCompact,SqlDdlBuilder,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlDdlBuilder.cs,AppendType,The following statement contains a magic number: if (type.EdmType.Name == "binary" && 8 == (int)type.Facets ["MaxLength"].Value && column.TypeUsage.Facets.TryGetValue ("StoreGeneratedPattern"' false' out storeGenFacet) && storeGenFacet.Value != null && StoreGeneratedPattern.Computed == (StoreGeneratedPattern)storeGenFacet.Value) {  	isTimestamp = true;  	builder.Append ("rowversion");  }  else {  	var typeName = type.EdmType.Name;  	builder.Append (typeName);  	switch (type.EdmType.Name) {  	case "decimal":  	case "numeric":  		AppendSqlInvariantFormat (builder' "({0}' {1})"' type.Facets ["Precision"].Value' type.Facets ["Scale"].Value);  		break;  	case "binary":  	case "varbinary":  	case "nvarchar":  	case "varchar":  	case "char":  	case "nchar":  		AppendSqlInvariantFormat (builder' "({0})"' type.Facets ["MaxLength"].Value);  		break;  	default:  		break;  	}  }  
Magic Number,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,VisitConstant,The following statement contains a magic number: if (TypeHelpers.TryGetPrimitiveTypeKind (e.ResultType' out typeKind)) {  	switch (typeKind) {  	case PrimitiveTypeKind.Int32:  		// default sql server type for integral values.  		result.Append (e.Value.ToString ());  		break;  	case PrimitiveTypeKind.Binary:  		result.Append (" 0x");  		result.Append (ByteArrayToBinaryString ((Byte[])e.Value));  		result.Append (" ");  		break;  	case PrimitiveTypeKind.Boolean:  		// Bugs 450277' 430294: Need to preserve the boolean type-ness of  		// this value for round-trippability  		WrapWithCastIfNeeded (!isCastOptional' (bool)e.Value ? "1" : "0"' "bit"' result);  		break;  	case PrimitiveTypeKind.Byte:  		WrapWithCastIfNeeded (!isCastOptional' e.Value.ToString ()' "tinyint"' result);  		break;  	case PrimitiveTypeKind.DateTime:  		result.Append ("convert(");  		result.Append ("datetime");  		result.Append ("' ");  		result.Append (EscapeSingleQuote (((DateTime)e.Value).ToString ("yyyy-MM-dd HH:mm:ss.fff"' CultureInfo.InvariantCulture)' false/* IsUnicode */));  		result.Append ("' 121)");  		break;  	case PrimitiveTypeKind.Decimal:  		var strDecimal = ((Decimal)e.Value).ToString (CultureInfo.InvariantCulture);  		// if the decimal value has no decimal part' cast as decimal to preserve type  		// if the number has precision > int64 max precision' it will be handled as decimal by sql server  		// and does not need cast. if precision is lest then 20' then cast using Max(literal precision' sql default precision)  		var needsCast = -1 == strDecimal.IndexOf ('.') && (strDecimal.TrimStart (new[] {  			'-'  		}).Length < 20);  		var precision = Math.Max ((Byte)strDecimal.Length' defaultDecimalPrecision);  		Debug.Assert (precision > 0' "Precision must be greater than zero");  		var decimalType = "decimal(" + precision.ToString (CultureInfo.InvariantCulture) + ")";  		WrapWithCastIfNeeded (needsCast' strDecimal' decimalType' result);  		break;  	case PrimitiveTypeKind.Double:  		WrapWithCastIfNeeded (true' ((Double)e.Value).ToString ("R"' CultureInfo.InvariantCulture)' "float"' result);  		break;  	#if REVISIT_SUPPORT_FOR_GUID_CONSTANTS  	#else  	case PrimitiveTypeKind.Guid:  		WrapWithCastIfNeeded (true' EscapeSingleQuote (e.Value.ToString ()' false/* IsUnicode */)' "uniqueidentifier"' result);  		break;  	#endif  	case PrimitiveTypeKind.Int16:  		WrapWithCastIfNeeded (!isCastOptional' e.Value.ToString ()' "smallint"' result);  		break;  	case PrimitiveTypeKind.Int64:  		WrapWithCastIfNeeded (!isCastOptional' e.Value.ToString ()' "bigint"' result);  		break;  	case PrimitiveTypeKind.Single:  		WrapWithCastIfNeeded (true' ((Single)e.Value).ToString ("R"' CultureInfo.InvariantCulture)' "real"' result);  		break;  	case PrimitiveTypeKind.String:  		bool isUnicode;  		if (!TypeHelpers.TryGetIsUnicode (e.ResultType' out isUnicode)) {  			isUnicode = true;  		}  		result.Append (EscapeSingleQuote (e.Value as string' isUnicode));  		break;  	case PrimitiveTypeKind.Time:  		throw ADP1.NotSupported (EntityRes.GetString (EntityRes.ProviderDoesNotSupportType' "Time"));  	// <<HELM OPS>> DATETIMEOFFSET is not supported in SQL CE' so conver the .NET DateTimeOffset object  	// to a string in UTC time zone so that we can use string compare on dates.  	case PrimitiveTypeKind.DateTimeOffset:  		result.Append (EscapeSingleQuote (((DateTimeOffset)e.Value).UtcDateTime.ToString ("yyyy-MM-ddTHH:mm:ss.fff"' CultureInfo.InvariantCulture)' false/* IsUnicode */));  		break;  	default:  		// all known scalar types should been handled already.  		throw ADP1.NotSupported ();  	}  }  else {  	throw ADP1.NotSupported ();  	//if/when Enum types are supported' then handle appropriately' for now is not a valid type for constants.  	//result.Append(e.Value.ToString());  }  
Magic Number,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,VisitConstant,The following statement contains a magic number: switch (typeKind) {  case PrimitiveTypeKind.Int32:  	// default sql server type for integral values.  	result.Append (e.Value.ToString ());  	break;  case PrimitiveTypeKind.Binary:  	result.Append (" 0x");  	result.Append (ByteArrayToBinaryString ((Byte[])e.Value));  	result.Append (" ");  	break;  case PrimitiveTypeKind.Boolean:  	// Bugs 450277' 430294: Need to preserve the boolean type-ness of  	// this value for round-trippability  	WrapWithCastIfNeeded (!isCastOptional' (bool)e.Value ? "1" : "0"' "bit"' result);  	break;  case PrimitiveTypeKind.Byte:  	WrapWithCastIfNeeded (!isCastOptional' e.Value.ToString ()' "tinyint"' result);  	break;  case PrimitiveTypeKind.DateTime:  	result.Append ("convert(");  	result.Append ("datetime");  	result.Append ("' ");  	result.Append (EscapeSingleQuote (((DateTime)e.Value).ToString ("yyyy-MM-dd HH:mm:ss.fff"' CultureInfo.InvariantCulture)' false/* IsUnicode */));  	result.Append ("' 121)");  	break;  case PrimitiveTypeKind.Decimal:  	var strDecimal = ((Decimal)e.Value).ToString (CultureInfo.InvariantCulture);  	// if the decimal value has no decimal part' cast as decimal to preserve type  	// if the number has precision > int64 max precision' it will be handled as decimal by sql server  	// and does not need cast. if precision is lest then 20' then cast using Max(literal precision' sql default precision)  	var needsCast = -1 == strDecimal.IndexOf ('.') && (strDecimal.TrimStart (new[] {  		'-'  	}).Length < 20);  	var precision = Math.Max ((Byte)strDecimal.Length' defaultDecimalPrecision);  	Debug.Assert (precision > 0' "Precision must be greater than zero");  	var decimalType = "decimal(" + precision.ToString (CultureInfo.InvariantCulture) + ")";  	WrapWithCastIfNeeded (needsCast' strDecimal' decimalType' result);  	break;  case PrimitiveTypeKind.Double:  	WrapWithCastIfNeeded (true' ((Double)e.Value).ToString ("R"' CultureInfo.InvariantCulture)' "float"' result);  	break;  #if REVISIT_SUPPORT_FOR_GUID_CONSTANTS  #else  case PrimitiveTypeKind.Guid:  	WrapWithCastIfNeeded (true' EscapeSingleQuote (e.Value.ToString ()' false/* IsUnicode */)' "uniqueidentifier"' result);  	break;  #endif  case PrimitiveTypeKind.Int16:  	WrapWithCastIfNeeded (!isCastOptional' e.Value.ToString ()' "smallint"' result);  	break;  case PrimitiveTypeKind.Int64:  	WrapWithCastIfNeeded (!isCastOptional' e.Value.ToString ()' "bigint"' result);  	break;  case PrimitiveTypeKind.Single:  	WrapWithCastIfNeeded (true' ((Single)e.Value).ToString ("R"' CultureInfo.InvariantCulture)' "real"' result);  	break;  case PrimitiveTypeKind.String:  	bool isUnicode;  	if (!TypeHelpers.TryGetIsUnicode (e.ResultType' out isUnicode)) {  		isUnicode = true;  	}  	result.Append (EscapeSingleQuote (e.Value as string' isUnicode));  	break;  case PrimitiveTypeKind.Time:  	throw ADP1.NotSupported (EntityRes.GetString (EntityRes.ProviderDoesNotSupportType' "Time"));  // <<HELM OPS>> DATETIMEOFFSET is not supported in SQL CE' so conver the .NET DateTimeOffset object  // to a string in UTC time zone so that we can use string compare on dates.  case PrimitiveTypeKind.DateTimeOffset:  	result.Append (EscapeSingleQuote (((DateTimeOffset)e.Value).UtcDateTime.ToString ("yyyy-MM-ddTHH:mm:ss.fff"' CultureInfo.InvariantCulture)' false/* IsUnicode */));  	break;  default:  	// all known scalar types should been handled already.  	throw ADP1.NotSupported ();  }  
Magic Number,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,GetTargetTSql,The following statement contains a magic number: if (entitySetBase.MetadataProperties.TryGetValue ("DefiningQuery"' false' out definingQuery) && null != definingQuery.Value) {  	targetTSql = "(" + (string)definingQuery.Value + ")";  }  else {  	// construct escaped T-SQL referencing entity set  	var builder = new StringBuilder (50);  	if (entitySetBase.MetadataProperties.TryGetValue ("Table"' false' out table) && !string.IsNullOrEmpty ((string)table.Value)) {  		builder.Append (QuoteIdentifier ((string)table.Value));  	}  	else {  		builder.Append (QuoteIdentifier (entitySetBase.Name));  	}  	targetTSql = builder.ToString ();  }  
Magic Number,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleSpecialFunctionToOperator,The following statement contains a magic number: Debug.Assert (e.Arguments.Count > 0 && e.Arguments.Count <= 2' "There should be 1 or 2 arguments for operator");  
Magic Number,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionCreateDateTime,The following statement contains a magic number: Debug.Assert (args.Count == 6' "CreateDateTime should have 6 arguments");  
Magic Number,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionLeft,The following statement contains a magic number: Debug.Assert (e.Arguments.Count == 2' "Left should have two arguments");  
Magic Number,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionRight,The following statement contains a magic number: Debug.Assert (e.Arguments.Count == 2' "Right should have two arguments");  
Magic Number,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionRoundOrTruncate,The following statement contains a magic number: Debug.Assert (e.Arguments.Count <= 2' "Round or truncate should have at most 2 arguments");  
Magic Number,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionContains,The following statement contains a magic number: Debug.Assert (args.Count == 2' "Contains should have two arguments");  
Magic Number,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionStartsWith,The following statement contains a magic number: Debug.Assert (args.Count == 2' "StartsWith should have two arguments");  
Magic Number,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,HandleCanonicalFunctionEndsWith,The following statement contains a magic number: Debug.Assert (e.Arguments.Count == 2' "EndsWith should have two arguments");  
Magic Number,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,ByteArrayToBinaryString,The following statement contains a magic number: for (var i = 0; i < binaryArray.Length; i++) {  	sb.Append (_hexDigits [(binaryArray [i] & 0xF0) >> 4]).Append (_hexDigits [binaryArray [i] & 0x0F]);  }  
Magic Number,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,ByteArrayToBinaryString,The following statement contains a magic number: sb.Append (_hexDigits [(binaryArray [i] & 0xF0) >> 4]).Append (_hexDigits [binaryArray [i] & 0x0F]);  
Magic Number,System.Data.Entity.SqlServerCompact.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\Properties\Resources.SqlServerCompact.cs,GetString,The following statement contains a magic number: if (args != null && args.Length > 0) {  	for (var i = 0; i < args.Length; i++) {  		var value = args [i] as String;  		if (value != null && value.Length > 1024) {  			args [i] = value.Substring (0' 1024 - 3) + "...";  		}  	}  	return String.Format (CultureInfo.CurrentCulture' res' args);  }  else {  	return res;  }  
Magic Number,System.Data.Entity.SqlServerCompact.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\Properties\Resources.SqlServerCompact.cs,GetString,The following statement contains a magic number: if (args != null && args.Length > 0) {  	for (var i = 0; i < args.Length; i++) {  		var value = args [i] as String;  		if (value != null && value.Length > 1024) {  			args [i] = value.Substring (0' 1024 - 3) + "...";  		}  	}  	return String.Format (CultureInfo.CurrentCulture' res' args);  }  else {  	return res;  }  
Magic Number,System.Data.Entity.SqlServerCompact.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\Properties\Resources.SqlServerCompact.cs,GetString,The following statement contains a magic number: if (args != null && args.Length > 0) {  	for (var i = 0; i < args.Length; i++) {  		var value = args [i] as String;  		if (value != null && value.Length > 1024) {  			args [i] = value.Substring (0' 1024 - 3) + "...";  		}  	}  	return String.Format (CultureInfo.CurrentCulture' res' args);  }  else {  	return res;  }  
Magic Number,System.Data.Entity.SqlServerCompact.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\Properties\Resources.SqlServerCompact.cs,GetString,The following statement contains a magic number: for (var i = 0; i < args.Length; i++) {  	var value = args [i] as String;  	if (value != null && value.Length > 1024) {  		args [i] = value.Substring (0' 1024 - 3) + "...";  	}  }  
Magic Number,System.Data.Entity.SqlServerCompact.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\Properties\Resources.SqlServerCompact.cs,GetString,The following statement contains a magic number: for (var i = 0; i < args.Length; i++) {  	var value = args [i] as String;  	if (value != null && value.Length > 1024) {  		args [i] = value.Substring (0' 1024 - 3) + "...";  	}  }  
Magic Number,System.Data.Entity.SqlServerCompact.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\Properties\Resources.SqlServerCompact.cs,GetString,The following statement contains a magic number: for (var i = 0; i < args.Length; i++) {  	var value = args [i] as String;  	if (value != null && value.Length > 1024) {  		args [i] = value.Substring (0' 1024 - 3) + "...";  	}  }  
Magic Number,System.Data.Entity.SqlServerCompact.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\Properties\Resources.SqlServerCompact.cs,GetString,The following statement contains a magic number: if (value != null && value.Length > 1024) {  	args [i] = value.Substring (0' 1024 - 3) + "...";  }  
Magic Number,System.Data.Entity.SqlServerCompact.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\Properties\Resources.SqlServerCompact.cs,GetString,The following statement contains a magic number: if (value != null && value.Length > 1024) {  	args [i] = value.Substring (0' 1024 - 3) + "...";  }  
Magic Number,System.Data.Entity.SqlServerCompact.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\Properties\Resources.SqlServerCompact.cs,GetString,The following statement contains a magic number: if (value != null && value.Length > 1024) {  	args [i] = value.Substring (0' 1024 - 3) + "...";  }  
Magic Number,System.Data.Entity.SqlServerCompact.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\Properties\Resources.SqlServerCompact.cs,GetString,The following statement contains a magic number: args [i] = value.Substring (0' 1024 - 3) + "...";  
Magic Number,System.Data.Entity.SqlServerCompact.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\Properties\Resources.SqlServerCompact.cs,GetString,The following statement contains a magic number: args [i] = value.Substring (0' 1024 - 3) + "...";  
Magic Number,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,GetSqlDbType,The following statement contains a magic number: switch (primitiveTypeKind) {  case PrimitiveTypeKind.Binary:  	// for output parameters' ensure there is space...  	size = GetParameterSize (type);  	return GetBinaryDbType (type);  case PrimitiveTypeKind.Boolean:  	return SqlDbType.Bit;  case PrimitiveTypeKind.Byte:  	return SqlDbType.TinyInt;  case PrimitiveTypeKind.Time:  	throw ADP1.NotSupported (EntityRes.GetString (EntityRes.ProviderDoesNotSupportType' "Time"));  case PrimitiveTypeKind.DateTimeOffset:  	// <<HELM OPS>> The old code just threw an exception here like this:  	//  	//     throw ADP1.NotSupported(EntityRes.GetString(EntityRes.ProviderDoesNotSupportType' "DateTimeOffset"));  	//  	// Now it is simply declaring that DateTimeOffset should be treated as NVarChar(40). There are code changes  	// elsewhere (also with <<HELM OPS>> annotation) that provide the conversions to and from DateTimeOffset.  	size = 40;  	return SqlDbType.NVarChar;  case PrimitiveTypeKind.DateTime:  	return SqlDbType.DateTime;  case PrimitiveTypeKind.Decimal:  	precision = GetParameterPrecision (type' null);  	scale = GetScale (type);  	return SqlDbType.Decimal;  case PrimitiveTypeKind.Double:  	return SqlDbType.Float;  case PrimitiveTypeKind.Guid:  	return SqlDbType.UniqueIdentifier;  case PrimitiveTypeKind.Int16:  	return SqlDbType.SmallInt;  case PrimitiveTypeKind.Int32:  	return SqlDbType.Int;  case PrimitiveTypeKind.Int64:  	return SqlDbType.BigInt;  case PrimitiveTypeKind.SByte:  	return SqlDbType.SmallInt;  case PrimitiveTypeKind.Single:  	return SqlDbType.Real;  case PrimitiveTypeKind.String:  	size = GetParameterSize (type);  	return GetStringDbType (type);  default:  	Debug.Fail ("unknown PrimitiveTypeKind " + primitiveTypeKind);  	return SqlDbType.Variant;  }  
Magic Number,System.Data.Entity.SqlServerCompact.Legacy,SqlCeProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeProviderServices.cs,GetSqlDbType,The following statement contains a magic number: size = 40;  
Missing Default,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,VisitIsNullExpression,The following switch statement is missing a default case: switch (primitiveTypeKind) {  case PrimitiveTypeKind.String:  	castAsType = "ntext";  	break;  case PrimitiveTypeKind.Binary:  	castAsType = "image";  	break;  }  
Missing Default,System.Data.Entity.SqlServerCompact.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlGen\SqlGenerator.cs,VisitJoinExpression,The following switch statement is missing a default case: switch (joinKind) {  case DbExpressionKind.FullOuterJoin:  case DbExpressionKind.InnerJoin:  case DbExpressionKind.LeftOuterJoin:  	result.From.Append (" ON ");  	isParentAJoinStack.Push (false);  	result.From.Append (joinCondition.Accept (this));  	isParentAJoinStack.Pop ();  	break;  }  
Missing Default,System.Data.Entity.SqlServerCompact.Legacy,SqlCeMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMigrationSqlGenerator.cs,Generate,The following switch statement is missing a default case: switch (commandTree.CommandTreeKind) {  case DbCommandTreeKind.Insert:  	writer.Write (string.Join (Environment.NewLine' DmlSqlGenerator.GenerateInsertSql ((DbInsertCommandTree)commandTree' out _' isLocalProvider: true' upperCaseKeywords: true' createParameters: false)));  	break;  case DbCommandTreeKind.Delete:  	writer.Write (string.Join (Environment.NewLine' DmlSqlGenerator.GenerateDeleteSql ((DbDeleteCommandTree)commandTree' out _' isLocalProvider: true' upperCaseKeywords: true' createParameters: false)));  	break;  }  
Missing Default,System.Data.Entity.SqlServerCompact.Legacy,SqlCeMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServerCompact\SqlCeMigrationSqlGenerator.cs,BuildPropertyType,The following switch statement is missing a default case: switch (originalStoreTypeName) {  case "decimal":  case "numeric":  	storeTypeName += "(" + (propertyModel.Precision ?? (byte)typeUsage.Facets [DbProviderManifest.PrecisionFacetName].Value) + "' " + (propertyModel.Scale ?? (byte)typeUsage.Facets [DbProviderManifest.ScaleFacetName].Value) + ")";  	break;  case "datetime2":  case "datetimeoffset":  case "time":  	storeTypeName += "(" + (propertyModel.Precision ?? (byte)typeUsage.Facets [DbProviderManifest.PrecisionFacetName].Value) + ")";  	break;  case "binary":  case "varbinary":  case "nvarchar":  case "varchar":  case "char":  case "nchar":  	storeTypeName += "(" + (propertyModel.MaxLength ?? (int)typeUsage.Facets [DbProviderManifest.MaxLengthFacetName].Value) + ")";  	break;  }  
