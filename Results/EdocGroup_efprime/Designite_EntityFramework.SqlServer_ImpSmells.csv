Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The method has 132 lines of code.
Long Method,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetStoreType,The method has 147 lines of code.
Long Method,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,SqlTypesAssembly,The method has 609 lines of code.
Long Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitConstant,The method has 111 lines of code.
Long Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,Visit,The method has 106 lines of code.
Complex Method,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,Cyclomatic complexity of the method is 18
Complex Method,System.Data.Entity.SqlServer,SqlDdlBuilder,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlDdlBuilder.cs,AppendType,Cyclomatic complexity of the method is 24
Complex Method,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,Generate,Cyclomatic complexity of the method is 13
Complex Method,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,BuildPropertyType,Cyclomatic complexity of the method is 19
Complex Method,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,IsKatmaiOrNewer,Cyclomatic complexity of the method is 23
Complex Method,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,IsYukonOrNewer,Cyclomatic complexity of the method is 11
Complex Method,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,Cyclomatic complexity of the method is 89
Complex Method,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetStoreType,Cyclomatic complexity of the method is 48
Complex Method,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateCommand,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateSqlParameter,Cyclomatic complexity of the method is 12
Complex Method,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetSqlDbType,Cyclomatic complexity of the method is 31
Complex Method,System.Data.Entity.SqlServer.SqlGen,DmlSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,GenerateInsertSql,Cyclomatic complexity of the method is 16
Complex Method,System.Data.Entity.SqlServer.SqlGen,DmlSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,GenerateReturningSql,Cyclomatic complexity of the method is 10
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 24
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 22
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,MatchPatternForForcingNonUnicode,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitConstant,Cyclomatic complexity of the method is 75
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 13
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,TryTranslateIntoIn,Cyclomatic complexity of the method is 11
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitJoinExpression,Cyclomatic complexity of the method is 12
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,ProcessJoinInputResult,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,AddColumns,Cyclomatic complexity of the method is 11
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,GenerateSqlForStoreType,Cyclomatic complexity of the method is 25
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,IsCompatible,Cyclomatic complexity of the method is 11
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitExpressionEnsureSqlStatement,Cyclomatic complexity of the method is 19
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,WrapNonQueryExtent,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlSelectStatement,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlSelectStatement.cs,WriteSql,Cyclomatic complexity of the method is 16
Long Parameter List,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,GetDeclaredMethod,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,GetRuntimeMethod,The method has 6 parameters.
Long Parameter List,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,GetRuntimeMethod,The method has 8 parameters.
Long Parameter List,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,GetDeclaredConstructor,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServer.Utilities,IEnumerableExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\IEnumerableExtensions.cs,Join,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServer.Utilities,SqlDataReaderWrapper,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Utilities\SqlDataReaderWrapper.cs,GetBytes,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServer.Utilities,SqlDataReaderWrapper,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Utilities\SqlDataReaderWrapper.cs,GetChars,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServer,SqlDdlBuilder,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlDdlBuilder.cs,CreateObjectsScript,The method has 7 parameters.
Long Parameter List,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateSqlParameter,The method has 6 parameters.
Long Parameter List,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetSqlDbType,The method has 7 parameters.
Long Parameter List,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,DbCreateDatabase,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,DbDatabaseExists,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,SqlTypesAssembly,The method has 19 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,DmlSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,GenerateUpdateSql,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,DmlSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,GenerateDeleteSql,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,DmlSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,GenerateInsertSql,The method has 6 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,DmlSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,GenerateReturningSql,The method has 6 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,TransformIntersectOrExcept,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,RemoveNonSortProperties,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The method has 24 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The method has 28 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The method has 28 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleFunctionDefaultCastReturnValue,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialCanonicalFunction,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,WriteInstanceFunctionCall,The method has 6 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionDateTimeTypeCreation,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,TranslateConstantParameterForLike,The method has 6 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,GenerateSql,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,AddColumn,The method has 5 parameters.
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,CreateNewSelectStatement,The method has 5 parameters.
Long Identifier,System.Data.Entity.SqlServer,Expressions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Expressions.cs,Lambda,The length of the parameter createLambdaBodyGivenParameter is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,DbDatabaseExists,The length of the parameter databaseDoesNotExistInSysTables is 31.
Long Identifier,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,GeographyCollectionFromText,The length of the parameter geographyCollectionWellKnownText is 32.
Long Identifier,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,GeographyCollectionFromText,The length of the parameter sqlgeographyCollectionWellKnownText is 35.
Long Identifier,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,GeographyMultiPolygonFromBinary,The length of the parameter sqlmultiPolygonWellKnownBinary is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,GeographyCollectionFromBinary,The length of the parameter geographyCollectionWellKnownBinary is 34.
Long Identifier,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,GeographyCollectionFromBinary,The length of the parameter sqlgeographyCollectionWellKnownBinary is 37.
Long Identifier,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,GeometryCollectionFromText,The length of the parameter geometryCollectionWellKnownText is 31.
Long Identifier,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,GeometryCollectionFromText,The length of the parameter sqlgeometryCollectionWellKnownText is 34.
Long Identifier,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,GeometryMultiPolygonFromBinary,The length of the parameter sqlmultiPolygonWellKnownBinary is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,GeometryCollectionFromBinary,The length of the parameter geometryCollectionWellKnownBinary is 33.
Long Identifier,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,GeometryCollectionFromBinary,The length of the parameter sqlgeometryCollectionWellKnownBinary is 36.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,TransformIntersectOrExcept,The length of the parameter sortExpressionsBindingVariableName is 34.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,RemoveNonSortProperties,The length of the parameter sortExpressionsBindingVariableName is 34.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,HasMatchInList,The length of the parameter listExpressionsBindingVariableName is 34.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeFunctionNameToOperatorDictionary,The length of the parameter functionNameToOperatorDictionary is 32.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeDateAddFunctionNameToDatepartDictionary,The length of the parameter dateAddFunctionNameToDatepartDictionary is 39.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeDateDiffFunctionNameToDatepartDictionary,The length of the parameter dateDiffFunctionNameToDatepartDictionary is 40.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyInstancePropertyFunctionsDictionary,The length of the parameter instancePropGeographyFunctions is 30.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeRenamedGeographyInstanceMethodFunctions,The length of the parameter renamedInstanceMethodFunctions is 30.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeRenamedGeometryInstanceMethodFunctions,The length of the parameter renamedInstanceMethodFunctions is 30.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,CastReturnTypeToGivenType,The length of the parameter functionsRequiringReturnTypeCast is 32.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,TryTranslateIntoIn,The length of the parameter forceNonUnicodeOnQualifyingValues is 33.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,HandleInValue,The length of the parameter forceNonUnicodeOnQualifyingValues is 33.
Long Statement,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,IsValidStructuralType,The length of the statement  "	return !(type.IsGenericType () || type.IsValueType () || type.IsPrimitive () || type.IsInterface () || type.IsArray || type == typeof(string) || type == typeof(DbGeography) || type == typeof(DbGeometry)) && type.IsValidStructuralPropertyType (); " is 245.
Long Statement,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,IsValidStructuralPropertyType,The length of the statement  "	return !(type.IsGenericTypeDefinition () || type.IsPointer || type == typeof(object) || typeof(ComplexObject).IsAssignableFrom (type) || typeof(EntityObject).IsAssignableFrom (type) || typeof(StructuralObject).IsAssignableFrom (type) || typeof(EntityKey).IsAssignableFrom (type) || typeof(EntityReference).IsAssignableFrom (type)); " is 331.
Long Statement,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,OverridesEqualsOrGetHashCode,The length of the statement  "		if (type.GetDeclaredMethods ().Any (m => (m.Name == "Equals" || m.Name == "GetHashCode") && m.DeclaringType != typeof(object) && m.GetBaseDefinition ().DeclaringType == typeof(object))) { " is 187.
Long Statement,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,GetDeclaredMethod,The length of the statement  "	return type.GetDeclaredMethods (name).SingleOrDefault (m => m.GetParameters ().Select (p => p.ParameterType).SequenceEqual (parameterTypes)); " is 141.
Long Statement,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,GetRuntimeMethod,The length of the statement  "	var methods = type.GetRuntimeMethods ().Where (m => name == m.Name && predicate (m) && m.GetParameters ().Select (p => p.ParameterType).SequenceEqual (parameterTypes)).ToArray (); " is 179.
Long Statement,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,GetDeclaredMethods,The length of the statement  "                = BindingFlags.Static | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly;" is 121.
Long Statement,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,GetDeclaredMethods,The length of the statement  "                = BindingFlags.Static | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly;" is 121.
Long Statement,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,GetDeclaredProperty,The length of the statement  "                = BindingFlags.Static | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly;" is 121.
Long Statement,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,GetDeclaredProperties,The length of the statement  "                = BindingFlags.Static | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly;" is 121.
Long Statement,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,MostDerived,The length of the statement  "		if (mostDerivedProperty == null || (mostDerivedProperty.DeclaringType != null && mostDerivedProperty.DeclaringType.IsAssignableFrom (property.DeclaringType))) { " is 160.
Long Statement,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,GetDeclaredConstructors,The length of the statement  "                = BindingFlags.Static | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly;" is 121.
Long Statement,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,GetDeclaredConstructor,The length of the statement  "	return type.GetDeclaredConstructors ().SingleOrDefault (c => !c.IsStatic && c.GetParameters ().Select (p => p.ParameterType).SequenceEqual (parameterTypes)); " is 157.
Long Statement,System.Data.Entity.SqlServer.Utilities,PropertyInfoExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\PropertyInfoExtensions.cs,IsSameAs,The length of the statement  "	return (propertyInfo == otherPropertyInfo) || (propertyInfo.Name == otherPropertyInfo.Name && (propertyInfo.DeclaringType == otherPropertyInfo.DeclaringType || propertyInfo.DeclaringType.IsSubclassOf (otherPropertyInfo.DeclaringType) || otherPropertyInfo.DeclaringType.IsSubclassOf (propertyInfo.DeclaringType) || propertyInfo.DeclaringType.GetInterfaces ().Contains (otherPropertyInfo.DeclaringType) || otherPropertyInfo.DeclaringType.GetInterfaces ().Contains (propertyInfo.DeclaringType))); " is 493.
Long Statement,System.Data.Entity.SqlServer.Utilities,PropertyInfoExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\PropertyInfoExtensions.cs,IsValidInterfaceStructuralProperty,The length of the statement  "	return propertyInfo.CanRead && (propertyInfo.CanWriteExtended () || propertyInfo.PropertyType.IsCollection ()) && propertyInfo.GetIndexParameters ().Length == 0 && propertyInfo.PropertyType.IsValidStructuralPropertyType (); " is 223.
Long Statement,System.Data.Entity.SqlServer.Utilities,PropertyInfoExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\PropertyInfoExtensions.cs,IsValidEdmNavigationProperty,The length of the statement  "	return IsValidInterfaceStructuralProperty (propertyInfo) && ((propertyInfo.PropertyType.IsCollection (out elementType) && elementType.IsValidStructuralType ()) || propertyInfo.PropertyType.IsValidStructuralType ()); " is 215.
Long Statement,System.Data.Entity.SqlServer.Utilities,PropertyInfoExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\PropertyInfoExtensions.cs,GetDeclaredProperty,The length of the statement  "	return propertyInfo.DeclaringType == propertyInfo.ReflectedType ? propertyInfo : propertyInfo.DeclaringType.GetInstanceProperties ().SingleOrDefault (p => p.Name == propertyInfo.Name && !p.GetIndexParameters ().Any () && p.PropertyType == propertyInfo.PropertyType); " is 266.
Long Statement,System.Data.Entity.SqlServer.Utilities,DatabaseName,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\DatabaseName.cs,Equals,The length of the statement  "	return string.Equals (other._name' _name' StringComparison.Ordinal) && string.Equals (other._schema' _schema' StringComparison.Ordinal); " is 136.
Long Statement,System.Data.Entity.SqlServer.Utilities,TypeUsageExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Utilities\TypeUsageExtensions.cs,IsSpatialType,The length of the statement  "	return (type.EdmType.BuiltInTypeKind == BuiltInTypeKind.PrimitiveType && ((PrimitiveType)type.EdmType).IsSpatialType ()); " is 121.
Long Statement,System.Data.Entity.SqlServer.Utilities,TypeUsageExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Utilities\TypeUsageExtensions.cs,ForceNonUnicode,The length of the statement  "	var nonUnicodeString = TypeUsage.CreateStringTypeUsage ((PrimitiveType)typeUsage.EdmType' isUnicode: false' isFixedLength: false); " is 130.
Long Statement,System.Data.Entity.SqlServer.Utilities,TypeUsageExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Utilities\TypeUsageExtensions.cs,ForceNonUnicode,The length of the statement  "	return TypeUsage.Create (typeUsage.EdmType' typeUsage.Facets.Where (f => f.Name != DbProviderManifest.UnicodeFacetName).Union (nonUnicodeString.Facets.Where (f => f.Name == DbProviderManifest.UnicodeFacetName))); " is 212.
Long Statement,System.Data.Entity.SqlServer,Expressions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Expressions.cs,Property,The length of the statement  "	Debug.Assert (prop != null' "Type '" + exp.Type.FullName + "' does not declare a public instance property with the name '" + propertyName + "'"); " is 145.
Long Statement,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The length of the statement  "			// The client was unable to establish a connection because of an error during connection initialization process before login.  " is 125.
Long Statement,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The length of the statement  "			// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum " is 120.
Long Statement,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The length of the statement  "			// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by " is 120.
Long Statement,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The length of the statement  "			// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.  " is 151.
Long Statement,System.Data.Entity.SqlServer,SqlDdlBuilder,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlDdlBuilder.cs,AppendType,The length of the statement  "	if (type.EdmType.Name == "binary" && 8 == type.GetMaxLength () && column.TypeUsage.Facets.TryGetValue ("StoreGeneratedPattern"' false' out storeGenFacet) && storeGenFacet.Value != null && StoreGeneratedPattern.Computed == (StoreGeneratedPattern)storeGenFacet.Value) { " is 267.
Long Statement,System.Data.Entity.SqlServer,SqlDdlBuilder,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlDdlBuilder.cs,AppendType,The length of the statement  "		if (type.EdmType.BuiltInTypeKind == BuiltInTypeKind.PrimitiveType && typeName.EndsWith (maxSuffix' StringComparison.Ordinal)) { " is 127.
Long Statement,System.Data.Entity.SqlServer,SqlDdlBuilder,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlDdlBuilder.cs,AppendType,The length of the statement  "	if (!isTimestamp && column.TypeUsage.Facets.TryGetValue ("StoreGeneratedPattern"' false' out storeGenFacet) && storeGenFacet.Value != null) { " is 141.
Long Statement,System.Data.Entity.SqlServer,SqlFunctions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlFunctions.cs,BootstrapFunction,The length of the statement  "		return asQueryable.Provider.Execute<TOut> (Expression.Call (((MethodCallExpression)methodExpression.Body).Method' Expression.Constant (arg))); " is 142.
Long Statement,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,GenerateFunctionSql,The length of the statement  "		return functionSqlGenerator.GenerateUpdate (commandTrees.Cast<DbUpdateCommandTree> ().ToList ()' rowsAffectedParameter); " is 120.
Long Statement,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,GenerateFunctionSql,The length of the statement  "		return functionSqlGenerator.GenerateDelete (commandTrees.Cast<DbDeleteCommandTree> ().ToList ()' rowsAffectedParameter); " is 120.
Long Statement,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,Generate,The length of the statement  "		writer.WriteLine (!string.IsNullOrWhiteSpace (procedureOperation.BodySql) ? Indent (procedureOperation.BodySql' writer.CurrentIndentation ()) : "RETURN"); " is 154.
Long Statement,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,Generate,The length of the statement  "		if ((column.IsNullable != null) && !column.IsNullable.Value && (column.DefaultValue == null) && (string.IsNullOrWhiteSpace (column.DefaultValueSql)) && !column.IsIdentity && !column.IsTimestamp && !column.StoreType.EqualsIgnoreCase ("rowversion") && !column.StoreType.EqualsIgnoreCase ("timestamp")) { " is 301.
Long Statement,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,Generate,The length of the statement  "				writer.Write (DmlSqlGenerator.GenerateInsertSql ((DbInsertCommandTree)commandTree' _sqlGenerator' out _' generateReturningSql: false' upperCaseKeywords: true' createParameters: false)); " is 185.
Long Statement,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,Generate,The length of the statement  "				writer.Write (DmlSqlGenerator.GenerateDeleteSql ((DbDeleteCommandTree)commandTree' _sqlGenerator' out _' upperCaseKeywords: true' createParameters: false)); " is 156.
Long Statement,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,BuildPropertyType,The length of the statement  "		storeTypeName += "(" + (propertyModel.Precision ?? typeUsage.GetPrecision ()) + "' " + (propertyModel.Scale ?? typeUsage.GetScale ()) + ")"; " is 140.
Long Statement,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,StatementBatch,The length of the statement  "	var batches = Regex.Split (sqlBatch' String.Format (CultureInfo.InvariantCulture' @"^\s*({0}[ \t]+[0-9]+|{0})(?:\s+|$)"' BatchTerminator)' RegexOptions.IgnoreCase | RegexOptions.Multiline); " is 189.
Long Statement,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,StatementBatch,The length of the statement  "		if (batches [i].StartsWith (BatchTerminator' StringComparison.OrdinalIgnoreCase) || (i == batches.Length - 1 && string.IsNullOrWhiteSpace (batches [i]))) { " is 155.
Long Statement,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,Generate,The length of the statement  "			writer.Write ((column.Name == sequence.AddColumnOperation.Column.Name) ? Generate ((string)sequence.AddColumnOperation.Column.DefaultValue) : (column.Type == PrimitiveTypeKind.String) ? "LEFT(" + Name (column.Name) + "' " + column.MaxLength + ")" : Name (column.Name)); " is 269.
Long Statement,System.Data.Entity.SqlServer,SqlTableExistenceChecker,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTableExistenceChecker.cs,AnyModelTableExistsInDatabase,The length of the statement  "				return (int)DbInterception.Dispatch.Command.Scalar (command' new DbCommandInterceptionContext (context.InterceptionContext)) > 0; " is 129.
Long Statement,System.Data.Entity.SqlServer,SqlTableExistenceChecker,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTableExistenceChecker.cs,AnyModelTableExistsInDatabase,The length of the statement  "			if (shouldClose && DbInterception.Dispatch.Connection.GetState (connection' context.InterceptionContext) != ConnectionState.Closed) { " is 133.
Long Statement,System.Data.Entity.SqlServer,SqlTypesAssemblyLoader,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTypesAssemblyLoader.cs,AssemblyNamesMatch,The length of the statement  "	if (targetAssemblyName.Version.Major != assemblyName.Version.Major || targetAssemblyName.Version.Minor != assemblyName.Version.Minor) { " is 135.
Long Statement,System.Data.Entity.SqlServer,SqlVersionUtils,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlVersionUtils.cs,GetSqlVersion,The length of the statement  "	var majorVersion = Int32.Parse (DbInterception.Dispatch.Connection.GetServerVersion (connection' new DbInterceptionContext ()).Substring (0' 2)' CultureInfo.InvariantCulture); " is 175.
Long Statement,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,Initialize,The length of the statement  "		Debug.Assert ((_version == SqlVersion.Sql8) || (_version == SqlVersion.Sql9)' "Found version other than SQL 8' 9' 10 or 11."); " is 126.
Long Statement,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,Initialize,The length of the statement  "		primitiveTypes.RemoveAll (primitiveType => primitiveType.Name.Equals ("time"' StringComparison.OrdinalIgnoreCase) || primitiveType.Name.Equals ("date"' StringComparison.OrdinalIgnoreCase) || primitiveType.Name.Equals ("datetime2"' StringComparison.OrdinalIgnoreCase) || primitiveType.Name.Equals ("datetimeoffset"' StringComparison.OrdinalIgnoreCase) || primitiveType.Name.Equals ("geography"' StringComparison.OrdinalIgnoreCase) || primitiveType.Name.Equals ("geometry"' StringComparison.OrdinalIgnoreCase)); " is 509.
Long Statement,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,Initialize,The length of the statement  "			primitiveTypes.RemoveAll (primitiveType => primitiveType.Name.Equals ("xml"' StringComparison.OrdinalIgnoreCase) || primitiveType.Name.EndsWith ("(max)"' StringComparison.OrdinalIgnoreCase)); " is 191.
Long Statement,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,EscapeLikeText,The length of the statement  "	if (!(text.Contains ("%") || text.Contains ("_") || text.Contains ("[") || text.Contains ("^") || alwaysEscapeEscapeChar && text.Contains (LikeEscapeCharToString))) { " is 166.
Long Statement,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,IsKatmaiOrNewer,The length of the statement  "	// Spatial types are only supported from Katmai onward; any functions using them must therefore also be Katmai or newer. " is 120.
Long Statement,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,IsKatmaiOrNewer,The length of the statement  "	if ((edmFunction.ReturnParameter != null && edmFunction.ReturnParameter.TypeUsage.IsSpatialType ()) || edmFunction.Parameters.Any (p => p.TypeUsage.IsSpatialType ())) { " is 168.
Long Statement,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,IsKatmaiOrNewer,The length of the statement  "		return ((name.Equals ("DateTimeOffset"' StringComparison.OrdinalIgnoreCase)) || (name.Equals ("Time"' StringComparison.OrdinalIgnoreCase))); " is 140.
Long Statement,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,IsKatmaiOrNewer,The length of the statement  "		return ((name.Equals ("DateTimeOffset"' StringComparison.OrdinalIgnoreCase)) || (name.Equals ("Time"' StringComparison.OrdinalIgnoreCase))); " is 140.
Long Statement,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,IsKatmaiOrNewer,The length of the statement  "		return ((param1Name.Equals ("Time"' StringComparison.OrdinalIgnoreCase)) || (param2Name.Equals ("Time"' StringComparison.OrdinalIgnoreCase)) || (param1Name.Equals ("DateTimeOffset"' StringComparison.OrdinalIgnoreCase)) || (param2Name.Equals ("DateTimeOffset"' StringComparison.OrdinalIgnoreCase))); " is 298.
Long Statement,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,IsKatmaiOrNewer,The length of the statement  "		return ((name.Equals ("DateTimeOffset"' StringComparison.OrdinalIgnoreCase)) || (name.Equals ("Time"' StringComparison.OrdinalIgnoreCase))); " is 140.
Long Statement,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The length of the statement  "	Debug.Assert (newPrimitiveTypeKind == PrimitiveTypeKind.String || newPrimitiveTypeKind == PrimitiveTypeKind.Binary' "at this point only string and binary types should be present"); " is 180.
Long Statement,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetStoreType,The length of the statement  "			tu = TypeUsage.CreateBinaryTypeUsage (StoreTypeNameToStorePrimitiveType ["binary"]' true' (isMaxLength ? binaryMaxSize : maxLength)); " is 133.
Long Statement,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetStoreType,The length of the statement  "				tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["nchar"]' true' true' (isMaxLength ? nvarcharMaxSize : maxLength)); " is 140.
Long Statement,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetStoreType,The length of the statement  "				tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["char"]' false' true' (isMaxLength ? varcharMaxSize : maxLength)); " is 139.
Long Statement,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetStoreType,The length of the statement  "		throw new NotSupportedException (Strings.NoStoreTypeForEdmType (edmType.EdmType.Name' primitiveType.PrimitiveTypeKind)); " is 120.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateCommand,The length of the statement  "	command.CommandText = SqlGenerator.GenerateSql (commandTree' sqlVersion' out parameters' out commandType' out paramsToForceNonUnicode); " is 135.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateCommand,The length of the statement  "			parameter = CreateSqlParameter (functionParameter.Name' functionParameter.TypeUsage' functionParameter.Mode' DBNull.Value' preventTruncation' sqlVersion); " is 154.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateCommand,The length of the statement  "			var parameterType = paramsToForceNonUnicode != null && paramsToForceNonUnicode.Contains (queryParameter.Key) ? queryParameter.Value.ForceNonUnicode () : queryParameter.Value; " is 174.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateCommand,The length of the statement  "			parameter = CreateSqlParameter (queryParameter.Key' parameterType' ParameterMode.In' DBNull.Value' preventTruncation' sqlVersion); " is 130.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateCommand,The length of the statement  "		if (commandTree.CommandTreeKind != DbCommandTreeKind.Delete && commandTree.CommandTreeKind != DbCommandTreeKind.Insert && commandTree.CommandTreeKind != DbCommandTreeKind.Update) { " is 180.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateCommand,The length of the statement  "			throw new InvalidOperationException (Strings.ADP_InternalProviderError (1017/*InternalErrorCode.SqlGenParametersNotPermitted*/)); " is 129.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,SetDbParameterValue,The length of the statement  "	if (parameterType.IsPrimitiveType (PrimitiveTypeKind.String) || parameterType.IsPrimitiveType (PrimitiveTypeKind.Binary)) { " is 123.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,SetDbParameterValue,The length of the statement  "		var size = GetParameterSize (parameterType' ((parameter.Direction & ParameterDirection.Output) == ParameterDirection.Output)); " is 126.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetDbProviderManifestToken,The length of the statement  "	if (string.IsNullOrEmpty (DbInterception.Dispatch.Connection.GetConnectionString (connection' new DbInterceptionContext ()))) { " is 127.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetDbSpatialDataReader,The length of the statement  "	return SupportsSpatial (versionHint) ? new SqlSpatialDataReader (GetSpatialServices (new DbProviderInfo (ProviderInvariantName' versionHint))' new SqlDataReaderWrapper (underlyingReader)) : null; " is 195.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,EnsureSqlParameterValue,The length of the statement  "		// If the parameter is being created based on an actual value (typically for constants found in DML expressions) then a DbGeography/DbGeometry " is 142.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,EnsureSqlParameterValue,The length of the statement  "		// value must be replaced by an an appropriate Microsoft.SqlServer.Types.SqlGeography/SqlGeometry instance. Since the DbGeography/DbGeometry " is 140.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,EnsureSqlParameterValue,The length of the statement  "		// value may not have been originally created by this SqlClient provider services implementation' just using the ProviderValue is not sufficient. " is 145.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetParameterSize,The length of the statement  "	if (type.Facets.TryGetValue (DbProviderManifest.MaxLengthFacetName' false' out maxLengthFacet) && null != maxLengthFacet.Value) { " is 129.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetNonMaxLength,The length of the statement  "	else if (type == SqlDbType.Char || type == SqlDbType.VarChar || type == SqlDbType.Binary || type == SqlDbType.VarBinary) { " is 122.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetStringDbType,The length of the statement  "	Debug.Assert (type.EdmType.BuiltInTypeKind == BuiltInTypeKind.PrimitiveType && PrimitiveTypeKind.String == ((PrimitiveType)type.EdmType).PrimitiveTypeKind' "only valid for string type"); " is 186.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetBinaryDbType,The length of the statement  "	Debug.Assert (type.EdmType.BuiltInTypeKind == BuiltInTypeKind.PrimitiveType && PrimitiveTypeKind.Binary == ((PrimitiveType)type.EdmType).PrimitiveTypeKind' "only valid for binary type"); " is 186.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,DbCreateDatabase,The length of the statement  "			// The creation of the database succeeded' the creation of the database objects failed' and the dropping of the database failed. " is 128.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,DbCreateDatabase,The length of the statement  "			throw new InvalidOperationException (Strings.SqlProvider_IncompleteCreateDatabase' new AggregateException (Strings.SqlProvider_IncompleteCreateDatabaseAggregate' e' ie)); " is 170.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,DbCreateDatabase,The length of the statement  "		// The creation of the database succeeded' the creation of the database objects failed' the database was dropped' no reason to wrap the exception " is 145.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetOrGenerateDatabaseNameAndGetFileNames,The length of the statement  "	var connectionStringBuilder = new SqlConnectionStringBuilder (DbInterception.Dispatch.Connection.GetConnectionString (sqlConnection' new DbInterceptionContext ())); " is 164.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetLdfFileName,The length of the statement  "	logFileName = Path.Combine (directory.FullName' String.Concat (Path.GetFileNameWithoutExtension (dataFileName)' "_log.ldf")); " is 125.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GenerateDatabaseName,The length of the statement  "	var databaseName = String.Format (CultureInfo.InvariantCulture' "{0}_{1}"' strippedFileName' Guid.NewGuid ().ToString ("N"' CultureInfo.InvariantCulture)); " is 155.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,DbDatabaseExists,The length of the statement  "	var connectionBuilder = new SqlConnectionStringBuilder (DbInterception.Dispatch.Connection.GetConnectionString (sqlConnection' new DbInterceptionContext ())); " is 158.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,DbDatabaseExists,The length of the statement  "	if (string.IsNullOrEmpty (connectionBuilder.InitialCatalog) && string.IsNullOrEmpty (connectionBuilder.AttachDBFilename)) { " is 123.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,DbDatabaseExists,The length of the statement  "				var databaseExistsScript = SqlDdlBuilder.CreateCountDatabasesBasedOnFileNameScript (fileName' useDeprecatedSystemTable: sqlVersion == SqlVersion.Sql8); " is 151.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,DbDeleteDatabase,The length of the statement  "	var connectionBuilder = new SqlConnectionStringBuilder (DbInterception.Dispatch.Connection.GetConnectionString (sqlConnection' new DbInterceptionContext ())); " is 158.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,DbDeleteDatabase,The length of the statement  "			var getDatabaseNamesScript = SqlDdlBuilder.CreateGetDatabaseNamesBasedOnFileNameScript (fullFileName' sqlVersion == SqlVersion.Sql8); " is 133.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,UsingConnection,The length of the statement  "		var openingConnection = DbInterception.Dispatch.Connection.GetState (sqlConnection' interceptionContext) == ConnectionState.Closed; " is 131.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,UsingConnection,The length of the statement  "			if (DbInterception.Dispatch.Connection.GetState (sqlConnection' new DbInterceptionContext ()) == ConnectionState.Closed && !DbInterception.Dispatch.Connection.GetConnectionString (sqlConnection' interceptionContext).Equals (holdConnectionString' StringComparison.Ordinal)) { " is 274.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,UsingConnection,The length of the statement  "				DbInterception.Dispatch.Connection.SetConnectionString (sqlConnection' new DbConnectionPropertyInterceptionContext<string> ().WithValue (holdConnectionString)); " is 160.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,UsingConnection,The length of the statement  "			if (openingConnection && DbInterception.Dispatch.Connection.GetState (sqlConnection' interceptionContext) == ConnectionState.Open) { " is 132.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,UsingConnection,The length of the statement  "				if (!DbInterception.Dispatch.Connection.GetConnectionString (sqlConnection' interceptionContext).Equals (holdConnectionString' StringComparison.Ordinal)) { " is 155.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,UsingConnection,The length of the statement  "					DbInterception.Dispatch.Connection.SetConnectionString (sqlConnection' new DbConnectionPropertyInterceptionContext<string> ().WithValue (holdConnectionString)); " is 160.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,UsingMasterConnection,The length of the statement  "	var connectionBuilder = new SqlConnectionStringBuilder (DbInterception.Dispatch.Connection.GetConnectionString (sqlConnection' new DbInterceptionContext ())) { " is 159.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,UsingMasterConnection,The length of the statement  "			DbInterception.Dispatch.Connection.SetConnectionString (masterConnection' new DbConnectionPropertyInterceptionContext<string> ().WithValue (connectionBuilder.ConnectionString)); " is 177.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,UsingMasterConnection,The length of the statement  "		if (!connectionBuilder.IntegratedSecurity && (string.IsNullOrEmpty (connectionBuilder.UserID) || string.IsNullOrEmpty (connectionBuilder.Password))) { " is 150.
Long Statement,System.Data.Entity.SqlServer,SqlSpatialDataReader,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialDataReader.cs,CreateBinaryReadDelegate,The length of the statement  "	}' Expression.Assign (binarySerializable' Expression.New (spatialType))' Expression.Call (binarySerializable' readMethod' readerParam)' binarySerializable)' readerParam); " is 170.
Long Statement,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,NormalizeProviderValue,The length of the statement  "		throw new ArgumentException (Strings.SqlSpatialServices_ProviderValueNotSqlType (expectedSpatialType.AssemblyQualifiedName)' "providerValue"); " is 142.
Long Statement,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,CreateWellKnownValue,The length of the statement  "	var result = CreateWellKnownValue (spatialValue' () => (Exception)new ArgumentException (Strings.SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoSrid' "geographyValue")' () => (Exception)new ArgumentException (Strings.SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoWkbOrWkt' "geographyValue")' (coordinateSystemId' wkb' wkt) => new DbGeographyWellKnownValue { " is 380.
Long Statement,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,CreateWellKnownValue,The length of the statement  "	var result = CreateWellKnownValue (spatialValue' () => (Exception)new ArgumentException (Strings.SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoSrid' "geometryValue")' () => (Exception)new ArgumentException (Strings.SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoWkbOrWkt' "geometryValue")' (coordinateSystemId' wkb' wkt) => new DbGeometryWellKnownValue { " is 375.
Long Statement,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,GeographyCollectionFromText,The length of the statement  "	var sqlgeographyCollectionWellKnownText = ConvertToSqlChars (geographyCollectionWellKnownText' "geographyCollectionWellKnownText"); " is 131.
Long Statement,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,GeographyCollectionFromBinary,The length of the statement  "	var sqlgeographyCollectionWellKnownBinary = ConvertToSqlBytes (geographyCollectionWellKnownBinary' "geographyCollectionWellKnownBinary"); " is 137.
Long Statement,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,GeometryCollectionFromText,The length of the statement  "	var sqlgeometryCollectionWellKnownText = ConvertToSqlChars (geometryCollectionWellKnownText' "geometryCollectionWellKnownText"); " is 128.
Long Statement,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialServices.cs,GeometryCollectionFromBinary,The length of the statement  "	var sqlgeometryCollectionWellKnownBinary = ConvertToSqlBytes (geometryCollectionWellKnownBinary' "geometryCollectionWellKnownBinary"); " is 134.
Long Statement,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,GetSqlTypesSpatialValue,The length of the statement  "	// If the specified value was created by this spatial services implementation' its underlying Microsoft.SqlServer.Types.SqlGeography value is available via the ProviderValue property. " is 183.
Long Statement,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,GetSqlTypesSpatialValue,The length of the statement  "	// Otherwise' attempt to retrieve a Well Known Binary' Well Known Text or GML (in descending order of preference) representation of the value that can be used to create an appropriate Microsoft.SqlServer.Types.SqlGeography/SqlGeometry value " is 240.
Long Statement,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,GetSqlTypesSpatialValue,The length of the statement  "			return (spatialValue.IsGeography ? sqlGeographyFromWKBByteArray (binaryValue' srid.Value) : sqlGeometryFromWKBByteArray (binaryValue' srid.Value)); " is 147.
Long Statement,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,GetSqlTypesSpatialValue,The length of the statement  "			return (spatialValue.IsGeography ? sqlGeographyFromWKTString (textValue' srid.Value) : sqlGeometryFromWKTString (textValue' srid.Value)); " is 137.
Long Statement,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,GetSqlTypesSpatialValue,The length of the statement  "			return (spatialValue.IsGeography ? sqlGeographyFromGMLReader (xmlReader' srid.Value) : sqlGeometryFromGMLReader (xmlReader' srid.Value)); " is 137.
Long Statement,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,CreateStaticConstructorDelegate,The length of the statement  "	Debug.Assert (staticCtorMethod != null' "Could not find method '" + methodName + "' on type '" + spatialType.FullName + "'"); " is 125.
Long Statement,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,CreateStaticConstructorDelegate,The length of the statement  "	Debug.Assert (staticCtorMethod.GetParameters ().Length == 2 && staticCtorMethod.GetParameters () [1].ParameterType == typeof(int)' "Static constructor method on '" + spatialType.FullName + "' does not match static constructor pattern?"); " is 237.
Long Statement,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,CreateStaticConstructorDelegate,The length of the statement  "	var ex = Expression.Lambda<Func<TArg' int' object>> (Expression.Call (null' staticCtorMethod' sqlData' sridParam)' dataParam' sridParam); " is 137.
Long Statement,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,BuildConvertToSqlType,The length of the statement  "		Debug.Assert (toConvert.Type == typeof(XmlReader)' "Argument to static constructor method was not byte[]' string or XmlReader?"); " is 129.
Long Statement,System.Data.Entity.SqlServer.SqlGen,DmlFunctionSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlFunctionSqlGenerator.cs,GenerateInsert,The length of the statement  "	sql.Append (DmlSqlGenerator.GenerateInsertSql (firstCommandTree' _sqlGenerator' out _' generateReturningSql: false' createParameters: false)); " is 142.
Long Statement,System.Data.Entity.SqlServer.SqlGen,DmlFunctionSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlFunctionSqlGenerator.cs,GenerateInsert,The length of the statement  "		sql.Append (DmlSqlGenerator.GenerateInsertSql (commandTree' _sqlGenerator' out _' generateReturningSql: false' createParameters: false)); " is 137.
Long Statement,System.Data.Entity.SqlServer.SqlGen,DmlFunctionSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlFunctionSqlGenerator.cs,GenerateInsert,The length of the statement  "			var parameterReference = firstCommandTree.SetClauses.Cast<DbSetClause> ().Where (sc => ((DbPropertyExpression)sc.Property).Property == keyProperty).Select (sc => sc.Value).SingleOrDefault () ?? keyProperty.TypeUsage.Parameter (keyProperty.Name); " is 245.
Long Statement,System.Data.Entity.SqlServer.SqlGen,DmlFunctionSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlFunctionSqlGenerator.cs,GenerateInsert,The length of the statement  "			firstCommandTree.Target.Variable.Property (keyProperty).Equal (parameterReference).Accept (returningSelectSqlGenerator); " is 120.
Long Statement,System.Data.Entity.SqlServer.SqlGen,DmlFunctionSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlFunctionSqlGenerator.cs,IntroduceRequiredLocalVariables,The length of the statement  "		var translator = new DmlSqlGenerator.ExpressionTranslator (sql' commandTree' true' _sqlGenerator' entityType.KeyProperties); " is 124.
Long Statement,System.Data.Entity.SqlServer.SqlGen,DmlFunctionSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlFunctionSqlGenerator.cs,IntroduceRequiredLocalVariables,The length of the statement  "		DmlSqlGenerator.GenerateReturningSql (sql' commandTree' entityType' translator' commandTree.Returning' DmlSqlGenerator.UseGeneratedValuesVariable (commandTree' _sqlGenerator.SqlVersion)); " is 187.
Long Statement,System.Data.Entity.SqlServer.SqlGen,DmlFunctionSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlFunctionSqlGenerator.cs,GenerateUpdate,The length of the statement  "	sql.AppendLine (DmlSqlGenerator.GenerateUpdateSql (commandTrees.First ()' _sqlGenerator' out _' generateReturningSql: false)); " is 126.
Long Statement,System.Data.Entity.SqlServer.SqlGen,DmlSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,GenerateInsertSql,The length of the statement  "	var translator = new ExpressionTranslator (commandText' tree' null != tree.Returning' sqlGenerator' createParameters: createParameters); " is 136.
Long Statement,System.Data.Entity.SqlServer.SqlGen,DmlSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,UseGeneratedValuesVariable,The length of the statement  "		var columnsWithValues = new HashSet<EdmMember> (tree.SetClauses.Cast<DbSetClause> ().Select (s => ((DbPropertyExpression)s.Property).Property)); " is 144.
Long Statement,System.Data.Entity.SqlServer.SqlGen,DmlSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,GenerateReturningSql,The length of the statement  "					throw new InvalidOperationException (Strings.Update_NotSupportedIdentityType (keyMember.Name' keyMember.TypeUsage.ToString ())); " is 128.
Long Statement,System.Data.Entity.SqlServer.SqlGen,DmlSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,IsValidScopeIdentityColumnType,The length of the statement  "		return (typeUsage.Facets.TryGetValue (DbProviderManifest.ScaleFacetName' false' out scaleFacet) && Convert.ToInt32 (scaleFacet.Value' CultureInfo.InvariantCulture) == 0); " is 170.
Long Statement,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,Visit,The length of the statement  "	DbExpression rightInput = VisitExpressionBinding (e.Input).Sort (VisitSortOrder (e.SortOrder)).Limit (VisitExpression (e.Count)); " is 129.
Long Statement,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,Visit,The length of the statement  "	var exceptExpression = TransformIntersectOrExcept (leftInput' rightInput' DbExpressionKind.Skip' sortExpressions' e.Input.VariableName); " is 136.
Long Statement,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,TransformIntersectOrExcept,The length of the statement  "	//For Skip' we need to ignore any columns that are not in the original sort list. We can recognize these by comparing the left flattened properties and " is 151.
Long Statement,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,TransformIntersectOrExcept,The length of the statement  "	// If any such columns exist' we need to add an additional project' to keep the rest of the columns from being projected' as if any among these " is 143.
Long Statement,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,TransformIntersectOrExcept,The length of the statement  "		if (RemoveNonSortProperties (leftFlattenedProperties' rightFlattenedProperties' sortExpressionsOverLeft' leftInputBinding.VariableName' sortExpressionsBindingVariableName)) { " is 174.
Long Statement,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,TransformIntersectOrExcept,The length of the statement  "	Debug.Assert (leftFlattenedProperties.Count == rightFlattenedProperties.Count' "The left and the right input to INTERSECT or EXCEPT have a different number of properties"); " is 172.
Long Statement,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,FlattenProperties,The length of the statement  "			Debug.Assert (BuiltInTypeKind.EntityType == property.TypeUsage.EdmType.BuiltInTypeKind || BuiltInTypeKind.RowType == property.TypeUsage.EdmType.BuiltInTypeKind' "The input to FlattenProperties is not of EntityType or RowType?"); " is 228.
Long Statement,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,AreMatching,The length of the statement  "		return AreMatching ((DbPropertyExpression)expr1.Instance' (DbPropertyExpression)expr2.Instance' expr1BindingVariableName' expr2BindingVariableName); " is 148.
Long Statement,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,AreMatching,The length of the statement  "	return (String.Equals (instance1.VariableName' expr1BindingVariableName' StringComparison.Ordinal) && String.Equals (instance2.VariableName' expr2BindingVariableName' StringComparison.Ordinal)); " is 194.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "	functionHandlers.Add ("POINTGEOGRAPHY"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geography::Point")); " is 153.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "	functionHandlers.Add ("POINTGEOMETRY"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geometry::Point")); " is 151.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "	functionHandlers.Add ("ASTEXTZM"' (sqlgen' functionExpression) => WriteInstanceFunctionCall (sqlgen' "AsTextZM"' functionExpression' isPropertyAccess: false)); " is 159.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "	functionHandlers.Add ("BUFFERWITHTOLERANCE"' (sqlgen' functionExpression) => WriteInstanceFunctionCall (sqlgen' "BufferWithTolerance"' functionExpression' isPropertyAccess: false)); " is 181.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "	functionHandlers.Add ("ENVELOPEANGLE"' (sqlgen' functionExpression) => WriteInstanceFunctionCall (sqlgen' "EnvelopeAngle"' functionExpression' isPropertyAccess: false)); " is 169.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "	functionHandlers.Add ("ENVELOPECENTER"' (sqlgen' functionExpression) => WriteInstanceFunctionCall (sqlgen' "EnvelopeCenter"' functionExpression' isPropertyAccess: false)); " is 171.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "	functionHandlers.Add ("INSTANCEOF"' (sqlgen' functionExpression) => WriteInstanceFunctionCall (sqlgen' "InstanceOf"' functionExpression' isPropertyAccess: false)); " is 163.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "	functionHandlers.Add ("FILTER"' (sqlgen' functionExpression) => WriteInstanceFunctionCall (sqlgen' "Filter"' functionExpression' isPropertyAccess: false)); " is 155.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "	functionHandlers.Add ("MAKEVALID"' (sqlgen' functionExpression) => WriteInstanceFunctionCall (sqlgen' "MakeValid"' functionExpression' isPropertyAccess: false)); " is 161.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "	functionHandlers.Add ("REDUCE"' (sqlgen' functionExpression) => WriteInstanceFunctionCall (sqlgen' "Reduce"' functionExpression' isPropertyAccess: false)); " is 155.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "	functionHandlers.Add ("NUMRINGS"' (sqlgen' functionExpression) => WriteInstanceFunctionCall (sqlgen' "NumRings"' functionExpression' isPropertyAccess: false)); " is 159.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "	functionHandlers.Add ("RINGN"' (sqlgen' functionExpression) => WriteInstanceFunctionCall (sqlgen' "RingN"' functionExpression' isPropertyAccess: false)); " is 153.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "	staticGeographyFunctions.Add ("GeographyPointFromText"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geography::STPointFromText")); " is 179.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "	staticGeographyFunctions.Add ("GeographyLineFromText"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geography::STLineFromText")); " is 177.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "	staticGeographyFunctions.Add ("GeographyPolygonFromText"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geography::STPolyFromText")); " is 180.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "	staticGeographyFunctions.Add ("GeographyMultiPointFromText"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geography::STMPointFromText")); " is 185.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "	staticGeographyFunctions.Add ("GeographyMultiLineFromText"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geography::STMLineFromText")); " is 183.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "	staticGeographyFunctions.Add ("GeographyMultiPolygonFromText"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geography::STMPolyFromText")); " is 186.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "	staticGeographyFunctions.Add ("GeographyCollectionFromText"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geography::STGeomCollFromText")); " is 187.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "	staticGeographyFunctions.Add ("GeographyPointFromBinary"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geography::STPointFromWKB")); " is 180.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "	staticGeographyFunctions.Add ("GeographyLineFromBinary"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geography::STLineFromWKB")); " is 178.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "	staticGeographyFunctions.Add ("GeographyPolygonFromBinary"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geography::STPolyFromWKB")); " is 181.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "	staticGeographyFunctions.Add ("GeographyMultiPointFromBinary"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geography::STMPointFromWKB")); " is 186.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "	staticGeographyFunctions.Add ("GeographyMultiLineFromBinary"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geography::STMLineFromWKB")); " is 184.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "	staticGeographyFunctions.Add ("GeographyMultiPolygonFromBinary"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geography::STMPolyFromWKB")); " is 187.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "	staticGeographyFunctions.Add ("GeographyCollectionFromBinary"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geography::STGeomCollFromWKB")); " is 188.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "	staticGeometryFunctions.Add ("GeometryPointFromText"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geometry::STPointFromText")); " is 176.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "	staticGeometryFunctions.Add ("GeometryLineFromText"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geometry::STLineFromText")); " is 174.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "	staticGeometryFunctions.Add ("GeometryPolygonFromText"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geometry::STPolyFromText")); " is 177.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "	staticGeometryFunctions.Add ("GeometryMultiPointFromText"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geometry::STMPointFromText")); " is 182.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "	staticGeometryFunctions.Add ("GeometryMultiLineFromText"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geometry::STMLineFromText")); " is 180.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "	staticGeometryFunctions.Add ("GeometryMultiPolygonFromText"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geometry::STMPolyFromText")); " is 183.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "	staticGeometryFunctions.Add ("GeometryCollectionFromText"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geometry::STGeomCollFromText")); " is 184.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "	staticGeometryFunctions.Add ("GeometryPointFromBinary"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geometry::STPointFromWKB")); " is 177.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "	staticGeometryFunctions.Add ("GeometryLineFromBinary"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geometry::STLineFromWKB")); " is 175.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "	staticGeometryFunctions.Add ("GeometryPolygonFromBinary"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geometry::STPolyFromWKB")); " is 178.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "	staticGeometryFunctions.Add ("GeometryMultiPointFromBinary"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geometry::STMPointFromWKB")); " is 183.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "	staticGeometryFunctions.Add ("GeometryMultiLineFromBinary"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geometry::STMLineFromWKB")); " is 181.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "	staticGeometryFunctions.Add ("GeometryMultiPolygonFromBinary"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geometry::STMPolyFromWKB")); " is 184.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "	staticGeometryFunctions.Add ("GeometryCollectionFromBinary"' (sqlgen' functionExpression) => HandleFunctionDefaultGivenName (sqlgen' functionExpression' "geometry::STGeomCollFromWKB")); " is 185.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialFromTextFunction,The length of the statement  "	var functionNameWithSrid = functionExpression.ResultType.IsPrimitiveType (PrimitiveTypeKind.Geometry) ? "geometry::STGeomFromText" : "geography::STGeomFromText"; " is 161.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialFromTextFunction,The length of the statement  "	var functionNameWithoutSrid = functionExpression.ResultType.IsPrimitiveType (PrimitiveTypeKind.Geometry) ? "geometry::Parse" : "geography::Parse"; " is 146.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialFromTextFunction,The length of the statement  "		Debug.Assert (functionExpression.Arguments.Count == 1' "FromText function should have text or text + srid arguments only"); " is 123.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialFromGmlFunction,The length of the statement  "	return HandleSpatialStaticMethodFunctionAppendSrid (sqlgen' functionExpression' functionExpression.ResultType.IsPrimitiveType (PrimitiveTypeKind.Geometry) ? "geometry::GeomFromGml" : "geography::GeomFromGml"); " is 209.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialFromBinaryFunction,The length of the statement  "	return HandleSpatialStaticMethodFunctionAppendSrid (sqlgen' functionExpression' functionExpression.ResultType.IsPrimitiveType (PrimitiveTypeKind.Geometry) ? "geometry::STGeomFromWKB" : "geography::STGeomFromWKB"); " is 213.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialStaticMethodFunctionAppendSrid,The length of the statement  "		var sridExpression = functionExpression.ResultType.IsPrimitiveType (PrimitiveTypeKind.Geometry) ? _defaultGeometrySridExpression : _defaultGeographySridExpression; " is 163.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleFunctionArgumentsDefault,The length of the statement  "	Debug.Assert (!(isNiladicFunction && (0 < e.Arguments.Count))' "function attributed as NiladicFunction='true' in the provider manifest cannot have arguments"); " is 159.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpecialFunction,The length of the statement  "	Debug.Assert (handlers.ContainsKey (e.Function.Name)' "Special handling should be called only for functions in the list of special functions"); " is 143.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialCanonicalFunction,The length of the statement  "	Debug.Assert (spatialTypeKind == PrimitiveTypeKind.Geography || spatialTypeKind == PrimitiveTypeKind.Geometry' "Spatial function does not refer to a valid spatial primitive type kind?"); " is 186.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialCanonicalFunction,The length of the statement  "		return HandleSpatialCanonicalFunction (sqlgen' functionExpression' _geographyFunctionNameToStaticMethodHandlerDictionary' _geographyFunctionNameToInstancePropertyNameDictionary' _geographyRenamedInstanceMethodFunctionDictionary); " is 229.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialCanonicalFunction,The length of the statement  "		return HandleSpatialCanonicalFunction (sqlgen' functionExpression' _geometryFunctionNameToStaticMethodHandlerDictionary' _geometryFunctionNameToInstancePropertyNameDictionary' _geometryRenamedInstanceMethodFunctionDictionary); " is 226.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialCanonicalFunction,The length of the statement  "		Debug.Assert (functionExpression.Function.Parameters.Count > 0 && functionExpression.Function.Parameters [0].TypeUsage.IsSpatialType ()' "Instance property function does not have instance parameter?"); " is 201.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialCanonicalFunction,The length of the statement  "		return WriteInstanceFunctionCall (sqlgen' instancePropertyName' functionExpression' isPropertyAccess: true' castReturnTypeTo: null); " is 132.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialCanonicalFunction,The length of the statement  "		// Default translation pattern is instance method; the instance method name may differ from that of the spatial canonical function " is 130.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialCanonicalFunction,The length of the statement  "		Debug.Assert (functionExpression.Function.Parameters.Count > 0 && functionExpression.Function.Parameters [0].TypeUsage.IsSpatialType ()' "Instance method function does not have instance parameter?"); " is 199.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialCanonicalFunction,The length of the statement  "		return WriteInstanceFunctionCall (sqlgen' effectiveFunctionName' functionExpression' isPropertyAccess: false' castReturnTypeTo: castResultType); " is 144.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,WriteInstanceFunctionCall,The length of the statement  "	Debug.Assert (!isPropertyAccess || functionExpression.Arguments.Count == 1' "Property accessor instance functions should have only the single instance argument"); " is 162.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpecialFunctionToOperator,The length of the statement  "	Debug.Assert (_functionNameToOperatorDictionary.ContainsKey (e.Function.Name)' "The function can not be mapped to an operator"); " is 128.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleDatepartDateFunction,The length of the statement  "		throw new InvalidOperationException (Strings.SqlGen_InvalidDatePartArgumentExpression (e.Function.NamespaceName' e.Function.Name)); " is 131.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleDatepartDateFunction,The length of the statement  "		throw new InvalidOperationException (Strings.SqlGen_InvalidDatePartArgumentExpression (e.Function.NamespaceName' e.Function.Name)); " is 131.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleDatepartDateFunction,The length of the statement  "		throw new InvalidOperationException (Strings.SqlGen_InvalidDatePartArgumentValue (datepart' e.Function.NamespaceName' e.Function.Name)); " is 136.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionDateTimeTypeCreation,The length of the statement  "	Debug.Assert (args.Count == (hasDatePart ? 3 : 0) + 3 + (hasTimeZonePart ? 1 : 0)' "Invalid number of parameters for a date time creating function"); " is 149.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,TranslateConstantParameterForLike,The length of the statement  "	searchParamBuilder.Append (SqlProviderManifest.EscapeLikeText (constSearchParamExpression.Value as string' false' out escapingOccurred)); " is 137.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionContains,The length of the statement  "	if ((constSearchParamExpression != null) && (string.IsNullOrEmpty (constSearchParamExpression.Value as string) == false)) { " is 123.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionStartsWith,The length of the statement  "	if ((constSearchParamExpression != null) && (string.IsNullOrEmpty (constSearchParamExpression.Value as string) == false)) { " is 123.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionEndsWith,The length of the statement  "	if ((constSearchParamExpression != null) && (targetParamExpression != null) && (string.IsNullOrEmpty (constSearchParamExpression.Value as string) == false)) { " is 158.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionEndsWith,The length of the statement  "		//      CASE WHEN ('abcd ' LIKE '%cd') THEN cast(1 as bit) WHEN ( NOT ('abcd ' LIKE '%cd')) THEN cast(0 as bit) END AS [C1] " is 123.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,CastReturnTypeToInt32,The length of the statement  "	return e.Arguments.Select (t => sqlgen.StoreItemCollection.ProviderManifest.GetStoreType (t.ResultType)).Any (storeType => _maxTypeNames.Contains (storeType.EdmType.Name)); " is 172.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,GenerateFunctionSql,The length of the statement  "		var functionName = String.IsNullOrEmpty (function.StoreFunctionNameAttribute) ? function.Name : function.StoreFunctionNameAttribute; " is 132.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,GenerateSql,The length of the statement  "	paramsToForceNonUnicode = new HashSet<string> (_candidateParametersToForceNonUnicode.Where (p => p.Value).Select (q => q.Key).ToList ()); " is 137.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,MatchPatternForForcingNonUnicode,The length of the statement  "		return MatchSourcePatternForForcingNonUnicode (likeExpr.Argument) && MatchTargetPatternForForcingNonUnicode (likeExpr.Pattern) && MatchTargetPatternForForcingNonUnicode (likeExpr.Escape); " is 187.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,MatchPatternForForcingNonUnicode,The length of the statement  "		return (MatchSourcePatternForForcingNonUnicode (left) && MatchTargetPatternForForcingNonUnicode (right)) || (MatchSourcePatternForForcingNonUnicode (right) && MatchTargetPatternForForcingNonUnicode (left)); " is 206.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,MatchTargetPatternForForcingNonUnicode,The length of the statement  "			return (MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [0]) && MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [1])); " is 148.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,MatchTargetPatternForForcingNonUnicode,The length of the statement  "		if ("Edm.Replace".Equals (functionFullName' StringComparison.Ordinal) || "SqlServer.REPLACE".Equals (functionFullName' StringComparison.Ordinal)) { " is 147.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,MatchTargetPatternForForcingNonUnicode,The length of the statement  "			return (MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [0]) && MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [1]) && MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [2])); " is 219.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,MatchSourcePatternForForcingNonUnicode,The length of the statement  "	return argument.ExpressionKind == DbExpressionKind.Property && argument.ResultType.TryGetIsUnicode (out isUnicode) && !isUnicode; " is 129.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,IsConstParamOrNullExpressionUnicodeNotSpecified,The length of the statement  "	return (expressionKind == DbExpressionKind.Constant || expressionKind == DbExpressionKind.ParameterReference || expressionKind == DbExpressionKind.Null) && !type.TryGetFacetValue (DbProviderManifest.UnicodeFacetName' out isUnicode); " is 232.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitConstant,The length of the statement  "	//      Binary' Boolean' Byte' Date' DateTime' DateTimeOffset' Decimal' Double' Guid' Int16' Int32' Int64' Single' String' Time " is 127.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitConstant,The length of the statement  "			result.Append (EscapeSingleQuote (((DateTime)e.Value).ToString (IsPreKatmai ? "yyyy-MM-dd HH:mm:ss.fff" : "yyyy-MM-dd HH:mm:ss.fffffff"' CultureInfo.InvariantCulture)' false/* IsUnicode */)); " is 191.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitConstant,The length of the statement  "			result.Append (EscapeSingleQuote (((DateTimeOffset)e.Value).ToString ("yyyy-MM-dd HH:mm:ss.fffffff zzz"' CultureInfo.InvariantCulture)' false/* IsUnicode */)); " is 159.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitConstant,The length of the statement  "			throw new NotSupportedException (Strings.NoStoreTypeForEdmType (resultType.EdmType.Name' ((PrimitiveType)(resultType.EdmType)).PrimitiveTypeKind)); " is 147.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,AppendSpatialConstant,The length of the statement  "			functionExpression = (spatialValue.IsGeography ? SpatialEdmFunctions.GeographyFromText (wellKnownText' srid.Value) : SpatialEdmFunctions.GeometryFromText (wellKnownText' srid.Value)); " is 183.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,AppendSpatialConstant,The length of the statement  "				functionExpression = (spatialValue.IsGeography ? SpatialEdmFunctions.GeographyFromBinary (wellKnownBinary' srid.Value) : SpatialEdmFunctions.GeometryFromBinary (wellKnownBinary' srid.Value)); " is 191.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,AppendSpatialConstant,The length of the statement  "					functionExpression = (spatialValue.IsGeography ? SpatialEdmFunctions.GeographyFromGml (gmlString' srid.Value) : SpatialEdmFunctions.GeometryFromGml (gmlString' srid.Value)); " is 173.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,AssertValidDouble,The length of the statement  "		throw new NotSupportedException (Strings.SqlGen_TypedNaNNotSupported (Enum.GetName (typeof(PrimitiveTypeKind)' PrimitiveTypeKind.Double))); " is 139.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,AssertValidDouble,The length of the statement  "		throw new NotSupportedException (Strings.SqlGen_TypedPositiveInfinityNotSupported (Enum.GetName (typeof(PrimitiveTypeKind)' PrimitiveTypeKind.Double)' typeof(Double).Name)); " is 173.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,AssertValidDouble,The length of the statement  "		throw new NotSupportedException (Strings.SqlGen_TypedNegativeInfinityNotSupported (Enum.GetName (typeof(PrimitiveTypeKind)' PrimitiveTypeKind.Double)' typeof(Double).Name)); " is 173.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,AssertValidSingle,The length of the statement  "		throw new NotSupportedException (Strings.SqlGen_TypedNaNNotSupported (Enum.GetName (typeof(PrimitiveTypeKind)' PrimitiveTypeKind.Single))); " is 139.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,AssertValidSingle,The length of the statement  "		throw new NotSupportedException (Strings.SqlGen_TypedPositiveInfinityNotSupported (Enum.GetName (typeof(PrimitiveTypeKind)' PrimitiveTypeKind.Single)' typeof(Single).Name)); " is 173.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,AssertValidSingle,The length of the statement  "		throw new NotSupportedException (Strings.SqlGen_TypedNegativeInfinityNotSupported (Enum.GetName (typeof(PrimitiveTypeKind)' PrimitiveTypeKind.Single)' typeof(Single).Name)); " is 173.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,Visit,The length of the statement  "	var needsInnerQuery = GroupByAggregatesNeedInnerQuery (e.Aggregates' e.Input.GroupVariableName) || GroupByKeysNeedInnerQuery (e.Keys' e.Input.VariableName); " is 156.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,Visit,The length of the statement  "	Debug.Assert (e.Limit is DbConstantExpression || e.Limit is DbParameterReferenceExpression' "DbLimitExpression.Limit is of invalid expression type"); " is 149.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,Visit,The length of the statement  "	Debug.Assert (!((SqlVersion == SqlVersion.Sql8) && (e.Limit is DbParameterReferenceExpression))' "DbLimitExpression.Limit is DbParameterReferenceExpression for SQL Server 2000."); " is 179.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,TryTranslateIntoIn,The length of the statement  "			forceNonUnicodeOnKey = !forceNonUnicodeOnQualifyingValues && MatchTargetPatternForForcingNonUnicode (key) && realValues.All (MatchSourcePatternForForcingNonUnicode); " is 165.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,TryTranslateIntoIn,The length of the statement  "			HandleInValue (sqlBuilder' value' key.ResultType.EdmType == value.ResultType.EdmType' forceNonUnicodeOnQualifyingValues); " is 121.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,TryTranslateIntoIn,The length of the statement  "				HandleInValue (sqlBuilder' value' key.ResultType.EdmType == value.ResultType.EdmType' forceNonUnicodeOnQualifyingValues); " is 121.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,HandleInValue,The length of the statement  "	ForcingNonUnicode (() => ParenthesizeExpressionWithoutRedundantConstantCasts (value' sqlBuilder' isSameEdmType)' forceNonUnicodeOnQualifyingValues && MatchTargetPatternForForcingNonUnicode (value)); " is 198.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,IsKeyForIn,The length of the statement  "	return (e.ExpressionKind == DbExpressionKind.Property || e.ExpressionKind == DbExpressionKind.VariableReference || e.ExpressionKind == DbExpressionKind.ParameterReference); " is 172.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,Visit,The length of the statement  "	Debug.Assert (e.Count is DbConstantExpression || e.Count is DbParameterReferenceExpression' "DbSkipExpression.Count is of invalid expression type"); " is 148.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitAggregate,The length of the statement  "	if (functionAggregate.Function.IsCanonicalFunction () && String.Equals (functionAggregate.Function.Name' "BigCount"' StringComparison.Ordinal)) { " is 145.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,FlattenAssociativeExpression,The length of the statement  "	if (kind != DbExpressionKind.Or && kind != DbExpressionKind.And && kind != DbExpressionKind.Plus && kind != DbExpressionKind.Multiply) { " is 136.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitJoinExpression,The length of the statement  "		var needsJoinContext = (input.Expression.ExpressionKind == DbExpressionKind.Scan) || (isLeftMostInput && (IsJoinExpression (input.Expression) || IsApplyExpression (input.Expression))); " is 184.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,ProcessJoinInputResult,The length of the statement  "						fromSymbol = new Symbol (input.VariableName' input.VariableType' sqlSelectStatement.OutputColumns' sqlSelectStatement.OutputColumnsRenamed); " is 140.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,ProcessJoinInputResult,The length of the statement  "				fromSymbol = new Symbol (input.VariableName' input.VariableType' sqlSelectStatement.OutputColumns' sqlSelectStatement.OutputColumnsRenamed); " is 140.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitSetOpExpression,The length of the statement  "		var fromSymbol = new Symbol ("X"' setOpExpression.Left.ResultType.GetElementTypeUsage ()' leafSelectStatements [0].OutputColumns' true); " is 136.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitAndGatherSetOpLeafExpressions,The length of the statement  "	if (this.SqlVersion > SqlVersion.Sql8 // (2) we are UNION ALL or INTERSECT (EXCEPT is not safe to flatten since it is order-dependent) " is 134.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitAndGatherSetOpLeafExpressions,The length of the statement  "	&& (kind == DbExpressionKind.UnionAll || kind == DbExpressionKind.Intersect) // (3) the given expression is another instance of the given kind " is 142.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,IsJoinExpression,The length of the statement  "	return (DbExpressionKind.CrossJoin == e.ExpressionKind || DbExpressionKind.FullOuterJoin == e.ExpressionKind || DbExpressionKind.InnerJoin == e.ExpressionKind || DbExpressionKind.LeftOuterJoin == e.ExpressionKind); " is 214.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,IsCompatible,The length of the statement  "		return result.Select.Top == null && result.Select.Skip == null // #494803: The projection after distinct may not project all  " is 124.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,IsCompatible,The length of the statement  "		return result.Select.IsEmpty && result.Where.IsEmpty && result.GroupBy.IsEmpty && result.Select.Top == null && result.Select.Skip == null; " is 138.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,IsCompatible,The length of the statement  "		return result.Select.IsEmpty && result.GroupBy.IsEmpty && result.OrderBy.IsEmpty && result.Select.Top == null && result.Select.Skip == null && !result.Select.IsDistinct; " is 169.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,IsCompatible,The length of the statement  "		return result.Select.IsEmpty && result.GroupBy.IsEmpty // SQLBUDT #513640 - If distinct is specified' the projection may affect " is 127.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,IsCompatible,The length of the statement  "		return result.Select.IsEmpty && result.Select.Skip == null && result.GroupBy.IsEmpty && result.OrderBy.IsEmpty && !result.Select.IsDistinct; " is 140.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,IsCompatible,The length of the statement  "		return result.Select.IsEmpty && result.GroupBy.IsEmpty && result.OrderBy.IsEmpty // SQLBUDT #513640 - A Project may be on the top of the Sort' and if so' it would need " is 167.
Complex Conditional,System.Data.Entity.SqlServer.Utilities,TypeExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\TypeExtensions.cs,OverridesEqualsOrGetHashCode,The conditional expression  "type.GetDeclaredMethods ().Any (m => (m.Name == "Equals" || m.Name == "GetHashCode") && m.DeclaringType != typeof(object) && m.GetBaseDefinition ().DeclaringType == typeof(object))"  is complex.
Complex Conditional,System.Data.Entity.SqlServer,SqlDdlBuilder,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlDdlBuilder.cs,AppendType,The conditional expression  "type.EdmType.Name == "binary" && 8 == type.GetMaxLength () && column.TypeUsage.Facets.TryGetValue ("StoreGeneratedPattern"' false' out storeGenFacet) && storeGenFacet.Value != null && StoreGeneratedPattern.Computed == (StoreGeneratedPattern)storeGenFacet.Value"  is complex.
Complex Conditional,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,Generate,The conditional expression  "(column.IsNullable != null) && !column.IsNullable.Value && (column.DefaultValue == null) && (string.IsNullOrWhiteSpace (column.DefaultValueSql)) && !column.IsIdentity && !column.IsTimestamp && !column.StoreType.EqualsIgnoreCase ("rowversion") && !column.StoreType.EqualsIgnoreCase ("timestamp")"  is complex.
Complex Conditional,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,EscapeLikeText,The conditional expression  "!(text.Contains ("%") || text.Contains ("_") || text.Contains ("[") || text.Contains ("^") || alwaysEscapeEscapeChar && text.Contains (LikeEscapeCharToString))"  is complex.
Complex Conditional,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,EscapeLikeText,The conditional expression  "c == '%' || c == '_' || c == '[' || c == '^' || c == LikeEscapeChar"  is complex.
Complex Conditional,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateSqlParameter,The conditional expression  "precision.HasValue && (isOutParam || (result.Precision != precision.Value && _truncateDecimalsToScale))"  is complex.
Complex Conditional,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateSqlParameter,The conditional expression  "scale.HasValue && (isOutParam || (result.Scale != scale.Value && _truncateDecimalsToScale))"  is complex.
Complex Conditional,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetNonMaxLength,The conditional expression  "type == SqlDbType.Char || type == SqlDbType.VarChar || type == SqlDbType.Binary || type == SqlDbType.VarBinary"  is complex.
Complex Conditional,System.Data.Entity.SqlServer.SqlGen,DmlSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,IsValidScopeIdentityColumnType,The conditional expression  "typeName == "tinyint" || typeName == "smallint" || typeName == "int" || typeName == "bigint""  is complex.
Complex Conditional,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,FlattenAssociativeExpression,The conditional expression  "kind != DbExpressionKind.Or && kind != DbExpressionKind.And && kind != DbExpressionKind.Plus && kind != DbExpressionKind.Multiply"  is complex.
Complex Conditional,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitAndGatherSetOpLeafExpressions,The conditional expression  "this.SqlVersion > SqlVersion.Sql8 // (2) we are UNION ALL or INTERSECT (EXCEPT is not safe to flatten since it is order-dependent)  && (kind == DbExpressionKind.UnionAll || kind == DbExpressionKind.Intersect) // (3) the given expression is another instance of the given kind  && expression.ExpressionKind == kind"  is complex.
Complex Conditional,System.Data.Entity.SqlServer.SqlGen,SqlSelectStatement,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlSelectStatement.cs,WriteSql,The conditional expression  "(null != orderBy) && !OrderBy.IsEmpty && (IsTopMost || Select.Top != null || Select.Skip != null)"  is complex.
Virtual Method Call from Constructor,System.Data.Entity.SqlServer,SqlSpatialDataReader,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlSpatialDataReader.cs,SqlSpatialDataReader,The constructor "SqlSpatialDataReader" calls a virtual method "GetDataTypeName".
Empty Catch Block,System.Data.Entity.SqlServer,SqlTypesAssemblyLoader,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTypesAssemblyLoader.cs,BindToLatest,The method has an empty catch block.
Empty Catch Block,System.Data.Entity.SqlServer,SqlTypesAssemblyLoader,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTypesAssemblyLoader.cs,BindToLatest,The method has an empty catch block.
Empty Catch Block,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetDbProviderManifestToken,The method has an empty catch block.
Empty Catch Block,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetDbProviderManifestToken,The method has an empty catch block.
Magic Number,System.Data.Entity.SqlServer.Utilities,DatabaseName,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\DatabaseName.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (_name.GetHashCode () * 397) ^ (_schema != null ? _schema.GetHashCode () : 0);  }  
Magic Number,System.Data.Entity.SqlServer.Utilities,DatabaseName,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\DatabaseName.cs,GetHashCode,The following statement contains a magic number: return (_name.GetHashCode () * 397) ^ (_schema != null ? _schema.GetHashCode () : 0);  
Magic Number,System.Data.Entity.SqlServer.Utilities,StringExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\StringExtensions.cs,MigrationName,The following statement contains a magic number: return migrationId.Substring (16);  
Magic Number,System.Data.Entity.SqlServer.Utilities,StringExtensions,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\..\Common\StringExtensions.cs,ToAutomaticMigrationId,The following statement contains a magic number: return timeStampInt + migrationId.Substring (15) + "_" + Strings.AutomaticMigration;  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null) {  	// Enumerate through all errors found in the exception.  	foreach (SqlError err in sqlException.Errors) {  		switch (err.Number) {  		// SQL Error Code: 41325  		// The current transaction failed to commit due to a serializable validation failure.  		case 41325:  		// SQL Error Code: 41305  		// The current transaction failed to commit due to a repeatable read validation failure.  		case 41305:  		// SQL Error Code: 41302  		// The current transaction attempted to update a record that has been updated since the transaction started.  		case 41302:  		// SQL Error Code: 41301  		// A previous transaction that the current transaction took a dependency on has aborted'  		// and the current transaction can no longer commit  		case 41301:  		// SQL Error Code: 40613  		// Database XXXX on server YYYY is not currently available. Please retry the connection later.  		// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  		case 40613:  		// SQL Error Code: 40501  		// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  		case 40501:  		// SQL Error Code: 40197  		// The service has encountered an error processing your request. Please try again.  		case 40197:  		// SQL Error Code: 10929  		// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  		// However' the server is currently too busy to support requests greater than %d for this database.  		// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  		case 10929:  		// SQL Error Code: 10928  		// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  		// see http://go.microsoft.com/fwlink/?LinkId=267637.  		case 10928:  		// SQL Error Code: 10060  		// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   		// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   		// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   		// because the connected party did not properly respond after a period of time' or established connection failed   		// because connected host has failed to respond.)"}  		case 10060:  		// SQL Error Code: 10054  		// A transport-level error has occurred when sending the request to the server.   		// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  		case 10054:  		// SQL Error Code: 10053  		// A transport-level error has occurred when receiving results from the server.  		// An established connection was aborted by the software in your host machine.  		case 10053:  		// SQL Error Code: 233  		// The client was unable to establish a connection because of an error during connection initialization process before login.   		// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  		// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  		// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  		// the remote host.)  		case 233:  		// SQL Error Code: 64  		// A connection was successfully established with the server' but then an error occurred during the login process.   		// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   		case 64:  		// DBNETLIB Error Code: 20  		// The instance of SQL Server you attempted to connect to does not support encryption.  		case 20:  			return true;  		// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  		// DBNETLIB Error Code: -2  		// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   		//case -2:  		}  	}  	return false;  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null) {  	// Enumerate through all errors found in the exception.  	foreach (SqlError err in sqlException.Errors) {  		switch (err.Number) {  		// SQL Error Code: 41325  		// The current transaction failed to commit due to a serializable validation failure.  		case 41325:  		// SQL Error Code: 41305  		// The current transaction failed to commit due to a repeatable read validation failure.  		case 41305:  		// SQL Error Code: 41302  		// The current transaction attempted to update a record that has been updated since the transaction started.  		case 41302:  		// SQL Error Code: 41301  		// A previous transaction that the current transaction took a dependency on has aborted'  		// and the current transaction can no longer commit  		case 41301:  		// SQL Error Code: 40613  		// Database XXXX on server YYYY is not currently available. Please retry the connection later.  		// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  		case 40613:  		// SQL Error Code: 40501  		// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  		case 40501:  		// SQL Error Code: 40197  		// The service has encountered an error processing your request. Please try again.  		case 40197:  		// SQL Error Code: 10929  		// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  		// However' the server is currently too busy to support requests greater than %d for this database.  		// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  		case 10929:  		// SQL Error Code: 10928  		// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  		// see http://go.microsoft.com/fwlink/?LinkId=267637.  		case 10928:  		// SQL Error Code: 10060  		// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   		// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   		// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   		// because the connected party did not properly respond after a period of time' or established connection failed   		// because connected host has failed to respond.)"}  		case 10060:  		// SQL Error Code: 10054  		// A transport-level error has occurred when sending the request to the server.   		// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  		case 10054:  		// SQL Error Code: 10053  		// A transport-level error has occurred when receiving results from the server.  		// An established connection was aborted by the software in your host machine.  		case 10053:  		// SQL Error Code: 233  		// The client was unable to establish a connection because of an error during connection initialization process before login.   		// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  		// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  		// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  		// the remote host.)  		case 233:  		// SQL Error Code: 64  		// A connection was successfully established with the server' but then an error occurred during the login process.   		// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   		case 64:  		// DBNETLIB Error Code: 20  		// The instance of SQL Server you attempted to connect to does not support encryption.  		case 20:  			return true;  		// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  		// DBNETLIB Error Code: -2  		// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   		//case -2:  		}  	}  	return false;  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null) {  	// Enumerate through all errors found in the exception.  	foreach (SqlError err in sqlException.Errors) {  		switch (err.Number) {  		// SQL Error Code: 41325  		// The current transaction failed to commit due to a serializable validation failure.  		case 41325:  		// SQL Error Code: 41305  		// The current transaction failed to commit due to a repeatable read validation failure.  		case 41305:  		// SQL Error Code: 41302  		// The current transaction attempted to update a record that has been updated since the transaction started.  		case 41302:  		// SQL Error Code: 41301  		// A previous transaction that the current transaction took a dependency on has aborted'  		// and the current transaction can no longer commit  		case 41301:  		// SQL Error Code: 40613  		// Database XXXX on server YYYY is not currently available. Please retry the connection later.  		// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  		case 40613:  		// SQL Error Code: 40501  		// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  		case 40501:  		// SQL Error Code: 40197  		// The service has encountered an error processing your request. Please try again.  		case 40197:  		// SQL Error Code: 10929  		// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  		// However' the server is currently too busy to support requests greater than %d for this database.  		// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  		case 10929:  		// SQL Error Code: 10928  		// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  		// see http://go.microsoft.com/fwlink/?LinkId=267637.  		case 10928:  		// SQL Error Code: 10060  		// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   		// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   		// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   		// because the connected party did not properly respond after a period of time' or established connection failed   		// because connected host has failed to respond.)"}  		case 10060:  		// SQL Error Code: 10054  		// A transport-level error has occurred when sending the request to the server.   		// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  		case 10054:  		// SQL Error Code: 10053  		// A transport-level error has occurred when receiving results from the server.  		// An established connection was aborted by the software in your host machine.  		case 10053:  		// SQL Error Code: 233  		// The client was unable to establish a connection because of an error during connection initialization process before login.   		// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  		// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  		// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  		// the remote host.)  		case 233:  		// SQL Error Code: 64  		// A connection was successfully established with the server' but then an error occurred during the login process.   		// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   		case 64:  		// DBNETLIB Error Code: 20  		// The instance of SQL Server you attempted to connect to does not support encryption.  		case 20:  			return true;  		// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  		// DBNETLIB Error Code: -2  		// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   		//case -2:  		}  	}  	return false;  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null) {  	// Enumerate through all errors found in the exception.  	foreach (SqlError err in sqlException.Errors) {  		switch (err.Number) {  		// SQL Error Code: 41325  		// The current transaction failed to commit due to a serializable validation failure.  		case 41325:  		// SQL Error Code: 41305  		// The current transaction failed to commit due to a repeatable read validation failure.  		case 41305:  		// SQL Error Code: 41302  		// The current transaction attempted to update a record that has been updated since the transaction started.  		case 41302:  		// SQL Error Code: 41301  		// A previous transaction that the current transaction took a dependency on has aborted'  		// and the current transaction can no longer commit  		case 41301:  		// SQL Error Code: 40613  		// Database XXXX on server YYYY is not currently available. Please retry the connection later.  		// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  		case 40613:  		// SQL Error Code: 40501  		// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  		case 40501:  		// SQL Error Code: 40197  		// The service has encountered an error processing your request. Please try again.  		case 40197:  		// SQL Error Code: 10929  		// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  		// However' the server is currently too busy to support requests greater than %d for this database.  		// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  		case 10929:  		// SQL Error Code: 10928  		// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  		// see http://go.microsoft.com/fwlink/?LinkId=267637.  		case 10928:  		// SQL Error Code: 10060  		// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   		// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   		// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   		// because the connected party did not properly respond after a period of time' or established connection failed   		// because connected host has failed to respond.)"}  		case 10060:  		// SQL Error Code: 10054  		// A transport-level error has occurred when sending the request to the server.   		// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  		case 10054:  		// SQL Error Code: 10053  		// A transport-level error has occurred when receiving results from the server.  		// An established connection was aborted by the software in your host machine.  		case 10053:  		// SQL Error Code: 233  		// The client was unable to establish a connection because of an error during connection initialization process before login.   		// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  		// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  		// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  		// the remote host.)  		case 233:  		// SQL Error Code: 64  		// A connection was successfully established with the server' but then an error occurred during the login process.   		// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   		case 64:  		// DBNETLIB Error Code: 20  		// The instance of SQL Server you attempted to connect to does not support encryption.  		case 20:  			return true;  		// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  		// DBNETLIB Error Code: -2  		// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   		//case -2:  		}  	}  	return false;  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null) {  	// Enumerate through all errors found in the exception.  	foreach (SqlError err in sqlException.Errors) {  		switch (err.Number) {  		// SQL Error Code: 41325  		// The current transaction failed to commit due to a serializable validation failure.  		case 41325:  		// SQL Error Code: 41305  		// The current transaction failed to commit due to a repeatable read validation failure.  		case 41305:  		// SQL Error Code: 41302  		// The current transaction attempted to update a record that has been updated since the transaction started.  		case 41302:  		// SQL Error Code: 41301  		// A previous transaction that the current transaction took a dependency on has aborted'  		// and the current transaction can no longer commit  		case 41301:  		// SQL Error Code: 40613  		// Database XXXX on server YYYY is not currently available. Please retry the connection later.  		// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  		case 40613:  		// SQL Error Code: 40501  		// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  		case 40501:  		// SQL Error Code: 40197  		// The service has encountered an error processing your request. Please try again.  		case 40197:  		// SQL Error Code: 10929  		// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  		// However' the server is currently too busy to support requests greater than %d for this database.  		// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  		case 10929:  		// SQL Error Code: 10928  		// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  		// see http://go.microsoft.com/fwlink/?LinkId=267637.  		case 10928:  		// SQL Error Code: 10060  		// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   		// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   		// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   		// because the connected party did not properly respond after a period of time' or established connection failed   		// because connected host has failed to respond.)"}  		case 10060:  		// SQL Error Code: 10054  		// A transport-level error has occurred when sending the request to the server.   		// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  		case 10054:  		// SQL Error Code: 10053  		// A transport-level error has occurred when receiving results from the server.  		// An established connection was aborted by the software in your host machine.  		case 10053:  		// SQL Error Code: 233  		// The client was unable to establish a connection because of an error during connection initialization process before login.   		// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  		// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  		// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  		// the remote host.)  		case 233:  		// SQL Error Code: 64  		// A connection was successfully established with the server' but then an error occurred during the login process.   		// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   		case 64:  		// DBNETLIB Error Code: 20  		// The instance of SQL Server you attempted to connect to does not support encryption.  		case 20:  			return true;  		// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  		// DBNETLIB Error Code: -2  		// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   		//case -2:  		}  	}  	return false;  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null) {  	// Enumerate through all errors found in the exception.  	foreach (SqlError err in sqlException.Errors) {  		switch (err.Number) {  		// SQL Error Code: 41325  		// The current transaction failed to commit due to a serializable validation failure.  		case 41325:  		// SQL Error Code: 41305  		// The current transaction failed to commit due to a repeatable read validation failure.  		case 41305:  		// SQL Error Code: 41302  		// The current transaction attempted to update a record that has been updated since the transaction started.  		case 41302:  		// SQL Error Code: 41301  		// A previous transaction that the current transaction took a dependency on has aborted'  		// and the current transaction can no longer commit  		case 41301:  		// SQL Error Code: 40613  		// Database XXXX on server YYYY is not currently available. Please retry the connection later.  		// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  		case 40613:  		// SQL Error Code: 40501  		// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  		case 40501:  		// SQL Error Code: 40197  		// The service has encountered an error processing your request. Please try again.  		case 40197:  		// SQL Error Code: 10929  		// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  		// However' the server is currently too busy to support requests greater than %d for this database.  		// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  		case 10929:  		// SQL Error Code: 10928  		// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  		// see http://go.microsoft.com/fwlink/?LinkId=267637.  		case 10928:  		// SQL Error Code: 10060  		// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   		// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   		// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   		// because the connected party did not properly respond after a period of time' or established connection failed   		// because connected host has failed to respond.)"}  		case 10060:  		// SQL Error Code: 10054  		// A transport-level error has occurred when sending the request to the server.   		// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  		case 10054:  		// SQL Error Code: 10053  		// A transport-level error has occurred when receiving results from the server.  		// An established connection was aborted by the software in your host machine.  		case 10053:  		// SQL Error Code: 233  		// The client was unable to establish a connection because of an error during connection initialization process before login.   		// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  		// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  		// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  		// the remote host.)  		case 233:  		// SQL Error Code: 64  		// A connection was successfully established with the server' but then an error occurred during the login process.   		// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   		case 64:  		// DBNETLIB Error Code: 20  		// The instance of SQL Server you attempted to connect to does not support encryption.  		case 20:  			return true;  		// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  		// DBNETLIB Error Code: -2  		// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   		//case -2:  		}  	}  	return false;  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null) {  	// Enumerate through all errors found in the exception.  	foreach (SqlError err in sqlException.Errors) {  		switch (err.Number) {  		// SQL Error Code: 41325  		// The current transaction failed to commit due to a serializable validation failure.  		case 41325:  		// SQL Error Code: 41305  		// The current transaction failed to commit due to a repeatable read validation failure.  		case 41305:  		// SQL Error Code: 41302  		// The current transaction attempted to update a record that has been updated since the transaction started.  		case 41302:  		// SQL Error Code: 41301  		// A previous transaction that the current transaction took a dependency on has aborted'  		// and the current transaction can no longer commit  		case 41301:  		// SQL Error Code: 40613  		// Database XXXX on server YYYY is not currently available. Please retry the connection later.  		// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  		case 40613:  		// SQL Error Code: 40501  		// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  		case 40501:  		// SQL Error Code: 40197  		// The service has encountered an error processing your request. Please try again.  		case 40197:  		// SQL Error Code: 10929  		// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  		// However' the server is currently too busy to support requests greater than %d for this database.  		// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  		case 10929:  		// SQL Error Code: 10928  		// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  		// see http://go.microsoft.com/fwlink/?LinkId=267637.  		case 10928:  		// SQL Error Code: 10060  		// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   		// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   		// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   		// because the connected party did not properly respond after a period of time' or established connection failed   		// because connected host has failed to respond.)"}  		case 10060:  		// SQL Error Code: 10054  		// A transport-level error has occurred when sending the request to the server.   		// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  		case 10054:  		// SQL Error Code: 10053  		// A transport-level error has occurred when receiving results from the server.  		// An established connection was aborted by the software in your host machine.  		case 10053:  		// SQL Error Code: 233  		// The client was unable to establish a connection because of an error during connection initialization process before login.   		// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  		// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  		// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  		// the remote host.)  		case 233:  		// SQL Error Code: 64  		// A connection was successfully established with the server' but then an error occurred during the login process.   		// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   		case 64:  		// DBNETLIB Error Code: 20  		// The instance of SQL Server you attempted to connect to does not support encryption.  		case 20:  			return true;  		// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  		// DBNETLIB Error Code: -2  		// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   		//case -2:  		}  	}  	return false;  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null) {  	// Enumerate through all errors found in the exception.  	foreach (SqlError err in sqlException.Errors) {  		switch (err.Number) {  		// SQL Error Code: 41325  		// The current transaction failed to commit due to a serializable validation failure.  		case 41325:  		// SQL Error Code: 41305  		// The current transaction failed to commit due to a repeatable read validation failure.  		case 41305:  		// SQL Error Code: 41302  		// The current transaction attempted to update a record that has been updated since the transaction started.  		case 41302:  		// SQL Error Code: 41301  		// A previous transaction that the current transaction took a dependency on has aborted'  		// and the current transaction can no longer commit  		case 41301:  		// SQL Error Code: 40613  		// Database XXXX on server YYYY is not currently available. Please retry the connection later.  		// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  		case 40613:  		// SQL Error Code: 40501  		// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  		case 40501:  		// SQL Error Code: 40197  		// The service has encountered an error processing your request. Please try again.  		case 40197:  		// SQL Error Code: 10929  		// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  		// However' the server is currently too busy to support requests greater than %d for this database.  		// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  		case 10929:  		// SQL Error Code: 10928  		// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  		// see http://go.microsoft.com/fwlink/?LinkId=267637.  		case 10928:  		// SQL Error Code: 10060  		// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   		// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   		// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   		// because the connected party did not properly respond after a period of time' or established connection failed   		// because connected host has failed to respond.)"}  		case 10060:  		// SQL Error Code: 10054  		// A transport-level error has occurred when sending the request to the server.   		// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  		case 10054:  		// SQL Error Code: 10053  		// A transport-level error has occurred when receiving results from the server.  		// An established connection was aborted by the software in your host machine.  		case 10053:  		// SQL Error Code: 233  		// The client was unable to establish a connection because of an error during connection initialization process before login.   		// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  		// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  		// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  		// the remote host.)  		case 233:  		// SQL Error Code: 64  		// A connection was successfully established with the server' but then an error occurred during the login process.   		// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   		case 64:  		// DBNETLIB Error Code: 20  		// The instance of SQL Server you attempted to connect to does not support encryption.  		case 20:  			return true;  		// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  		// DBNETLIB Error Code: -2  		// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   		//case -2:  		}  	}  	return false;  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null) {  	// Enumerate through all errors found in the exception.  	foreach (SqlError err in sqlException.Errors) {  		switch (err.Number) {  		// SQL Error Code: 41325  		// The current transaction failed to commit due to a serializable validation failure.  		case 41325:  		// SQL Error Code: 41305  		// The current transaction failed to commit due to a repeatable read validation failure.  		case 41305:  		// SQL Error Code: 41302  		// The current transaction attempted to update a record that has been updated since the transaction started.  		case 41302:  		// SQL Error Code: 41301  		// A previous transaction that the current transaction took a dependency on has aborted'  		// and the current transaction can no longer commit  		case 41301:  		// SQL Error Code: 40613  		// Database XXXX on server YYYY is not currently available. Please retry the connection later.  		// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  		case 40613:  		// SQL Error Code: 40501  		// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  		case 40501:  		// SQL Error Code: 40197  		// The service has encountered an error processing your request. Please try again.  		case 40197:  		// SQL Error Code: 10929  		// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  		// However' the server is currently too busy to support requests greater than %d for this database.  		// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  		case 10929:  		// SQL Error Code: 10928  		// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  		// see http://go.microsoft.com/fwlink/?LinkId=267637.  		case 10928:  		// SQL Error Code: 10060  		// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   		// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   		// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   		// because the connected party did not properly respond after a period of time' or established connection failed   		// because connected host has failed to respond.)"}  		case 10060:  		// SQL Error Code: 10054  		// A transport-level error has occurred when sending the request to the server.   		// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  		case 10054:  		// SQL Error Code: 10053  		// A transport-level error has occurred when receiving results from the server.  		// An established connection was aborted by the software in your host machine.  		case 10053:  		// SQL Error Code: 233  		// The client was unable to establish a connection because of an error during connection initialization process before login.   		// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  		// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  		// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  		// the remote host.)  		case 233:  		// SQL Error Code: 64  		// A connection was successfully established with the server' but then an error occurred during the login process.   		// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   		case 64:  		// DBNETLIB Error Code: 20  		// The instance of SQL Server you attempted to connect to does not support encryption.  		case 20:  			return true;  		// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  		// DBNETLIB Error Code: -2  		// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   		//case -2:  		}  	}  	return false;  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null) {  	// Enumerate through all errors found in the exception.  	foreach (SqlError err in sqlException.Errors) {  		switch (err.Number) {  		// SQL Error Code: 41325  		// The current transaction failed to commit due to a serializable validation failure.  		case 41325:  		// SQL Error Code: 41305  		// The current transaction failed to commit due to a repeatable read validation failure.  		case 41305:  		// SQL Error Code: 41302  		// The current transaction attempted to update a record that has been updated since the transaction started.  		case 41302:  		// SQL Error Code: 41301  		// A previous transaction that the current transaction took a dependency on has aborted'  		// and the current transaction can no longer commit  		case 41301:  		// SQL Error Code: 40613  		// Database XXXX on server YYYY is not currently available. Please retry the connection later.  		// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  		case 40613:  		// SQL Error Code: 40501  		// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  		case 40501:  		// SQL Error Code: 40197  		// The service has encountered an error processing your request. Please try again.  		case 40197:  		// SQL Error Code: 10929  		// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  		// However' the server is currently too busy to support requests greater than %d for this database.  		// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  		case 10929:  		// SQL Error Code: 10928  		// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  		// see http://go.microsoft.com/fwlink/?LinkId=267637.  		case 10928:  		// SQL Error Code: 10060  		// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   		// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   		// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   		// because the connected party did not properly respond after a period of time' or established connection failed   		// because connected host has failed to respond.)"}  		case 10060:  		// SQL Error Code: 10054  		// A transport-level error has occurred when sending the request to the server.   		// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  		case 10054:  		// SQL Error Code: 10053  		// A transport-level error has occurred when receiving results from the server.  		// An established connection was aborted by the software in your host machine.  		case 10053:  		// SQL Error Code: 233  		// The client was unable to establish a connection because of an error during connection initialization process before login.   		// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  		// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  		// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  		// the remote host.)  		case 233:  		// SQL Error Code: 64  		// A connection was successfully established with the server' but then an error occurred during the login process.   		// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   		case 64:  		// DBNETLIB Error Code: 20  		// The instance of SQL Server you attempted to connect to does not support encryption.  		case 20:  			return true;  		// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  		// DBNETLIB Error Code: -2  		// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   		//case -2:  		}  	}  	return false;  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null) {  	// Enumerate through all errors found in the exception.  	foreach (SqlError err in sqlException.Errors) {  		switch (err.Number) {  		// SQL Error Code: 41325  		// The current transaction failed to commit due to a serializable validation failure.  		case 41325:  		// SQL Error Code: 41305  		// The current transaction failed to commit due to a repeatable read validation failure.  		case 41305:  		// SQL Error Code: 41302  		// The current transaction attempted to update a record that has been updated since the transaction started.  		case 41302:  		// SQL Error Code: 41301  		// A previous transaction that the current transaction took a dependency on has aborted'  		// and the current transaction can no longer commit  		case 41301:  		// SQL Error Code: 40613  		// Database XXXX on server YYYY is not currently available. Please retry the connection later.  		// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  		case 40613:  		// SQL Error Code: 40501  		// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  		case 40501:  		// SQL Error Code: 40197  		// The service has encountered an error processing your request. Please try again.  		case 40197:  		// SQL Error Code: 10929  		// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  		// However' the server is currently too busy to support requests greater than %d for this database.  		// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  		case 10929:  		// SQL Error Code: 10928  		// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  		// see http://go.microsoft.com/fwlink/?LinkId=267637.  		case 10928:  		// SQL Error Code: 10060  		// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   		// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   		// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   		// because the connected party did not properly respond after a period of time' or established connection failed   		// because connected host has failed to respond.)"}  		case 10060:  		// SQL Error Code: 10054  		// A transport-level error has occurred when sending the request to the server.   		// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  		case 10054:  		// SQL Error Code: 10053  		// A transport-level error has occurred when receiving results from the server.  		// An established connection was aborted by the software in your host machine.  		case 10053:  		// SQL Error Code: 233  		// The client was unable to establish a connection because of an error during connection initialization process before login.   		// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  		// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  		// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  		// the remote host.)  		case 233:  		// SQL Error Code: 64  		// A connection was successfully established with the server' but then an error occurred during the login process.   		// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   		case 64:  		// DBNETLIB Error Code: 20  		// The instance of SQL Server you attempted to connect to does not support encryption.  		case 20:  			return true;  		// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  		// DBNETLIB Error Code: -2  		// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   		//case -2:  		}  	}  	return false;  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null) {  	// Enumerate through all errors found in the exception.  	foreach (SqlError err in sqlException.Errors) {  		switch (err.Number) {  		// SQL Error Code: 41325  		// The current transaction failed to commit due to a serializable validation failure.  		case 41325:  		// SQL Error Code: 41305  		// The current transaction failed to commit due to a repeatable read validation failure.  		case 41305:  		// SQL Error Code: 41302  		// The current transaction attempted to update a record that has been updated since the transaction started.  		case 41302:  		// SQL Error Code: 41301  		// A previous transaction that the current transaction took a dependency on has aborted'  		// and the current transaction can no longer commit  		case 41301:  		// SQL Error Code: 40613  		// Database XXXX on server YYYY is not currently available. Please retry the connection later.  		// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  		case 40613:  		// SQL Error Code: 40501  		// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  		case 40501:  		// SQL Error Code: 40197  		// The service has encountered an error processing your request. Please try again.  		case 40197:  		// SQL Error Code: 10929  		// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  		// However' the server is currently too busy to support requests greater than %d for this database.  		// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  		case 10929:  		// SQL Error Code: 10928  		// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  		// see http://go.microsoft.com/fwlink/?LinkId=267637.  		case 10928:  		// SQL Error Code: 10060  		// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   		// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   		// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   		// because the connected party did not properly respond after a period of time' or established connection failed   		// because connected host has failed to respond.)"}  		case 10060:  		// SQL Error Code: 10054  		// A transport-level error has occurred when sending the request to the server.   		// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  		case 10054:  		// SQL Error Code: 10053  		// A transport-level error has occurred when receiving results from the server.  		// An established connection was aborted by the software in your host machine.  		case 10053:  		// SQL Error Code: 233  		// The client was unable to establish a connection because of an error during connection initialization process before login.   		// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  		// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  		// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  		// the remote host.)  		case 233:  		// SQL Error Code: 64  		// A connection was successfully established with the server' but then an error occurred during the login process.   		// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   		case 64:  		// DBNETLIB Error Code: 20  		// The instance of SQL Server you attempted to connect to does not support encryption.  		case 20:  			return true;  		// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  		// DBNETLIB Error Code: -2  		// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   		//case -2:  		}  	}  	return false;  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null) {  	// Enumerate through all errors found in the exception.  	foreach (SqlError err in sqlException.Errors) {  		switch (err.Number) {  		// SQL Error Code: 41325  		// The current transaction failed to commit due to a serializable validation failure.  		case 41325:  		// SQL Error Code: 41305  		// The current transaction failed to commit due to a repeatable read validation failure.  		case 41305:  		// SQL Error Code: 41302  		// The current transaction attempted to update a record that has been updated since the transaction started.  		case 41302:  		// SQL Error Code: 41301  		// A previous transaction that the current transaction took a dependency on has aborted'  		// and the current transaction can no longer commit  		case 41301:  		// SQL Error Code: 40613  		// Database XXXX on server YYYY is not currently available. Please retry the connection later.  		// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  		case 40613:  		// SQL Error Code: 40501  		// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  		case 40501:  		// SQL Error Code: 40197  		// The service has encountered an error processing your request. Please try again.  		case 40197:  		// SQL Error Code: 10929  		// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  		// However' the server is currently too busy to support requests greater than %d for this database.  		// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  		case 10929:  		// SQL Error Code: 10928  		// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  		// see http://go.microsoft.com/fwlink/?LinkId=267637.  		case 10928:  		// SQL Error Code: 10060  		// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   		// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   		// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   		// because the connected party did not properly respond after a period of time' or established connection failed   		// because connected host has failed to respond.)"}  		case 10060:  		// SQL Error Code: 10054  		// A transport-level error has occurred when sending the request to the server.   		// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  		case 10054:  		// SQL Error Code: 10053  		// A transport-level error has occurred when receiving results from the server.  		// An established connection was aborted by the software in your host machine.  		case 10053:  		// SQL Error Code: 233  		// The client was unable to establish a connection because of an error during connection initialization process before login.   		// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  		// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  		// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  		// the remote host.)  		case 233:  		// SQL Error Code: 64  		// A connection was successfully established with the server' but then an error occurred during the login process.   		// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   		case 64:  		// DBNETLIB Error Code: 20  		// The instance of SQL Server you attempted to connect to does not support encryption.  		case 20:  			return true;  		// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  		// DBNETLIB Error Code: -2  		// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   		//case -2:  		}  	}  	return false;  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null) {  	// Enumerate through all errors found in the exception.  	foreach (SqlError err in sqlException.Errors) {  		switch (err.Number) {  		// SQL Error Code: 41325  		// The current transaction failed to commit due to a serializable validation failure.  		case 41325:  		// SQL Error Code: 41305  		// The current transaction failed to commit due to a repeatable read validation failure.  		case 41305:  		// SQL Error Code: 41302  		// The current transaction attempted to update a record that has been updated since the transaction started.  		case 41302:  		// SQL Error Code: 41301  		// A previous transaction that the current transaction took a dependency on has aborted'  		// and the current transaction can no longer commit  		case 41301:  		// SQL Error Code: 40613  		// Database XXXX on server YYYY is not currently available. Please retry the connection later.  		// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  		case 40613:  		// SQL Error Code: 40501  		// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  		case 40501:  		// SQL Error Code: 40197  		// The service has encountered an error processing your request. Please try again.  		case 40197:  		// SQL Error Code: 10929  		// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  		// However' the server is currently too busy to support requests greater than %d for this database.  		// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  		case 10929:  		// SQL Error Code: 10928  		// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  		// see http://go.microsoft.com/fwlink/?LinkId=267637.  		case 10928:  		// SQL Error Code: 10060  		// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   		// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   		// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   		// because the connected party did not properly respond after a period of time' or established connection failed   		// because connected host has failed to respond.)"}  		case 10060:  		// SQL Error Code: 10054  		// A transport-level error has occurred when sending the request to the server.   		// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  		case 10054:  		// SQL Error Code: 10053  		// A transport-level error has occurred when receiving results from the server.  		// An established connection was aborted by the software in your host machine.  		case 10053:  		// SQL Error Code: 233  		// The client was unable to establish a connection because of an error during connection initialization process before login.   		// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  		// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  		// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  		// the remote host.)  		case 233:  		// SQL Error Code: 64  		// A connection was successfully established with the server' but then an error occurred during the login process.   		// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   		case 64:  		// DBNETLIB Error Code: 20  		// The instance of SQL Server you attempted to connect to does not support encryption.  		case 20:  			return true;  		// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  		// DBNETLIB Error Code: -2  		// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   		//case -2:  		}  	}  	return false;  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null) {  	// Enumerate through all errors found in the exception.  	foreach (SqlError err in sqlException.Errors) {  		switch (err.Number) {  		// SQL Error Code: 41325  		// The current transaction failed to commit due to a serializable validation failure.  		case 41325:  		// SQL Error Code: 41305  		// The current transaction failed to commit due to a repeatable read validation failure.  		case 41305:  		// SQL Error Code: 41302  		// The current transaction attempted to update a record that has been updated since the transaction started.  		case 41302:  		// SQL Error Code: 41301  		// A previous transaction that the current transaction took a dependency on has aborted'  		// and the current transaction can no longer commit  		case 41301:  		// SQL Error Code: 40613  		// Database XXXX on server YYYY is not currently available. Please retry the connection later.  		// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  		case 40613:  		// SQL Error Code: 40501  		// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  		case 40501:  		// SQL Error Code: 40197  		// The service has encountered an error processing your request. Please try again.  		case 40197:  		// SQL Error Code: 10929  		// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  		// However' the server is currently too busy to support requests greater than %d for this database.  		// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  		case 10929:  		// SQL Error Code: 10928  		// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  		// see http://go.microsoft.com/fwlink/?LinkId=267637.  		case 10928:  		// SQL Error Code: 10060  		// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   		// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   		// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   		// because the connected party did not properly respond after a period of time' or established connection failed   		// because connected host has failed to respond.)"}  		case 10060:  		// SQL Error Code: 10054  		// A transport-level error has occurred when sending the request to the server.   		// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  		case 10054:  		// SQL Error Code: 10053  		// A transport-level error has occurred when receiving results from the server.  		// An established connection was aborted by the software in your host machine.  		case 10053:  		// SQL Error Code: 233  		// The client was unable to establish a connection because of an error during connection initialization process before login.   		// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  		// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  		// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  		// the remote host.)  		case 233:  		// SQL Error Code: 64  		// A connection was successfully established with the server' but then an error occurred during the login process.   		// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   		case 64:  		// DBNETLIB Error Code: 20  		// The instance of SQL Server you attempted to connect to does not support encryption.  		case 20:  			return true;  		// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  		// DBNETLIB Error Code: -2  		// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   		//case -2:  		}  	}  	return false;  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: foreach (SqlError err in sqlException.Errors) {  	switch (err.Number) {  	// SQL Error Code: 41325  	// The current transaction failed to commit due to a serializable validation failure.  	case 41325:  	// SQL Error Code: 41305  	// The current transaction failed to commit due to a repeatable read validation failure.  	case 41305:  	// SQL Error Code: 41302  	// The current transaction attempted to update a record that has been updated since the transaction started.  	case 41302:  	// SQL Error Code: 41301  	// A previous transaction that the current transaction took a dependency on has aborted'  	// and the current transaction can no longer commit  	case 41301:  	// SQL Error Code: 40613  	// Database XXXX on server YYYY is not currently available. Please retry the connection later.  	// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  	case 40613:  	// SQL Error Code: 40501  	// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  	case 40501:  	// SQL Error Code: 40197  	// The service has encountered an error processing your request. Please try again.  	case 40197:  	// SQL Error Code: 10929  	// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  	// However' the server is currently too busy to support requests greater than %d for this database.  	// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  	case 10929:  	// SQL Error Code: 10928  	// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  	// see http://go.microsoft.com/fwlink/?LinkId=267637.  	case 10928:  	// SQL Error Code: 10060  	// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   	// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   	// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   	// because the connected party did not properly respond after a period of time' or established connection failed   	// because connected host has failed to respond.)"}  	case 10060:  	// SQL Error Code: 10054  	// A transport-level error has occurred when sending the request to the server.   	// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  	case 10054:  	// SQL Error Code: 10053  	// A transport-level error has occurred when receiving results from the server.  	// An established connection was aborted by the software in your host machine.  	case 10053:  	// SQL Error Code: 233  	// The client was unable to establish a connection because of an error during connection initialization process before login.   	// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  	// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  	// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  	// the remote host.)  	case 233:  	// SQL Error Code: 64  	// A connection was successfully established with the server' but then an error occurred during the login process.   	// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   	case 64:  	// DBNETLIB Error Code: 20  	// The instance of SQL Server you attempted to connect to does not support encryption.  	case 20:  		return true;  	// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  	// DBNETLIB Error Code: -2  	// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   	//case -2:  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: foreach (SqlError err in sqlException.Errors) {  	switch (err.Number) {  	// SQL Error Code: 41325  	// The current transaction failed to commit due to a serializable validation failure.  	case 41325:  	// SQL Error Code: 41305  	// The current transaction failed to commit due to a repeatable read validation failure.  	case 41305:  	// SQL Error Code: 41302  	// The current transaction attempted to update a record that has been updated since the transaction started.  	case 41302:  	// SQL Error Code: 41301  	// A previous transaction that the current transaction took a dependency on has aborted'  	// and the current transaction can no longer commit  	case 41301:  	// SQL Error Code: 40613  	// Database XXXX on server YYYY is not currently available. Please retry the connection later.  	// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  	case 40613:  	// SQL Error Code: 40501  	// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  	case 40501:  	// SQL Error Code: 40197  	// The service has encountered an error processing your request. Please try again.  	case 40197:  	// SQL Error Code: 10929  	// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  	// However' the server is currently too busy to support requests greater than %d for this database.  	// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  	case 10929:  	// SQL Error Code: 10928  	// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  	// see http://go.microsoft.com/fwlink/?LinkId=267637.  	case 10928:  	// SQL Error Code: 10060  	// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   	// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   	// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   	// because the connected party did not properly respond after a period of time' or established connection failed   	// because connected host has failed to respond.)"}  	case 10060:  	// SQL Error Code: 10054  	// A transport-level error has occurred when sending the request to the server.   	// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  	case 10054:  	// SQL Error Code: 10053  	// A transport-level error has occurred when receiving results from the server.  	// An established connection was aborted by the software in your host machine.  	case 10053:  	// SQL Error Code: 233  	// The client was unable to establish a connection because of an error during connection initialization process before login.   	// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  	// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  	// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  	// the remote host.)  	case 233:  	// SQL Error Code: 64  	// A connection was successfully established with the server' but then an error occurred during the login process.   	// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   	case 64:  	// DBNETLIB Error Code: 20  	// The instance of SQL Server you attempted to connect to does not support encryption.  	case 20:  		return true;  	// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  	// DBNETLIB Error Code: -2  	// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   	//case -2:  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: foreach (SqlError err in sqlException.Errors) {  	switch (err.Number) {  	// SQL Error Code: 41325  	// The current transaction failed to commit due to a serializable validation failure.  	case 41325:  	// SQL Error Code: 41305  	// The current transaction failed to commit due to a repeatable read validation failure.  	case 41305:  	// SQL Error Code: 41302  	// The current transaction attempted to update a record that has been updated since the transaction started.  	case 41302:  	// SQL Error Code: 41301  	// A previous transaction that the current transaction took a dependency on has aborted'  	// and the current transaction can no longer commit  	case 41301:  	// SQL Error Code: 40613  	// Database XXXX on server YYYY is not currently available. Please retry the connection later.  	// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  	case 40613:  	// SQL Error Code: 40501  	// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  	case 40501:  	// SQL Error Code: 40197  	// The service has encountered an error processing your request. Please try again.  	case 40197:  	// SQL Error Code: 10929  	// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  	// However' the server is currently too busy to support requests greater than %d for this database.  	// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  	case 10929:  	// SQL Error Code: 10928  	// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  	// see http://go.microsoft.com/fwlink/?LinkId=267637.  	case 10928:  	// SQL Error Code: 10060  	// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   	// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   	// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   	// because the connected party did not properly respond after a period of time' or established connection failed   	// because connected host has failed to respond.)"}  	case 10060:  	// SQL Error Code: 10054  	// A transport-level error has occurred when sending the request to the server.   	// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  	case 10054:  	// SQL Error Code: 10053  	// A transport-level error has occurred when receiving results from the server.  	// An established connection was aborted by the software in your host machine.  	case 10053:  	// SQL Error Code: 233  	// The client was unable to establish a connection because of an error during connection initialization process before login.   	// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  	// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  	// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  	// the remote host.)  	case 233:  	// SQL Error Code: 64  	// A connection was successfully established with the server' but then an error occurred during the login process.   	// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   	case 64:  	// DBNETLIB Error Code: 20  	// The instance of SQL Server you attempted to connect to does not support encryption.  	case 20:  		return true;  	// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  	// DBNETLIB Error Code: -2  	// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   	//case -2:  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: foreach (SqlError err in sqlException.Errors) {  	switch (err.Number) {  	// SQL Error Code: 41325  	// The current transaction failed to commit due to a serializable validation failure.  	case 41325:  	// SQL Error Code: 41305  	// The current transaction failed to commit due to a repeatable read validation failure.  	case 41305:  	// SQL Error Code: 41302  	// The current transaction attempted to update a record that has been updated since the transaction started.  	case 41302:  	// SQL Error Code: 41301  	// A previous transaction that the current transaction took a dependency on has aborted'  	// and the current transaction can no longer commit  	case 41301:  	// SQL Error Code: 40613  	// Database XXXX on server YYYY is not currently available. Please retry the connection later.  	// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  	case 40613:  	// SQL Error Code: 40501  	// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  	case 40501:  	// SQL Error Code: 40197  	// The service has encountered an error processing your request. Please try again.  	case 40197:  	// SQL Error Code: 10929  	// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  	// However' the server is currently too busy to support requests greater than %d for this database.  	// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  	case 10929:  	// SQL Error Code: 10928  	// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  	// see http://go.microsoft.com/fwlink/?LinkId=267637.  	case 10928:  	// SQL Error Code: 10060  	// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   	// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   	// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   	// because the connected party did not properly respond after a period of time' or established connection failed   	// because connected host has failed to respond.)"}  	case 10060:  	// SQL Error Code: 10054  	// A transport-level error has occurred when sending the request to the server.   	// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  	case 10054:  	// SQL Error Code: 10053  	// A transport-level error has occurred when receiving results from the server.  	// An established connection was aborted by the software in your host machine.  	case 10053:  	// SQL Error Code: 233  	// The client was unable to establish a connection because of an error during connection initialization process before login.   	// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  	// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  	// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  	// the remote host.)  	case 233:  	// SQL Error Code: 64  	// A connection was successfully established with the server' but then an error occurred during the login process.   	// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   	case 64:  	// DBNETLIB Error Code: 20  	// The instance of SQL Server you attempted to connect to does not support encryption.  	case 20:  		return true;  	// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  	// DBNETLIB Error Code: -2  	// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   	//case -2:  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: foreach (SqlError err in sqlException.Errors) {  	switch (err.Number) {  	// SQL Error Code: 41325  	// The current transaction failed to commit due to a serializable validation failure.  	case 41325:  	// SQL Error Code: 41305  	// The current transaction failed to commit due to a repeatable read validation failure.  	case 41305:  	// SQL Error Code: 41302  	// The current transaction attempted to update a record that has been updated since the transaction started.  	case 41302:  	// SQL Error Code: 41301  	// A previous transaction that the current transaction took a dependency on has aborted'  	// and the current transaction can no longer commit  	case 41301:  	// SQL Error Code: 40613  	// Database XXXX on server YYYY is not currently available. Please retry the connection later.  	// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  	case 40613:  	// SQL Error Code: 40501  	// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  	case 40501:  	// SQL Error Code: 40197  	// The service has encountered an error processing your request. Please try again.  	case 40197:  	// SQL Error Code: 10929  	// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  	// However' the server is currently too busy to support requests greater than %d for this database.  	// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  	case 10929:  	// SQL Error Code: 10928  	// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  	// see http://go.microsoft.com/fwlink/?LinkId=267637.  	case 10928:  	// SQL Error Code: 10060  	// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   	// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   	// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   	// because the connected party did not properly respond after a period of time' or established connection failed   	// because connected host has failed to respond.)"}  	case 10060:  	// SQL Error Code: 10054  	// A transport-level error has occurred when sending the request to the server.   	// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  	case 10054:  	// SQL Error Code: 10053  	// A transport-level error has occurred when receiving results from the server.  	// An established connection was aborted by the software in your host machine.  	case 10053:  	// SQL Error Code: 233  	// The client was unable to establish a connection because of an error during connection initialization process before login.   	// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  	// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  	// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  	// the remote host.)  	case 233:  	// SQL Error Code: 64  	// A connection was successfully established with the server' but then an error occurred during the login process.   	// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   	case 64:  	// DBNETLIB Error Code: 20  	// The instance of SQL Server you attempted to connect to does not support encryption.  	case 20:  		return true;  	// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  	// DBNETLIB Error Code: -2  	// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   	//case -2:  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: foreach (SqlError err in sqlException.Errors) {  	switch (err.Number) {  	// SQL Error Code: 41325  	// The current transaction failed to commit due to a serializable validation failure.  	case 41325:  	// SQL Error Code: 41305  	// The current transaction failed to commit due to a repeatable read validation failure.  	case 41305:  	// SQL Error Code: 41302  	// The current transaction attempted to update a record that has been updated since the transaction started.  	case 41302:  	// SQL Error Code: 41301  	// A previous transaction that the current transaction took a dependency on has aborted'  	// and the current transaction can no longer commit  	case 41301:  	// SQL Error Code: 40613  	// Database XXXX on server YYYY is not currently available. Please retry the connection later.  	// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  	case 40613:  	// SQL Error Code: 40501  	// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  	case 40501:  	// SQL Error Code: 40197  	// The service has encountered an error processing your request. Please try again.  	case 40197:  	// SQL Error Code: 10929  	// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  	// However' the server is currently too busy to support requests greater than %d for this database.  	// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  	case 10929:  	// SQL Error Code: 10928  	// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  	// see http://go.microsoft.com/fwlink/?LinkId=267637.  	case 10928:  	// SQL Error Code: 10060  	// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   	// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   	// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   	// because the connected party did not properly respond after a period of time' or established connection failed   	// because connected host has failed to respond.)"}  	case 10060:  	// SQL Error Code: 10054  	// A transport-level error has occurred when sending the request to the server.   	// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  	case 10054:  	// SQL Error Code: 10053  	// A transport-level error has occurred when receiving results from the server.  	// An established connection was aborted by the software in your host machine.  	case 10053:  	// SQL Error Code: 233  	// The client was unable to establish a connection because of an error during connection initialization process before login.   	// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  	// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  	// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  	// the remote host.)  	case 233:  	// SQL Error Code: 64  	// A connection was successfully established with the server' but then an error occurred during the login process.   	// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   	case 64:  	// DBNETLIB Error Code: 20  	// The instance of SQL Server you attempted to connect to does not support encryption.  	case 20:  		return true;  	// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  	// DBNETLIB Error Code: -2  	// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   	//case -2:  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: foreach (SqlError err in sqlException.Errors) {  	switch (err.Number) {  	// SQL Error Code: 41325  	// The current transaction failed to commit due to a serializable validation failure.  	case 41325:  	// SQL Error Code: 41305  	// The current transaction failed to commit due to a repeatable read validation failure.  	case 41305:  	// SQL Error Code: 41302  	// The current transaction attempted to update a record that has been updated since the transaction started.  	case 41302:  	// SQL Error Code: 41301  	// A previous transaction that the current transaction took a dependency on has aborted'  	// and the current transaction can no longer commit  	case 41301:  	// SQL Error Code: 40613  	// Database XXXX on server YYYY is not currently available. Please retry the connection later.  	// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  	case 40613:  	// SQL Error Code: 40501  	// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  	case 40501:  	// SQL Error Code: 40197  	// The service has encountered an error processing your request. Please try again.  	case 40197:  	// SQL Error Code: 10929  	// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  	// However' the server is currently too busy to support requests greater than %d for this database.  	// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  	case 10929:  	// SQL Error Code: 10928  	// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  	// see http://go.microsoft.com/fwlink/?LinkId=267637.  	case 10928:  	// SQL Error Code: 10060  	// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   	// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   	// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   	// because the connected party did not properly respond after a period of time' or established connection failed   	// because connected host has failed to respond.)"}  	case 10060:  	// SQL Error Code: 10054  	// A transport-level error has occurred when sending the request to the server.   	// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  	case 10054:  	// SQL Error Code: 10053  	// A transport-level error has occurred when receiving results from the server.  	// An established connection was aborted by the software in your host machine.  	case 10053:  	// SQL Error Code: 233  	// The client was unable to establish a connection because of an error during connection initialization process before login.   	// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  	// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  	// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  	// the remote host.)  	case 233:  	// SQL Error Code: 64  	// A connection was successfully established with the server' but then an error occurred during the login process.   	// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   	case 64:  	// DBNETLIB Error Code: 20  	// The instance of SQL Server you attempted to connect to does not support encryption.  	case 20:  		return true;  	// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  	// DBNETLIB Error Code: -2  	// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   	//case -2:  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: foreach (SqlError err in sqlException.Errors) {  	switch (err.Number) {  	// SQL Error Code: 41325  	// The current transaction failed to commit due to a serializable validation failure.  	case 41325:  	// SQL Error Code: 41305  	// The current transaction failed to commit due to a repeatable read validation failure.  	case 41305:  	// SQL Error Code: 41302  	// The current transaction attempted to update a record that has been updated since the transaction started.  	case 41302:  	// SQL Error Code: 41301  	// A previous transaction that the current transaction took a dependency on has aborted'  	// and the current transaction can no longer commit  	case 41301:  	// SQL Error Code: 40613  	// Database XXXX on server YYYY is not currently available. Please retry the connection later.  	// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  	case 40613:  	// SQL Error Code: 40501  	// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  	case 40501:  	// SQL Error Code: 40197  	// The service has encountered an error processing your request. Please try again.  	case 40197:  	// SQL Error Code: 10929  	// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  	// However' the server is currently too busy to support requests greater than %d for this database.  	// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  	case 10929:  	// SQL Error Code: 10928  	// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  	// see http://go.microsoft.com/fwlink/?LinkId=267637.  	case 10928:  	// SQL Error Code: 10060  	// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   	// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   	// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   	// because the connected party did not properly respond after a period of time' or established connection failed   	// because connected host has failed to respond.)"}  	case 10060:  	// SQL Error Code: 10054  	// A transport-level error has occurred when sending the request to the server.   	// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  	case 10054:  	// SQL Error Code: 10053  	// A transport-level error has occurred when receiving results from the server.  	// An established connection was aborted by the software in your host machine.  	case 10053:  	// SQL Error Code: 233  	// The client was unable to establish a connection because of an error during connection initialization process before login.   	// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  	// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  	// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  	// the remote host.)  	case 233:  	// SQL Error Code: 64  	// A connection was successfully established with the server' but then an error occurred during the login process.   	// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   	case 64:  	// DBNETLIB Error Code: 20  	// The instance of SQL Server you attempted to connect to does not support encryption.  	case 20:  		return true;  	// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  	// DBNETLIB Error Code: -2  	// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   	//case -2:  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: foreach (SqlError err in sqlException.Errors) {  	switch (err.Number) {  	// SQL Error Code: 41325  	// The current transaction failed to commit due to a serializable validation failure.  	case 41325:  	// SQL Error Code: 41305  	// The current transaction failed to commit due to a repeatable read validation failure.  	case 41305:  	// SQL Error Code: 41302  	// The current transaction attempted to update a record that has been updated since the transaction started.  	case 41302:  	// SQL Error Code: 41301  	// A previous transaction that the current transaction took a dependency on has aborted'  	// and the current transaction can no longer commit  	case 41301:  	// SQL Error Code: 40613  	// Database XXXX on server YYYY is not currently available. Please retry the connection later.  	// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  	case 40613:  	// SQL Error Code: 40501  	// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  	case 40501:  	// SQL Error Code: 40197  	// The service has encountered an error processing your request. Please try again.  	case 40197:  	// SQL Error Code: 10929  	// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  	// However' the server is currently too busy to support requests greater than %d for this database.  	// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  	case 10929:  	// SQL Error Code: 10928  	// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  	// see http://go.microsoft.com/fwlink/?LinkId=267637.  	case 10928:  	// SQL Error Code: 10060  	// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   	// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   	// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   	// because the connected party did not properly respond after a period of time' or established connection failed   	// because connected host has failed to respond.)"}  	case 10060:  	// SQL Error Code: 10054  	// A transport-level error has occurred when sending the request to the server.   	// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  	case 10054:  	// SQL Error Code: 10053  	// A transport-level error has occurred when receiving results from the server.  	// An established connection was aborted by the software in your host machine.  	case 10053:  	// SQL Error Code: 233  	// The client was unable to establish a connection because of an error during connection initialization process before login.   	// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  	// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  	// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  	// the remote host.)  	case 233:  	// SQL Error Code: 64  	// A connection was successfully established with the server' but then an error occurred during the login process.   	// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   	case 64:  	// DBNETLIB Error Code: 20  	// The instance of SQL Server you attempted to connect to does not support encryption.  	case 20:  		return true;  	// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  	// DBNETLIB Error Code: -2  	// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   	//case -2:  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: foreach (SqlError err in sqlException.Errors) {  	switch (err.Number) {  	// SQL Error Code: 41325  	// The current transaction failed to commit due to a serializable validation failure.  	case 41325:  	// SQL Error Code: 41305  	// The current transaction failed to commit due to a repeatable read validation failure.  	case 41305:  	// SQL Error Code: 41302  	// The current transaction attempted to update a record that has been updated since the transaction started.  	case 41302:  	// SQL Error Code: 41301  	// A previous transaction that the current transaction took a dependency on has aborted'  	// and the current transaction can no longer commit  	case 41301:  	// SQL Error Code: 40613  	// Database XXXX on server YYYY is not currently available. Please retry the connection later.  	// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  	case 40613:  	// SQL Error Code: 40501  	// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  	case 40501:  	// SQL Error Code: 40197  	// The service has encountered an error processing your request. Please try again.  	case 40197:  	// SQL Error Code: 10929  	// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  	// However' the server is currently too busy to support requests greater than %d for this database.  	// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  	case 10929:  	// SQL Error Code: 10928  	// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  	// see http://go.microsoft.com/fwlink/?LinkId=267637.  	case 10928:  	// SQL Error Code: 10060  	// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   	// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   	// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   	// because the connected party did not properly respond after a period of time' or established connection failed   	// because connected host has failed to respond.)"}  	case 10060:  	// SQL Error Code: 10054  	// A transport-level error has occurred when sending the request to the server.   	// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  	case 10054:  	// SQL Error Code: 10053  	// A transport-level error has occurred when receiving results from the server.  	// An established connection was aborted by the software in your host machine.  	case 10053:  	// SQL Error Code: 233  	// The client was unable to establish a connection because of an error during connection initialization process before login.   	// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  	// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  	// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  	// the remote host.)  	case 233:  	// SQL Error Code: 64  	// A connection was successfully established with the server' but then an error occurred during the login process.   	// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   	case 64:  	// DBNETLIB Error Code: 20  	// The instance of SQL Server you attempted to connect to does not support encryption.  	case 20:  		return true;  	// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  	// DBNETLIB Error Code: -2  	// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   	//case -2:  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: foreach (SqlError err in sqlException.Errors) {  	switch (err.Number) {  	// SQL Error Code: 41325  	// The current transaction failed to commit due to a serializable validation failure.  	case 41325:  	// SQL Error Code: 41305  	// The current transaction failed to commit due to a repeatable read validation failure.  	case 41305:  	// SQL Error Code: 41302  	// The current transaction attempted to update a record that has been updated since the transaction started.  	case 41302:  	// SQL Error Code: 41301  	// A previous transaction that the current transaction took a dependency on has aborted'  	// and the current transaction can no longer commit  	case 41301:  	// SQL Error Code: 40613  	// Database XXXX on server YYYY is not currently available. Please retry the connection later.  	// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  	case 40613:  	// SQL Error Code: 40501  	// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  	case 40501:  	// SQL Error Code: 40197  	// The service has encountered an error processing your request. Please try again.  	case 40197:  	// SQL Error Code: 10929  	// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  	// However' the server is currently too busy to support requests greater than %d for this database.  	// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  	case 10929:  	// SQL Error Code: 10928  	// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  	// see http://go.microsoft.com/fwlink/?LinkId=267637.  	case 10928:  	// SQL Error Code: 10060  	// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   	// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   	// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   	// because the connected party did not properly respond after a period of time' or established connection failed   	// because connected host has failed to respond.)"}  	case 10060:  	// SQL Error Code: 10054  	// A transport-level error has occurred when sending the request to the server.   	// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  	case 10054:  	// SQL Error Code: 10053  	// A transport-level error has occurred when receiving results from the server.  	// An established connection was aborted by the software in your host machine.  	case 10053:  	// SQL Error Code: 233  	// The client was unable to establish a connection because of an error during connection initialization process before login.   	// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  	// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  	// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  	// the remote host.)  	case 233:  	// SQL Error Code: 64  	// A connection was successfully established with the server' but then an error occurred during the login process.   	// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   	case 64:  	// DBNETLIB Error Code: 20  	// The instance of SQL Server you attempted to connect to does not support encryption.  	case 20:  		return true;  	// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  	// DBNETLIB Error Code: -2  	// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   	//case -2:  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: foreach (SqlError err in sqlException.Errors) {  	switch (err.Number) {  	// SQL Error Code: 41325  	// The current transaction failed to commit due to a serializable validation failure.  	case 41325:  	// SQL Error Code: 41305  	// The current transaction failed to commit due to a repeatable read validation failure.  	case 41305:  	// SQL Error Code: 41302  	// The current transaction attempted to update a record that has been updated since the transaction started.  	case 41302:  	// SQL Error Code: 41301  	// A previous transaction that the current transaction took a dependency on has aborted'  	// and the current transaction can no longer commit  	case 41301:  	// SQL Error Code: 40613  	// Database XXXX on server YYYY is not currently available. Please retry the connection later.  	// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  	case 40613:  	// SQL Error Code: 40501  	// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  	case 40501:  	// SQL Error Code: 40197  	// The service has encountered an error processing your request. Please try again.  	case 40197:  	// SQL Error Code: 10929  	// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  	// However' the server is currently too busy to support requests greater than %d for this database.  	// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  	case 10929:  	// SQL Error Code: 10928  	// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  	// see http://go.microsoft.com/fwlink/?LinkId=267637.  	case 10928:  	// SQL Error Code: 10060  	// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   	// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   	// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   	// because the connected party did not properly respond after a period of time' or established connection failed   	// because connected host has failed to respond.)"}  	case 10060:  	// SQL Error Code: 10054  	// A transport-level error has occurred when sending the request to the server.   	// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  	case 10054:  	// SQL Error Code: 10053  	// A transport-level error has occurred when receiving results from the server.  	// An established connection was aborted by the software in your host machine.  	case 10053:  	// SQL Error Code: 233  	// The client was unable to establish a connection because of an error during connection initialization process before login.   	// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  	// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  	// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  	// the remote host.)  	case 233:  	// SQL Error Code: 64  	// A connection was successfully established with the server' but then an error occurred during the login process.   	// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   	case 64:  	// DBNETLIB Error Code: 20  	// The instance of SQL Server you attempted to connect to does not support encryption.  	case 20:  		return true;  	// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  	// DBNETLIB Error Code: -2  	// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   	//case -2:  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: foreach (SqlError err in sqlException.Errors) {  	switch (err.Number) {  	// SQL Error Code: 41325  	// The current transaction failed to commit due to a serializable validation failure.  	case 41325:  	// SQL Error Code: 41305  	// The current transaction failed to commit due to a repeatable read validation failure.  	case 41305:  	// SQL Error Code: 41302  	// The current transaction attempted to update a record that has been updated since the transaction started.  	case 41302:  	// SQL Error Code: 41301  	// A previous transaction that the current transaction took a dependency on has aborted'  	// and the current transaction can no longer commit  	case 41301:  	// SQL Error Code: 40613  	// Database XXXX on server YYYY is not currently available. Please retry the connection later.  	// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  	case 40613:  	// SQL Error Code: 40501  	// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  	case 40501:  	// SQL Error Code: 40197  	// The service has encountered an error processing your request. Please try again.  	case 40197:  	// SQL Error Code: 10929  	// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  	// However' the server is currently too busy to support requests greater than %d for this database.  	// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  	case 10929:  	// SQL Error Code: 10928  	// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  	// see http://go.microsoft.com/fwlink/?LinkId=267637.  	case 10928:  	// SQL Error Code: 10060  	// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   	// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   	// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   	// because the connected party did not properly respond after a period of time' or established connection failed   	// because connected host has failed to respond.)"}  	case 10060:  	// SQL Error Code: 10054  	// A transport-level error has occurred when sending the request to the server.   	// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  	case 10054:  	// SQL Error Code: 10053  	// A transport-level error has occurred when receiving results from the server.  	// An established connection was aborted by the software in your host machine.  	case 10053:  	// SQL Error Code: 233  	// The client was unable to establish a connection because of an error during connection initialization process before login.   	// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  	// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  	// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  	// the remote host.)  	case 233:  	// SQL Error Code: 64  	// A connection was successfully established with the server' but then an error occurred during the login process.   	// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   	case 64:  	// DBNETLIB Error Code: 20  	// The instance of SQL Server you attempted to connect to does not support encryption.  	case 20:  		return true;  	// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  	// DBNETLIB Error Code: -2  	// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   	//case -2:  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: foreach (SqlError err in sqlException.Errors) {  	switch (err.Number) {  	// SQL Error Code: 41325  	// The current transaction failed to commit due to a serializable validation failure.  	case 41325:  	// SQL Error Code: 41305  	// The current transaction failed to commit due to a repeatable read validation failure.  	case 41305:  	// SQL Error Code: 41302  	// The current transaction attempted to update a record that has been updated since the transaction started.  	case 41302:  	// SQL Error Code: 41301  	// A previous transaction that the current transaction took a dependency on has aborted'  	// and the current transaction can no longer commit  	case 41301:  	// SQL Error Code: 40613  	// Database XXXX on server YYYY is not currently available. Please retry the connection later.  	// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  	case 40613:  	// SQL Error Code: 40501  	// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  	case 40501:  	// SQL Error Code: 40197  	// The service has encountered an error processing your request. Please try again.  	case 40197:  	// SQL Error Code: 10929  	// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  	// However' the server is currently too busy to support requests greater than %d for this database.  	// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  	case 10929:  	// SQL Error Code: 10928  	// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  	// see http://go.microsoft.com/fwlink/?LinkId=267637.  	case 10928:  	// SQL Error Code: 10060  	// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   	// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   	// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   	// because the connected party did not properly respond after a period of time' or established connection failed   	// because connected host has failed to respond.)"}  	case 10060:  	// SQL Error Code: 10054  	// A transport-level error has occurred when sending the request to the server.   	// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  	case 10054:  	// SQL Error Code: 10053  	// A transport-level error has occurred when receiving results from the server.  	// An established connection was aborted by the software in your host machine.  	case 10053:  	// SQL Error Code: 233  	// The client was unable to establish a connection because of an error during connection initialization process before login.   	// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  	// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  	// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  	// the remote host.)  	case 233:  	// SQL Error Code: 64  	// A connection was successfully established with the server' but then an error occurred during the login process.   	// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   	case 64:  	// DBNETLIB Error Code: 20  	// The instance of SQL Server you attempted to connect to does not support encryption.  	case 20:  		return true;  	// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  	// DBNETLIB Error Code: -2  	// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   	//case -2:  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: foreach (SqlError err in sqlException.Errors) {  	switch (err.Number) {  	// SQL Error Code: 41325  	// The current transaction failed to commit due to a serializable validation failure.  	case 41325:  	// SQL Error Code: 41305  	// The current transaction failed to commit due to a repeatable read validation failure.  	case 41305:  	// SQL Error Code: 41302  	// The current transaction attempted to update a record that has been updated since the transaction started.  	case 41302:  	// SQL Error Code: 41301  	// A previous transaction that the current transaction took a dependency on has aborted'  	// and the current transaction can no longer commit  	case 41301:  	// SQL Error Code: 40613  	// Database XXXX on server YYYY is not currently available. Please retry the connection later.  	// If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  	case 40613:  	// SQL Error Code: 40501  	// The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  	case 40501:  	// SQL Error Code: 40197  	// The service has encountered an error processing your request. Please try again.  	case 40197:  	// SQL Error Code: 10929  	// Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  	// However' the server is currently too busy to support requests greater than %d for this database.  	// For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  	case 10929:  	// SQL Error Code: 10928  	// Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  	// see http://go.microsoft.com/fwlink/?LinkId=267637.  	case 10928:  	// SQL Error Code: 10060  	// A network-related or instance-specific error occurred while establishing a connection to SQL Server.   	// The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   	// is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   	// because the connected party did not properly respond after a period of time' or established connection failed   	// because connected host has failed to respond.)"}  	case 10060:  	// SQL Error Code: 10054  	// A transport-level error has occurred when sending the request to the server.   	// (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  	case 10054:  	// SQL Error Code: 10053  	// A transport-level error has occurred when receiving results from the server.  	// An established connection was aborted by the software in your host machine.  	case 10053:  	// SQL Error Code: 233  	// The client was unable to establish a connection because of an error during connection initialization process before login.   	// Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  	// the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  	// allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  	// the remote host.)  	case 233:  	// SQL Error Code: 64  	// A connection was successfully established with the server' but then an error occurred during the login process.   	// (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   	case 64:  	// DBNETLIB Error Code: 20  	// The instance of SQL Server you attempted to connect to does not support encryption.  	case 20:  		return true;  	// This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  	// DBNETLIB Error Code: -2  	// Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   	//case -2:  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: switch (err.Number) {  // SQL Error Code: 41325  // The current transaction failed to commit due to a serializable validation failure.  case 41325:  // SQL Error Code: 41305  // The current transaction failed to commit due to a repeatable read validation failure.  case 41305:  // SQL Error Code: 41302  // The current transaction attempted to update a record that has been updated since the transaction started.  case 41302:  // SQL Error Code: 41301  // A previous transaction that the current transaction took a dependency on has aborted'  // and the current transaction can no longer commit  case 41301:  // SQL Error Code: 40613  // Database XXXX on server YYYY is not currently available. Please retry the connection later.  // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  case 40613:  // SQL Error Code: 40501  // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  case 40501:  // SQL Error Code: 40197  // The service has encountered an error processing your request. Please try again.  case 40197:  // SQL Error Code: 10929  // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  // However' the server is currently too busy to support requests greater than %d for this database.  // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  case 10929:  // SQL Error Code: 10928  // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  // see http://go.microsoft.com/fwlink/?LinkId=267637.  case 10928:  // SQL Error Code: 10060  // A network-related or instance-specific error occurred while establishing a connection to SQL Server.   // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   // because the connected party did not properly respond after a period of time' or established connection failed   // because connected host has failed to respond.)"}  case 10060:  // SQL Error Code: 10054  // A transport-level error has occurred when sending the request to the server.   // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  case 10054:  // SQL Error Code: 10053  // A transport-level error has occurred when receiving results from the server.  // An established connection was aborted by the software in your host machine.  case 10053:  // SQL Error Code: 233  // The client was unable to establish a connection because of an error during connection initialization process before login.   // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  // the remote host.)  case 233:  // SQL Error Code: 64  // A connection was successfully established with the server' but then an error occurred during the login process.   // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   case 64:  // DBNETLIB Error Code: 20  // The instance of SQL Server you attempted to connect to does not support encryption.  case 20:  	return true;  // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  // DBNETLIB Error Code: -2  // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   //case -2:  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: switch (err.Number) {  // SQL Error Code: 41325  // The current transaction failed to commit due to a serializable validation failure.  case 41325:  // SQL Error Code: 41305  // The current transaction failed to commit due to a repeatable read validation failure.  case 41305:  // SQL Error Code: 41302  // The current transaction attempted to update a record that has been updated since the transaction started.  case 41302:  // SQL Error Code: 41301  // A previous transaction that the current transaction took a dependency on has aborted'  // and the current transaction can no longer commit  case 41301:  // SQL Error Code: 40613  // Database XXXX on server YYYY is not currently available. Please retry the connection later.  // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  case 40613:  // SQL Error Code: 40501  // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  case 40501:  // SQL Error Code: 40197  // The service has encountered an error processing your request. Please try again.  case 40197:  // SQL Error Code: 10929  // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  // However' the server is currently too busy to support requests greater than %d for this database.  // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  case 10929:  // SQL Error Code: 10928  // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  // see http://go.microsoft.com/fwlink/?LinkId=267637.  case 10928:  // SQL Error Code: 10060  // A network-related or instance-specific error occurred while establishing a connection to SQL Server.   // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   // because the connected party did not properly respond after a period of time' or established connection failed   // because connected host has failed to respond.)"}  case 10060:  // SQL Error Code: 10054  // A transport-level error has occurred when sending the request to the server.   // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  case 10054:  // SQL Error Code: 10053  // A transport-level error has occurred when receiving results from the server.  // An established connection was aborted by the software in your host machine.  case 10053:  // SQL Error Code: 233  // The client was unable to establish a connection because of an error during connection initialization process before login.   // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  // the remote host.)  case 233:  // SQL Error Code: 64  // A connection was successfully established with the server' but then an error occurred during the login process.   // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   case 64:  // DBNETLIB Error Code: 20  // The instance of SQL Server you attempted to connect to does not support encryption.  case 20:  	return true;  // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  // DBNETLIB Error Code: -2  // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   //case -2:  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: switch (err.Number) {  // SQL Error Code: 41325  // The current transaction failed to commit due to a serializable validation failure.  case 41325:  // SQL Error Code: 41305  // The current transaction failed to commit due to a repeatable read validation failure.  case 41305:  // SQL Error Code: 41302  // The current transaction attempted to update a record that has been updated since the transaction started.  case 41302:  // SQL Error Code: 41301  // A previous transaction that the current transaction took a dependency on has aborted'  // and the current transaction can no longer commit  case 41301:  // SQL Error Code: 40613  // Database XXXX on server YYYY is not currently available. Please retry the connection later.  // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  case 40613:  // SQL Error Code: 40501  // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  case 40501:  // SQL Error Code: 40197  // The service has encountered an error processing your request. Please try again.  case 40197:  // SQL Error Code: 10929  // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  // However' the server is currently too busy to support requests greater than %d for this database.  // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  case 10929:  // SQL Error Code: 10928  // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  // see http://go.microsoft.com/fwlink/?LinkId=267637.  case 10928:  // SQL Error Code: 10060  // A network-related or instance-specific error occurred while establishing a connection to SQL Server.   // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   // because the connected party did not properly respond after a period of time' or established connection failed   // because connected host has failed to respond.)"}  case 10060:  // SQL Error Code: 10054  // A transport-level error has occurred when sending the request to the server.   // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  case 10054:  // SQL Error Code: 10053  // A transport-level error has occurred when receiving results from the server.  // An established connection was aborted by the software in your host machine.  case 10053:  // SQL Error Code: 233  // The client was unable to establish a connection because of an error during connection initialization process before login.   // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  // the remote host.)  case 233:  // SQL Error Code: 64  // A connection was successfully established with the server' but then an error occurred during the login process.   // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   case 64:  // DBNETLIB Error Code: 20  // The instance of SQL Server you attempted to connect to does not support encryption.  case 20:  	return true;  // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  // DBNETLIB Error Code: -2  // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   //case -2:  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: switch (err.Number) {  // SQL Error Code: 41325  // The current transaction failed to commit due to a serializable validation failure.  case 41325:  // SQL Error Code: 41305  // The current transaction failed to commit due to a repeatable read validation failure.  case 41305:  // SQL Error Code: 41302  // The current transaction attempted to update a record that has been updated since the transaction started.  case 41302:  // SQL Error Code: 41301  // A previous transaction that the current transaction took a dependency on has aborted'  // and the current transaction can no longer commit  case 41301:  // SQL Error Code: 40613  // Database XXXX on server YYYY is not currently available. Please retry the connection later.  // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  case 40613:  // SQL Error Code: 40501  // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  case 40501:  // SQL Error Code: 40197  // The service has encountered an error processing your request. Please try again.  case 40197:  // SQL Error Code: 10929  // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  // However' the server is currently too busy to support requests greater than %d for this database.  // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  case 10929:  // SQL Error Code: 10928  // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  // see http://go.microsoft.com/fwlink/?LinkId=267637.  case 10928:  // SQL Error Code: 10060  // A network-related or instance-specific error occurred while establishing a connection to SQL Server.   // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   // because the connected party did not properly respond after a period of time' or established connection failed   // because connected host has failed to respond.)"}  case 10060:  // SQL Error Code: 10054  // A transport-level error has occurred when sending the request to the server.   // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  case 10054:  // SQL Error Code: 10053  // A transport-level error has occurred when receiving results from the server.  // An established connection was aborted by the software in your host machine.  case 10053:  // SQL Error Code: 233  // The client was unable to establish a connection because of an error during connection initialization process before login.   // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  // the remote host.)  case 233:  // SQL Error Code: 64  // A connection was successfully established with the server' but then an error occurred during the login process.   // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   case 64:  // DBNETLIB Error Code: 20  // The instance of SQL Server you attempted to connect to does not support encryption.  case 20:  	return true;  // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  // DBNETLIB Error Code: -2  // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   //case -2:  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: switch (err.Number) {  // SQL Error Code: 41325  // The current transaction failed to commit due to a serializable validation failure.  case 41325:  // SQL Error Code: 41305  // The current transaction failed to commit due to a repeatable read validation failure.  case 41305:  // SQL Error Code: 41302  // The current transaction attempted to update a record that has been updated since the transaction started.  case 41302:  // SQL Error Code: 41301  // A previous transaction that the current transaction took a dependency on has aborted'  // and the current transaction can no longer commit  case 41301:  // SQL Error Code: 40613  // Database XXXX on server YYYY is not currently available. Please retry the connection later.  // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  case 40613:  // SQL Error Code: 40501  // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  case 40501:  // SQL Error Code: 40197  // The service has encountered an error processing your request. Please try again.  case 40197:  // SQL Error Code: 10929  // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  // However' the server is currently too busy to support requests greater than %d for this database.  // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  case 10929:  // SQL Error Code: 10928  // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  // see http://go.microsoft.com/fwlink/?LinkId=267637.  case 10928:  // SQL Error Code: 10060  // A network-related or instance-specific error occurred while establishing a connection to SQL Server.   // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   // because the connected party did not properly respond after a period of time' or established connection failed   // because connected host has failed to respond.)"}  case 10060:  // SQL Error Code: 10054  // A transport-level error has occurred when sending the request to the server.   // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  case 10054:  // SQL Error Code: 10053  // A transport-level error has occurred when receiving results from the server.  // An established connection was aborted by the software in your host machine.  case 10053:  // SQL Error Code: 233  // The client was unable to establish a connection because of an error during connection initialization process before login.   // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  // the remote host.)  case 233:  // SQL Error Code: 64  // A connection was successfully established with the server' but then an error occurred during the login process.   // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   case 64:  // DBNETLIB Error Code: 20  // The instance of SQL Server you attempted to connect to does not support encryption.  case 20:  	return true;  // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  // DBNETLIB Error Code: -2  // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   //case -2:  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: switch (err.Number) {  // SQL Error Code: 41325  // The current transaction failed to commit due to a serializable validation failure.  case 41325:  // SQL Error Code: 41305  // The current transaction failed to commit due to a repeatable read validation failure.  case 41305:  // SQL Error Code: 41302  // The current transaction attempted to update a record that has been updated since the transaction started.  case 41302:  // SQL Error Code: 41301  // A previous transaction that the current transaction took a dependency on has aborted'  // and the current transaction can no longer commit  case 41301:  // SQL Error Code: 40613  // Database XXXX on server YYYY is not currently available. Please retry the connection later.  // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  case 40613:  // SQL Error Code: 40501  // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  case 40501:  // SQL Error Code: 40197  // The service has encountered an error processing your request. Please try again.  case 40197:  // SQL Error Code: 10929  // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  // However' the server is currently too busy to support requests greater than %d for this database.  // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  case 10929:  // SQL Error Code: 10928  // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  // see http://go.microsoft.com/fwlink/?LinkId=267637.  case 10928:  // SQL Error Code: 10060  // A network-related or instance-specific error occurred while establishing a connection to SQL Server.   // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   // because the connected party did not properly respond after a period of time' or established connection failed   // because connected host has failed to respond.)"}  case 10060:  // SQL Error Code: 10054  // A transport-level error has occurred when sending the request to the server.   // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  case 10054:  // SQL Error Code: 10053  // A transport-level error has occurred when receiving results from the server.  // An established connection was aborted by the software in your host machine.  case 10053:  // SQL Error Code: 233  // The client was unable to establish a connection because of an error during connection initialization process before login.   // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  // the remote host.)  case 233:  // SQL Error Code: 64  // A connection was successfully established with the server' but then an error occurred during the login process.   // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   case 64:  // DBNETLIB Error Code: 20  // The instance of SQL Server you attempted to connect to does not support encryption.  case 20:  	return true;  // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  // DBNETLIB Error Code: -2  // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   //case -2:  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: switch (err.Number) {  // SQL Error Code: 41325  // The current transaction failed to commit due to a serializable validation failure.  case 41325:  // SQL Error Code: 41305  // The current transaction failed to commit due to a repeatable read validation failure.  case 41305:  // SQL Error Code: 41302  // The current transaction attempted to update a record that has been updated since the transaction started.  case 41302:  // SQL Error Code: 41301  // A previous transaction that the current transaction took a dependency on has aborted'  // and the current transaction can no longer commit  case 41301:  // SQL Error Code: 40613  // Database XXXX on server YYYY is not currently available. Please retry the connection later.  // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  case 40613:  // SQL Error Code: 40501  // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  case 40501:  // SQL Error Code: 40197  // The service has encountered an error processing your request. Please try again.  case 40197:  // SQL Error Code: 10929  // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  // However' the server is currently too busy to support requests greater than %d for this database.  // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  case 10929:  // SQL Error Code: 10928  // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  // see http://go.microsoft.com/fwlink/?LinkId=267637.  case 10928:  // SQL Error Code: 10060  // A network-related or instance-specific error occurred while establishing a connection to SQL Server.   // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   // because the connected party did not properly respond after a period of time' or established connection failed   // because connected host has failed to respond.)"}  case 10060:  // SQL Error Code: 10054  // A transport-level error has occurred when sending the request to the server.   // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  case 10054:  // SQL Error Code: 10053  // A transport-level error has occurred when receiving results from the server.  // An established connection was aborted by the software in your host machine.  case 10053:  // SQL Error Code: 233  // The client was unable to establish a connection because of an error during connection initialization process before login.   // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  // the remote host.)  case 233:  // SQL Error Code: 64  // A connection was successfully established with the server' but then an error occurred during the login process.   // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   case 64:  // DBNETLIB Error Code: 20  // The instance of SQL Server you attempted to connect to does not support encryption.  case 20:  	return true;  // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  // DBNETLIB Error Code: -2  // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   //case -2:  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: switch (err.Number) {  // SQL Error Code: 41325  // The current transaction failed to commit due to a serializable validation failure.  case 41325:  // SQL Error Code: 41305  // The current transaction failed to commit due to a repeatable read validation failure.  case 41305:  // SQL Error Code: 41302  // The current transaction attempted to update a record that has been updated since the transaction started.  case 41302:  // SQL Error Code: 41301  // A previous transaction that the current transaction took a dependency on has aborted'  // and the current transaction can no longer commit  case 41301:  // SQL Error Code: 40613  // Database XXXX on server YYYY is not currently available. Please retry the connection later.  // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  case 40613:  // SQL Error Code: 40501  // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  case 40501:  // SQL Error Code: 40197  // The service has encountered an error processing your request. Please try again.  case 40197:  // SQL Error Code: 10929  // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  // However' the server is currently too busy to support requests greater than %d for this database.  // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  case 10929:  // SQL Error Code: 10928  // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  // see http://go.microsoft.com/fwlink/?LinkId=267637.  case 10928:  // SQL Error Code: 10060  // A network-related or instance-specific error occurred while establishing a connection to SQL Server.   // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   // because the connected party did not properly respond after a period of time' or established connection failed   // because connected host has failed to respond.)"}  case 10060:  // SQL Error Code: 10054  // A transport-level error has occurred when sending the request to the server.   // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  case 10054:  // SQL Error Code: 10053  // A transport-level error has occurred when receiving results from the server.  // An established connection was aborted by the software in your host machine.  case 10053:  // SQL Error Code: 233  // The client was unable to establish a connection because of an error during connection initialization process before login.   // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  // the remote host.)  case 233:  // SQL Error Code: 64  // A connection was successfully established with the server' but then an error occurred during the login process.   // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   case 64:  // DBNETLIB Error Code: 20  // The instance of SQL Server you attempted to connect to does not support encryption.  case 20:  	return true;  // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  // DBNETLIB Error Code: -2  // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   //case -2:  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: switch (err.Number) {  // SQL Error Code: 41325  // The current transaction failed to commit due to a serializable validation failure.  case 41325:  // SQL Error Code: 41305  // The current transaction failed to commit due to a repeatable read validation failure.  case 41305:  // SQL Error Code: 41302  // The current transaction attempted to update a record that has been updated since the transaction started.  case 41302:  // SQL Error Code: 41301  // A previous transaction that the current transaction took a dependency on has aborted'  // and the current transaction can no longer commit  case 41301:  // SQL Error Code: 40613  // Database XXXX on server YYYY is not currently available. Please retry the connection later.  // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  case 40613:  // SQL Error Code: 40501  // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  case 40501:  // SQL Error Code: 40197  // The service has encountered an error processing your request. Please try again.  case 40197:  // SQL Error Code: 10929  // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  // However' the server is currently too busy to support requests greater than %d for this database.  // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  case 10929:  // SQL Error Code: 10928  // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  // see http://go.microsoft.com/fwlink/?LinkId=267637.  case 10928:  // SQL Error Code: 10060  // A network-related or instance-specific error occurred while establishing a connection to SQL Server.   // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   // because the connected party did not properly respond after a period of time' or established connection failed   // because connected host has failed to respond.)"}  case 10060:  // SQL Error Code: 10054  // A transport-level error has occurred when sending the request to the server.   // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  case 10054:  // SQL Error Code: 10053  // A transport-level error has occurred when receiving results from the server.  // An established connection was aborted by the software in your host machine.  case 10053:  // SQL Error Code: 233  // The client was unable to establish a connection because of an error during connection initialization process before login.   // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  // the remote host.)  case 233:  // SQL Error Code: 64  // A connection was successfully established with the server' but then an error occurred during the login process.   // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   case 64:  // DBNETLIB Error Code: 20  // The instance of SQL Server you attempted to connect to does not support encryption.  case 20:  	return true;  // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  // DBNETLIB Error Code: -2  // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   //case -2:  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: switch (err.Number) {  // SQL Error Code: 41325  // The current transaction failed to commit due to a serializable validation failure.  case 41325:  // SQL Error Code: 41305  // The current transaction failed to commit due to a repeatable read validation failure.  case 41305:  // SQL Error Code: 41302  // The current transaction attempted to update a record that has been updated since the transaction started.  case 41302:  // SQL Error Code: 41301  // A previous transaction that the current transaction took a dependency on has aborted'  // and the current transaction can no longer commit  case 41301:  // SQL Error Code: 40613  // Database XXXX on server YYYY is not currently available. Please retry the connection later.  // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  case 40613:  // SQL Error Code: 40501  // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  case 40501:  // SQL Error Code: 40197  // The service has encountered an error processing your request. Please try again.  case 40197:  // SQL Error Code: 10929  // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  // However' the server is currently too busy to support requests greater than %d for this database.  // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  case 10929:  // SQL Error Code: 10928  // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  // see http://go.microsoft.com/fwlink/?LinkId=267637.  case 10928:  // SQL Error Code: 10060  // A network-related or instance-specific error occurred while establishing a connection to SQL Server.   // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   // because the connected party did not properly respond after a period of time' or established connection failed   // because connected host has failed to respond.)"}  case 10060:  // SQL Error Code: 10054  // A transport-level error has occurred when sending the request to the server.   // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  case 10054:  // SQL Error Code: 10053  // A transport-level error has occurred when receiving results from the server.  // An established connection was aborted by the software in your host machine.  case 10053:  // SQL Error Code: 233  // The client was unable to establish a connection because of an error during connection initialization process before login.   // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  // the remote host.)  case 233:  // SQL Error Code: 64  // A connection was successfully established with the server' but then an error occurred during the login process.   // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   case 64:  // DBNETLIB Error Code: 20  // The instance of SQL Server you attempted to connect to does not support encryption.  case 20:  	return true;  // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  // DBNETLIB Error Code: -2  // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   //case -2:  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: switch (err.Number) {  // SQL Error Code: 41325  // The current transaction failed to commit due to a serializable validation failure.  case 41325:  // SQL Error Code: 41305  // The current transaction failed to commit due to a repeatable read validation failure.  case 41305:  // SQL Error Code: 41302  // The current transaction attempted to update a record that has been updated since the transaction started.  case 41302:  // SQL Error Code: 41301  // A previous transaction that the current transaction took a dependency on has aborted'  // and the current transaction can no longer commit  case 41301:  // SQL Error Code: 40613  // Database XXXX on server YYYY is not currently available. Please retry the connection later.  // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  case 40613:  // SQL Error Code: 40501  // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  case 40501:  // SQL Error Code: 40197  // The service has encountered an error processing your request. Please try again.  case 40197:  // SQL Error Code: 10929  // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  // However' the server is currently too busy to support requests greater than %d for this database.  // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  case 10929:  // SQL Error Code: 10928  // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  // see http://go.microsoft.com/fwlink/?LinkId=267637.  case 10928:  // SQL Error Code: 10060  // A network-related or instance-specific error occurred while establishing a connection to SQL Server.   // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   // because the connected party did not properly respond after a period of time' or established connection failed   // because connected host has failed to respond.)"}  case 10060:  // SQL Error Code: 10054  // A transport-level error has occurred when sending the request to the server.   // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  case 10054:  // SQL Error Code: 10053  // A transport-level error has occurred when receiving results from the server.  // An established connection was aborted by the software in your host machine.  case 10053:  // SQL Error Code: 233  // The client was unable to establish a connection because of an error during connection initialization process before login.   // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  // the remote host.)  case 233:  // SQL Error Code: 64  // A connection was successfully established with the server' but then an error occurred during the login process.   // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   case 64:  // DBNETLIB Error Code: 20  // The instance of SQL Server you attempted to connect to does not support encryption.  case 20:  	return true;  // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  // DBNETLIB Error Code: -2  // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   //case -2:  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: switch (err.Number) {  // SQL Error Code: 41325  // The current transaction failed to commit due to a serializable validation failure.  case 41325:  // SQL Error Code: 41305  // The current transaction failed to commit due to a repeatable read validation failure.  case 41305:  // SQL Error Code: 41302  // The current transaction attempted to update a record that has been updated since the transaction started.  case 41302:  // SQL Error Code: 41301  // A previous transaction that the current transaction took a dependency on has aborted'  // and the current transaction can no longer commit  case 41301:  // SQL Error Code: 40613  // Database XXXX on server YYYY is not currently available. Please retry the connection later.  // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  case 40613:  // SQL Error Code: 40501  // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  case 40501:  // SQL Error Code: 40197  // The service has encountered an error processing your request. Please try again.  case 40197:  // SQL Error Code: 10929  // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  // However' the server is currently too busy to support requests greater than %d for this database.  // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  case 10929:  // SQL Error Code: 10928  // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  // see http://go.microsoft.com/fwlink/?LinkId=267637.  case 10928:  // SQL Error Code: 10060  // A network-related or instance-specific error occurred while establishing a connection to SQL Server.   // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   // because the connected party did not properly respond after a period of time' or established connection failed   // because connected host has failed to respond.)"}  case 10060:  // SQL Error Code: 10054  // A transport-level error has occurred when sending the request to the server.   // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  case 10054:  // SQL Error Code: 10053  // A transport-level error has occurred when receiving results from the server.  // An established connection was aborted by the software in your host machine.  case 10053:  // SQL Error Code: 233  // The client was unable to establish a connection because of an error during connection initialization process before login.   // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  // the remote host.)  case 233:  // SQL Error Code: 64  // A connection was successfully established with the server' but then an error occurred during the login process.   // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   case 64:  // DBNETLIB Error Code: 20  // The instance of SQL Server you attempted to connect to does not support encryption.  case 20:  	return true;  // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  // DBNETLIB Error Code: -2  // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   //case -2:  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: switch (err.Number) {  // SQL Error Code: 41325  // The current transaction failed to commit due to a serializable validation failure.  case 41325:  // SQL Error Code: 41305  // The current transaction failed to commit due to a repeatable read validation failure.  case 41305:  // SQL Error Code: 41302  // The current transaction attempted to update a record that has been updated since the transaction started.  case 41302:  // SQL Error Code: 41301  // A previous transaction that the current transaction took a dependency on has aborted'  // and the current transaction can no longer commit  case 41301:  // SQL Error Code: 40613  // Database XXXX on server YYYY is not currently available. Please retry the connection later.  // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  case 40613:  // SQL Error Code: 40501  // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  case 40501:  // SQL Error Code: 40197  // The service has encountered an error processing your request. Please try again.  case 40197:  // SQL Error Code: 10929  // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  // However' the server is currently too busy to support requests greater than %d for this database.  // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  case 10929:  // SQL Error Code: 10928  // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  // see http://go.microsoft.com/fwlink/?LinkId=267637.  case 10928:  // SQL Error Code: 10060  // A network-related or instance-specific error occurred while establishing a connection to SQL Server.   // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   // because the connected party did not properly respond after a period of time' or established connection failed   // because connected host has failed to respond.)"}  case 10060:  // SQL Error Code: 10054  // A transport-level error has occurred when sending the request to the server.   // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  case 10054:  // SQL Error Code: 10053  // A transport-level error has occurred when receiving results from the server.  // An established connection was aborted by the software in your host machine.  case 10053:  // SQL Error Code: 233  // The client was unable to establish a connection because of an error during connection initialization process before login.   // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  // the remote host.)  case 233:  // SQL Error Code: 64  // A connection was successfully established with the server' but then an error occurred during the login process.   // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   case 64:  // DBNETLIB Error Code: 20  // The instance of SQL Server you attempted to connect to does not support encryption.  case 20:  	return true;  // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  // DBNETLIB Error Code: -2  // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   //case -2:  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: switch (err.Number) {  // SQL Error Code: 41325  // The current transaction failed to commit due to a serializable validation failure.  case 41325:  // SQL Error Code: 41305  // The current transaction failed to commit due to a repeatable read validation failure.  case 41305:  // SQL Error Code: 41302  // The current transaction attempted to update a record that has been updated since the transaction started.  case 41302:  // SQL Error Code: 41301  // A previous transaction that the current transaction took a dependency on has aborted'  // and the current transaction can no longer commit  case 41301:  // SQL Error Code: 40613  // Database XXXX on server YYYY is not currently available. Please retry the connection later.  // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  case 40613:  // SQL Error Code: 40501  // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  case 40501:  // SQL Error Code: 40197  // The service has encountered an error processing your request. Please try again.  case 40197:  // SQL Error Code: 10929  // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  // However' the server is currently too busy to support requests greater than %d for this database.  // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  case 10929:  // SQL Error Code: 10928  // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  // see http://go.microsoft.com/fwlink/?LinkId=267637.  case 10928:  // SQL Error Code: 10060  // A network-related or instance-specific error occurred while establishing a connection to SQL Server.   // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   // because the connected party did not properly respond after a period of time' or established connection failed   // because connected host has failed to respond.)"}  case 10060:  // SQL Error Code: 10054  // A transport-level error has occurred when sending the request to the server.   // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  case 10054:  // SQL Error Code: 10053  // A transport-level error has occurred when receiving results from the server.  // An established connection was aborted by the software in your host machine.  case 10053:  // SQL Error Code: 233  // The client was unable to establish a connection because of an error during connection initialization process before login.   // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  // the remote host.)  case 233:  // SQL Error Code: 64  // A connection was successfully established with the server' but then an error occurred during the login process.   // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   case 64:  // DBNETLIB Error Code: 20  // The instance of SQL Server you attempted to connect to does not support encryption.  case 20:  	return true;  // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  // DBNETLIB Error Code: -2  // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   //case -2:  }  
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: switch (err.Number) {  // SQL Error Code: 41325  // The current transaction failed to commit due to a serializable validation failure.  case 41325:  // SQL Error Code: 41305  // The current transaction failed to commit due to a repeatable read validation failure.  case 41305:  // SQL Error Code: 41302  // The current transaction attempted to update a record that has been updated since the transaction started.  case 41302:  // SQL Error Code: 41301  // A previous transaction that the current transaction took a dependency on has aborted'  // and the current transaction can no longer commit  case 41301:  // SQL Error Code: 40613  // Database XXXX on server YYYY is not currently available. Please retry the connection later.  // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  case 40613:  // SQL Error Code: 40501  // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  case 40501:  // SQL Error Code: 40197  // The service has encountered an error processing your request. Please try again.  case 40197:  // SQL Error Code: 10929  // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  // However' the server is currently too busy to support requests greater than %d for this database.  // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  case 10929:  // SQL Error Code: 10928  // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  // see http://go.microsoft.com/fwlink/?LinkId=267637.  case 10928:  // SQL Error Code: 10060  // A network-related or instance-specific error occurred while establishing a connection to SQL Server.   // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   // because the connected party did not properly respond after a period of time' or established connection failed   // because connected host has failed to respond.)"}  case 10060:  // SQL Error Code: 10054  // A transport-level error has occurred when sending the request to the server.   // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  case 10054:  // SQL Error Code: 10053  // A transport-level error has occurred when receiving results from the server.  // An established connection was aborted by the software in your host machine.  case 10053:  // SQL Error Code: 233  // The client was unable to establish a connection because of an error during connection initialization process before login.   // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  // the remote host.)  case 233:  // SQL Error Code: 64  // A connection was successfully established with the server' but then an error occurred during the login process.   // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   case 64:  // DBNETLIB Error Code: 20  // The instance of SQL Server you attempted to connect to does not support encryption.  case 20:  	return true;  // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  // DBNETLIB Error Code: -2  // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   //case -2:  }  
Magic Number,System.Data.Entity.SqlServer,SqlDdlBuilder,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlDdlBuilder.cs,AppendType,The following statement contains a magic number: if (type.EdmType.Name == "binary" && 8 == type.GetMaxLength () && column.TypeUsage.Facets.TryGetValue ("StoreGeneratedPattern"' false' out storeGenFacet) && storeGenFacet.Value != null && StoreGeneratedPattern.Computed == (StoreGeneratedPattern)storeGenFacet.Value) {  	isTimestamp = true;  	AppendIdentifier ("rowversion");  }  else {  	var typeName = type.EdmType.Name;  	// Special case: the EDM treats 'nvarchar(max)' as a type name' but SQL Server treats  	// it as a type 'nvarchar' and a type qualifier. As such' we can't escape the entire  	// type name as the EDM sees it.  	const string maxSuffix = "(max)";  	if (type.EdmType.BuiltInTypeKind == BuiltInTypeKind.PrimitiveType && typeName.EndsWith (maxSuffix' StringComparison.Ordinal)) {  		Debug.Assert (new[] {  			"nvarchar(max)"'  			"varchar(max)"'  			"varbinary(max)"  		}.Contains (typeName)' "no other known SQL Server primitive types types accept (max)");  		AppendIdentifier (typeName.Substring (0' typeName.Length - maxSuffix.Length));  		AppendSql ("(max)");  	}  	else {  		AppendIdentifier (typeName);  	}  	switch (type.EdmType.Name) {  	case "decimal":  	case "numeric":  		AppendSqlInvariantFormat ("({0}' {1})"' type.GetPrecision ()' type.GetScale ());  		break;  	case "datetime2":  	case "datetimeoffset":  	case "time":  		AppendSqlInvariantFormat ("({0})"' type.GetPrecision ());  		break;  	case "binary":  	case "varbinary":  	case "nvarchar":  	case "varchar":  	case "char":  	case "nchar":  		AppendSqlInvariantFormat ("({0})"' type.GetMaxLength ());  		break;  	default:  		break;  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,Generate,The following statement contains a magic number: using (var writer = Writer ()) {  	writer.WriteLine ("DECLARE @CurrentMigration [nvarchar](max)");  	writer.WriteLine ();  	foreach (var historyQueryTree in updateDatabaseOperation.HistoryQueryTrees) {  		HashSet<string> _;  		var historyQuery = _sqlGenerator.GenerateSql (historyQueryTree' out _);  		writer.Write ("IF object_id('");  		writer.Write (Escape (_sqlGenerator.Targets.Single ()));  		writer.WriteLine ("') IS NOT NULL");  		writer.Indent++;  		writer.WriteLine ("SELECT @CurrentMigration =");  		writer.Indent++;  		writer.Write ("(");  		writer.Write (Indent (historyQuery' writer.CurrentIndentation ()));  		writer.WriteLine (")");  		writer.Indent -= 2;  		writer.WriteLine ();  	}  	writer.WriteLine ("IF @CurrentMigration IS NULL");  	writer.Indent++;  	writer.WriteLine ("SET @CurrentMigration = '0'");  	Statement (writer);  }  
Magic Number,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,Generate,The following statement contains a magic number: foreach (var historyQueryTree in updateDatabaseOperation.HistoryQueryTrees) {  	HashSet<string> _;  	var historyQuery = _sqlGenerator.GenerateSql (historyQueryTree' out _);  	writer.Write ("IF object_id('");  	writer.Write (Escape (_sqlGenerator.Targets.Single ()));  	writer.WriteLine ("') IS NOT NULL");  	writer.Indent++;  	writer.WriteLine ("SELECT @CurrentMigration =");  	writer.Indent++;  	writer.Write ("(");  	writer.Write (Indent (historyQuery' writer.CurrentIndentation ()));  	writer.WriteLine (")");  	writer.Indent -= 2;  	writer.WriteLine ();  }  
Magic Number,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,Generate,The following statement contains a magic number: writer.Indent -= 2;  
Magic Number,System.Data.Entity.SqlServer,SqlVersionUtils,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlVersionUtils.cs,GetSqlVersion,The following statement contains a magic number: if (majorVersion >= 11) {  	return SqlVersion.Sql11;  }  
Magic Number,System.Data.Entity.SqlServer,SqlVersionUtils,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlVersionUtils.cs,GetSqlVersion,The following statement contains a magic number: if (majorVersion == 10) {  	return SqlVersion.Sql10;  }  
Magic Number,System.Data.Entity.SqlServer,SqlVersionUtils,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlVersionUtils.cs,GetSqlVersion,The following statement contains a magic number: if (majorVersion == 9) {  	return SqlVersion.Sql9;  }  
Magic Number,System.Data.Entity.SqlServer,SqlVersionUtils,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlVersionUtils.cs,GetSqlVersion,The following statement contains a magic number: Debug.Assert (majorVersion == 8' "not version 8");  
Magic Number,System.Data.Entity.SqlServer,SqlVersionUtils,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlVersionUtils.cs,GetServerType,The following statement contains a magic number: using (var command = connection.CreateCommand ()) {  	command.CommandText = "select cast(serverproperty('EngineEdition') as int)";  	using (var reader = DbInterception.Dispatch.Command.Reader (command' new DbCommandInterceptionContext ())) {  		reader.Read ();  		const int sqlAzureEngineEdition = 5;  		return reader.GetInt32 (0) == sqlAzureEngineEdition ? ServerType.Cloud : ServerType.OnPremises;  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlVersionUtils,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlVersionUtils.cs,GetServerType,The following statement contains a magic number: using (var reader = DbInterception.Dispatch.Command.Reader (command' new DbCommandInterceptionContext ())) {  	reader.Read ();  	const int sqlAzureEngineEdition = 5;  	return reader.GetInt32 (0) == sqlAzureEngineEdition ? ServerType.Cloud : ServerType.OnPremises;  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,IsKatmaiOrNewer,The following statement contains a magic number: switch (edmFunction.Name.ToUpperInvariant ()) {  case "COUNT":  case "COUNT_BIG":  case "MAX":  case "MIN": {  	var name = ((CollectionType)funParams [0].TypeUsage.EdmType).TypeUsage.EdmType.Name;  	return ((name.Equals ("DateTimeOffset"' StringComparison.OrdinalIgnoreCase)) || (name.Equals ("Time"' StringComparison.OrdinalIgnoreCase)));  }  case "DAY":  case "MONTH":  case "YEAR":  case "DATALENGTH":  case "CHECKSUM": {  	var name = funParams [0].TypeUsage.EdmType.Name;  	return ((name.Equals ("DateTimeOffset"' StringComparison.OrdinalIgnoreCase)) || (name.Equals ("Time"' StringComparison.OrdinalIgnoreCase)));  }  case "DATEADD":  case "DATEDIFF": {  	var param1Name = funParams [1].TypeUsage.EdmType.Name;  	var param2Name = funParams [2].TypeUsage.EdmType.Name;  	return ((param1Name.Equals ("Time"' StringComparison.OrdinalIgnoreCase)) || (param2Name.Equals ("Time"' StringComparison.OrdinalIgnoreCase)) || (param1Name.Equals ("DateTimeOffset"' StringComparison.OrdinalIgnoreCase)) || (param2Name.Equals ("DateTimeOffset"' StringComparison.OrdinalIgnoreCase)));  }  case "DATENAME":  case "DATEPART": {  	var name = funParams [1].TypeUsage.EdmType.Name;  	return ((name.Equals ("DateTimeOffset"' StringComparison.OrdinalIgnoreCase)) || (name.Equals ("Time"' StringComparison.OrdinalIgnoreCase)));  }  case "SYSUTCDATETIME":  case "SYSDATETIME":  case "SYSDATETIMEOFFSET":  	return true;  default:  	break;  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName) {  // for some types we just go with simple type usage with no facets  case "tinyint":  case "smallint":  case "bigint":  case "bit":  case "uniqueidentifier":  case "int":  case "geography":  case "geometry":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "varchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = false;  	isFixedLen = false;  	break;  case "char":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = false;  	isFixedLen = true;  	break;  case "nvarchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = true;  	isFixedLen = false;  	break;  case "nchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = true;  	isFixedLen = true;  	break;  case "varchar(max)":  case "text":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = true;  	isUnicode = false;  	isFixedLen = false;  	break;  case "nvarchar(max)":  case "ntext":  case "xml":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = true;  	isUnicode = true;  	isFixedLen = false;  	break;  case "binary":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isFixedLen = true;  	break;  case "varbinary":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isFixedLen = false;  	break;  case "varbinary(max)":  case "image":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = true;  	isFixedLen = false;  	break;  case "timestamp":  case "rowversion":  	return TypeUsage.CreateBinaryTypeUsage (edmPrimitiveType' true' 8);  case "float":  case "real":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "decimal":  case "numeric": {  	byte precision;  	byte scale;  	if (storeType.TryGetPrecision (out precision) && storeType.TryGetScale (out scale)) {  		return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' precision' scale);  	}  	else {  		return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType);  	}  }  case "money":  	return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 19' 4);  case "smallmoney":  	return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 10' 4);  case "datetime":  case "datetime2":  case "smalldatetime":  	return TypeUsage.CreateDateTimeTypeUsage (edmPrimitiveType' null);  case "date":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "time":  	return TypeUsage.CreateTimeTypeUsage (edmPrimitiveType' null);  case "datetimeoffset":  	return TypeUsage.CreateDateTimeOffsetTypeUsage (edmPrimitiveType' null);  default:  	throw new NotSupportedException (Strings.ProviderDoesNotSupportType (storeTypeName));  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName) {  // for some types we just go with simple type usage with no facets  case "tinyint":  case "smallint":  case "bigint":  case "bit":  case "uniqueidentifier":  case "int":  case "geography":  case "geometry":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "varchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = false;  	isFixedLen = false;  	break;  case "char":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = false;  	isFixedLen = true;  	break;  case "nvarchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = true;  	isFixedLen = false;  	break;  case "nchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = true;  	isFixedLen = true;  	break;  case "varchar(max)":  case "text":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = true;  	isUnicode = false;  	isFixedLen = false;  	break;  case "nvarchar(max)":  case "ntext":  case "xml":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = true;  	isUnicode = true;  	isFixedLen = false;  	break;  case "binary":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isFixedLen = true;  	break;  case "varbinary":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isFixedLen = false;  	break;  case "varbinary(max)":  case "image":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = true;  	isFixedLen = false;  	break;  case "timestamp":  case "rowversion":  	return TypeUsage.CreateBinaryTypeUsage (edmPrimitiveType' true' 8);  case "float":  case "real":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "decimal":  case "numeric": {  	byte precision;  	byte scale;  	if (storeType.TryGetPrecision (out precision) && storeType.TryGetScale (out scale)) {  		return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' precision' scale);  	}  	else {  		return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType);  	}  }  case "money":  	return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 19' 4);  case "smallmoney":  	return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 10' 4);  case "datetime":  case "datetime2":  case "smalldatetime":  	return TypeUsage.CreateDateTimeTypeUsage (edmPrimitiveType' null);  case "date":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "time":  	return TypeUsage.CreateTimeTypeUsage (edmPrimitiveType' null);  case "datetimeoffset":  	return TypeUsage.CreateDateTimeOffsetTypeUsage (edmPrimitiveType' null);  default:  	throw new NotSupportedException (Strings.ProviderDoesNotSupportType (storeTypeName));  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName) {  // for some types we just go with simple type usage with no facets  case "tinyint":  case "smallint":  case "bigint":  case "bit":  case "uniqueidentifier":  case "int":  case "geography":  case "geometry":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "varchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = false;  	isFixedLen = false;  	break;  case "char":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = false;  	isFixedLen = true;  	break;  case "nvarchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = true;  	isFixedLen = false;  	break;  case "nchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = true;  	isFixedLen = true;  	break;  case "varchar(max)":  case "text":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = true;  	isUnicode = false;  	isFixedLen = false;  	break;  case "nvarchar(max)":  case "ntext":  case "xml":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = true;  	isUnicode = true;  	isFixedLen = false;  	break;  case "binary":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isFixedLen = true;  	break;  case "varbinary":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isFixedLen = false;  	break;  case "varbinary(max)":  case "image":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = true;  	isFixedLen = false;  	break;  case "timestamp":  case "rowversion":  	return TypeUsage.CreateBinaryTypeUsage (edmPrimitiveType' true' 8);  case "float":  case "real":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "decimal":  case "numeric": {  	byte precision;  	byte scale;  	if (storeType.TryGetPrecision (out precision) && storeType.TryGetScale (out scale)) {  		return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' precision' scale);  	}  	else {  		return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType);  	}  }  case "money":  	return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 19' 4);  case "smallmoney":  	return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 10' 4);  case "datetime":  case "datetime2":  case "smalldatetime":  	return TypeUsage.CreateDateTimeTypeUsage (edmPrimitiveType' null);  case "date":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "time":  	return TypeUsage.CreateTimeTypeUsage (edmPrimitiveType' null);  case "datetimeoffset":  	return TypeUsage.CreateDateTimeOffsetTypeUsage (edmPrimitiveType' null);  default:  	throw new NotSupportedException (Strings.ProviderDoesNotSupportType (storeTypeName));  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName) {  // for some types we just go with simple type usage with no facets  case "tinyint":  case "smallint":  case "bigint":  case "bit":  case "uniqueidentifier":  case "int":  case "geography":  case "geometry":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "varchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = false;  	isFixedLen = false;  	break;  case "char":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = false;  	isFixedLen = true;  	break;  case "nvarchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = true;  	isFixedLen = false;  	break;  case "nchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = true;  	isFixedLen = true;  	break;  case "varchar(max)":  case "text":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = true;  	isUnicode = false;  	isFixedLen = false;  	break;  case "nvarchar(max)":  case "ntext":  case "xml":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = true;  	isUnicode = true;  	isFixedLen = false;  	break;  case "binary":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isFixedLen = true;  	break;  case "varbinary":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isFixedLen = false;  	break;  case "varbinary(max)":  case "image":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = true;  	isFixedLen = false;  	break;  case "timestamp":  case "rowversion":  	return TypeUsage.CreateBinaryTypeUsage (edmPrimitiveType' true' 8);  case "float":  case "real":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "decimal":  case "numeric": {  	byte precision;  	byte scale;  	if (storeType.TryGetPrecision (out precision) && storeType.TryGetScale (out scale)) {  		return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' precision' scale);  	}  	else {  		return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType);  	}  }  case "money":  	return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 19' 4);  case "smallmoney":  	return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 10' 4);  case "datetime":  case "datetime2":  case "smalldatetime":  	return TypeUsage.CreateDateTimeTypeUsage (edmPrimitiveType' null);  case "date":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "time":  	return TypeUsage.CreateTimeTypeUsage (edmPrimitiveType' null);  case "datetimeoffset":  	return TypeUsage.CreateDateTimeOffsetTypeUsage (edmPrimitiveType' null);  default:  	throw new NotSupportedException (Strings.ProviderDoesNotSupportType (storeTypeName));  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName) {  // for some types we just go with simple type usage with no facets  case "tinyint":  case "smallint":  case "bigint":  case "bit":  case "uniqueidentifier":  case "int":  case "geography":  case "geometry":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "varchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = false;  	isFixedLen = false;  	break;  case "char":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = false;  	isFixedLen = true;  	break;  case "nvarchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = true;  	isFixedLen = false;  	break;  case "nchar":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isUnicode = true;  	isFixedLen = true;  	break;  case "varchar(max)":  case "text":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = true;  	isUnicode = false;  	isFixedLen = false;  	break;  case "nvarchar(max)":  case "ntext":  case "xml":  	newPrimitiveTypeKind = PrimitiveTypeKind.String;  	isUnbounded = true;  	isUnicode = true;  	isFixedLen = false;  	break;  case "binary":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isFixedLen = true;  	break;  case "varbinary":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = !storeType.TryGetMaxLength (out maxLength);  	isFixedLen = false;  	break;  case "varbinary(max)":  case "image":  	newPrimitiveTypeKind = PrimitiveTypeKind.Binary;  	isUnbounded = true;  	isFixedLen = false;  	break;  case "timestamp":  case "rowversion":  	return TypeUsage.CreateBinaryTypeUsage (edmPrimitiveType' true' 8);  case "float":  case "real":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "decimal":  case "numeric": {  	byte precision;  	byte scale;  	if (storeType.TryGetPrecision (out precision) && storeType.TryGetScale (out scale)) {  		return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' precision' scale);  	}  	else {  		return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType);  	}  }  case "money":  	return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 19' 4);  case "smallmoney":  	return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 10' 4);  case "datetime":  case "datetime2":  case "smalldatetime":  	return TypeUsage.CreateDateTimeTypeUsage (edmPrimitiveType' null);  case "date":  	return TypeUsage.CreateDefaultTypeUsage (edmPrimitiveType);  case "time":  	return TypeUsage.CreateTimeTypeUsage (edmPrimitiveType' null);  case "datetimeoffset":  	return TypeUsage.CreateDateTimeOffsetTypeUsage (edmPrimitiveType' null);  default:  	throw new NotSupportedException (Strings.ProviderDoesNotSupportType (storeTypeName));  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The following statement contains a magic number: return TypeUsage.CreateBinaryTypeUsage (edmPrimitiveType' true' 8);  
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The following statement contains a magic number: return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 19' 4);  
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The following statement contains a magic number: return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 19' 4);  
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The following statement contains a magic number: return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 10' 4);  
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The following statement contains a magic number: return TypeUsage.CreateDecimalTypeUsage (edmPrimitiveType' 10' 4);  
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetStoreType,The following statement contains a magic number: switch (primitiveType.PrimitiveTypeKind) {  case PrimitiveTypeKind.Boolean:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["bit"]);  case PrimitiveTypeKind.Byte:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["tinyint"]);  case PrimitiveTypeKind.Int16:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["smallint"]);  case PrimitiveTypeKind.Int32:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["int"]);  case PrimitiveTypeKind.Int64:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["bigint"]);  case PrimitiveTypeKind.Geography:  case PrimitiveTypeKind.GeographyPoint:  case PrimitiveTypeKind.GeographyLineString:  case PrimitiveTypeKind.GeographyPolygon:  case PrimitiveTypeKind.GeographyMultiPoint:  case PrimitiveTypeKind.GeographyMultiLineString:  case PrimitiveTypeKind.GeographyMultiPolygon:  case PrimitiveTypeKind.GeographyCollection:  	return GetStorePrimitiveTypeIfPostSql9 ("geography"' edmType.EdmType.Name' primitiveType.PrimitiveTypeKind);  case PrimitiveTypeKind.Geometry:  case PrimitiveTypeKind.GeometryPoint:  case PrimitiveTypeKind.GeometryLineString:  case PrimitiveTypeKind.GeometryPolygon:  case PrimitiveTypeKind.GeometryMultiPoint:  case PrimitiveTypeKind.GeometryMultiLineString:  case PrimitiveTypeKind.GeometryMultiPolygon:  case PrimitiveTypeKind.GeometryCollection:  	return GetStorePrimitiveTypeIfPostSql9 ("geometry"' edmType.EdmType.Name' primitiveType.PrimitiveTypeKind);  case PrimitiveTypeKind.Guid:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["uniqueidentifier"]);  case PrimitiveTypeKind.Double:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["float"]);  case PrimitiveTypeKind.Single:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["real"]);  case PrimitiveTypeKind.Decimal:// decimal' numeric' smallmoney' money   {  	byte precision;  	if (!edmType.TryGetPrecision (out precision)) {  		precision = 18;  	}  	byte scale;  	if (!edmType.TryGetScale (out scale)) {  		scale = 0;  	}  	var tu = TypeUsage.CreateDecimalTypeUsage (StoreTypeNameToStorePrimitiveType ["decimal"]' precision' scale);  	return tu;  }  case PrimitiveTypeKind.Binary:// binary' varbinary' varbinary(max)' image' timestamp' rowversion   {  	var isFixedLength = null != facets [FixedLengthFacetName].Value && (bool)facets [FixedLengthFacetName].Value;  	var f = facets [MaxLengthFacetName];  	var isMaxLength = f.IsUnbounded || null == f.Value || (int)f.Value > binaryMaxSize;  	var maxLength = !isMaxLength ? (int)f.Value : Int32.MinValue;  	TypeUsage tu;  	if (isFixedLength) {  		tu = TypeUsage.CreateBinaryTypeUsage (StoreTypeNameToStorePrimitiveType ["binary"]' true' (isMaxLength ? binaryMaxSize : maxLength));  	}  	else {  		if (isMaxLength) {  			if (_version != SqlVersion.Sql8) {  				tu = TypeUsage.CreateBinaryTypeUsage (StoreTypeNameToStorePrimitiveType ["varbinary(max)"]' false);  				Debug.Assert (tu.Facets [MaxLengthFacetName].Description.IsConstant' "varbinary(max) is not constant!");  			}  			else {  				tu = TypeUsage.CreateBinaryTypeUsage (StoreTypeNameToStorePrimitiveType ["varbinary"]' false' binaryMaxSize);  			}  		}  		else {  			tu = TypeUsage.CreateBinaryTypeUsage (StoreTypeNameToStorePrimitiveType ["varbinary"]' false' maxLength);  		}  	}  	return tu;  }  case PrimitiveTypeKind.String:// char' nchar' varchar' nvarchar' varchar(max)' nvarchar(max)' ntext' text' xml   {  	var isUnicode = null == facets [UnicodeFacetName].Value || (bool)facets [UnicodeFacetName].Value;  	var isFixedLength = null != facets [FixedLengthFacetName].Value && (bool)facets [FixedLengthFacetName].Value;  	var f = facets [MaxLengthFacetName];  	// maxlen is true if facet value is unbounded' the value is bigger than the limited string sizes *or* the facet  	// value is null. this is needed since functions still have maxlength facet value as null  	var isMaxLength = f.IsUnbounded || null == f.Value || (int)f.Value > (isUnicode ? nvarcharMaxSize : varcharMaxSize);  	var maxLength = !isMaxLength ? (int)f.Value : Int32.MinValue;  	TypeUsage tu;  	if (isUnicode) {  		if (isFixedLength) {  			tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["nchar"]' true' true' (isMaxLength ? nvarcharMaxSize : maxLength));  		}  		else {  			if (isMaxLength) {  				// nvarchar(max) (SQL 9) or ntext (SQL 8)  				if (_version != SqlVersion.Sql8) {  					tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["nvarchar(max)"]' true' false);  					Debug.Assert (tu.Facets [MaxLengthFacetName].Description.IsConstant' "NVarchar(max) is not constant!");  				}  				else {  					// if it is unknown' fallback to nvarchar[4000] instead of ntext since it has limited store semantics  					tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["nvarchar"]' true' false' nvarcharMaxSize);  				}  			}  			else {  				tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["nvarchar"]' true' false' maxLength);  			}  		}  	}  	else// !isUnicode  	 {  		if (isFixedLength) {  			tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["char"]' false' true' (isMaxLength ? varcharMaxSize : maxLength));  		}  		else {  			if (isMaxLength) {  				// nvarchar(max) (SQL 9) or ntext (SQL 8)  				if (_version != SqlVersion.Sql8) {  					tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["varchar(max)"]' false' false);  					Debug.Assert (tu.Facets [MaxLengthFacetName].Description.IsConstant' "varchar(max) is not constant!");  				}  				else {  					// if it is unknown' fallback to varchar[8000] instead of text since it has limited store semantics  					tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["varchar"]' false' false' varcharMaxSize);  				}  			}  			else {  				tu = TypeUsage.CreateStringTypeUsage (StoreTypeNameToStorePrimitiveType ["varchar"]' false' false' maxLength);  			}  		}  	}  	return tu;  }  case PrimitiveTypeKind.DateTime:  	return TypeUsage.CreateDefaultTypeUsage (StoreTypeNameToStorePrimitiveType ["datetime"]);  case PrimitiveTypeKind.DateTimeOffset:  	return GetStorePrimitiveTypeIfPostSql9 ("datetimeoffset"' edmType.EdmType.Name' primitiveType.PrimitiveTypeKind);  case PrimitiveTypeKind.Time:  	return GetStorePrimitiveTypeIfPostSql9 ("time"' edmType.EdmType.Name' primitiveType.PrimitiveTypeKind);  default:  	throw new NotSupportedException (Strings.NoStoreTypeForEdmType (edmType.EdmType.Name' primitiveType.PrimitiveTypeKind));  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetStoreType,The following statement contains a magic number: if (!edmType.TryGetPrecision (out precision)) {  	precision = 18;  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetStoreType,The following statement contains a magic number: precision = 18;  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateCommand,The following statement contains a magic number: if (null != parameters && 0 < parameters.Count) {  	if (commandTree.CommandTreeKind != DbCommandTreeKind.Delete && commandTree.CommandTreeKind != DbCommandTreeKind.Insert && commandTree.CommandTreeKind != DbCommandTreeKind.Update) {  		throw new InvalidOperationException (Strings.ADP_InternalProviderError (1017/*InternalErrorCode.SqlGenParametersNotPermitted*/));  	}  	foreach (var parameter in parameters) {  		command.Parameters.Add (parameter);  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateCommand,The following statement contains a magic number: if (commandTree.CommandTreeKind != DbCommandTreeKind.Delete && commandTree.CommandTreeKind != DbCommandTreeKind.Insert && commandTree.CommandTreeKind != DbCommandTreeKind.Update) {  	throw new InvalidOperationException (Strings.ADP_InternalProviderError (1017/*InternalErrorCode.SqlGenParametersNotPermitted*/));  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateCommand,The following statement contains a magic number: throw new InvalidOperationException (Strings.ADP_InternalProviderError (1017/*InternalErrorCode.SqlGenParametersNotPermitted*/));  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetNonMaxLength,The following statement contains a magic number: if (type == SqlDbType.NChar || type == SqlDbType.NVarChar) {  	result = 4000;  }  else if (type == SqlDbType.Char || type == SqlDbType.VarChar || type == SqlDbType.Binary || type == SqlDbType.VarBinary) {  	result = 8000;  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetNonMaxLength,The following statement contains a magic number: if (type == SqlDbType.NChar || type == SqlDbType.NVarChar) {  	result = 4000;  }  else if (type == SqlDbType.Char || type == SqlDbType.VarChar || type == SqlDbType.Binary || type == SqlDbType.VarBinary) {  	result = 8000;  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetNonMaxLength,The following statement contains a magic number: result = 4000;  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetNonMaxLength,The following statement contains a magic number: if (type == SqlDbType.Char || type == SqlDbType.VarChar || type == SqlDbType.Binary || type == SqlDbType.VarBinary) {  	result = 8000;  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetNonMaxLength,The following statement contains a magic number: result = 8000;  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetDefaultStringMaxLength,The following statement contains a magic number: if (version < SqlVersion.Sql9) {  	if (type == SqlDbType.NChar || type == SqlDbType.NVarChar) {  		result = 4000;  	}  	else {  		result = 8000;  	}  }  else {  	result = -1;  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetDefaultStringMaxLength,The following statement contains a magic number: if (version < SqlVersion.Sql9) {  	if (type == SqlDbType.NChar || type == SqlDbType.NVarChar) {  		result = 4000;  	}  	else {  		result = 8000;  	}  }  else {  	result = -1;  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetDefaultStringMaxLength,The following statement contains a magic number: if (type == SqlDbType.NChar || type == SqlDbType.NVarChar) {  	result = 4000;  }  else {  	result = 8000;  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetDefaultStringMaxLength,The following statement contains a magic number: if (type == SqlDbType.NChar || type == SqlDbType.NVarChar) {  	result = 4000;  }  else {  	result = 8000;  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetDefaultStringMaxLength,The following statement contains a magic number: result = 4000;  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetDefaultStringMaxLength,The following statement contains a magic number: result = 8000;  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetDefaultBinaryMaxLength,The following statement contains a magic number: if (version < SqlVersion.Sql9) {  	result = 8000;  }  else {  	result = -1;  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetDefaultBinaryMaxLength,The following statement contains a magic number: result = 8000;  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GenerateDatabaseName,The following statement contains a magic number: strippedFileName = strippedFileName.Length > 30 ? strippedFileName.Substring (0' 30) : strippedFileName;  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,GenerateDatabaseName,The following statement contains a magic number: strippedFileName = strippedFileName.Length > 30 ? strippedFileName.Substring (0' 30) : strippedFileName;  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,DropDatabase,The following statement contains a magic number: try {  	UsingMasterConnection (sqlConnection' conn =>  {  		using (var command = CreateCommand (conn' dropDatabaseScript' commandTimeout)) {  			DbInterception.Dispatch.Command.NonQuery (command' new DbCommandInterceptionContext ());  		}  	});  }  catch (SqlException sqlException) {  	foreach (SqlError err in sqlException.Errors) {  		// Unable to open the physical file %0.  		// Operating system error 2: "2(The system cannot find the file specified.)".  		if (err.Number == 5120) {  			return;  		}  	}  	throw;  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,DropDatabase,The following statement contains a magic number: foreach (SqlError err in sqlException.Errors) {  	// Unable to open the physical file %0.  	// Operating system error 2: "2(The system cannot find the file specified.)".  	if (err.Number == 5120) {  		return;  	}  }  
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlProviderServices.cs,DropDatabase,The following statement contains a magic number: if (err.Number == 5120) {  	return;  }  
Magic Number,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,CreateStaticConstructorDelegate,The following statement contains a magic number: Debug.Assert (staticCtorMethod.GetParameters ().Length == 2 && staticCtorMethod.GetParameters () [1].ParameterType == typeof(int)' "Static constructor method on '" + spatialType.FullName + "' does not match static constructor pattern?");  
Magic Number,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,GetString,The following statement contains a magic number: if (args != null && args.Length > 0) {  	for (var i = 0; i < args.Length; i++) {  		var value = args [i] as String;  		if (value != null && value.Length > 1024) {  			args [i] = value.Substring (0' 1024 - 3) + "...";  		}  	}  	return String.Format (CultureInfo.CurrentCulture' res' args);  }  else {  	return res;  }  
Magic Number,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,GetString,The following statement contains a magic number: if (args != null && args.Length > 0) {  	for (var i = 0; i < args.Length; i++) {  		var value = args [i] as String;  		if (value != null && value.Length > 1024) {  			args [i] = value.Substring (0' 1024 - 3) + "...";  		}  	}  	return String.Format (CultureInfo.CurrentCulture' res' args);  }  else {  	return res;  }  
Magic Number,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,GetString,The following statement contains a magic number: if (args != null && args.Length > 0) {  	for (var i = 0; i < args.Length; i++) {  		var value = args [i] as String;  		if (value != null && value.Length > 1024) {  			args [i] = value.Substring (0' 1024 - 3) + "...";  		}  	}  	return String.Format (CultureInfo.CurrentCulture' res' args);  }  else {  	return res;  }  
Magic Number,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,GetString,The following statement contains a magic number: for (var i = 0; i < args.Length; i++) {  	var value = args [i] as String;  	if (value != null && value.Length > 1024) {  		args [i] = value.Substring (0' 1024 - 3) + "...";  	}  }  
Magic Number,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,GetString,The following statement contains a magic number: for (var i = 0; i < args.Length; i++) {  	var value = args [i] as String;  	if (value != null && value.Length > 1024) {  		args [i] = value.Substring (0' 1024 - 3) + "...";  	}  }  
Magic Number,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,GetString,The following statement contains a magic number: for (var i = 0; i < args.Length; i++) {  	var value = args [i] as String;  	if (value != null && value.Length > 1024) {  		args [i] = value.Substring (0' 1024 - 3) + "...";  	}  }  
Magic Number,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,GetString,The following statement contains a magic number: if (value != null && value.Length > 1024) {  	args [i] = value.Substring (0' 1024 - 3) + "...";  }  
Magic Number,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,GetString,The following statement contains a magic number: if (value != null && value.Length > 1024) {  	args [i] = value.Substring (0' 1024 - 3) + "...";  }  
Magic Number,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,GetString,The following statement contains a magic number: if (value != null && value.Length > 1024) {  	args [i] = value.Substring (0' 1024 - 3) + "...";  }  
Magic Number,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,GetString,The following statement contains a magic number: args [i] = value.Substring (0' 1024 - 3) + "...";  
Magic Number,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,GetString,The following statement contains a magic number: args [i] = value.Substring (0' 1024 - 3) + "...";  
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialFromTextFunction,The following statement contains a magic number: if (functionExpression.Arguments.Count == 2) {  	return HandleFunctionDefaultGivenName (sqlgen' functionExpression' functionNameWithSrid);  }  else {  	Debug.Assert (functionExpression.Arguments.Count == 1' "FromText function should have text or text + srid arguments only");  	return HandleFunctionDefaultGivenName (sqlgen' functionExpression' functionNameWithoutSrid);  }  
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialStaticMethodFunctionAppendSrid,The following statement contains a magic number: if (functionExpression.Arguments.Count == 2) {  	return HandleFunctionDefaultGivenName (sqlgen' functionExpression' functionName);  }  else {  	var sridExpression = functionExpression.ResultType.IsPrimitiveType (PrimitiveTypeKind.Geometry) ? _defaultGeometrySridExpression : _defaultGeographySridExpression;  	var result = new SqlBuilder ();  	result.Append (functionName);  	WriteFunctionArguments (sqlgen' functionExpression.Arguments.Concat (new[] {  		sridExpression  	})' result);  	return result;  }  
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpecialFunctionToOperator,The following statement contains a magic number: Debug.Assert (e.Arguments.Count > 0 && e.Arguments.Count <= 2' "There should be 1 or 2 arguments for operator");  
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionDateTimeTypeCreation,The following statement contains a magic number: Debug.Assert (args.Count == (hasDatePart ? 3 : 0) + 3 + (hasTimeZonePart ? 1 : 0)' "Invalid number of parameters for a date time creating function");  
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionDateTimeTypeCreation,The following statement contains a magic number: Debug.Assert (args.Count == (hasDatePart ? 3 : 0) + 3 + (hasTimeZonePart ? 1 : 0)' "Invalid number of parameters for a date time creating function");  
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionRoundOrTruncate,The following statement contains a magic number: Debug.Assert (e.Arguments.Count <= 2' "Round or truncate should have at most 2 arguments");  
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionContains,The following statement contains a magic number: Debug.Assert (args.Count == 2' "Contains should have two arguments");  
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionStartsWith,The following statement contains a magic number: Debug.Assert (args.Count == 2' "StartsWith should have two arguments");  
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionEndsWith,The following statement contains a magic number: Debug.Assert (args.Count == 2' "EndsWith should have two arguments");  
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,MatchTargetPatternForForcingNonUnicode,The following statement contains a magic number: if (expr.ExpressionKind == DbExpressionKind.Function) {  	var functionExpr = (DbFunctionExpression)expr;  	var function = functionExpr.Function;  	if (!function.IsCanonicalFunction () && !SqlFunctionCallHandler.IsStoreFunction (function)) {  		return false;  	}  	// All string arguments to the function must be candidates to match target pattern.  	var functionFullName = function.FullName;  	if (_canonicalAndStoreStringFunctionsOneArg.Contains (functionFullName)) {  		return MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [0]);  	}  	if ("Edm.Concat".Equals (functionFullName' StringComparison.Ordinal)) {  		return (MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [0]) && MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [1]));  	}  	if ("Edm.Replace".Equals (functionFullName' StringComparison.Ordinal) || "SqlServer.REPLACE".Equals (functionFullName' StringComparison.Ordinal)) {  		return (MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [0]) && MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [1]) && MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [2]));  	}  }  
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,MatchTargetPatternForForcingNonUnicode,The following statement contains a magic number: if ("Edm.Replace".Equals (functionFullName' StringComparison.Ordinal) || "SqlServer.REPLACE".Equals (functionFullName' StringComparison.Ordinal)) {  	return (MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [0]) && MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [1]) && MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [2]));  }  
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,MatchTargetPatternForForcingNonUnicode,The following statement contains a magic number: return (MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [0]) && MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [1]) && MatchTargetPatternForForcingNonUnicode (functionExpr.Arguments [2]));  
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitConstant,The following statement contains a magic number: if (resultType.IsPrimitiveType ()) {  	var typeKind = resultType.GetPrimitiveTypeKind ();  	switch (typeKind) {  	case PrimitiveTypeKind.Int32:  		// default sql server type for integral values.  		result.Append (e.Value.ToString ());  		break;  	case PrimitiveTypeKind.Binary:  		result.Append (" 0x");  		result.Append (ByteArrayToBinaryString ((Byte[])e.Value));  		result.Append (" ");  		break;  	case PrimitiveTypeKind.Boolean:  		// Bugs 450277' 430294: Need to preserve the boolean type-ness of  		// this value for round-trippability  		WrapWithCastIfNeeded (!isCastOptional' (bool)e.Value ? "1" : "0"' "bit"' result);  		break;  	case PrimitiveTypeKind.Byte:  		WrapWithCastIfNeeded (!isCastOptional' e.Value.ToString ()' "tinyint"' result);  		break;  	case PrimitiveTypeKind.DateTime:  		result.Append ("convert(");  		result.Append (IsPreKatmai ? "datetime" : "datetime2");  		result.Append ("' ");  		result.Append (EscapeSingleQuote (((DateTime)e.Value).ToString (IsPreKatmai ? "yyyy-MM-dd HH:mm:ss.fff" : "yyyy-MM-dd HH:mm:ss.fffffff"' CultureInfo.InvariantCulture)' false/* IsUnicode */));  		result.Append ("' 121)");  		break;  	case PrimitiveTypeKind.Time:  		AssertKatmaiOrNewer (typeKind);  		result.Append ("convert(");  		result.Append (e.ResultType.EdmType.Name);  		result.Append ("' ");  		result.Append (EscapeSingleQuote (e.Value.ToString ()' false/* IsUnicode */));  		result.Append ("' 121)");  		break;  	case PrimitiveTypeKind.DateTimeOffset:  		AssertKatmaiOrNewer (typeKind);  		result.Append ("convert(");  		result.Append (e.ResultType.EdmType.Name);  		result.Append ("' ");  		result.Append (EscapeSingleQuote (((DateTimeOffset)e.Value).ToString ("yyyy-MM-dd HH:mm:ss.fffffff zzz"' CultureInfo.InvariantCulture)' false/* IsUnicode */));  		result.Append ("' 121)");  		break;  	case PrimitiveTypeKind.Decimal:  		var strDecimal = ((Decimal)e.Value).ToString (CultureInfo.InvariantCulture);  		// if the decimal value has no decimal part' cast as decimal to preserve type  		// if the number has precision > int64 max precision' it will be handled as decimal by sql server  		// and does not need cast. if precision is lest then 20' then cast using Max(literal precision' sql default precision)  		var needsCast = -1 == strDecimal.IndexOf ('.') && (strDecimal.TrimStart (new[] {  			'-'  		}).Length < 20);  		var precision = Math.Max ((Byte)strDecimal.Length' DefaultDecimalPrecision);  		Debug.Assert (precision > 0' "Precision must be greater than zero");  		var decimalType = "decimal(" + precision.ToString (CultureInfo.InvariantCulture) + ")";  		WrapWithCastIfNeeded (needsCast' strDecimal' decimalType' result);  		break;  	case PrimitiveTypeKind.Double:  		{  			var doubleValue = (Double)e.Value;  			AssertValidDouble (doubleValue);  			WrapWithCastIfNeeded (true' doubleValue.ToString ("R"' CultureInfo.InvariantCulture)' "float(53)"' result);  		}  		break;  	case PrimitiveTypeKind.Geography:  		AppendSpatialConstant (result' ((DbGeography)e.Value).AsSpatialValue ());  		break;  	case PrimitiveTypeKind.Geometry:  		AppendSpatialConstant (result' ((DbGeometry)e.Value).AsSpatialValue ());  		break;  	case PrimitiveTypeKind.Guid:  		WrapWithCastIfNeeded (true' EscapeSingleQuote (e.Value.ToString ()' false/* IsUnicode */)' "uniqueidentifier"' result);  		break;  	case PrimitiveTypeKind.Int16:  		WrapWithCastIfNeeded (!isCastOptional' e.Value.ToString ()' "smallint"' result);  		break;  	case PrimitiveTypeKind.Int64:  		WrapWithCastIfNeeded (!isCastOptional' e.Value.ToString ()' "bigint"' result);  		break;  	case PrimitiveTypeKind.Single:  		{  			var singleValue = (float)e.Value;  			AssertValidSingle (singleValue);  			WrapWithCastIfNeeded (true' singleValue.ToString ("R"' CultureInfo.InvariantCulture)' "real"' result);  		}  		break;  	case PrimitiveTypeKind.String:  		bool isUnicode;  		if (!e.ResultType.TryGetIsUnicode (out isUnicode)) {  			// If the unicode facet is not specified' if needed force non-unicode' otherwise default to unicode.  			isUnicode = !_forceNonUnicode;  		}  		result.Append (EscapeSingleQuote (e.Value as string' isUnicode));  		break;  	default:  		// all known scalar types should been handled already.  		throw new NotSupportedException (Strings.NoStoreTypeForEdmType (resultType.EdmType.Name' ((PrimitiveType)(resultType.EdmType)).PrimitiveTypeKind));  	}  }  else {  	throw new NotSupportedException ();  	//if/when Enum types are supported' then handle appropriately' for now is not a valid type for constants.  	//result.Append(e.Value.ToString());  }  
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitConstant,The following statement contains a magic number: switch (typeKind) {  case PrimitiveTypeKind.Int32:  	// default sql server type for integral values.  	result.Append (e.Value.ToString ());  	break;  case PrimitiveTypeKind.Binary:  	result.Append (" 0x");  	result.Append (ByteArrayToBinaryString ((Byte[])e.Value));  	result.Append (" ");  	break;  case PrimitiveTypeKind.Boolean:  	// Bugs 450277' 430294: Need to preserve the boolean type-ness of  	// this value for round-trippability  	WrapWithCastIfNeeded (!isCastOptional' (bool)e.Value ? "1" : "0"' "bit"' result);  	break;  case PrimitiveTypeKind.Byte:  	WrapWithCastIfNeeded (!isCastOptional' e.Value.ToString ()' "tinyint"' result);  	break;  case PrimitiveTypeKind.DateTime:  	result.Append ("convert(");  	result.Append (IsPreKatmai ? "datetime" : "datetime2");  	result.Append ("' ");  	result.Append (EscapeSingleQuote (((DateTime)e.Value).ToString (IsPreKatmai ? "yyyy-MM-dd HH:mm:ss.fff" : "yyyy-MM-dd HH:mm:ss.fffffff"' CultureInfo.InvariantCulture)' false/* IsUnicode */));  	result.Append ("' 121)");  	break;  case PrimitiveTypeKind.Time:  	AssertKatmaiOrNewer (typeKind);  	result.Append ("convert(");  	result.Append (e.ResultType.EdmType.Name);  	result.Append ("' ");  	result.Append (EscapeSingleQuote (e.Value.ToString ()' false/* IsUnicode */));  	result.Append ("' 121)");  	break;  case PrimitiveTypeKind.DateTimeOffset:  	AssertKatmaiOrNewer (typeKind);  	result.Append ("convert(");  	result.Append (e.ResultType.EdmType.Name);  	result.Append ("' ");  	result.Append (EscapeSingleQuote (((DateTimeOffset)e.Value).ToString ("yyyy-MM-dd HH:mm:ss.fffffff zzz"' CultureInfo.InvariantCulture)' false/* IsUnicode */));  	result.Append ("' 121)");  	break;  case PrimitiveTypeKind.Decimal:  	var strDecimal = ((Decimal)e.Value).ToString (CultureInfo.InvariantCulture);  	// if the decimal value has no decimal part' cast as decimal to preserve type  	// if the number has precision > int64 max precision' it will be handled as decimal by sql server  	// and does not need cast. if precision is lest then 20' then cast using Max(literal precision' sql default precision)  	var needsCast = -1 == strDecimal.IndexOf ('.') && (strDecimal.TrimStart (new[] {  		'-'  	}).Length < 20);  	var precision = Math.Max ((Byte)strDecimal.Length' DefaultDecimalPrecision);  	Debug.Assert (precision > 0' "Precision must be greater than zero");  	var decimalType = "decimal(" + precision.ToString (CultureInfo.InvariantCulture) + ")";  	WrapWithCastIfNeeded (needsCast' strDecimal' decimalType' result);  	break;  case PrimitiveTypeKind.Double:  	{  		var doubleValue = (Double)e.Value;  		AssertValidDouble (doubleValue);  		WrapWithCastIfNeeded (true' doubleValue.ToString ("R"' CultureInfo.InvariantCulture)' "float(53)"' result);  	}  	break;  case PrimitiveTypeKind.Geography:  	AppendSpatialConstant (result' ((DbGeography)e.Value).AsSpatialValue ());  	break;  case PrimitiveTypeKind.Geometry:  	AppendSpatialConstant (result' ((DbGeometry)e.Value).AsSpatialValue ());  	break;  case PrimitiveTypeKind.Guid:  	WrapWithCastIfNeeded (true' EscapeSingleQuote (e.Value.ToString ()' false/* IsUnicode */)' "uniqueidentifier"' result);  	break;  case PrimitiveTypeKind.Int16:  	WrapWithCastIfNeeded (!isCastOptional' e.Value.ToString ()' "smallint"' result);  	break;  case PrimitiveTypeKind.Int64:  	WrapWithCastIfNeeded (!isCastOptional' e.Value.ToString ()' "bigint"' result);  	break;  case PrimitiveTypeKind.Single:  	{  		var singleValue = (float)e.Value;  		AssertValidSingle (singleValue);  		WrapWithCastIfNeeded (true' singleValue.ToString ("R"' CultureInfo.InvariantCulture)' "real"' result);  	}  	break;  case PrimitiveTypeKind.String:  	bool isUnicode;  	if (!e.ResultType.TryGetIsUnicode (out isUnicode)) {  		// If the unicode facet is not specified' if needed force non-unicode' otherwise default to unicode.  		isUnicode = !_forceNonUnicode;  	}  	result.Append (EscapeSingleQuote (e.Value as string' isUnicode));  	break;  default:  	// all known scalar types should been handled already.  	throw new NotSupportedException (Strings.NoStoreTypeForEdmType (resultType.EdmType.Name' ((PrimitiveType)(resultType.EdmType)).PrimitiveTypeKind));  }  
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,ByteArrayToBinaryString,The following statement contains a magic number: for (var i = 0; i < binaryArray.Length; i++) {  	sb.Append (_hexDigits [(binaryArray [i] & 0xF0) >> 4]).Append (_hexDigits [binaryArray [i] & 0x0F]);  }  
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,ByteArrayToBinaryString,The following statement contains a magic number: sb.Append (_hexDigits [(binaryArray [i] & 0xF0) >> 4]).Append (_hexDigits [binaryArray [i] & 0x0F]);  
Missing Default,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following switch statement is missing a default case: switch (err.Number) {  // SQL Error Code: 41325  // The current transaction failed to commit due to a serializable validation failure.  case 41325:  // SQL Error Code: 41305  // The current transaction failed to commit due to a repeatable read validation failure.  case 41305:  // SQL Error Code: 41302  // The current transaction attempted to update a record that has been updated since the transaction started.  case 41302:  // SQL Error Code: 41301  // A previous transaction that the current transaction took a dependency on has aborted'  // and the current transaction can no longer commit  case 41301:  // SQL Error Code: 40613  // Database XXXX on server YYYY is not currently available. Please retry the connection later.  // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.  case 40613:  // SQL Error Code: 40501  // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).  case 40501:  // SQL Error Code: 40197  // The service has encountered an error processing your request. Please try again.  case 40197:  // SQL Error Code: 10929  // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.  // However' the server is currently too busy to support requests greater than %d for this database.  // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.  case 10929:  // SQL Error Code: 10928  // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'  // see http://go.microsoft.com/fwlink/?LinkId=267637.  case 10928:  // SQL Error Code: 10060  // A network-related or instance-specific error occurred while establishing a connection to SQL Server.   // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server   // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed   // because the connected party did not properly respond after a period of time' or established connection failed   // because connected host has failed to respond.)"}  case 10060:  // SQL Error Code: 10054  // A transport-level error has occurred when sending the request to the server.   // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)  case 10054:  // SQL Error Code: 10053  // A transport-level error has occurred when receiving results from the server.  // An established connection was aborted by the software in your host machine.  case 10053:  // SQL Error Code: 233  // The client was unable to establish a connection because of an error during connection initialization process before login.   // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;  // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum  // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by  // the remote host.)  case 233:  // SQL Error Code: 64  // A connection was successfully established with the server' but then an error occurred during the login process.   // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)   case 64:  // DBNETLIB Error Code: 20  // The instance of SQL Server you attempted to connect to does not support encryption.  case 20:  	return true;  // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.  // DBNETLIB Error Code: -2  // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.   //case -2:  }  
Missing Default,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,GenerateFunctionSql,The following switch statement is missing a default case: switch (commandTrees.First ().CommandTreeKind) {  case DbCommandTreeKind.Insert:  	return functionSqlGenerator.GenerateInsert (commandTrees.Cast<DbInsertCommandTree> ().ToList ());  case DbCommandTreeKind.Update:  	return functionSqlGenerator.GenerateUpdate (commandTrees.Cast<DbUpdateCommandTree> ().ToList ()' rowsAffectedParameter);  case DbCommandTreeKind.Delete:  	return functionSqlGenerator.GenerateDelete (commandTrees.Cast<DbDeleteCommandTree> ().ToList ()' rowsAffectedParameter);  }  
Missing Default,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,Generate,The following switch statement is missing a default case: switch (commandTree.CommandTreeKind) {  case DbCommandTreeKind.Insert:  	writer.Write (DmlSqlGenerator.GenerateInsertSql ((DbInsertCommandTree)commandTree' _sqlGenerator' out _' generateReturningSql: false' upperCaseKeywords: true' createParameters: false));  	break;  case DbCommandTreeKind.Delete:  	writer.Write (DmlSqlGenerator.GenerateDeleteSql ((DbDeleteCommandTree)commandTree' _sqlGenerator' out _' upperCaseKeywords: true' createParameters: false));  	break;  }  
Missing Default,System.Data.Entity.SqlServer,SqlServerMigrationSqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,BuildPropertyType,The following switch statement is missing a default case: switch (originalStoreTypeName) {  case "decimal":  case "numeric":  	storeTypeName += "(" + (propertyModel.Precision ?? typeUsage.GetPrecision ()) + "' " + (propertyModel.Scale ?? typeUsage.GetScale ()) + ")";  	break;  case "datetime2":  case "datetimeoffset":  case "time":  	storeTypeName += "(" + (propertyModel.Precision ?? typeUsage.GetPrecision ()) + ")";  	break;  case "binary":  case "varbinary":  case "nvarchar":  case "varchar":  case "char":  case "nchar":  	storeTypeName += "(" + (propertyModel.MaxLength ?? typeUsage.GetMaxLength ()) + ")";  	break;  }  
Missing Default,System.Data.Entity.SqlServer,SqlVersionUtils,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlVersionUtils.cs,GetSqlVersion,The following switch statement is missing a default case: switch (versionHint) {  case SqlProviderManifest.TokenSql8:  	return SqlVersion.Sql8;  case SqlProviderManifest.TokenSql9:  	return SqlVersion.Sql9;  case SqlProviderManifest.TokenSql10:  	return SqlVersion.Sql10;  case SqlProviderManifest.TokenSql11:  	return SqlVersion.Sql11;  case SqlProviderManifest.TokenAzure11:  	return SqlVersion.Sql11;  }  
Missing Default,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\EdocGroup_efprime\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitJoinExpression,The following switch statement is missing a default case: switch (joinKind) {  case DbExpressionKind.FullOuterJoin:  case DbExpressionKind.InnerJoin:  case DbExpressionKind.LeftOuterJoin:  	result.From.Append (" ON ");  	isParentAJoinStack.Push (false);  	result.From.Append (joinCondition.Accept (this));  	isParentAJoinStack.Pop ();  	break;  }  
