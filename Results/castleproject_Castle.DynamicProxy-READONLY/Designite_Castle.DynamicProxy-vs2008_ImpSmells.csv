Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTargetInterface,Cyclomatic complexity of the method is 11
Complex Method,Castle.DynamicProxy.Contributors,MembersCollector,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Contributors\MembersCollector.cs,AcceptMethod,Cyclomatic complexity of the method is 9
Complex Method,Castle.DynamicProxy.Generators,CacheKey,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\CacheKey.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,Castle.DynamicProxy.Generators,ClassProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\ClassProxyGenerator.cs,GetTypeImplementerMapping,Cyclomatic complexity of the method is 9
Complex Method,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,GetTypeImplementerMapping,Cyclomatic complexity of the method is 8
Complex Method,Castle.DynamicProxy.Generators,InvocationTypeGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\InvocationTypeGenerator.cs,ImplementInvokeMethodOnTarget,Cyclomatic complexity of the method is 8
Complex Method,Castle.DynamicProxy.Generators.Emitters,GenericUtil,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\GenericUtil.cs,ExtractCorrectType,Cyclomatic complexity of the method is 8
Long Parameter List,Castle.DynamicProxy,AbstractInvocation,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\AbstractInvocation.cs,AbstractInvocation,The method has 7 parameters. Parameters: proxy' targetType' interceptors' proxiedMethod' arguments' selector' methodInterceptors
Long Parameter List,Castle.DynamicProxy,CompositionInvocation,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\CompositionInvocation.cs,CompositionInvocation,The method has 5 parameters. Parameters: target' proxy' interceptors' proxiedMethod' arguments
Long Parameter List,Castle.DynamicProxy,CompositionInvocation,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\CompositionInvocation.cs,CompositionInvocation,The method has 7 parameters. Parameters: target' proxy' interceptors' proxiedMethod' arguments' selector' methodInterceptors
Long Parameter List,Castle.DynamicProxy,AttributeUtil,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\AttributeUtil.cs,GetSettersAndFields,The method has 5 parameters. Parameters: namedArguments' properties' propertyValues' fields' fieldValues
Long Parameter List,Castle.DynamicProxy,InheritanceInvocation,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\InheritanceInvocation.cs,InheritanceInvocation,The method has 5 parameters. Parameters: targetType' proxy' interceptors' proxiedMethod' arguments
Long Parameter List,Castle.DynamicProxy,InheritanceInvocation,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\InheritanceInvocation.cs,InheritanceInvocation,The method has 7 parameters. Parameters: targetType' proxy' interceptors' proxiedMethod' arguments' selector' methodInterceptors
Long Parameter List,Castle.DynamicProxy,ModuleScope,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ModuleScope.cs,ModuleScope,The method has 5 parameters. Parameters: savePhysicalAssembly' strongAssemblyName' strongModulePath' weakAssemblyName' weakModulePath
Long Parameter List,Castle.DynamicProxy,ModuleScope,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ModuleScope.cs,ModuleScope,The method has 6 parameters. Parameters: savePhysicalAssembly' namingScope' strongAssemblyName' strongModulePath' weakAssemblyName' weakModulePath
Long Parameter List,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTarget,The method has 5 parameters. Parameters: interfaceToProxy' additionalInterfacesToProxy' target' options' interceptors
Long Parameter List,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTargetInterface,The method has 5 parameters. Parameters: interfaceToProxy' additionalInterfacesToProxy' target' options' interceptors
Long Parameter List,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,CreateClassProxy,The method has 5 parameters. Parameters: classToProxy' additionalInterfacesToProxy' options' constructorArguments' interceptors
Long Parameter List,Castle.DynamicProxy.Generators,MetaEvent,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\MetaEvent.cs,MetaEvent,The method has 6 parameters. Parameters: name' declaringType' eventDelegateType' adder' remover' attributes
Long Parameter List,Castle.DynamicProxy.Generators,InterfaceInvocationTypeGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\InterfaceInvocationTypeGenerator.cs,ImplementInvokeMethodOnTarget,The method has 5 parameters. Parameters: class' parameters' invokeMethodOnTarget' callbackMethod' targetField
Long Parameter List,Castle.DynamicProxy.Generators,InterfaceProxyWithoutTargetGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\InterfaceProxyWithoutTargetGenerator.cs,AddMappingForTargetType,The method has 5 parameters. Parameters: interfaceTypeImplementerMapping' proxyTargetType' targetInterfaces' additionalInterfaces' namingScope
Long Parameter List,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,Init,The method has 5 parameters. Parameters: typeName' emitter' proxyTargetType' interceptorsField' interfaces
Long Parameter List,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,AddMappingForTargetType,The method has 5 parameters. Parameters: typeImplementerMapping' proxyTargetType' targetInterfaces' additionalInterfaces' namingScope
Long Parameter List,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetInterfaceGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\InterfaceProxyWithTargetInterfaceGenerator.cs,AddMappingForTargetType,The method has 5 parameters. Parameters: typeImplementerMapping' proxyTargetType' targetInterfaces' additionalInterfaces' namingScope
Long Parameter List,Castle.DynamicProxy.Generators,InvocationTypeGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\InvocationTypeGenerator.cs,ImplementInvokeMethodOnTarget,The method has 5 parameters. Parameters: class' parameters' invokeMethodOnTarget' callbackMethod' targetField
Long Parameter List,Castle.DynamicProxy.Generators,MetaMethod,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\MetaMethod.cs,MetaMethod,The method has 5 parameters. Parameters: method' methodOnTarget' standalone' proxyable' hasTarget
Long Parameter List,Castle.DynamicProxy.Generators,MethodWithInvocationGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\MethodWithInvocationGenerator.cs,MethodWithInvocationGenerator,The method has 5 parameters. Parameters: method' interceptors' invocation' getTargetExpression' createMethod
Long Parameter List,Castle.DynamicProxy.Generators,MetaProperty,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\MetaProperty.cs,MetaProperty,The method has 7 parameters. Parameters: name' propertyType' declaringType' getter' setter' attributes' customAttributes
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,ClassEmitter,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\ClassEmitter.cs,ClassEmitter,The method has 6 parameters. Parameters: modulescope' name' baseType' interfaces' flags' forceUnsigned
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,ClassEmitter,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\ClassEmitter.cs,CreateTypeBuilder,The method has 6 parameters. Parameters: modulescope' name' baseType' interfaces' flags' forceUnsigned
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,MethodEmitter,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\MethodEmitter.cs,MethodEmitter,The method has 5 parameters. Parameters: maintype' name' attrs' returnType' argumentTypes
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,NestedClassEmitter,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\NestedClassEmitter.cs,NestedClassEmitter,The method has 5 parameters. Parameters: maintype' name' attributes' baseType' interfaces
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,NestedClassEmitter,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\NestedClassEmitter.cs,CreateTypeBuilder,The method has 5 parameters. Parameters: maintype' name' attributes' baseType' interfaces
Long Identifier,Castle.DynamicProxy,ProxyGenerationOptions,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerationOptions.cs,,The length of the parameter attributesToAddToGeneratedTypes is 31.
Long Identifier,Castle.DynamicProxy.Contributors,MembersCollector,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Contributors\MembersCollector.cs,AcceptMethod,The length of the parameter isInternalsAndNotVisibleToDynamicProxy is 38.
Long Identifier,Castle.DynamicProxy.Generators,ClassProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\ClassProxyGenerator.cs,GetTypeImplementerMapping,The length of the parameter additionalInterfacesContributor is 31.
Long Identifier,Castle.DynamicProxy.Generators,InterfaceProxyWithoutTargetGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\InterfaceProxyWithoutTargetGenerator.cs,AddMappingForTargetType,The length of the parameter interfaceTypeImplementerMapping is 31.
Long Identifier,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,ThrowInvalidBaseType,The length of the parameter doesNotHaveAccessibleParameterlessConstructor is 45.
Long Identifier,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,GetTypeImplementerMapping,The length of the parameter additionalInterfacesContributor is 31.
Long Identifier,Castle.DynamicProxy.Generators,InvocationTypeGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\InvocationTypeGenerator.cs,ImplementInvokeMethodOnTarget,The length of the parameter methodOnTargetInvocationExpression is 34.
Long Identifier,Castle.DynamicProxy.Generators,MetaMethod,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\MetaMethod.cs,,The length of the parameter ExplicitImplementationAttributes is 32.
Long Identifier,Castle.DynamicProxy.Tokens,InvocationMethods,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Tokens\InvocationMethods.cs,,The length of the parameter InheritanceInvocationConstructorNoSelector is 42.
Long Identifier,Castle.DynamicProxy.Tokens,InvocationMethods,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Tokens\InvocationMethods.cs,,The length of the parameter InheritanceInvocationConstructorWithSelector is 44.
Long Identifier,Castle.DynamicProxy.Tokens,InvocationMethods,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Tokens\InvocationMethods.cs,,The length of the parameter CompositionInvocationConstructorNoSelector is 42.
Long Identifier,Castle.DynamicProxy.Tokens,InvocationMethods,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Tokens\InvocationMethods.cs,,The length of the parameter CompositionInvocationConstructorWithSelector is 44.
Long Statement,Castle.DynamicProxy,CompositionInvocation,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\CompositionInvocation.cs,EnsureValidTarget,The length of the statement  "			                 "This may result in recursively calling the method over and over again until stack overflow' which may destabilize your program." + " is 131.
Long Statement,Castle.DynamicProxy,CompositionInvocation,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\CompositionInvocation.cs,EnsureValidProxyTarget,The length of the statement  "						  "This would result in recursively calling proxy methods over and over again until stack overflow' which may destabilize your program." + " is 136.
Long Statement,Castle.DynamicProxy,ModuleScope,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ModuleScope.cs,GetKeyPair,The length of the statement  "						"Should have a Castle.DynamicProxy.DynProxy.snk as an embedded resource' so Dynamic Proxy could sign generated assembly"); " is 122.
Long Statement,Castle.DynamicProxy,ModuleScope,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ModuleScope.cs,GetAssemblyName,The length of the statement  "					//http://www.c-sharpcorner.com/UploadFile/shashijeevan/PublicKeyTokenGenerato08302005015104AM/PublicKeyTokenGenerato.aspx " is 121.
Long Statement,Castle.DynamicProxy,ProxyGenerationOptions,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerationOptions.cs,Initialize,The length of the statement  "					throw new InvalidMixinConfigurationException("There is a problem with the mixins added to this ProxyGenerationOptions: " + ex.Message' ex); " is 139.
Long Statement,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTarget,The length of the statement  "			// NOTE: we don't need to document exception case where interface type is null' since it can never be for a generic method. " is 123.
Long Statement,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTarget,The length of the statement  "			// If we leave target as being of type TInterface we also have covered exception where target does not implement TInterface. " is 124.
Long Statement,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTarget,The length of the statement  "			return (TInterface)CreateInterfaceProxyWithTarget(typeof(TInterface)' target' ProxyGenerationOptions.Default' interceptors); " is 124.
Long Statement,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTarget,The length of the statement  "			return CreateInterfaceProxyWithTarget(interfaceToProxy' additionalInterfacesToProxy' target' ProxyGenerationOptions.Default' interceptors); " is 139.
Long Statement,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTarget,The length of the statement  "			Type generatedType = CreateInterfaceProxyTypeWithTarget(interfaceToProxy' additionalInterfacesToProxy' targetType' options); " is 124.
Long Statement,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,GetConstructorArguments,The length of the statement  "			// create constructor arguments (initialized with mixin implementations' interceptors and target type constructor arguments) " is 124.
Long Statement,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTargetInterface,The length of the statement  "			Type generatedType = CreateInterfaceProxyTypeWithTargetInterface(interfaceToProxy' additionalInterfacesToProxy' options); " is 121.
Long Statement,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithoutTarget,The length of the statement  "			return CreateInterfaceProxyWithoutTarget(interfaceToProxy' Type.EmptyTypes' ProxyGenerationOptions.Default' interceptor); " is 121.
Long Statement,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithoutTarget,The length of the statement  "			return CreateInterfaceProxyWithoutTarget(interfaceToProxy' Type.EmptyTypes' ProxyGenerationOptions.Default' interceptors); " is 122.
Long Statement,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithoutTarget,The length of the statement  "			return CreateInterfaceProxyWithoutTarget(interfaceToProxy' additionalInterfacesToProxy' ProxyGenerationOptions.Default' interceptors); " is 134.
Long Statement,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,CreateClassProxy,The length of the statement  "			// create constructor arguments (initialized with mixin implementations' interceptors and target type constructor arguments) " is 124.
Long Statement,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyTypeWithTarget,The length of the statement  "			return ProxyBuilder.CreateInterfaceProxyTypeWithTarget(interfaceToProxy' additionalInterfacesToProxy' targetType' options); " is 123.
Long Statement,Castle.DynamicProxy,ProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyTypeWithTargetInterface,The length of the statement  "			return ProxyBuilder.CreateInterfaceProxyTypeWithTargetInterface(interfaceToProxy' additionalInterfacesToProxy' options); " is 120.
Long Statement,Castle.DynamicProxy.Contributors,CompositeTypeContributor,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Contributors\CompositeTypeContributor.cs,AddInterfaceToProxy,The length of the statement  "			Debug.Assert(!interfaces.Contains(@interface)' "!interfaces.ContainsKey(@interface)"' "Shouldn't be adding same interface twice..."); " is 133.
Long Statement,Castle.DynamicProxy.Contributors,MixinContributor,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Contributors\MixinContributor.cs,AddEmptyInterface,The length of the statement  "			Debug.Assert(!interfaces.Contains(@interface)' "!interfaces.Contains(@interface)"' "Shouldn't be adding same interface twice..."); " is 130.
Long Statement,Castle.DynamicProxy.Contributors,MixinContributor,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Contributors\MixinContributor.cs,AddEmptyInterface,The length of the statement  "			Debug.Assert(!empty.Contains(@interface)' "!empty.Contains(@interface)"' "Shouldn't be adding same interface twice..."); " is 120.
Long Statement,Castle.DynamicProxy.Contributors,MembersCollector,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Contributors\MembersCollector.cs,AcceptMethod,The length of the statement  "				Logger.Debug("Excluded sealed method {0} on {1} because it cannot be intercepted."' method.Name' method.DeclaringType.FullName); " is 128.
Long Statement,Castle.DynamicProxy.Contributors,MembersCollector,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Contributors\MembersCollector.cs,AcceptMethod,The length of the statement  "					Logger.Debug("Excluded non-virtual method {0} on {1} because it cannot be intercepted."' method.Name' method.DeclaringType.FullName); " is 133.
Long Statement,Castle.DynamicProxy.Generators,BaseProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\BaseProxyGenerator.cs,GenerateParameterlessConstructor,The length of the statement  "			ConstructorInfo defaultConstructor = baseClass.GetConstructor(BindingFlags.Public | BindingFlags.Instance' null' Type.EmptyTypes' null); " is 136.
Long Statement,Castle.DynamicProxy.Generators,BaseProxyGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\BaseProxyGenerator.cs,GenerateParameterlessConstructor,The length of the statement  "				defaultConstructor = baseClass.GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance' null' Type.EmptyTypes' null); " is 123.
Long Statement,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,ThrowInvalidBaseType,The length of the statement  "			var format = "Type {0} is not valid base type for interface proxy' because {1}. Only a non-sealed class with non-private default constructor can be used as base type for interface proxy. Please use some other valid type."; " is 222.
Long Statement,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,GetTypeImplementerMapping,The length of the statement  "			var target = AddMappingForTargetType(typeImplementerMapping' proxyTargetType' targetInterfaces' additionalInterfaces'namingScope); " is 130.
Long Statement,Castle.DynamicProxy.Generators,MethodWithInvocationGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\MethodWithInvocationGenerator.cs,BuildProxiedMethodBody,The length of the statement  "				var proxiedMethodToken = @class.CreateStaticField(namingScope.GetUniqueName("token_" + MethodToOverride.Name)' typeof(MethodInfo)); " is 131.
Long Statement,Castle.DynamicProxy.Generators,MethodWithInvocationGenerator,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\MethodWithInvocationGenerator.cs,BuildProxiedMethodBody,The length of the statement  "				@class.ClassConstructor.CodeBuilder.AddStatement(new AssignStatement(proxiedMethodToken' new MethodTokenExpression(MethodToOverride))); " is 135.
Long Statement,Castle.DynamicProxy.Generators.Emitters,AbstractTypeEmitter,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\AbstractTypeEmitter.cs,DefineCustomAttributeFor,The length of the statement  "				throw new ArgumentException("Invalid field reference.This reference does not point to field on type being generated"'"field"); " is 126.
Long Statement,Castle.DynamicProxy.Generators.Emitters,GenericUtil,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\GenericUtil.cs,CopyGenericArguments,The length of the statement  "						Type[] interfacesConstraints = Castle.Core.Extensions.SilverlightExtensions.FindAll(types' delegate(Type type) { return type.IsInterface; }); " is 141.
Long Statement,Castle.DynamicProxy.Generators.Emitters,GenericUtil,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\GenericUtil.cs,CopyGenericArguments,The length of the statement  "						Type baseClassConstraint = Castle.DynamicProxy.SilverlightExtensions.Extensions.Find(types' delegate(Type type) { return type.IsClass; }); " is 138.
Long Statement,Castle.DynamicProxy.Generators.Emitters,GenericUtil,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\GenericUtil.cs,CopyGenericArguments,The length of the statement  "									AdjustConstraintToNewGenericParameters(interfacesConstraints[j]' methodToCopyGenericsFrom' originalGenericArguments' newGenericParameters); " is 139.
Long Statement,Castle.DynamicProxy.Generators.Emitters,GenericUtil,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\GenericUtil.cs,CopyGenericArguments,The length of the statement  "							baseClassConstraint = AdjustConstraintToNewGenericParameters(baseClassConstraint' methodToCopyGenericsFrom' originalGenericArguments' newGenericParameters); " is 156.
Long Statement,Castle.DynamicProxy.Generators.Emitters,GenericUtil,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\GenericUtil.cs,AdjustConstraintToNewGenericParameters,The length of the statement  "							AdjustConstraintToNewGenericParameters(genericArgumentsOfConstraint[i]' methodToCopyGenericsFrom' originalGenericParameters' newGenericParameters); " is 147.
Long Statement,Castle.DynamicProxy.Generators.Emitters,GenericUtil,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\GenericUtil.cs,AdjustConstraintToNewGenericParameters,The length of the statement  "							"When a generic method parameter has a constraint on another method parameter' both parameters must be declared on the same method."); " is 134.
Long Statement,Castle.DynamicProxy.Generators.Emitters,GenericUtil,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\GenericUtil.cs,AdjustConstraintToNewGenericParameters,The length of the statement  "							"When a generic method parameter has a constraint on a generic type parameter' the generic type must be the declaring typer of the method."); " is 141.
Long Statement,Castle.DynamicProxy.Generators.Emitters,StrongNameUtil,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\StrongNameUtil.cs,ContainsPublicKey,The length of the statement  "			// Pulled from a comment on http://www.flawlesscode.com/post/2008/08/Mocking-and-IOC-in-Silverlight-2-Castle-Project-and-Moq-ports.aspx " is 135.
Long Statement,Castle.DynamicProxy.Generators.Emitters.CodeBuilders,ConstructorCodeBuilder,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\CodeBuilders\ConstructorCodeBuilder.cs,InvokeBaseConstructor,The length of the statement  "				type = type.GetGenericTypeDefinition (); // need to get generic type definition' otherwise the GetConstructor method might throw NotSupportedException " is 150.
Long Statement,Castle.DynamicProxy.Serialization,ProxyObjectReference,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Serialization\ProxyObjectReference.cs,OnDeserialization,The length of the statement  "			// Get the proxy state again' to get all those members we couldn't get in the constructor due to deserialization ordering. " is 122.
Complex Conditional,Castle.DynamicProxy.Contributors,MembersCollector,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Contributors\MembersCollector.cs,AcceptMethod,The conditional expression  "(method.IsPublic || method.IsFamily || method.IsAssembly || method.IsFamilyOrAssembly) == false"  is complex.
Complex Conditional,Castle.DynamicProxy.Generators,MethodFinder,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\MethodFinder.cs,MakeFilteredCopy,The conditional expression  "(method.IsPublic && includePublic) || (!method.IsPublic && includeNonPublic)"  is complex.
Virtual Method Call from Constructor,Castle.DynamicProxy.Generators.Emitters,ClassEmitter,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\ClassEmitter.cs,ClassEmitter,The constructor "ClassEmitter" calls a virtual method "InitializeGenericArgumentsFromBases".
Virtual Method Call from Constructor,Castle.DynamicProxy.Serialization,ProxyObjectReference,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Serialization\ProxyObjectReference.cs,ProxyObjectReference,The constructor "ProxyObjectReference" calls a virtual method "RecreateProxy".
Magic Number,Castle.DynamicProxy,MixinData,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\MixinData.cs,GetHashCode,The following statement contains a magic number: foreach (object mixinImplementation in mixinsImpl)  				hashCode = 29*hashCode + mixinImplementation.GetType().GetHashCode();
Magic Number,Castle.DynamicProxy,ProxyGenerationOptions,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerationOptions.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + (Selector != null ? 1 : 0);
Magic Number,Castle.DynamicProxy,ProxyGenerationOptions,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerationOptions.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + MixinData.GetHashCode();
Magic Number,Castle.DynamicProxy,ProxyGenerationOptions,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\ProxyGenerationOptions.cs,GetHashCode,The following statement contains a magic number: result = 29 * result + (BaseTypeForInterfaceProxy != null ? BaseTypeForInterfaceProxy.GetHashCode() : 0);
Magic Number,Castle.DynamicProxy.Generators,CacheKey,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\CacheKey.cs,GetHashCode,The following statement contains a magic number: foreach (Type inter in interfaces)  			{  				result += 29 + inter.GetHashCode();  			}
Magic Number,Castle.DynamicProxy.Generators,CacheKey,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\CacheKey.cs,GetHashCode,The following statement contains a magic number: if (options != null)  				result = 29*result + options.GetHashCode();
Magic Number,Castle.DynamicProxy.Generators,CacheKey,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\CacheKey.cs,GetHashCode,The following statement contains a magic number: if (type != null)  				result = 29*result + type.GetHashCode();
Magic Number,Castle.DynamicProxy.Generators,MetaEvent,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\MetaEvent.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				int result = (adder.Method != null ? adder.Method.GetHashCode() : 0);  				result = (result * 397) ^ (remover.Method != null ? remover.Method.GetHashCode() : 0);  				result = (result * 397) ^ Attributes.GetHashCode();  				return result;  			}
Magic Number,Castle.DynamicProxy.Generators,MetaEvent,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\MetaEvent.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				int result = (adder.Method != null ? adder.Method.GetHashCode() : 0);  				result = (result * 397) ^ (remover.Method != null ? remover.Method.GetHashCode() : 0);  				result = (result * 397) ^ Attributes.GetHashCode();  				return result;  			}
Magic Number,Castle.DynamicProxy.Generators,MetaProperty,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\MetaProperty.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				return ((GetMethod != null ? GetMethod.GetHashCode() : 0) * 397) ^ (SetMethod != null ? SetMethod.GetHashCode() : 0);  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,ArgumentReference,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\SimpleAST\ArgumentReference.cs,LoadReference,The following statement contains a magic number: switch (Position)  			{  				case 0:  					gen.Emit(OpCodes.Ldarg_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldarg_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldarg_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldarg_3);  					break;  				default:  					gen.Emit(OpCodes.Ldarg_S' Position);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,ArgumentReference,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\SimpleAST\ArgumentReference.cs,LoadReference,The following statement contains a magic number: switch (Position)  			{  				case 0:  					gen.Emit(OpCodes.Ldarg_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldarg_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldarg_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldarg_3);  					break;  				default:  					gen.Emit(OpCodes.Ldarg_S' Position);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value)  			{  				case -1:  					gen.Emit(OpCodes.Ldc_I4_M1);  					break;  				case 0:  					gen.Emit(OpCodes.Ldc_I4_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldc_I4_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldc_I4_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldc_I4_3);  					break;  				case 4:  					gen.Emit(OpCodes.Ldc_I4_4);  					break;  				case 5:  					gen.Emit(OpCodes.Ldc_I4_5);  					break;  				case 6:  					gen.Emit(OpCodes.Ldc_I4_6);  					break;  				case 7:  					gen.Emit(OpCodes.Ldc_I4_7);  					break;  				case 8:  					gen.Emit(OpCodes.Ldc_I4_8);  					break;  				default:  					gen.Emit(OpCodes.Ldc_I4' value);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value)  			{  				case -1:  					gen.Emit(OpCodes.Ldc_I4_M1);  					break;  				case 0:  					gen.Emit(OpCodes.Ldc_I4_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldc_I4_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldc_I4_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldc_I4_3);  					break;  				case 4:  					gen.Emit(OpCodes.Ldc_I4_4);  					break;  				case 5:  					gen.Emit(OpCodes.Ldc_I4_5);  					break;  				case 6:  					gen.Emit(OpCodes.Ldc_I4_6);  					break;  				case 7:  					gen.Emit(OpCodes.Ldc_I4_7);  					break;  				case 8:  					gen.Emit(OpCodes.Ldc_I4_8);  					break;  				default:  					gen.Emit(OpCodes.Ldc_I4' value);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value)  			{  				case -1:  					gen.Emit(OpCodes.Ldc_I4_M1);  					break;  				case 0:  					gen.Emit(OpCodes.Ldc_I4_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldc_I4_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldc_I4_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldc_I4_3);  					break;  				case 4:  					gen.Emit(OpCodes.Ldc_I4_4);  					break;  				case 5:  					gen.Emit(OpCodes.Ldc_I4_5);  					break;  				case 6:  					gen.Emit(OpCodes.Ldc_I4_6);  					break;  				case 7:  					gen.Emit(OpCodes.Ldc_I4_7);  					break;  				case 8:  					gen.Emit(OpCodes.Ldc_I4_8);  					break;  				default:  					gen.Emit(OpCodes.Ldc_I4' value);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value)  			{  				case -1:  					gen.Emit(OpCodes.Ldc_I4_M1);  					break;  				case 0:  					gen.Emit(OpCodes.Ldc_I4_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldc_I4_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldc_I4_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldc_I4_3);  					break;  				case 4:  					gen.Emit(OpCodes.Ldc_I4_4);  					break;  				case 5:  					gen.Emit(OpCodes.Ldc_I4_5);  					break;  				case 6:  					gen.Emit(OpCodes.Ldc_I4_6);  					break;  				case 7:  					gen.Emit(OpCodes.Ldc_I4_7);  					break;  				case 8:  					gen.Emit(OpCodes.Ldc_I4_8);  					break;  				default:  					gen.Emit(OpCodes.Ldc_I4' value);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value)  			{  				case -1:  					gen.Emit(OpCodes.Ldc_I4_M1);  					break;  				case 0:  					gen.Emit(OpCodes.Ldc_I4_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldc_I4_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldc_I4_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldc_I4_3);  					break;  				case 4:  					gen.Emit(OpCodes.Ldc_I4_4);  					break;  				case 5:  					gen.Emit(OpCodes.Ldc_I4_5);  					break;  				case 6:  					gen.Emit(OpCodes.Ldc_I4_6);  					break;  				case 7:  					gen.Emit(OpCodes.Ldc_I4_7);  					break;  				case 8:  					gen.Emit(OpCodes.Ldc_I4_8);  					break;  				default:  					gen.Emit(OpCodes.Ldc_I4' value);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value)  			{  				case -1:  					gen.Emit(OpCodes.Ldc_I4_M1);  					break;  				case 0:  					gen.Emit(OpCodes.Ldc_I4_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldc_I4_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldc_I4_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldc_I4_3);  					break;  				case 4:  					gen.Emit(OpCodes.Ldc_I4_4);  					break;  				case 5:  					gen.Emit(OpCodes.Ldc_I4_5);  					break;  				case 6:  					gen.Emit(OpCodes.Ldc_I4_6);  					break;  				case 7:  					gen.Emit(OpCodes.Ldc_I4_7);  					break;  				case 8:  					gen.Emit(OpCodes.Ldc_I4_8);  					break;  				default:  					gen.Emit(OpCodes.Ldc_I4' value);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,C:\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value)  			{  				case -1:  					gen.Emit(OpCodes.Ldc_I4_M1);  					break;  				case 0:  					gen.Emit(OpCodes.Ldc_I4_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldc_I4_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldc_I4_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldc_I4_3);  					break;  				case 4:  					gen.Emit(OpCodes.Ldc_I4_4);  					break;  				case 5:  					gen.Emit(OpCodes.Ldc_I4_5);  					break;  				case 6:  					gen.Emit(OpCodes.Ldc_I4_6);  					break;  				case 7:  					gen.Emit(OpCodes.Ldc_I4_7);  					break;  				case 8:  					gen.Emit(OpCodes.Ldc_I4_8);  					break;  				default:  					gen.Emit(OpCodes.Ldc_I4' value);  					break;  			}
