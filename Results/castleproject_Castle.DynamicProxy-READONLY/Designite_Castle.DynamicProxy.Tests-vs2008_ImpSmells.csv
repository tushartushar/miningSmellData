Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Castle.DynamicProxy.Tests.Classes,ComplexNonInheritableAttribute,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Classes\AttributedClass.cs,ComplexNonInheritableAttribute,The method has 5 parameters. Parameters: id' num' isSomething' name' access
Long Parameter List,Castle.DynamicProxy.Tests.GenInterfaces,Find2Invo<T>,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenInterfaces\GenInterfaceWithGenericTypes.cs,Find2Invo,The method has 6 parameters. Parameters: target' interceptors' targetType' targetMethod' interfMethod' arguments
Long Parameter List,Castle.DynamicProxy.Tests.GenInterfaces,Find1Invo,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenInterfaces\GenInterfaceWithGenericTypes.cs,Find1Invo,The method has 6 parameters. Parameters: target' interceptors' targetType' targetMethod' interfMethod' arguments
Long Parameter List,Castle.DynamicProxy.Tests.GenInterfaces,Find1InvoA,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenInterfaces\GenInterfaceWithGenericTypes.cs,Find1InvoA,The method has 6 parameters. Parameters: target' interceptors' targetType' targetMethod' interfMethod' arguments
Long Parameter List,Castle.DynamicProxy.Tests.GenInterfaces,Find3Invo<T>,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenInterfaces\GenInterfaceWithGenericTypes.cs,Find3Invo,The method has 6 parameters. Parameters: target' interceptors' targetType' targetMethod' interfMethod' arguments
Long Identifier,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,ReusingModuleScopeFromProxyObjectReference,The length of the parameter generatorWithSpecificModuleScope is 32.
Long Statement,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithInterfaces,The length of the statement  "					"This is a DynamicProxy2 error: The interceptor attempted to 'Proceed' for method 'Void Dispose()' which has no target. " + " is 123.
Long Statement,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithInterfaces,The length of the statement  "					"When calling method without target there is no implementation to 'proceed' to and it is the responsibility of the interceptor " + " is 130.
Long Statement,Castle.DynamicProxy.Tests,GenerationHookTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenerationHookTestCase.cs,HookIsUsedForConcreteClassProxy,The length of the statement  "			Assert.AreEqual(2' hook.NonVirtualMembers.Count' "Non-virtual members");// <-- this would fail due to superfulous method check " is 126.
Long Statement,Castle.DynamicProxy.Tests,GenericClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenericClassProxyTestCase.cs,MethodInfoClosedInGenTypeGenMethodRefType,The length of the statement  "			GenClassWithGenMethods<List<object>> proxy = generator.CreateClassProxy<GenClassWithGenMethods<List<object>>>(interceptor); " is 123.
Long Statement,Castle.DynamicProxy.Tests,MixinTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\MixinTestCase.cs,MixinWithSameInterface_InterfaceWithTarget_AdditionalInterfaces,The length of the statement  "			var proxy = generator.CreateInterfaceProxyWithTarget(typeof(IService)' new Type[] {typeof (ISimpleMixin)}' new ServiceImpl()' options' interceptor); " is 148.
Long Statement,Castle.DynamicProxy.Tests,MixinTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\MixinTestCase.cs,MixinWithSameInterface_InterfaceWithTarget_AdditionalInterfaces_Derived,The length of the statement  "			var proxy = generator.CreateInterfaceProxyWithTarget(typeof(IService)' new Type[] { typeof(IDerivedSimpleMixin) }' new ServiceImpl()' options' interceptor); " is 156.
Long Statement,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitInterface_AsAdditionalInterfaceToProxy_OnClassProxy_WithBaseCalls,The length of the statement  "			ClassWithExplicitInterface instance = (ClassWithExplicitInterface) generator.CreateClassProxy (typeof (ClassWithExplicitInterface)'  " is 131.
Long Statement,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitInterface_AsAdditionalInterfaceToProxy_OnClassProxy_WithoutBaseCalls,The length of the statement  "			ClassWithExplicitInterface instance = (ClassWithExplicitInterface) generator.CreateClassProxy (typeof (ClassWithExplicitInterface)' " is 131.
Long Statement,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitInterface_properties_should_be_public_class,The length of the statement  "			var proxy = generator.CreateClassProxy(typeof(ExplicitInterfaceWithPropertyImplementation)' new[] { typeof(ISimpleInterfaceWithProperty) }' " is 139.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,BasicInterfaceProxyWithValidTarget_ThrowsIfInterceptorCallsProceed,The length of the statement  "				"This is a DynamicProxy2 error: The interceptor attempted to 'Proceed' for method 'Int32 Sum(Int32' Int32)' which has no target. " + " is 132.
Long Statement,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,BasicInterfaceProxyWithValidTarget_ThrowsIfInterceptorCallsProceed,The length of the statement  "	    		"When calling method without target there is no implementation to 'proceed' to and it is the responsibility of the interceptor " + " is 130.
Long Statement,Castle.DynamicProxy.Tests,BugsReportedTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BugsReportedTestCase.cs,CallingProceedWithInterceptorOnAbstractMethodShouldThrowException,The length of the statement  "				"This is a DynamicProxy2 error: The interceptor attempted to 'Proceed' for method 'System.String Foo()' which is abstract. " + " is 126.
Long Statement,Castle.DynamicProxy.Tests,BugsReportedTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BugsReportedTestCase.cs,CallingProceedWithoutInterceptorOnAbstractMethodShouldThrowException,The length of the statement  "				"This is a DynamicProxy2 error: There are no interceptors specified for method 'System.String Foo()' which is abstract. " + " is 123.
Long Statement,Castle.DynamicProxy.Tests,ClassEmitterTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ClassEmitterTestCase.cs,UsingClassEmitterForInterfaces,The length of the statement  "			emitter.CreateMethod("MyMethod"' MethodAttributes.Public | MethodAttributes.Abstract | MethodAttributes.Virtual' typeof (void)); " is 128.
Long Statement,Castle.DynamicProxy.Tests,ClassEmitterTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ClassEmitterTestCase.cs,NestedInterface,The length of the statement  "			innerEmitter.CreateMethod("MyMethod"' MethodAttributes.Public | MethodAttributes.Abstract | MethodAttributes.Virtual' typeof(void)); " is 132.
Long Statement,Castle.DynamicProxy.Tests,ClassProxyConstructorsTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ClassProxyConstructorsTestCase.cs,Should_properly_interpret_nothing_as_lack_of_ctor_arguments,The length of the statement  "			var proxy = (ClassWithVariousConstructors)generator.CreateClassProxy(typeof(ClassWithVariousConstructors)' new IInterceptor[0]); " is 128.
Long Statement,Castle.DynamicProxy.Tests,GenericMethodsProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenericMethodsProxyTestCase.cs,GenericMethod_WithConstraintOnOtherParameter,The length of the statement  "					typeof(IInterfaceWithGenericMethodWithDependentConstraint).GetMethod("RegisterType").MakeGenericMethod(typeof(object)' typeof(string)); " is 135.
Long Statement,Castle.DynamicProxy.Tests,GenericMethodsProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenericMethodsProxyTestCase.cs,GenericMethod_WithConstraintOnSurroundingTypeParameter,The length of the statement  "			IGenericInterfaceWithGenericMethodWithDependentConstraint<object> proxy = (IGenericInterfaceWithGenericMethodWithDependentConstraint<object>) " is 141.
Long Statement,Castle.DynamicProxy.Tests,GenericMethodsProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenericMethodsProxyTestCase.cs,GenericMethod_WithConstraintOnSurroundingTypeParameter,The length of the statement  "					typeof (IGenericInterfaceWithGenericMethodWithDependentConstraint<object>).GetMethod ("RegisterType").MakeGenericMethod (typeof (string)); " is 138.
Long Statement,Castle.DynamicProxy.Tests,InheritedInterfacesTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InheritedInterfacesTestCase.cs,Should_not_have_duplicated_properties_for_interface_proxy_with_inherited_target_and_two_inherited_additional_interfaces,The length of the statement  "			PropertyInfo[] properties = o.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 124.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterceptorSelectorTestCase.cs,When_two_selectors_present_and_not_equal_should_cache_type_anyway_InterfaceProxyWithoutTarget,The length of the statement  "			var proxy1 = generator.CreateInterfaceProxyWithoutTarget(typeof(IOne)' Type.EmptyTypes' options1' new SetReturnValueInterceptor(2)); " is 132.
Long Statement,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterceptorSelectorTestCase.cs,When_two_selectors_present_and_not_equal_should_cache_type_anyway_InterfaceProxyWithoutTarget,The length of the statement  "			var proxy2 = generator.CreateInterfaceProxyWithoutTarget(typeof(IOne)' Type.EmptyTypes' options2' new SetReturnValueInterceptor(2)); " is 132.
Long Statement,Castle.DynamicProxy.Tests,InterfaceProxyBaseTypeTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterfaceProxyBaseTypeTestCase.cs,Class_with_no_default_ctor_as_base_type,The length of the statement  "					"Type {0} is not valid base type for interface proxy' because it does not have accessible parameterless constructor. " + " is 120.
Long Statement,Castle.DynamicProxy.Tests,InterfaceProxyBaseTypeTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterfaceProxyBaseTypeTestCase.cs,Class_with_private_default_ctor_as_base_type,The length of the statement  "					"Type {0} is not valid base type for interface proxy' because it does not have accessible parameterless constructor. " + " is 120.
Long Statement,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,ClassProxy_MethodInvocationTarget_should_be_base_Method_for_interface_methods_implemented_virtually,The length of the statement  "			var proxy = generator.CreateClassProxy(typeof(ClassWithVirtualInterface)' new[] { typeof(ISimpleInterface) }' interceptor) as ISimpleInterface; " is 143.
Long Statement,Castle.DynamicProxy.Tests,ModuleScopeTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ModuleScopeTestCase.cs,LoadAssemblyIntoCache_CreateClassProxy,The length of the statement  "			CheckLoadAssemblyIntoCache(builder => builder.CreateClassProxyType(typeof (object)' null' ProxyGenerationOptions.Default)); " is 123.
Long Statement,Castle.DynamicProxy.Tests,ModuleScopeTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ModuleScopeTestCase.cs,LoadAssemblyIntoCache_CreateInterfaceProxyTypeWithTargetInterface,The length of the statement  "					return builder.CreateInterfaceProxyTypeWithTargetInterface(typeof (IMyInterface2)' null' ProxyGenerationOptions.Default);  " is 121.
Long Statement,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_target_and_mixin_should_forward_to_target,The length of the statement  "			var proxy = generator.CreateInterfaceProxyWithTarget(typeof (IService)' Type.EmptyTypes' target' MixIn(mixin)) as IService; " is 123.
Long Statement,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\RhinoMocksTestCase.cs,CanProxyMethodWithModOpt,The length of the statement  "				(IHaveMethodWithModOpts) generator.CreateInterfaceProxyWithoutTarget(typeof (IHaveMethodWithModOpts)' new DoNothingInterceptor()); " is 130.
Complex Conditional,Castle.DynamicProxy.Tests.Interceptors,RequiredParamInterceptor,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Interceptors\RequiredParamInterceptor.cs,Intercept,The conditional expression  "(required.BadValue == null && args[i] == null) ||  						(required.BadValue != null && required.BadValue.Equals(args[i]))"  is complex.
Virtual Method Call from Constructor,Castle.DynamicProxy.Tests.Classes,ClassCallingVirtualMethodFromCtor,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Classes\ClassCallingVirtualMethodFromCtor.cs,ClassCallingVirtualMethodFromCtor,The constructor "ClassCallingVirtualMethodFromCtor" calls a virtual method "VirtualMethod".
Empty Catch Block,Castle.DynamicProxy.Tests,MethodFinderTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\MethodFinderTestCase.cs,AssertArrayAreEqualUnsorted,The method has an empty catch block.
Empty Catch Block,Castle.DynamicProxy.Tests,MethodFinderTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\MethodFinderTestCase.cs,AssertArrayAreEqualUnsorted,The method has an empty catch block.
Empty Catch Block,Castle.DynamicProxy.Tests,MethodFinderTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\MethodFinderTestCase.cs,AssertArrayAreEqualUnsorted,The method has an empty catch block.
Magic Number,Castle.DynamicProxy.Tests,AccessLevelTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\AccessLevelTestCase.cs,ProtectedMethods,The following statement contains a magic number: Assert.AreEqual(2' logger.Invocations.Count);
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(44' instance.Sum(20' 25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(44' instance.Sum(20' 25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(44' instance.Sum(20' 25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum((byte)20' (byte)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum((byte)20' (byte)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum((byte)20' (byte)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum(20L' 25L));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum(20L' 25L));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum(20L' 25L));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum((short)20' (short)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum((short)20' (short)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum((short)20' (short)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum(20f' 25f));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum(20f' 25f));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum(20f' 25f));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum(20.0' 25.0));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum(20.0' 25.0));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum(20.0' 25.0));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum((ushort)20' (ushort)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum((ushort)20' (ushort)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum((ushort)20' (ushort)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum((uint)20' (uint)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum((uint)20' (uint)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum((uint)20' (uint)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum((ulong)20' (ulong)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum((ulong)20' (ulong)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClass,The following statement contains a magic number: Assert.AreEqual(45' instance.Sum((ulong)20' (ulong)25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithIndexer,The following statement contains a magic number: type["name"] = 10;
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithIndexer,The following statement contains a magic number: Assert.AreEqual(10' type["name"]);
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ClassWithInheritance,The following statement contains a magic number: extended.Sum2(1' 2);
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ClassWithInheritance,The following statement contains a magic number: extended.Sum(1' 2);
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithInterfaces,The following statement contains a magic number: Assert.AreEqual(44' inter.Sum(20' 25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithInterfaces,The following statement contains a magic number: Assert.AreEqual(44' inter.Sum(20' 25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithInterfaces,The following statement contains a magic number: Assert.AreEqual(44' inter.Sum(20' 25));
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithConstructors,The following statement contains a magic number: proxy = generator.CreateClassProxy(typeof(ClassWithConstructors)' new object[] {"name"' 10}'  			                                   new StandardInterceptor());
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyForClassWithConstructors,The following statement contains a magic number: Assert.AreEqual(10' classProxy.X);
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ProxyTypeWithMultiDimentionalArrayAsParameters,The following statement contains a magic number: int['] x = new int[1'2];
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,VirtualCallFromCtor,The following statement contains a magic number: Assert.AreEqual(7' proxy.Result);
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ClassImplementingInterfaceVitrually,The following statement contains a magic number: var interceptor = new SetReturnValueInterceptor(123);
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ClassImplementingInterfaceVitrually,The following statement contains a magic number: Assert.AreEqual(123' (proxy as ClassWithVirtualInterface).Do());
Magic Number,Castle.DynamicProxy.Tests,BasicClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicClassProxyTestCase.cs,ClassImplementingInterfaceVitrually,The following statement contains a magic number: Assert.AreEqual(123' (proxy as ISimpleInterface).Do());
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,BasicInterfaceProxyWithValidTarget,The following statement contains a magic number: Assert.AreEqual(3' service.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,BasicInterfaceProxyWithValidTarget,The following statement contains a magic number: Assert.AreEqual(3' service.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,InterfaceInheritance,The following statement contains a magic number: Assert.AreEqual(3' service.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,InterfaceInheritance,The following statement contains a magic number: Assert.AreEqual(3' service.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,ChangingInvocationTargetSucceeds,The following statement contains a magic number: Assert.AreEqual(20' service.Sum(10' 10));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,ChangingInvocationTargetSucceeds,The following statement contains a magic number: Assert.AreEqual(20' service.Sum(10' 10));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyTestCase.cs,ChangingInvocationTargetSucceeds,The following statement contains a magic number: Assert.AreEqual(20' service.Sum(10' 10));
Magic Number,Castle.DynamicProxy.Tests,ClassWithAttributesTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ClassWithAttributesTestCase.cs,EnsureProxyHasAttributesOnClassAndMethods_ComplexAttributes,The following statement contains a magic number: Assert.AreEqual(2' att.Num);
Magic Number,Castle.DynamicProxy.Tests,ClassWithAttributesTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ClassWithAttributesTestCase.cs,EnsureProxyHasAttributesOnClassAndMethods_ComplexAttributes,The following statement contains a magic number: Assert.AreEqual(2' att.Id);
Magic Number,Castle.DynamicProxy.Tests,ClassWithAttributesTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ClassWithAttributesTestCase.cs,EnsureProxyHasAttributesOnClassAndMethods_ComplexAttributes,The following statement contains a magic number: Assert.AreEqual(3' att.Num);
Magic Number,Castle.DynamicProxy.Tests,ClassWithAttributesTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ClassWithAttributesTestCase.cs,EnsureProxyHasAttributesOnClassAndMethods_ComplexAttributes,The following statement contains a magic number: Assert.AreEqual(3' att.Id);
Magic Number,Castle.DynamicProxy.Tests,ClassWithAttributesTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ClassWithAttributesTestCase.cs,EnsureProxyHasAttributesOnClassAndMethods_ComplexAttributes,The following statement contains a magic number: Assert.AreEqual(4' att.Num);
Magic Number,Castle.DynamicProxy.Tests,GenerationHookTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenerationHookTestCase.cs,HookIsUsedForConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(10' hook.AskedMembers.Count' "Asked members");
Magic Number,Castle.DynamicProxy.Tests,GenerationHookTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenerationHookTestCase.cs,HookIsUsedForConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(2' hook.NonVirtualMembers.Count' "Non-virtual members");
Magic Number,Castle.DynamicProxy.Tests,GenerationHookTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenerationHookTestCase.cs,HookIsUsedForConcreteClassProxy,The following statement contains a magic number: proxy.Sum(1' 2);
Magic Number,Castle.DynamicProxy.Tests,GenerationHookTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenerationHookTestCase.cs,HookIsUsedForInterfaceProxy,The following statement contains a magic number: Assert.AreEqual(10' hook.AskedMembers.Count);
Magic Number,Castle.DynamicProxy.Tests,GenerationHookTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenerationHookTestCase.cs,HookIsUsedForInterfaceProxy,The following statement contains a magic number: Assert.AreEqual(3' proxy.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,GenerationHookTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenerationHookTestCase.cs,HookIsUsedForInterfaceProxy,The following statement contains a magic number: Assert.AreEqual(3' proxy.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,GenericClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenericClassProxyTestCase.cs,GenericProxyWithIndexer,The following statement contains a magic number: type["name"] = 10;
Magic Number,Castle.DynamicProxy.Tests,GenericClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenericClassProxyTestCase.cs,GenericProxyWithIndexer,The following statement contains a magic number: Assert.AreEqual(10' type["name"]);
Magic Number,Castle.DynamicProxy.Tests,GenericClassProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenericClassProxyTestCase.cs,ProxyWithGenericArgumentsAndMethodGenericArgumentsWithOneNotDefinedOnType,The following statement contains a magic number: int value1 = 10;
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,ProxyWithGenericArgumentAndGenericMethod,The following statement contains a magic number: proxy.DoSomething<long>(10L' 1);
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,ProxyWithGenericArgumentAndGenericMethodAndGenericReturn,The following statement contains a magic number: Assert.AreEqual(10L' proxy.DoSomething<long>(10L' 1));
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,ProxyWithGenericArgumentAndGenericMethodAndGenericReturn,The following statement contains a magic number: Assert.AreEqual(10L' proxy.DoSomething<long>(10L' 1));
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,ProxyWithGenInterfaceWithGenericArrays,The following statement contains a magic number: int[] items = new int[] { 1' 2' 3 };
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,ProxyWithGenInterfaceWithGenericArrays,The following statement contains a magic number: int[] items = new int[] { 1' 2' 3 };
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,ProxyWithGenInterfaceWithGenericArrays,The following statement contains a magic number: Assert.AreEqual(3' items.Length);
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,TypeGetMethodsIsStable,The following statement contains a magic number: Assert.AreEqual(4' typeof(IGenInterfaceHierarchyBase<int>).GetMethods().Length);
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,MethodFinderIsStable,The following statement contains a magic number: Assert.AreEqual(4'  							MethodFinder.GetAllInstanceMethods(typeof(IGenInterfaceHierarchyBase<int>)'  															   BindingFlags.Public | BindingFlags.Instance).Length);
Magic Number,Castle.DynamicProxy.Tests,GenericInterfaceProxyTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenericInterfaceProxyTestCase.cs,TypeGetMethodsIsStableInDifferentAppDomains,The following statement contains a magic number: newDomain.DoCallBack(delegate { Assert.AreEqual(4' typeof (IGenInterfaceHierarchyBase<int>).GetMethods().Length); });
Magic Number,Castle.DynamicProxy.Tests,MixinTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\MixinTestCase.cs,TwoMixins,The following statement contains a magic number: Assert.AreEqual(3' other.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,MixinTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\MixinTestCase.cs,TwoMixins,The following statement contains a magic number: Assert.AreEqual(3' other.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitInterfaceMethods_AreIgnored_OnClassProxy,The following statement contains a magic number: Assert.AreEqual(2' interceptor.Invocations.Count);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitInterfaceMethods_AreIgnored_OnClassProxy,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitInterface_AsAdditionalInterfaceToProxy_OnClassProxy_WithBaseCalls,The following statement contains a magic number: Assert.AreEqual(3' interceptor.Invocations.Count);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitInterface_AsAdditionalInterfaceToProxy_OnClassProxy_WithBaseCalls,The following statement contains a magic number: Assert.AreEqual("DoVirtual"' interceptor.Invocations[2]);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitInterface_AsAdditionalInterfaceToProxy_OnClassProxy_WithBaseCalls,The following statement contains a magic number: Assert.AreEqual (5' result);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitInterface_AsAdditionalInterfaceToProxy_OnClassProxy_WithoutBaseCalls,The following statement contains a magic number: Assert.AreEqual (3' interceptor.Invocations.Count);
Magic Number,Castle.DynamicProxy.Tests,ExplicitInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ExplicitInterfaceTestCase.cs,ExplicitInterface_AsAdditionalInterfaceToProxy_OnClassProxy_WithoutBaseCalls,The following statement contains a magic number: Assert.AreEqual ("DoVirtual"' interceptor.Invocations[2]);
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,BasicInterfaceProxyWithValidTarget_ThrowsIfInterceptorCallsProceed,The following statement contains a magic number: var exception = (NotImplementedException) Assert.Throws(typeof (NotImplementedException)' () =>                    service.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,CanReplaceReturnValueOfInterfaceMethod,The following statement contains a magic number: IService service = (IService)  							   generator.CreateInterfaceProxyWithoutTarget(                                  typeof(IService)' new SetReturnValueInterceptor(3));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,CanReplaceReturnValueOfInterfaceMethod,The following statement contains a magic number: int result = service.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,CanReplaceReturnValueOfInterfaceMethod,The following statement contains a magic number: int result = service.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,CanReplaceReturnValueOfInterfaceMethod,The following statement contains a magic number: Assert.AreEqual(3' result);
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,CanThrowExceptionFromInterceptorOfInterfaceMethod,The following statement contains a magic number: service.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,CanThrowExceptionFromInterceptorOfInterfaceMethod,The following statement contains a magic number: service.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,ProducesInvocationsThatCantChangeTarget,The following statement contains a magic number: IService service = (IService)  							   generator.CreateInterfaceProxyWithoutTarget(  								typeof(IService)' new AssertCannotChangeTargetInterceptor()' new SetReturnValueInterceptor(3));
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,ProducesInvocationsThatCantChangeTarget,The following statement contains a magic number: int result = service.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,ProducesInvocationsThatCantChangeTarget,The following statement contains a magic number: int result = service.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,BasicInterfaceProxyWithoutTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\BasicInterfaceProxyWithoutTargetTestCase.cs,ProducesInvocationsThatCantChangeTarget,The following statement contains a magic number: Assert.AreEqual(3' result);
Magic Number,Castle.DynamicProxy.Tests,DictionarySerializationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\DictionarySerializationTestCase.cs,DictionaryDeserializationWithoutProxyTest,The following statement contains a magic number: i < 50
Magic Number,Castle.DynamicProxy.Tests,DictionarySerializationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\DictionarySerializationTestCase.cs,DictionaryDeserializationWithProxyTest,The following statement contains a magic number: i < 50
Magic Number,Castle.DynamicProxy.Tests,InheritedInterfacesTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InheritedInterfacesTestCase.cs,Should_not_have_duplicated_events_for_interface_proxy_with_inherited_target_and_two_inherited_additional_interfaces,The following statement contains a magic number: Assert.AreEqual(3' events.Length);
Magic Number,Castle.DynamicProxy.Tests,InheritedInterfacesTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InheritedInterfacesTestCase.cs,Should_not_have_duplicated_properties_for_interface_proxy_with_inherited_target_and_two_inherited_additional_interfaces,The following statement contains a magic number: Assert.AreEqual(3' properties.Length);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterceptorSelectorTestCase.cs,SelectorWorksForGenericMethods,The following statement contains a magic number: Assert.AreEqual(2' countingInterceptor.Count);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterceptorSelectorTestCase.cs,SelectorWorksForMethods,The following statement contains a magic number: Assert.AreEqual(3' result);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterceptorSelectorTestCase.cs,SelectorWorksForMixins,The following statement contains a magic number: Assert.AreEqual(3' result);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterceptorSelectorTestCase.cs,SelectorWorksForMultipleGenericMethods,The following statement contains a magic number: Assert.AreEqual(2' countingInterceptor.Count);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterceptorSelectorTestCase.cs,SelectorWorksForProperties,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterceptorSelectorTestCase.cs,When_two_selectors_present_and_not_equal_should_cache_type_anyway_InterfaceProxyWithoutTarget,The following statement contains a magic number: var proxy1 = generator.CreateInterfaceProxyWithoutTarget(typeof(IOne)' Type.EmptyTypes' options1' new SetReturnValueInterceptor(2));
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterceptorSelectorTestCase.cs,When_two_selectors_present_and_not_equal_should_cache_type_anyway_InterfaceProxyWithoutTarget,The following statement contains a magic number: var proxy2 = generator.CreateInterfaceProxyWithoutTarget(typeof(IOne)' Type.EmptyTypes' options2' new SetReturnValueInterceptor(2));
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterceptorSelectorTestCase.cs,When_two_selectors_present_and_not_equal_should_cache_type_anyway_ClassProxy,The following statement contains a magic number: (proxy1 as ServiceClass).Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterceptorSelectorTestCase.cs,When_two_selectors_present_and_not_equal_should_cache_type_anyway_ClassProxy,The following statement contains a magic number: (proxy1 as ServiceClass).Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterceptorSelectorTestCase.cs,When_two_selectors_present_and_not_equal_should_cache_type_anyway_ClassProxy,The following statement contains a magic number: (proxy2 as ServiceClass).Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InterceptorSelectorTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterceptorSelectorTestCase.cs,When_two_selectors_present_and_not_equal_should_cache_type_anyway_ClassProxy,The following statement contains a magic number: (proxy2 as ServiceClass).Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,SimpleClass,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterceptorSelectorTestCase.cs,Do,The following statement contains a magic number: return 3;
Magic Number,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceTestCase.cs,When_target_does_implement_additional_interface_method_should_forward,The following statement contains a magic number: Assert.AreEqual(2' result);
Magic Number,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceTestCase.cs,TargetInterface_methods_should_be_forwarded_to_target,The following statement contains a magic number: Assert.AreEqual(3' result);
Magic Number,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceTestCase.cs,Mixin_methods_should_be_forwarded_to_target_if_implements_mixin_interface,The following statement contains a magic number: Assert.AreEqual(2' result);
Magic Number,Castle.DynamicProxy.Tests,InterfaceProxyWithTargetInterfaceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InterfaceProxyWithTargetInterfaceTestCase.cs,Invocation_should_be_IChangeInvocationTarget_for_Mixin_methods,The following statement contains a magic number: Assert.AreEqual(2' result);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,ClassProxy_MethodInvocationTarget_should_be_base_Method,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,ClassProxy_MethodInvocationTarget_should_be_base_Method,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,InterfaceProxyWithTarget_MethodInvocationTarget_should_be_methodOnTargetType,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,InterfaceProxyWithTarget_MethodInvocationTarget_should_be_methodOnTargetType,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,InterfaceProxyWithTarget_MethodInvocationTarget_should_be_null,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,InterfaceProxyWithTarget_MethodInvocationTarget_should_be_null,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,InterfaceProxyWithTargetInterface_MethodInvocationTarget_should_be_methodOnTargetType,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,InterfaceProxyWithTargetInterface_MethodInvocationTarget_should_be_methodOnTargetType,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,InterfaceProxyWithTargetInterface_MethodInvocationTarget_should_be_updated_when_target_changes,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,InvocationMethodInvocationTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationMethodInvocationTargetTestCase.cs,InterfaceProxyWithTargetInterface_MethodInvocationTarget_should_be_updated_when_target_changes,The following statement contains a magic number: proxy.Sum(2' 2);
Magic Number,Castle.DynamicProxy.Tests,MixinDataTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\MixinDataTestCase.cs,MixinsAreSortedByInterface,The following statement contains a magic number: Assert.AreEqual(2' mixins1.Count);
Magic Number,Castle.DynamicProxy.Tests,MixinDataTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\MixinDataTestCase.cs,MixinsAreSortedByInterface,The following statement contains a magic number: Assert.AreEqual(2' mixins2.Count);
Magic Number,Castle.DynamicProxy.Tests,MixinDataTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\MixinDataTestCase.cs,MixinInterfaces_SortedLikeMixins,The following statement contains a magic number: Assert.AreEqual(2' mixinInterfaces1.Count);
Magic Number,Castle.DynamicProxy.Tests,MixinDataTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\MixinDataTestCase.cs,MixinInterfaces_SortedLikeMixins,The following statement contains a magic number: Assert.AreEqual(2' mixinInterfaces2.Count);
Magic Number,Castle.DynamicProxy.Tests,MixinDataTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\MixinDataTestCase.cs,GetMixinPosition_MatchesMixinInstances_WithMultipleInterfacesPerMixin,The following statement contains a magic number: Assert.AreEqual(2' mixinData.GetMixinPosition(typeof(ISimpleMixin)));
Magic Number,Castle.DynamicProxy.Tests,MixinDataTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\MixinDataTestCase.cs,GetMixinPosition_MatchesMixinInstances_WithMultipleInterfacesPerMixin,The following statement contains a magic number: Assert.AreEqual(3' mixinData.GetMixinPosition(typeof(IThird)));
Magic Number,Castle.DynamicProxy.Tests,MixinDataTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\MixinDataTestCase.cs,GetMixinPosition_MatchesMixinInstances_WithMultipleInterfacesPerMixin,The following statement contains a magic number: Assert.AreSame(simpleMixin' mixins[2]);
Magic Number,Castle.DynamicProxy.Tests,MixinDataTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\MixinDataTestCase.cs,GetMixinPosition_MatchesMixinInstances_WithMultipleInterfacesPerMixin,The following statement contains a magic number: Assert.AreSame(complexMixin' mixins[3]);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationTestCase.cs,InvocationForConcreteClassProxy,The following statement contains a magic number: instance.Sum(20' 25);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationTestCase.cs,InvocationForConcreteClassProxy,The following statement contains a magic number: instance.Sum(20' 25);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationTestCase.cs,InvocationForConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(2' interceptor.Invocation.Arguments.Length);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationTestCase.cs,InvocationForConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(20' interceptor.Invocation.Arguments[0]);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationTestCase.cs,InvocationForConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(25' interceptor.Invocation.Arguments[1]);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationTestCase.cs,InvocationForConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(20' interceptor.Invocation.GetArgumentValue(0));
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationTestCase.cs,InvocationForConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(25' interceptor.Invocation.GetArgumentValue(1));
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationTestCase.cs,InvocationForConcreteClassProxy,The following statement contains a magic number: Assert.AreEqual(45' interceptor.Invocation.ReturnValue);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationTestCase.cs,InvocationForInterfaceProxyWithTarget,The following statement contains a magic number: instance.Sum(20' 25);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationTestCase.cs,InvocationForInterfaceProxyWithTarget,The following statement contains a magic number: instance.Sum(20' 25);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationTestCase.cs,InvocationForInterfaceProxyWithTarget,The following statement contains a magic number: Assert.AreEqual(2' interceptor.Invocation.Arguments.Length);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationTestCase.cs,InvocationForInterfaceProxyWithTarget,The following statement contains a magic number: Assert.AreEqual(20' interceptor.Invocation.Arguments[0]);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationTestCase.cs,InvocationForInterfaceProxyWithTarget,The following statement contains a magic number: Assert.AreEqual(25' interceptor.Invocation.Arguments[1]);
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationTestCase.cs,InvocationForInterfaceProxyWithTarget,The following statement contains a magic number: Assert.AreEqual(20' interceptor.Invocation.GetArgumentValue(0));
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationTestCase.cs,InvocationForInterfaceProxyWithTarget,The following statement contains a magic number: Assert.AreEqual(25' interceptor.Invocation.GetArgumentValue(1));
Magic Number,Castle.DynamicProxy.Tests,InvocationTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\InvocationTestCase.cs,InvocationForInterfaceProxyWithTarget,The following statement contains a magic number: Assert.AreEqual(45' interceptor.Invocation.ReturnValue);
Magic Number,Castle.DynamicProxy.Tests,ModuleScopeTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ModuleScopeTestCase.cs,CheckLoadAssemblyIntoCache,The following statement contains a magic number: CrossAppDomainCaller.RunInOtherAppDomain(delegate(object[] args)  			                                         	{  			                                         		ModuleScope newScope = new ModuleScope(false);  			                                         		DefaultProxyBuilder newBuilder = new DefaultProxyBuilder(newScope);    			                                         		Assembly assembly = Assembly.LoadFrom((string) args[0]);  			                                         		newScope.LoadAssemblyIntoCache(assembly);    			                                         		Type loadedCP = assembly.GetType((string) args[1]);  			                                         		Assert.AreSame(loadedCP' ((ProxyCreator) args[2])(newBuilder));  			                                         		Assert.AreEqual(assembly' ((ProxyCreator) args[2])(newBuilder).Assembly);  			                                         	}' path' cp.FullName' creator);
Magic Number,Castle.DynamicProxy.Tests,ModuleScopeTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ModuleScopeTestCase.cs,CheckLoadAssemblyIntoCache,The following statement contains a magic number: CrossAppDomainCaller.RunInOtherAppDomain(delegate(object[] args)  			                                         	{  			                                         		ModuleScope newScope = new ModuleScope(false);  			                                         		DefaultProxyBuilder newBuilder = new DefaultProxyBuilder(newScope);    			                                         		Assembly assembly = Assembly.LoadFrom((string) args[0]);  			                                         		newScope.LoadAssemblyIntoCache(assembly);    			                                         		Type loadedCP = assembly.GetType((string) args[1]);  			                                         		Assert.AreSame(loadedCP' ((ProxyCreator) args[2])(newBuilder));  			                                         		Assert.AreEqual(assembly' ((ProxyCreator) args[2])(newBuilder).Assembly);  			                                         	}' path' cp.FullName' creator);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMethodsNoTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedMethodsNoTargetTestCase.cs,Target_method_double_parameters,The following statement contains a magic number: Assert.DoesNotThrow(() => result = proxy.Sum(1D' 2D));
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMethodsNoTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedMethodsNoTargetTestCase.cs,Target_method_IntPtr,The following statement contains a magic number: var result = new IntPtr(123);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMethodsNoTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedMethodsNoTargetTestCase.cs,Target_method_Nullable_parameters,The following statement contains a magic number: var result = new int?(5);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMethodsNoTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedMethodsNoTargetTestCase.cs,Target_method_Nullable_parameters,The following statement contains a magic number: result = new int?(5);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMethodsNoTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedMethodsNoTargetTestCase.cs,Target_method_Nullable_parameters,The following statement contains a magic number: result = new int?(5);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMethodsNoTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedMethodsNoTargetTestCase.cs,Target_method_out_decimal,The following statement contains a magic number: decimal result = 12M;
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMethodsNoTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedMethodsNoTargetTestCase.cs,Target_method_out_IntPtr,The following statement contains a magic number: var result = new IntPtr(123);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMixinMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedMixinMethodsTestCase.cs,Mixin_method,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMixinMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedMixinMethodsTestCase.cs,Mixin_method_explicit,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMixinMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedMixinMethodsTestCase.cs,Mixin_method_out_ref_parameters,The following statement contains a magic number: Assert.AreEqual(5' result[0]);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedMixinMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedMixinMethodsTestCase.cs,Mixin_method_out_ref_parameters,The following statement contains a magic number: Assert.AreEqual(5' result[0]);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedTargetMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedTargetMethodsTestCase.cs,Target_method,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedTargetMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedTargetMethodsTestCase.cs,Target_method_explicit,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedTargetMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedTargetMethodsTestCase.cs,Target_method_out_ref_parameters,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,NonProxiedTargetMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedTargetMethodsTestCase.cs,Target_method_out_ref_parameters,The following statement contains a magic number: Assert.AreEqual(5' result);
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_target_and_mixin_should_forward_to_target,The following statement contains a magic number: Assert.DoesNotThrow(() => proxy.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_proxy_withouth_target_and_mixin_should_forward_to_null_target,The following statement contains a magic number: Assert.DoesNotThrow(() => (proxy as IService).Sum(2' 2));
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_proxy_withouth_target_and_mixin_should_forward_to_null_target,The following statement contains a magic number: Assert.DoesNotThrow(() => (proxy as IService).Sum(2' 2));
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_proxy_with_target_interface_and_mixin_should_forward_to_target,The following statement contains a magic number: Assert.DoesNotThrow(() => (proxy as IService).Sum(2' 2));
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_proxy_with_target_interface_and_mixin_should_forward_to_target,The following statement contains a magic number: Assert.DoesNotThrow(() => (proxy as IService).Sum(2' 2));
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_target_of_proxy_with_target_interface_and_mixin_should_forward_to_target,The following statement contains a magic number: Assert.DoesNotThrow(() => (proxy as IService).Sum(2' 2));
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_target_of_proxy_with_target_interface_and_mixin_should_forward_to_target,The following statement contains a magic number: Assert.DoesNotThrow(() => (proxy as IService).Sum(2' 2));
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Same_Interface_on_target_and_additionalInterface_should_forward_to_target,The following statement contains a magic number: Assert.DoesNotThrow(() => proxy.Sum(1' 2));
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Mixin_with_derived_target_interface_forwards_base_to_target_derived_to_mixin,The following statement contains a magic number: Assert.AreEqual(2' (proxy as IDerivedSimpleMixin).DoSomethingDerived());
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Mixin_and_target_implement_additionalInterface_forwards_to_target,The following statement contains a magic number: Assert.AreEqual(3' (proxy as ISimpleMixin).DoSomething());
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Mixin_and_target_implement_additionalInterface_forwards_to_target,The following statement contains a magic number: Assert.AreEqual(2' (proxy as IDerivedSimpleMixin).DoSomethingDerived());
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Mixin_same_as_additionalInterface_forwards_to_mixin,The following statement contains a magic number: Assert.AreEqual(2' (proxy as IDerivedSimpleMixin).DoSomethingDerived());
Magic Number,Castle.DynamicProxy.Tests,OrderOfInterfacePrecedenceTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OrderOfInterfacePrecedenceTestCase.cs,Mixin_with_derived_base_forwards_to_mixin,The following statement contains a magic number: Assert.AreEqual(2' (proxy as IDerivedSimpleMixin).DoSomethingDerived());
Magic Number,Castle.DynamicProxy.Tests,OutRefParams,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OutRefParams.cs,CanAffectValueOfOutParameter,The following statement contains a magic number: WithCallbackInterceptor interceptor =  				new WithCallbackInterceptor(delegate(IInvocation invocation) { invocation.Arguments[0] = 5; });
Magic Number,Castle.DynamicProxy.Tests,OutRefParams,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OutRefParams.cs,CanAffectValueOfOutParameter,The following statement contains a magic number: Assert.AreEqual(5' i);
Magic Number,Castle.DynamicProxy.Tests,OutRefParams,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OutRefParams.cs,CanCreateProxyWithRefParam,The following statement contains a magic number: int i = 3;
Magic Number,Castle.DynamicProxy.Tests,OutRefParams,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OutRefParams.cs,CanCreateProxyWithRefParam,The following statement contains a magic number: WithCallbackInterceptor interceptor =  				new WithCallbackInterceptor(delegate(IInvocation invocation) { invocation.Arguments[0] = 5; });
Magic Number,Castle.DynamicProxy.Tests,OutRefParams,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OutRefParams.cs,CanCreateProxyWithRefParam,The following statement contains a magic number: Assert.AreEqual(5' i);
Magic Number,Castle.DynamicProxy.Tests,OutRefParams,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OutRefParams.cs,CanCreateComplexOutRefProxyOnClass,The following statement contains a magic number: int i = 3;
Magic Number,Castle.DynamicProxy.Tests,OutRefParams,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OutRefParams.cs,CanCreateComplexOutRefProxyOnClass,The following statement contains a magic number: WithCallbackInterceptor interceptor = new WithCallbackInterceptor(delegate(IInvocation invocation)  			                                                              	{  			                                                              		invocation.Arguments[0] = 5;  			                                                              		invocation.Arguments[1] = "aaa";  			                                                              		invocation.Arguments[3] = "bbb";  			                                                              	});
Magic Number,Castle.DynamicProxy.Tests,OutRefParams,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OutRefParams.cs,CanCreateComplexOutRefProxyOnClass,The following statement contains a magic number: WithCallbackInterceptor interceptor = new WithCallbackInterceptor(delegate(IInvocation invocation)  			                                                              	{  			                                                              		invocation.Arguments[0] = 5;  			                                                              		invocation.Arguments[1] = "aaa";  			                                                              		invocation.Arguments[3] = "bbb";  			                                                              	});
Magic Number,Castle.DynamicProxy.Tests,OutRefParams,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OutRefParams.cs,CanCreateComplexOutRefProxyOnClass,The following statement contains a magic number: Assert.AreEqual(5' i);
Magic Number,Castle.DynamicProxy.Tests,OutRefParams,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OutRefParams.cs,CanCreateProxyWithStructRefParam,The following statement contains a magic number: MyStruct s = new MyStruct(10);
Magic Number,Castle.DynamicProxy.Tests,OutRefParams,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OutRefParams.cs,CanCreateProxyWithStructRefParam,The following statement contains a magic number: Assert.AreEqual(20' s.Value);
Magic Number,Castle.DynamicProxy.Tests,MyClass,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\OutRefParams.cs,MyMethodWithStruct,The following statement contains a magic number: s.Value = 2*s.Value;
Magic Number,Castle.DynamicProxy.Tests,ProxyGenerationOptionsTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\ProxyGenerationOptionsTestCase.cs,MixinData_ReInitializeWhenMixinsChanged,The following statement contains a magic number: Assert.AreEqual (2' new List<object>(data2.Mixins).Count);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\RhinoMocksTestCase.cs,GenericClassWithGenericMethodWitoutTarget,The following statement contains a magic number: var interceptor = new SetReturnValueInterceptor(3);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\RhinoMocksTestCase.cs,GenericClassWithGenericMethodWitoutTarget,The following statement contains a magic number: Assert.AreEqual(3' o);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\RhinoMocksTestCase.cs,CanProxyMethodWithModOpt,The following statement contains a magic number: proxy.StartLiveOnSlot(4);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\RhinoMocksTestCase.cs,UsingEvents_Interface,The following statement contains a magic number: Assert.AreEqual(2' logger.Invocations.Count);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\RhinoMocksTestCase.cs,UsingEvents_Class,The following statement contains a magic number: Assert.AreEqual(2' logger.Invocations.Count);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\RhinoMocksTestCase.cs,CanGetCorrectValuesFromIntPtr,The following statement contains a magic number: IntPtr buffer = o.Buffer(15);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\RhinoMocksTestCase.cs,InternalClassWithInternalMethodAndProperty,The following statement contains a magic number: Assert.AreEqual(2' logging.Invocations.Count);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\RhinoMocksTestCase.cs,CanSetOutputParameterForDecimal,The following statement contains a magic number: IDecimalOutParam target =  				generator.CreateInterfaceProxyWithoutTarget<IDecimalOutParam>(new SetOutputParameter(1.234M));
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\RhinoMocksTestCase.cs,CanSetOutputParameterForDecimal,The following statement contains a magic number: Assert.AreEqual(1.234M' fuel);
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\RhinoMocksTestCase.cs,CanSetOutputParameterForDecimal_UsingGenericMethods,The following statement contains a magic number: IDecimalOutParam target =  				generator.CreateInterfaceProxyWithoutTarget<IDecimalOutParam>(new SetOutputParameter(1.234M));
Magic Number,Castle.DynamicProxy.Tests,RhinoMocksTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\RhinoMocksTestCase.cs,CanSetOutputParameterForDecimal_UsingGenericMethods,The following statement contains a magic number: Assert.AreEqual(1.234M' fuel);
Magic Number,Castle.DynamicProxy.Tests,SkipCallingMethodInterceptorWithOutputParams,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\RhinoMocksTestCase.cs,Intercept,The following statement contains a magic number: invocation.ReturnValue = 5;
Magic Number,Castle.DynamicProxy.Tests,Foo,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\RhinoMocksTestCase.cs,Bar,The following statement contains a magic number: return 5;
Magic Number,Castle.DynamicProxy.Tests,Foo,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\RhinoMocksTestCase.cs,Test,The following statement contains a magic number: return new IntPtr(3);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToOtherObject,The following statement contains a magic number: proxy.ComplexTypeMember = new ArrayList(new int[] {1' 2' 3});
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToOtherObject,The following statement contains a magic number: proxy.ComplexTypeMember = new ArrayList(new int[] {1' 2' 3});
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToOtherObject,The following statement contains a magic number: Assert.AreEqual(4' proxy.ComplexTypeMember.Count);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToOtherObject,The following statement contains a magic number: Assert.AreEqual(2' proxy.ComplexTypeMember[1]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToOtherObject,The following statement contains a magic number: Assert.AreEqual(3' proxy.ComplexTypeMember[2]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToOtherObject,The following statement contains a magic number: Assert.AreEqual(3' proxy.ComplexTypeMember[2]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToOtherObject,The following statement contains a magic number: Assert.AreSame(proxy.ComplexTypeMember[3]' proxy.DelegateMember.Target);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToOtherObject,The following statement contains a magic number: Assert.AreEqual(4' otherProxy.ComplexTypeMember.Count);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToOtherObject,The following statement contains a magic number: Assert.AreEqual(2' otherProxy.ComplexTypeMember[1]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToOtherObject,The following statement contains a magic number: Assert.AreEqual(3' otherProxy.ComplexTypeMember[2]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToOtherObject,The following statement contains a magic number: Assert.AreEqual(3' otherProxy.ComplexTypeMember[2]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToOtherObject,The following statement contains a magic number: Assert.AreSame(otherProxy.ComplexTypeMember[3]' otherProxy.DelegateMember.Target);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToThisObject,The following statement contains a magic number: proxy.ComplexTypeMember = new ArrayList(new int[] {1' 2' 3});
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToThisObject,The following statement contains a magic number: proxy.ComplexTypeMember = new ArrayList(new int[] {1' 2' 3});
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToThisObject,The following statement contains a magic number: Assert.AreEqual(3' proxy.ComplexTypeMember.Count);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToThisObject,The following statement contains a magic number: Assert.AreEqual(2' proxy.ComplexTypeMember[1]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToThisObject,The following statement contains a magic number: Assert.AreEqual(3' proxy.ComplexTypeMember[2]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToThisObject,The following statement contains a magic number: Assert.AreEqual(3' proxy.ComplexTypeMember[2]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToThisObject,The following statement contains a magic number: Assert.AreEqual(3' otherProxy.ComplexTypeMember.Count);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToThisObject,The following statement contains a magic number: Assert.AreEqual(2' otherProxy.ComplexTypeMember[1]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToThisObject,The following statement contains a magic number: Assert.AreEqual(3' otherProxy.ComplexTypeMember[2]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithDelegateToThisObject,The following statement contains a magic number: Assert.AreEqual(3' otherProxy.ComplexTypeMember[2]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToThisObject,The following statement contains a magic number: proxy.DelegateHolder.ComplexTypeMember = new ArrayList(new int[] {1' 2' 3});
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToThisObject,The following statement contains a magic number: proxy.DelegateHolder.ComplexTypeMember = new ArrayList(new int[] {1' 2' 3});
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToThisObject,The following statement contains a magic number: Assert.AreEqual(3' proxy.DelegateHolder.ComplexTypeMember.Count);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToThisObject,The following statement contains a magic number: Assert.AreEqual(2' proxy.DelegateHolder.ComplexTypeMember[1]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToThisObject,The following statement contains a magic number: Assert.AreEqual(3' proxy.DelegateHolder.ComplexTypeMember[2]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToThisObject,The following statement contains a magic number: Assert.AreEqual(3' proxy.DelegateHolder.ComplexTypeMember[2]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToThisObject,The following statement contains a magic number: Assert.AreEqual(3' otherProxy.DelegateHolder.ComplexTypeMember.Count);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToThisObject,The following statement contains a magic number: Assert.AreEqual(2' otherProxy.DelegateHolder.ComplexTypeMember[1]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToThisObject,The following statement contains a magic number: Assert.AreEqual(3' otherProxy.DelegateHolder.ComplexTypeMember[2]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToThisObject,The following statement contains a magic number: Assert.AreEqual(3' otherProxy.DelegateHolder.ComplexTypeMember[2]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToMember,The following statement contains a magic number: proxy.DelegateHolder.ComplexTypeMember = new ArrayList(new int[] {1' 2' 3});
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToMember,The following statement contains a magic number: proxy.DelegateHolder.ComplexTypeMember = new ArrayList(new int[] {1' 2' 3});
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToMember,The following statement contains a magic number: Assert.AreEqual(3' proxy.DelegateHolder.ComplexTypeMember.Count);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToMember,The following statement contains a magic number: Assert.AreEqual(2' proxy.DelegateHolder.ComplexTypeMember[1]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToMember,The following statement contains a magic number: Assert.AreEqual(3' proxy.DelegateHolder.ComplexTypeMember[2]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToMember,The following statement contains a magic number: Assert.AreEqual(3' proxy.DelegateHolder.ComplexTypeMember[2]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToMember,The following statement contains a magic number: Assert.AreEqual(3' otherProxy.DelegateHolder.ComplexTypeMember.Count);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToMember,The following statement contains a magic number: Assert.AreEqual(2' otherProxy.DelegateHolder.ComplexTypeMember[1]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToMember,The following statement contains a magic number: Assert.AreEqual(3' otherProxy.DelegateHolder.ComplexTypeMember[2]);
Magic Number,Castle.DynamicProxy.Tests,SerializableClassTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\SerializableClassTestCase.cs,SerializeObjectsWithIndirectDelegateToMember,The following statement contains a magic number: Assert.AreEqual(3' otherProxy.DelegateHolder.ComplexTypeMember[2]);
Magic Number,Castle.DynamicProxy.Tests.Classes,DiffAccessLevelOnProperties,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Classes\DiffAccessLevelOnProperties.cs,SetProperties,The following statement contains a magic number: Age = 10;
Magic Number,Castle.DynamicProxy.Tests.Classes,DiffAccessLevelOnProperties,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Classes\DiffAccessLevelOnProperties.cs,SetProperties,The following statement contains a magic number: Age2 = 11;
Magic Number,Castle.DynamicProxy.Tests.Classes,DiffAccessLevelOnProperties,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Classes\DiffAccessLevelOnProperties.cs,SetProperties,The following statement contains a magic number: Maxval = 12;
Magic Number,Castle.DynamicProxy.Tests.Classes,DiffAccessLevelOnProperties,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Classes\DiffAccessLevelOnProperties.cs,SetProperties,The following statement contains a magic number: Maxval2 = 13;
Magic Number,Castle.DynamicProxy.Tests.Classes,ClassWithExplicitInterface,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Classes\ClassWithExplicitInterface.cs,Do,The following statement contains a magic number: return 5;
Magic Number,Castle.DynamicProxy.Tests.Classes,ClassWithExplicitInterface,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Classes\ClassWithExplicitInterface.cs,DoVirtual,The following statement contains a magic number: return 7;
Magic Number,Castle.DynamicProxy.Tests.Classes,ClassWithInterface,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Classes\ClassWithExplicitInterface.cs,Do,The following statement contains a magic number: return 5;
Magic Number,Castle.DynamicProxy.Tests.Classes,ClassWithVirtualInterface,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Classes\ClassWithExplicitInterface.cs,Do,The following statement contains a magic number: return 5;
Magic Number,Castle.DynamicProxy.Tests.Classes,ClassCallingVirtualMethodFromCtor,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Classes\ClassCallingVirtualMethodFromCtor.cs,VirtualMethod,The following statement contains a magic number: return 7;
Magic Number,Castle.DynamicProxy.Tests.Classes,ClassOverridingEqualsAndGetHashCode,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Classes\ClassOverridingEqualsAndGetHashCode.cs,GetHashCode,The following statement contains a magic number: int hash = 7;
Magic Number,Castle.DynamicProxy.Tests.Classes,ClassOverridingEqualsAndGetHashCode,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Classes\ClassOverridingEqualsAndGetHashCode.cs,GetHashCode,The following statement contains a magic number: hash = 31*hash + Id.GetHashCode();
Magic Number,Castle.DynamicProxy.Tests.GenClasses,SubClassWithGenArgs<T;Z;Y>,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\GenClasses\ClassWithGenArgs.cs,DoSomething,The following statement contains a magic number: int x = 1 + 10;
Magic Number,Castle.DynamicProxy.Tests.Interceptors,AddTwoInterceptor,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Interceptors\AddTwoInterceptor.cs,Intercept,The following statement contains a magic number: ret += 2;
Magic Number,Castle.DynamicProxy.Tests.Interfaces,WithRefOut,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Interfaces\IWithRefOut.cs,Do,The following statement contains a magic number: i = 5;
Magic Number,Castle.DynamicProxy.Tests.Interfaces,WithRefOut,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Interfaces\IWithRefOut.cs,Did,The following statement contains a magic number: i = 5;
Magic Number,Castle.DynamicProxy.Tests.Interfaces,OneTwo,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Interfaces\OneTwo.cs,OneMethod,The following statement contains a magic number: return 3;
Magic Number,Castle.DynamicProxy.Tests.Interfaces,OneTwo,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Interfaces\OneTwo.cs,TwoMethod,The following statement contains a magic number: return 2;
Magic Number,Castle.DynamicProxy.Tests.Interfaces,Two,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Interfaces\Two.cs,TwoMethod,The following statement contains a magic number: return 20;
Magic Number,Castle.DynamicProxy.Tests.Mixins,ClassImplementingIDerivedSimpleMixin,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Mixins\ClassImplementingIDerivedSImpleMixin.cs,DoSomething,The following statement contains a magic number: return 3;
Magic Number,Castle.DynamicProxy.Tests.Mixins,ClassImplementingIDerivedSimpleMixin,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\Mixins\ClassImplementingIDerivedSImpleMixin.cs,DoSomethingDerived,The following statement contains a magic number: return 2;
Missing Default,Castle.DynamicProxy.Tests,NonProxiedMethodsNoTargetTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedMethodsNoTargetTestCase.cs,CreateProxyWithAdditionalInterface,The following switch statement is missing a default case: switch (kind)  			{  				case ProxyKind.Class:  					return (TType) generator.CreateClassProxy(typeof (object)' interfaces' options);  				case ProxyKind.WithoutTarget:  					return (TType) generator.CreateInterfaceProxyWithoutTarget(typeof (IEmpty)' interfaces' options);  				case ProxyKind.WithTarget:  					return (TType) generator.CreateInterfaceProxyWithTarget(typeof (IEmpty)' interfaces' new Empty()' options);  				case ProxyKind.WithTargetInterface:  					return (TType) generator.CreateInterfaceProxyWithTargetInterface(typeof (IEmpty)' interfaces' new Empty()' options);  			}
Missing Default,Castle.DynamicProxy.Tests,NonProxiedMixinMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedMixinMethodsTestCase.cs,CreateProxyWithMixin,The following switch statement is missing a default case: switch (kind)  			{  				case ProxyKind.Class:  					return (TType) generator.CreateClassProxy(typeof (object)' Type.EmptyTypes' options);  				case ProxyKind.WithoutTarget:  					return (TType) generator.CreateInterfaceProxyWithoutTarget(typeof (IEmpty)' Type.EmptyTypes' options);  				case ProxyKind.WithTarget:  					return (TType) generator.CreateInterfaceProxyWithTarget(typeof (IEmpty)' Type.EmptyTypes' new Empty()' options);  				case ProxyKind.WithTargetInterface:  					return (TType) generator.CreateInterfaceProxyWithTargetInterface(typeof (IEmpty)' new Empty()' options);  			}
Missing Default,Castle.DynamicProxy.Tests,NonProxiedTargetMethodsTestCase,D:\research\architectureSmells\repos\castleproject_Castle.DynamicProxy-READONLY\src\Castle.DynamicProxy.Tests\NonProxiedTargetMethodsTestCase.cs,CreateProxy,The following switch statement is missing a default case: switch (kind)  			{  				case ProxyKind.WithTarget:  					return (TType) generator.CreateInterfaceProxyWithTarget(typeof (TType)' Type.EmptyTypes' target' options);  				case ProxyKind.WithTargetInterface:  					return (TType) generator.CreateInterfaceProxyWithTargetInterface(typeof (TType)' target' options);  			}
