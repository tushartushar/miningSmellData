Implementation smell,Namespace,Class,File,Method,Description
Long Method,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The method has 192 lines of code.
Complex Method,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Consume,Cyclomatic complexity of the method is 11
Complex Method,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,Cyclomatic complexity of the method is 99
Complex Method,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,Cyclomatic complexity of the method is 14
Long Statement,SeniorProjectService,AuditNode,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\AuditNode.cs,ux_UpdateButton_MouseClick,The length of the statement  "	ForeignNode fn = Service.remoteNodeList.Single<ForeignNode> (node => node.GetAlias () == ux_NodeList.SelectedItem.ToString ()); " is 127.
Long Statement,SeniorProjectService,AuditNode,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\AuditNode.cs,ux_NodeList_SelectedIndexChanged,The length of the statement  "	ForeignNode fn = Service.remoteNodeList.Single<ForeignNode> (node => node.GetAlias () == ux_NodeList.SelectedItem.ToString ()); " is 127.
Long Statement,SeniorProjectService,AuditNode,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\AuditNode.cs,ux_TriggerEvent_MouseClick,The length of the statement  "	ForeignNode fn = Service.remoteNodeList.Single<ForeignNode> (node => node.GetAlias () == ux_NodeList.SelectedItem.ToString ()); " is 127.
Long Statement,SeniorProjectService,EventWindow,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\EventWindow.cs,ux_TriggerButton_MouseClick,The length of the statement  "		MessageBox.Show ("You must fill out every option presented"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button1); " is 149.
Long Statement,SeniorProjectService,COMPortInfo,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\FriendlyPortName.cs,GetCOMPortsInfo,The length of the statement  "						comPortInfo.Name = caption.Substring (caption.LastIndexOf ("(COM")).Replace ("("' string.Empty).Replace (")"' string.Empty); " is 124.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Consume,The length of the statement  "				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' NodeID)); " is 138.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The length of the statement  "					if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) { " is 132.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The length of the statement  "					ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ()); " is 125.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The length of the statement  "						string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())); " is 152.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The length of the statement  "								DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ())); " is 151.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The length of the statement  "								DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())); " is 143.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The length of the statement  "								string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0]; " is 164.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The length of the statement  "								nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n'); " is 149.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The length of the statement  "									Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1); " is 136.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The length of the statement  "									string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID)); " is 185.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The length of the statement  "	DataSqlConnection.CommandNonQuery (String.Format (@"INSERT INTO messages_from_nodes (NodeID' EventID' Option1Val' Option2Val) VALUES({0}' {1}' ""{2}""' ""{3}"")"' contactingNode.GetNodeID ()' thisEvent.ID' op1Str' op2Str)); " is 223.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The length of the statement  "	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE events SET Count=Count+1 WHERE NodeID={0} AND EventID={1}"' contactingNode.GetNodeID ()' thisEvent.ID)); " is 162.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The length of the statement  "		DataSqlConnection.CommandNonQuery (String.Format (@"UPDATE options SET Value=""{0}"" WHERE NodeID={1} AND EventID={2} AND OptionNum=1"' op1Str' contactingNode.GetNodeID ()' thisEvent.ID)); " is 188.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The length of the statement  "		DataSqlConnection.CommandNonQuery (String.Format (@"UPDATE options SET Value=""{0}"" WHERE NodeID={1} AND EventID={2} AND OptionNum=2"' op2Str' contactingNode.GetNodeID ()' thisEvent.ID)); " is 188.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The length of the statement  "	string chainData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ThrowNodeID' ThrowEventID' ThrowOp1' ThrowOp2' ThrowRemaining FROM event_chains WHERE TriggerNodeID = {0} AND TriggerEventID = {1}"' contactingNode.GetNodeID ()' thisEvent.ID)); " is 256.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The length of the statement  "				DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM event_chains WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID)); " is 237.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The length of the statement  "				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE event_chains SET ThrowRemaining = ThrowRemaining - 1 WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID)); " is 272.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The length of the statement  "			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' throwNodeID)); " is 143.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,AddOptionToDatabase,The length of the statement  "	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeId = {0} AND EventId = {1} AND OptionNum = {2};"' contactingNode.GetNodeID ()' currEvent.ID' opNum)); " is 199.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,AddOptionToDatabase,The length of the statement  "		query = String.Format (@"INSERT INTO options VALUES({0}' {1}' {2}' ""{3}""' null)"' contactingNode.GetNodeID ()' currEvent.ID' opNum' opDescription); " is 149.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,AddOptionToDatabase,The length of the statement  "		query = String.Format (@"UPDATE options SET Description = ""{3}""' Value = """" WHERE NodeID = {0} AND EventID = {1} AND OptionNum = {2}"' contactingNode.GetNodeID ()' currEvent.ID' opNum' opDescription); " is 204.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,AddEventToDatabase,The length of the statement  "	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0} AND EventId = {1};"' contactingNode.GetNodeID ()' e.ID)); " is 163.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,AddEventToDatabase,The length of the statement  "		query = String.Format (@"INSERT INTO events VALUES({0}' {1}' ""{2}""' ""{3}""' {4}' 0)"' contactingNode.GetNodeID ()' e.ID' e.Name' e.Description' t); " is 150.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,AddEventToDatabase,The length of the statement  "		query = String.Format (@"UPDATE events SET Name = ""{0}""' Description = ""{1}""' Triggerable = {2}' Count = 0 WHERE NodeId = ""{3}"" AND EventId = ""{4}"""' e.Name' e.Description' t' contactingNode.GetNodeID ()' e.ID); " is 219.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,AddNodeToDatabase,The length of the statement  "	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ID FROM nodes WHERE ForeignAddress = {0};"' contactingNode.GetAddress ())); " is 148.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,AddNodeToDatabase,The length of the statement  "		DataSqlConnection.CommandNonQuery (String.Format ("INSERT INTO Nodes (Name' Alias' Brand' ForeignAddress' AddressHexRep' Registered' IsForeign' Version) " + @"VALUES (""{0}""' ""{1}""' ""{2}""' {3}' ""{4}""' 1' 1' {5})"' contactingNode.GetName ()' contactingNode.GetAlias ()' contactingNode.GetBrand ()' contactingNode.GetAddress ()' contactingNode.GetHexAddress ()' contactingNode.GetVersion ())); " is 398.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,AddNodeToDatabase,The length of the statement  "		string s = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ID FROM nodes WHERE ForeignAddress = {0};"' contactingNode.GetAddress ())); " is 146.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,AddNodeToDatabase,The length of the statement  "		DataSqlConnection.CommandNonQuery (String.Format (@"UPDATE nodes SET Alias = ""{0}""' Registered = '1' WHERE ID = {1}"' contactingNode.GetAlias ()' contactingNode.GetNodeID ())); " is 178.
Long Statement,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,AddNodeToDatabase,The length of the statement  "		DataSqlConnection.CommandNonQuery (String.Format (@"UPDATE nodes SET Name = ""{0}""' Alias = ""{1}""' Brand = ""{2}""' ForeignAddress = {3}' AddressHexRep = ""{4}""' Registered = 1' IsForeign = 1' Version = {5} WHERE ID = {6}"' contactingNode.GetName ()' contactingNode.GetAlias ()' contactingNode.GetBrand ()' contactingNode.GetAddress ()' contactingNode.GetHexAddress ()' contactingNode.GetVersion ()' contactingNode.GetNodeID ())); " is 434.
Long Statement,SeniorProjectService,DataSqlConnection,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Connect,The length of the statement  "		thisConnection = new SqlConnection (@"server = vvqkxhtlqn.database.windows.net; database = SMARTHouseProject_db; uid = polzin13; pwd = Pe-n15:)"); " is 146.
Complex Conditional,SeniorProjectService,EventWindow,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\EventWindow.cs,ux_TriggerButton_MouseClick,The conditional expression  "(ev.Option1 && ux_option1Input.Text.Length == 0) || (ev.Option2 && ux_option2Input.Text.Length == 0)"  is complex.
Complex Conditional,SeniorProjectService,XbeeTx64Bit,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,XbeeTx64Bit,The conditional expression  "byteStream [i] == 0x7E || byteStream [i] == 0x7D || byteStream [i] == 0x11 || byteStream [i] == 0x13"  is complex.
Empty Catch Block,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The method has an empty catch block.
Empty Catch Block,SeniorProjectService,DataSqlConnection,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Connect,The method has an empty catch block.
Magic Number,SeniorProjectService,MenuControl,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\MenuControl.cs,SystemTrayIcon,The following statement contains a magic number: trayIcon.Icon = new Icon (SystemIcons.Application' 40' 40);  
Magic Number,SeniorProjectService,MenuControl,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\MenuControl.cs,SystemTrayIcon,The following statement contains a magic number: trayIcon.Icon = new Icon (SystemIcons.Application' 40' 40);  
Magic Number,SeniorProjectService,XbeeRx,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,ParseIncomingMessage,The following statement contains a magic number: length = (lengthMSB << 8) | lengthLSB;  
Magic Number,SeniorProjectService,XbeeRx,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,ParseIncomingMessage,The following statement contains a magic number: if (APIid == 0x81) {  	sourceBytes = 2;  }  else if (APIid == 0x80) {  	sourceBytes = 8;  }  else if (APIid == 0x89) {  	isTxResponse = true;  	//sourceBytes remains 0  }  
Magic Number,SeniorProjectService,XbeeRx,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,ParseIncomingMessage,The following statement contains a magic number: if (APIid == 0x81) {  	sourceBytes = 2;  }  else if (APIid == 0x80) {  	sourceBytes = 8;  }  else if (APIid == 0x89) {  	isTxResponse = true;  	//sourceBytes remains 0  }  
Magic Number,SeniorProjectService,XbeeRx,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,ParseIncomingMessage,The following statement contains a magic number: sourceBytes = 2;  
Magic Number,SeniorProjectService,XbeeRx,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,ParseIncomingMessage,The following statement contains a magic number: if (APIid == 0x80) {  	sourceBytes = 8;  }  else if (APIid == 0x89) {  	isTxResponse = true;  	//sourceBytes remains 0  }  
Magic Number,SeniorProjectService,XbeeRx,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,ParseIncomingMessage,The following statement contains a magic number: sourceBytes = 8;  
Magic Number,SeniorProjectService,XbeeRx,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,ParseIncomingMessage,The following statement contains a magic number: for (int x = 0; x < sourceBytes; x++) {  	source = (source << 8) | (uint)ReadByte (_serialPort);  }  
Magic Number,SeniorProjectService,XbeeRx,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,ParseIncomingMessage,The following statement contains a magic number: source = (source << 8) | (uint)ReadByte (_serialPort);  
Magic Number,SeniorProjectService,XbeeRx,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,ParseIncomingMessage,The following statement contains a magic number: for (int i = 0; i < length - (3 + sourceBytes); i++) {  	data.Add (ReadByte (_serialPort));  }  
Magic Number,SeniorProjectService,XbeeRx,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,CalculateInternalChecksum,The following statement contains a magic number: for (int i = 0; i < sourceBytes; i++) {  	int addition = (int)(source >> (i * 8)) & 0xFF;  	ret += addition;  }  
Magic Number,SeniorProjectService,XbeeTx64Bit,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,XbeeTx64Bit,The following statement contains a magic number: length = data.Count + 11;  
Magic Number,SeniorProjectService,XbeeTx64Bit,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,XbeeTx64Bit,The following statement contains a magic number: byteStream.Add ((byte)((length >> 8) & 0xFF));  
Magic Number,SeniorProjectService,XbeeTx64Bit,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,XbeeTx64Bit,The following statement contains a magic number: for (int i = 7; i >= 0; i--) {  	byteStream.Add ((byte)((destination >> i * 8) & 0xFF));  }  
Magic Number,SeniorProjectService,XbeeTx64Bit,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,XbeeTx64Bit,The following statement contains a magic number: for (int i = 7; i >= 0; i--) {  	byteStream.Add ((byte)((destination >> i * 8) & 0xFF));  }  
Magic Number,SeniorProjectService,XbeeTx64Bit,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,XbeeTx64Bit,The following statement contains a magic number: byteStream.Add ((byte)((destination >> i * 8) & 0xFF));  
Magic Number,SeniorProjectService,XbeeTx64Bit,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\Messages.cs,CalculateChecksum,The following statement contains a magic number: for (int i = 3; i < byteStream.Count; i++) {  	checksum += byteStream [i];  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Main,The following statement contains a magic number: _serialPort.ReadTimeout = 500;  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Main,The following statement contains a magic number: _serialPort.WriteTimeout = 500;  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Consume,The following statement contains a magic number: while (_continue) {  	DataSqlConnection.mutex.WaitOne ();  	string msgs = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM messages_to_nodes"));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (msgs != "") {  		string[] msgsArr = msgs.Split ('\n');  		foreach (string msg in msgsArr) {  			if (msg == "")  				continue;  			string[] msgData = msg.Split ('|');  			int NodeID = Convert.ToInt32 (msgData [0]);  			int EventID = Convert.ToInt32 (msgData [1]);  			string op1 = msgData [2];  			string op2 = msgData [3];  			int MsgID = Convert.ToInt32 (msgData [4]);  			XbeeTx64Bit transmit;  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' NodeID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "")  				continue;  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM messages_to_nodes WHERE MessageID={0}"' MsgID));  			DataSqlConnection.mutex.ReleaseMutex ();  			string forAddr = ret.Split ('|') [0];  			string reg = ret.Split ('|') [1];  			if (reg != "1")  				continue;  			ulong addr = Convert.ToUInt64 (forAddr);  			List<byte> data = new List<byte> ();  			data.Add (TRIGGER_BYTE);  			byte id1 = (byte)((EventID & 0x300) >> 8);  			byte id2 = (byte)(EventID & 0xFF);  			data.Add (id1);  			data.Add (id2);  			if (op1 != "") {  				data.Add ((byte)op1.Length);  				foreach (char c in op1) {  					data.Add ((byte)c);  				}  			}  			if (op2 != "") {  				data.Add ((byte)op2.Length);  				foreach (char c in op2) {  					data.Add ((byte)c);  				}  			}  			transmit = new XbeeTx64Bit (data' addr);  			transmit.Send (_serialPort);  		}  	}  	Thread.Sleep (250);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Consume,The following statement contains a magic number: while (_continue) {  	DataSqlConnection.mutex.WaitOne ();  	string msgs = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM messages_to_nodes"));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (msgs != "") {  		string[] msgsArr = msgs.Split ('\n');  		foreach (string msg in msgsArr) {  			if (msg == "")  				continue;  			string[] msgData = msg.Split ('|');  			int NodeID = Convert.ToInt32 (msgData [0]);  			int EventID = Convert.ToInt32 (msgData [1]);  			string op1 = msgData [2];  			string op2 = msgData [3];  			int MsgID = Convert.ToInt32 (msgData [4]);  			XbeeTx64Bit transmit;  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' NodeID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "")  				continue;  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM messages_to_nodes WHERE MessageID={0}"' MsgID));  			DataSqlConnection.mutex.ReleaseMutex ();  			string forAddr = ret.Split ('|') [0];  			string reg = ret.Split ('|') [1];  			if (reg != "1")  				continue;  			ulong addr = Convert.ToUInt64 (forAddr);  			List<byte> data = new List<byte> ();  			data.Add (TRIGGER_BYTE);  			byte id1 = (byte)((EventID & 0x300) >> 8);  			byte id2 = (byte)(EventID & 0xFF);  			data.Add (id1);  			data.Add (id2);  			if (op1 != "") {  				data.Add ((byte)op1.Length);  				foreach (char c in op1) {  					data.Add ((byte)c);  				}  			}  			if (op2 != "") {  				data.Add ((byte)op2.Length);  				foreach (char c in op2) {  					data.Add ((byte)c);  				}  			}  			transmit = new XbeeTx64Bit (data' addr);  			transmit.Send (_serialPort);  		}  	}  	Thread.Sleep (250);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Consume,The following statement contains a magic number: while (_continue) {  	DataSqlConnection.mutex.WaitOne ();  	string msgs = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM messages_to_nodes"));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (msgs != "") {  		string[] msgsArr = msgs.Split ('\n');  		foreach (string msg in msgsArr) {  			if (msg == "")  				continue;  			string[] msgData = msg.Split ('|');  			int NodeID = Convert.ToInt32 (msgData [0]);  			int EventID = Convert.ToInt32 (msgData [1]);  			string op1 = msgData [2];  			string op2 = msgData [3];  			int MsgID = Convert.ToInt32 (msgData [4]);  			XbeeTx64Bit transmit;  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' NodeID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "")  				continue;  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM messages_to_nodes WHERE MessageID={0}"' MsgID));  			DataSqlConnection.mutex.ReleaseMutex ();  			string forAddr = ret.Split ('|') [0];  			string reg = ret.Split ('|') [1];  			if (reg != "1")  				continue;  			ulong addr = Convert.ToUInt64 (forAddr);  			List<byte> data = new List<byte> ();  			data.Add (TRIGGER_BYTE);  			byte id1 = (byte)((EventID & 0x300) >> 8);  			byte id2 = (byte)(EventID & 0xFF);  			data.Add (id1);  			data.Add (id2);  			if (op1 != "") {  				data.Add ((byte)op1.Length);  				foreach (char c in op1) {  					data.Add ((byte)c);  				}  			}  			if (op2 != "") {  				data.Add ((byte)op2.Length);  				foreach (char c in op2) {  					data.Add ((byte)c);  				}  			}  			transmit = new XbeeTx64Bit (data' addr);  			transmit.Send (_serialPort);  		}  	}  	Thread.Sleep (250);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Consume,The following statement contains a magic number: while (_continue) {  	DataSqlConnection.mutex.WaitOne ();  	string msgs = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM messages_to_nodes"));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (msgs != "") {  		string[] msgsArr = msgs.Split ('\n');  		foreach (string msg in msgsArr) {  			if (msg == "")  				continue;  			string[] msgData = msg.Split ('|');  			int NodeID = Convert.ToInt32 (msgData [0]);  			int EventID = Convert.ToInt32 (msgData [1]);  			string op1 = msgData [2];  			string op2 = msgData [3];  			int MsgID = Convert.ToInt32 (msgData [4]);  			XbeeTx64Bit transmit;  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' NodeID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "")  				continue;  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM messages_to_nodes WHERE MessageID={0}"' MsgID));  			DataSqlConnection.mutex.ReleaseMutex ();  			string forAddr = ret.Split ('|') [0];  			string reg = ret.Split ('|') [1];  			if (reg != "1")  				continue;  			ulong addr = Convert.ToUInt64 (forAddr);  			List<byte> data = new List<byte> ();  			data.Add (TRIGGER_BYTE);  			byte id1 = (byte)((EventID & 0x300) >> 8);  			byte id2 = (byte)(EventID & 0xFF);  			data.Add (id1);  			data.Add (id2);  			if (op1 != "") {  				data.Add ((byte)op1.Length);  				foreach (char c in op1) {  					data.Add ((byte)c);  				}  			}  			if (op2 != "") {  				data.Add ((byte)op2.Length);  				foreach (char c in op2) {  					data.Add ((byte)c);  				}  			}  			transmit = new XbeeTx64Bit (data' addr);  			transmit.Send (_serialPort);  		}  	}  	Thread.Sleep (250);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Consume,The following statement contains a magic number: while (_continue) {  	DataSqlConnection.mutex.WaitOne ();  	string msgs = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM messages_to_nodes"));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (msgs != "") {  		string[] msgsArr = msgs.Split ('\n');  		foreach (string msg in msgsArr) {  			if (msg == "")  				continue;  			string[] msgData = msg.Split ('|');  			int NodeID = Convert.ToInt32 (msgData [0]);  			int EventID = Convert.ToInt32 (msgData [1]);  			string op1 = msgData [2];  			string op2 = msgData [3];  			int MsgID = Convert.ToInt32 (msgData [4]);  			XbeeTx64Bit transmit;  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' NodeID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "")  				continue;  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM messages_to_nodes WHERE MessageID={0}"' MsgID));  			DataSqlConnection.mutex.ReleaseMutex ();  			string forAddr = ret.Split ('|') [0];  			string reg = ret.Split ('|') [1];  			if (reg != "1")  				continue;  			ulong addr = Convert.ToUInt64 (forAddr);  			List<byte> data = new List<byte> ();  			data.Add (TRIGGER_BYTE);  			byte id1 = (byte)((EventID & 0x300) >> 8);  			byte id2 = (byte)(EventID & 0xFF);  			data.Add (id1);  			data.Add (id2);  			if (op1 != "") {  				data.Add ((byte)op1.Length);  				foreach (char c in op1) {  					data.Add ((byte)c);  				}  			}  			if (op2 != "") {  				data.Add ((byte)op2.Length);  				foreach (char c in op2) {  					data.Add ((byte)c);  				}  			}  			transmit = new XbeeTx64Bit (data' addr);  			transmit.Send (_serialPort);  		}  	}  	Thread.Sleep (250);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Consume,The following statement contains a magic number: if (msgs != "") {  	string[] msgsArr = msgs.Split ('\n');  	foreach (string msg in msgsArr) {  		if (msg == "")  			continue;  		string[] msgData = msg.Split ('|');  		int NodeID = Convert.ToInt32 (msgData [0]);  		int EventID = Convert.ToInt32 (msgData [1]);  		string op1 = msgData [2];  		string op2 = msgData [3];  		int MsgID = Convert.ToInt32 (msgData [4]);  		XbeeTx64Bit transmit;  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' NodeID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "")  			continue;  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM messages_to_nodes WHERE MessageID={0}"' MsgID));  		DataSqlConnection.mutex.ReleaseMutex ();  		string forAddr = ret.Split ('|') [0];  		string reg = ret.Split ('|') [1];  		if (reg != "1")  			continue;  		ulong addr = Convert.ToUInt64 (forAddr);  		List<byte> data = new List<byte> ();  		data.Add (TRIGGER_BYTE);  		byte id1 = (byte)((EventID & 0x300) >> 8);  		byte id2 = (byte)(EventID & 0xFF);  		data.Add (id1);  		data.Add (id2);  		if (op1 != "") {  			data.Add ((byte)op1.Length);  			foreach (char c in op1) {  				data.Add ((byte)c);  			}  		}  		if (op2 != "") {  			data.Add ((byte)op2.Length);  			foreach (char c in op2) {  				data.Add ((byte)c);  			}  		}  		transmit = new XbeeTx64Bit (data' addr);  		transmit.Send (_serialPort);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Consume,The following statement contains a magic number: if (msgs != "") {  	string[] msgsArr = msgs.Split ('\n');  	foreach (string msg in msgsArr) {  		if (msg == "")  			continue;  		string[] msgData = msg.Split ('|');  		int NodeID = Convert.ToInt32 (msgData [0]);  		int EventID = Convert.ToInt32 (msgData [1]);  		string op1 = msgData [2];  		string op2 = msgData [3];  		int MsgID = Convert.ToInt32 (msgData [4]);  		XbeeTx64Bit transmit;  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' NodeID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "")  			continue;  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM messages_to_nodes WHERE MessageID={0}"' MsgID));  		DataSqlConnection.mutex.ReleaseMutex ();  		string forAddr = ret.Split ('|') [0];  		string reg = ret.Split ('|') [1];  		if (reg != "1")  			continue;  		ulong addr = Convert.ToUInt64 (forAddr);  		List<byte> data = new List<byte> ();  		data.Add (TRIGGER_BYTE);  		byte id1 = (byte)((EventID & 0x300) >> 8);  		byte id2 = (byte)(EventID & 0xFF);  		data.Add (id1);  		data.Add (id2);  		if (op1 != "") {  			data.Add ((byte)op1.Length);  			foreach (char c in op1) {  				data.Add ((byte)c);  			}  		}  		if (op2 != "") {  			data.Add ((byte)op2.Length);  			foreach (char c in op2) {  				data.Add ((byte)c);  			}  		}  		transmit = new XbeeTx64Bit (data' addr);  		transmit.Send (_serialPort);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Consume,The following statement contains a magic number: if (msgs != "") {  	string[] msgsArr = msgs.Split ('\n');  	foreach (string msg in msgsArr) {  		if (msg == "")  			continue;  		string[] msgData = msg.Split ('|');  		int NodeID = Convert.ToInt32 (msgData [0]);  		int EventID = Convert.ToInt32 (msgData [1]);  		string op1 = msgData [2];  		string op2 = msgData [3];  		int MsgID = Convert.ToInt32 (msgData [4]);  		XbeeTx64Bit transmit;  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' NodeID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "")  			continue;  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM messages_to_nodes WHERE MessageID={0}"' MsgID));  		DataSqlConnection.mutex.ReleaseMutex ();  		string forAddr = ret.Split ('|') [0];  		string reg = ret.Split ('|') [1];  		if (reg != "1")  			continue;  		ulong addr = Convert.ToUInt64 (forAddr);  		List<byte> data = new List<byte> ();  		data.Add (TRIGGER_BYTE);  		byte id1 = (byte)((EventID & 0x300) >> 8);  		byte id2 = (byte)(EventID & 0xFF);  		data.Add (id1);  		data.Add (id2);  		if (op1 != "") {  			data.Add ((byte)op1.Length);  			foreach (char c in op1) {  				data.Add ((byte)c);  			}  		}  		if (op2 != "") {  			data.Add ((byte)op2.Length);  			foreach (char c in op2) {  				data.Add ((byte)c);  			}  		}  		transmit = new XbeeTx64Bit (data' addr);  		transmit.Send (_serialPort);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Consume,The following statement contains a magic number: if (msgs != "") {  	string[] msgsArr = msgs.Split ('\n');  	foreach (string msg in msgsArr) {  		if (msg == "")  			continue;  		string[] msgData = msg.Split ('|');  		int NodeID = Convert.ToInt32 (msgData [0]);  		int EventID = Convert.ToInt32 (msgData [1]);  		string op1 = msgData [2];  		string op2 = msgData [3];  		int MsgID = Convert.ToInt32 (msgData [4]);  		XbeeTx64Bit transmit;  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' NodeID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "")  			continue;  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM messages_to_nodes WHERE MessageID={0}"' MsgID));  		DataSqlConnection.mutex.ReleaseMutex ();  		string forAddr = ret.Split ('|') [0];  		string reg = ret.Split ('|') [1];  		if (reg != "1")  			continue;  		ulong addr = Convert.ToUInt64 (forAddr);  		List<byte> data = new List<byte> ();  		data.Add (TRIGGER_BYTE);  		byte id1 = (byte)((EventID & 0x300) >> 8);  		byte id2 = (byte)(EventID & 0xFF);  		data.Add (id1);  		data.Add (id2);  		if (op1 != "") {  			data.Add ((byte)op1.Length);  			foreach (char c in op1) {  				data.Add ((byte)c);  			}  		}  		if (op2 != "") {  			data.Add ((byte)op2.Length);  			foreach (char c in op2) {  				data.Add ((byte)c);  			}  		}  		transmit = new XbeeTx64Bit (data' addr);  		transmit.Send (_serialPort);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Consume,The following statement contains a magic number: foreach (string msg in msgsArr) {  	if (msg == "")  		continue;  	string[] msgData = msg.Split ('|');  	int NodeID = Convert.ToInt32 (msgData [0]);  	int EventID = Convert.ToInt32 (msgData [1]);  	string op1 = msgData [2];  	string op2 = msgData [3];  	int MsgID = Convert.ToInt32 (msgData [4]);  	XbeeTx64Bit transmit;  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' NodeID));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "")  		continue;  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM messages_to_nodes WHERE MessageID={0}"' MsgID));  	DataSqlConnection.mutex.ReleaseMutex ();  	string forAddr = ret.Split ('|') [0];  	string reg = ret.Split ('|') [1];  	if (reg != "1")  		continue;  	ulong addr = Convert.ToUInt64 (forAddr);  	List<byte> data = new List<byte> ();  	data.Add (TRIGGER_BYTE);  	byte id1 = (byte)((EventID & 0x300) >> 8);  	byte id2 = (byte)(EventID & 0xFF);  	data.Add (id1);  	data.Add (id2);  	if (op1 != "") {  		data.Add ((byte)op1.Length);  		foreach (char c in op1) {  			data.Add ((byte)c);  		}  	}  	if (op2 != "") {  		data.Add ((byte)op2.Length);  		foreach (char c in op2) {  			data.Add ((byte)c);  		}  	}  	transmit = new XbeeTx64Bit (data' addr);  	transmit.Send (_serialPort);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Consume,The following statement contains a magic number: foreach (string msg in msgsArr) {  	if (msg == "")  		continue;  	string[] msgData = msg.Split ('|');  	int NodeID = Convert.ToInt32 (msgData [0]);  	int EventID = Convert.ToInt32 (msgData [1]);  	string op1 = msgData [2];  	string op2 = msgData [3];  	int MsgID = Convert.ToInt32 (msgData [4]);  	XbeeTx64Bit transmit;  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' NodeID));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "")  		continue;  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM messages_to_nodes WHERE MessageID={0}"' MsgID));  	DataSqlConnection.mutex.ReleaseMutex ();  	string forAddr = ret.Split ('|') [0];  	string reg = ret.Split ('|') [1];  	if (reg != "1")  		continue;  	ulong addr = Convert.ToUInt64 (forAddr);  	List<byte> data = new List<byte> ();  	data.Add (TRIGGER_BYTE);  	byte id1 = (byte)((EventID & 0x300) >> 8);  	byte id2 = (byte)(EventID & 0xFF);  	data.Add (id1);  	data.Add (id2);  	if (op1 != "") {  		data.Add ((byte)op1.Length);  		foreach (char c in op1) {  			data.Add ((byte)c);  		}  	}  	if (op2 != "") {  		data.Add ((byte)op2.Length);  		foreach (char c in op2) {  			data.Add ((byte)c);  		}  	}  	transmit = new XbeeTx64Bit (data' addr);  	transmit.Send (_serialPort);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Consume,The following statement contains a magic number: foreach (string msg in msgsArr) {  	if (msg == "")  		continue;  	string[] msgData = msg.Split ('|');  	int NodeID = Convert.ToInt32 (msgData [0]);  	int EventID = Convert.ToInt32 (msgData [1]);  	string op1 = msgData [2];  	string op2 = msgData [3];  	int MsgID = Convert.ToInt32 (msgData [4]);  	XbeeTx64Bit transmit;  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' NodeID));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "")  		continue;  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM messages_to_nodes WHERE MessageID={0}"' MsgID));  	DataSqlConnection.mutex.ReleaseMutex ();  	string forAddr = ret.Split ('|') [0];  	string reg = ret.Split ('|') [1];  	if (reg != "1")  		continue;  	ulong addr = Convert.ToUInt64 (forAddr);  	List<byte> data = new List<byte> ();  	data.Add (TRIGGER_BYTE);  	byte id1 = (byte)((EventID & 0x300) >> 8);  	byte id2 = (byte)(EventID & 0xFF);  	data.Add (id1);  	data.Add (id2);  	if (op1 != "") {  		data.Add ((byte)op1.Length);  		foreach (char c in op1) {  			data.Add ((byte)c);  		}  	}  	if (op2 != "") {  		data.Add ((byte)op2.Length);  		foreach (char c in op2) {  			data.Add ((byte)c);  		}  	}  	transmit = new XbeeTx64Bit (data' addr);  	transmit.Send (_serialPort);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Consume,The following statement contains a magic number: foreach (string msg in msgsArr) {  	if (msg == "")  		continue;  	string[] msgData = msg.Split ('|');  	int NodeID = Convert.ToInt32 (msgData [0]);  	int EventID = Convert.ToInt32 (msgData [1]);  	string op1 = msgData [2];  	string op2 = msgData [3];  	int MsgID = Convert.ToInt32 (msgData [4]);  	XbeeTx64Bit transmit;  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' NodeID));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "")  		continue;  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM messages_to_nodes WHERE MessageID={0}"' MsgID));  	DataSqlConnection.mutex.ReleaseMutex ();  	string forAddr = ret.Split ('|') [0];  	string reg = ret.Split ('|') [1];  	if (reg != "1")  		continue;  	ulong addr = Convert.ToUInt64 (forAddr);  	List<byte> data = new List<byte> ();  	data.Add (TRIGGER_BYTE);  	byte id1 = (byte)((EventID & 0x300) >> 8);  	byte id2 = (byte)(EventID & 0xFF);  	data.Add (id1);  	data.Add (id2);  	if (op1 != "") {  		data.Add ((byte)op1.Length);  		foreach (char c in op1) {  			data.Add ((byte)c);  		}  	}  	if (op2 != "") {  		data.Add ((byte)op2.Length);  		foreach (char c in op2) {  			data.Add ((byte)c);  		}  	}  	transmit = new XbeeTx64Bit (data' addr);  	transmit.Send (_serialPort);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Consume,The following statement contains a magic number: Thread.Sleep (250);  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: while (_continue) {  	try {  		int message = _serialPort.ReadByte ();  		if (message == 0x7E) {  			XbeeRx incoming = new XbeeRx ();  			if (incoming.ParseIncomingMessage (_serialPort)) {  				if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  					remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  				}  				List<int> data = incoming.GetMessage ();  				ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  				int byteCounter;  				switch (data [0]) {  				case VERSION_BYTE:  					int version = data [1];  					XbeeTx64Bit transmit;  					List<byte> d = new List<byte> ();  					DataSqlConnection.mutex.WaitOne ();  					string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (ret == "") {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  					}  					else {  						int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  						if (version != databaseVersion) {  							d.Add (MISMATCH_BYTE);  							contactingNode.ResetNode ();  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  							DataSqlConnection.mutex.ReleaseMutex ();  						}  						else {  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  							d.Add (MATCH_BYTE);  							string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  							DataSqlConnection.mutex.ReleaseMutex ();  							string[] nodeInfo = node.Split ('|');  							contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  							contactingNode.SetName (nodeInfo [1]);  							contactingNode.SetAlias (nodeInfo [2]);  							contactingNode.SetBrand (nodeInfo [3]);  							contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  							contactingNode.SetHexAddress (nodeInfo [5]);  							contactingNode.SetRegistered (true);  							//nodeInfo[7] is IsForeign which we don't care about  							contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  							DataSqlConnection.mutex.WaitOne ();  							nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  							DataSqlConnection.mutex.ReleaseMutex ();  							foreach (string s in nodeInfo) {  								if (s == "")  									continue;  								string[] eventData = s.Split ('|');  								Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  								DataSqlConnection.mutex.WaitOne ();  								string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  								DataSqlConnection.mutex.ReleaseMutex ();  								if (optionsData == "") {  									contactingEvent.Option1 = false;  									contactingEvent.Option2 = false;  								}  								else {  									string[] ops = optionsData.Split ('\n');  									string[] opsVals;  									opsVals = ops [0].Split ('|');  									contactingEvent.Option1 = true;  									contactingEvent.SetOption1 (opsVals [3]);  									contactingEvent.SetOption1Value (opsVals [4]);  									if (ops.Length == 3) {  										opsVals = ops [1].Split ('|');  										contactingEvent.Option2 = true;  										contactingEvent.SetOption2 (opsVals [3]);  										contactingEvent.SetOption2Value (opsVals [4]);  									}  								}  								contactingNode.AddEvent (contactingEvent);  							}  						}  					}  					contactingNode.SetVersion ((byte)version);  					transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  					transmit.Send (_serialPort);  					break;  				/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  					string name = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							name += (char)data [i];  					}  					contactingNode.SetName (name);  					contactingNode.SetRegistered (true);  					break;  				/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  					string brand = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							brand += (char)data [i];  					}  					contactingNode.SetBrand (brand);  					AddNodeToDatabase (contactingNode);  					break;  				/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  					byteCounter = 1;  					int nameLen = data [byteCounter++];  					string eventName = "";  					for (int i = 0; i < nameLen; i++) {  						if ((char)data [byteCounter] != '\0')  							eventName += (char)data [byteCounter];  						byteCounter++;  					}  					int descLen = data [byteCounter++];  					string description = "";  					for (int i = 0; i < descLen; i++) {  						if ((char)data [byteCounter] != '\0')  							description += (char)data [byteCounter];  						byteCounter++;  					}  					ushort doubleByte = (ushort)(data [byteCounter++] << 8);  					doubleByte = (ushort)(doubleByte | data [byteCounter++]);  					int eventID = doubleByte & 0x3FF;  					bool triggerable = (doubleByte & 0x8000) > 0;  					bool option1Exists = (doubleByte & 0x800) > 0;  					bool option2Exists = (doubleByte & 0x400) > 0;  					Event e = new Event (eventName' description' eventID' triggerable);  					e.Option1 = option1Exists;  					e.Option2 = option2Exists;  					contactingNode.AddEvent (e);  					AddEventToDatabase (contactingNode' e);  					break;  				case OPTION_BYTE:  					byteCounter = 1;  					int eventId = (ushort)(data [byteCounter++] << 8);  					eventId = (ushort)(eventId | data [byteCounter++]);  					int opDescLen = data [byteCounter++];  					string opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  					currEvent.SetOption1 (opDescription);  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					if (currEvent.Option2) {  						opDescLen = data [byteCounter++];  						opDescription = "";  						for (int i = 0; i < opDescLen; i++) {  							if ((char)data [byteCounter] != '\0')  								opDescription += (char)data [byteCounter];  							byteCounter++;  						}  						AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					}  					break;  				case THROW_BYTE:  					byteCounter = 1;  					if (!contactingNode.GetRegistered ()) {  						break;  					}  					int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  					Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  					string op1Str = "";  					string op2Str = "";  					if (thisEvent.Option1) {  						int op1len = data [byteCounter++];  						for (int i = 0; i < op1len; i++) {  							op1Str += (char)data [byteCounter++];  						}  					}  					if (thisEvent.Option2) {  						int op2len = data [byteCounter++];  						for (int i = 0; i < op2len; i++) {  							op2Str += (char)data [byteCounter++];  						}  					}  					contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  					ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  					break;  				default:  					break;  				}  			}  		}  	}  	catch (TimeoutException) {  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: while (_continue) {  	try {  		int message = _serialPort.ReadByte ();  		if (message == 0x7E) {  			XbeeRx incoming = new XbeeRx ();  			if (incoming.ParseIncomingMessage (_serialPort)) {  				if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  					remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  				}  				List<int> data = incoming.GetMessage ();  				ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  				int byteCounter;  				switch (data [0]) {  				case VERSION_BYTE:  					int version = data [1];  					XbeeTx64Bit transmit;  					List<byte> d = new List<byte> ();  					DataSqlConnection.mutex.WaitOne ();  					string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (ret == "") {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  					}  					else {  						int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  						if (version != databaseVersion) {  							d.Add (MISMATCH_BYTE);  							contactingNode.ResetNode ();  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  							DataSqlConnection.mutex.ReleaseMutex ();  						}  						else {  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  							d.Add (MATCH_BYTE);  							string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  							DataSqlConnection.mutex.ReleaseMutex ();  							string[] nodeInfo = node.Split ('|');  							contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  							contactingNode.SetName (nodeInfo [1]);  							contactingNode.SetAlias (nodeInfo [2]);  							contactingNode.SetBrand (nodeInfo [3]);  							contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  							contactingNode.SetHexAddress (nodeInfo [5]);  							contactingNode.SetRegistered (true);  							//nodeInfo[7] is IsForeign which we don't care about  							contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  							DataSqlConnection.mutex.WaitOne ();  							nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  							DataSqlConnection.mutex.ReleaseMutex ();  							foreach (string s in nodeInfo) {  								if (s == "")  									continue;  								string[] eventData = s.Split ('|');  								Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  								DataSqlConnection.mutex.WaitOne ();  								string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  								DataSqlConnection.mutex.ReleaseMutex ();  								if (optionsData == "") {  									contactingEvent.Option1 = false;  									contactingEvent.Option2 = false;  								}  								else {  									string[] ops = optionsData.Split ('\n');  									string[] opsVals;  									opsVals = ops [0].Split ('|');  									contactingEvent.Option1 = true;  									contactingEvent.SetOption1 (opsVals [3]);  									contactingEvent.SetOption1Value (opsVals [4]);  									if (ops.Length == 3) {  										opsVals = ops [1].Split ('|');  										contactingEvent.Option2 = true;  										contactingEvent.SetOption2 (opsVals [3]);  										contactingEvent.SetOption2Value (opsVals [4]);  									}  								}  								contactingNode.AddEvent (contactingEvent);  							}  						}  					}  					contactingNode.SetVersion ((byte)version);  					transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  					transmit.Send (_serialPort);  					break;  				/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  					string name = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							name += (char)data [i];  					}  					contactingNode.SetName (name);  					contactingNode.SetRegistered (true);  					break;  				/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  					string brand = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							brand += (char)data [i];  					}  					contactingNode.SetBrand (brand);  					AddNodeToDatabase (contactingNode);  					break;  				/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  					byteCounter = 1;  					int nameLen = data [byteCounter++];  					string eventName = "";  					for (int i = 0; i < nameLen; i++) {  						if ((char)data [byteCounter] != '\0')  							eventName += (char)data [byteCounter];  						byteCounter++;  					}  					int descLen = data [byteCounter++];  					string description = "";  					for (int i = 0; i < descLen; i++) {  						if ((char)data [byteCounter] != '\0')  							description += (char)data [byteCounter];  						byteCounter++;  					}  					ushort doubleByte = (ushort)(data [byteCounter++] << 8);  					doubleByte = (ushort)(doubleByte | data [byteCounter++]);  					int eventID = doubleByte & 0x3FF;  					bool triggerable = (doubleByte & 0x8000) > 0;  					bool option1Exists = (doubleByte & 0x800) > 0;  					bool option2Exists = (doubleByte & 0x400) > 0;  					Event e = new Event (eventName' description' eventID' triggerable);  					e.Option1 = option1Exists;  					e.Option2 = option2Exists;  					contactingNode.AddEvent (e);  					AddEventToDatabase (contactingNode' e);  					break;  				case OPTION_BYTE:  					byteCounter = 1;  					int eventId = (ushort)(data [byteCounter++] << 8);  					eventId = (ushort)(eventId | data [byteCounter++]);  					int opDescLen = data [byteCounter++];  					string opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  					currEvent.SetOption1 (opDescription);  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					if (currEvent.Option2) {  						opDescLen = data [byteCounter++];  						opDescription = "";  						for (int i = 0; i < opDescLen; i++) {  							if ((char)data [byteCounter] != '\0')  								opDescription += (char)data [byteCounter];  							byteCounter++;  						}  						AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					}  					break;  				case THROW_BYTE:  					byteCounter = 1;  					if (!contactingNode.GetRegistered ()) {  						break;  					}  					int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  					Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  					string op1Str = "";  					string op2Str = "";  					if (thisEvent.Option1) {  						int op1len = data [byteCounter++];  						for (int i = 0; i < op1len; i++) {  							op1Str += (char)data [byteCounter++];  						}  					}  					if (thisEvent.Option2) {  						int op2len = data [byteCounter++];  						for (int i = 0; i < op2len; i++) {  							op2Str += (char)data [byteCounter++];  						}  					}  					contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  					ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  					break;  				default:  					break;  				}  			}  		}  	}  	catch (TimeoutException) {  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: while (_continue) {  	try {  		int message = _serialPort.ReadByte ();  		if (message == 0x7E) {  			XbeeRx incoming = new XbeeRx ();  			if (incoming.ParseIncomingMessage (_serialPort)) {  				if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  					remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  				}  				List<int> data = incoming.GetMessage ();  				ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  				int byteCounter;  				switch (data [0]) {  				case VERSION_BYTE:  					int version = data [1];  					XbeeTx64Bit transmit;  					List<byte> d = new List<byte> ();  					DataSqlConnection.mutex.WaitOne ();  					string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (ret == "") {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  					}  					else {  						int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  						if (version != databaseVersion) {  							d.Add (MISMATCH_BYTE);  							contactingNode.ResetNode ();  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  							DataSqlConnection.mutex.ReleaseMutex ();  						}  						else {  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  							d.Add (MATCH_BYTE);  							string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  							DataSqlConnection.mutex.ReleaseMutex ();  							string[] nodeInfo = node.Split ('|');  							contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  							contactingNode.SetName (nodeInfo [1]);  							contactingNode.SetAlias (nodeInfo [2]);  							contactingNode.SetBrand (nodeInfo [3]);  							contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  							contactingNode.SetHexAddress (nodeInfo [5]);  							contactingNode.SetRegistered (true);  							//nodeInfo[7] is IsForeign which we don't care about  							contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  							DataSqlConnection.mutex.WaitOne ();  							nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  							DataSqlConnection.mutex.ReleaseMutex ();  							foreach (string s in nodeInfo) {  								if (s == "")  									continue;  								string[] eventData = s.Split ('|');  								Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  								DataSqlConnection.mutex.WaitOne ();  								string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  								DataSqlConnection.mutex.ReleaseMutex ();  								if (optionsData == "") {  									contactingEvent.Option1 = false;  									contactingEvent.Option2 = false;  								}  								else {  									string[] ops = optionsData.Split ('\n');  									string[] opsVals;  									opsVals = ops [0].Split ('|');  									contactingEvent.Option1 = true;  									contactingEvent.SetOption1 (opsVals [3]);  									contactingEvent.SetOption1Value (opsVals [4]);  									if (ops.Length == 3) {  										opsVals = ops [1].Split ('|');  										contactingEvent.Option2 = true;  										contactingEvent.SetOption2 (opsVals [3]);  										contactingEvent.SetOption2Value (opsVals [4]);  									}  								}  								contactingNode.AddEvent (contactingEvent);  							}  						}  					}  					contactingNode.SetVersion ((byte)version);  					transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  					transmit.Send (_serialPort);  					break;  				/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  					string name = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							name += (char)data [i];  					}  					contactingNode.SetName (name);  					contactingNode.SetRegistered (true);  					break;  				/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  					string brand = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							brand += (char)data [i];  					}  					contactingNode.SetBrand (brand);  					AddNodeToDatabase (contactingNode);  					break;  				/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  					byteCounter = 1;  					int nameLen = data [byteCounter++];  					string eventName = "";  					for (int i = 0; i < nameLen; i++) {  						if ((char)data [byteCounter] != '\0')  							eventName += (char)data [byteCounter];  						byteCounter++;  					}  					int descLen = data [byteCounter++];  					string description = "";  					for (int i = 0; i < descLen; i++) {  						if ((char)data [byteCounter] != '\0')  							description += (char)data [byteCounter];  						byteCounter++;  					}  					ushort doubleByte = (ushort)(data [byteCounter++] << 8);  					doubleByte = (ushort)(doubleByte | data [byteCounter++]);  					int eventID = doubleByte & 0x3FF;  					bool triggerable = (doubleByte & 0x8000) > 0;  					bool option1Exists = (doubleByte & 0x800) > 0;  					bool option2Exists = (doubleByte & 0x400) > 0;  					Event e = new Event (eventName' description' eventID' triggerable);  					e.Option1 = option1Exists;  					e.Option2 = option2Exists;  					contactingNode.AddEvent (e);  					AddEventToDatabase (contactingNode' e);  					break;  				case OPTION_BYTE:  					byteCounter = 1;  					int eventId = (ushort)(data [byteCounter++] << 8);  					eventId = (ushort)(eventId | data [byteCounter++]);  					int opDescLen = data [byteCounter++];  					string opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  					currEvent.SetOption1 (opDescription);  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					if (currEvent.Option2) {  						opDescLen = data [byteCounter++];  						opDescription = "";  						for (int i = 0; i < opDescLen; i++) {  							if ((char)data [byteCounter] != '\0')  								opDescription += (char)data [byteCounter];  							byteCounter++;  						}  						AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					}  					break;  				case THROW_BYTE:  					byteCounter = 1;  					if (!contactingNode.GetRegistered ()) {  						break;  					}  					int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  					Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  					string op1Str = "";  					string op2Str = "";  					if (thisEvent.Option1) {  						int op1len = data [byteCounter++];  						for (int i = 0; i < op1len; i++) {  							op1Str += (char)data [byteCounter++];  						}  					}  					if (thisEvent.Option2) {  						int op2len = data [byteCounter++];  						for (int i = 0; i < op2len; i++) {  							op2Str += (char)data [byteCounter++];  						}  					}  					contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  					ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  					break;  				default:  					break;  				}  			}  		}  	}  	catch (TimeoutException) {  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: while (_continue) {  	try {  		int message = _serialPort.ReadByte ();  		if (message == 0x7E) {  			XbeeRx incoming = new XbeeRx ();  			if (incoming.ParseIncomingMessage (_serialPort)) {  				if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  					remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  				}  				List<int> data = incoming.GetMessage ();  				ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  				int byteCounter;  				switch (data [0]) {  				case VERSION_BYTE:  					int version = data [1];  					XbeeTx64Bit transmit;  					List<byte> d = new List<byte> ();  					DataSqlConnection.mutex.WaitOne ();  					string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (ret == "") {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  					}  					else {  						int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  						if (version != databaseVersion) {  							d.Add (MISMATCH_BYTE);  							contactingNode.ResetNode ();  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  							DataSqlConnection.mutex.ReleaseMutex ();  						}  						else {  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  							d.Add (MATCH_BYTE);  							string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  							DataSqlConnection.mutex.ReleaseMutex ();  							string[] nodeInfo = node.Split ('|');  							contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  							contactingNode.SetName (nodeInfo [1]);  							contactingNode.SetAlias (nodeInfo [2]);  							contactingNode.SetBrand (nodeInfo [3]);  							contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  							contactingNode.SetHexAddress (nodeInfo [5]);  							contactingNode.SetRegistered (true);  							//nodeInfo[7] is IsForeign which we don't care about  							contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  							DataSqlConnection.mutex.WaitOne ();  							nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  							DataSqlConnection.mutex.ReleaseMutex ();  							foreach (string s in nodeInfo) {  								if (s == "")  									continue;  								string[] eventData = s.Split ('|');  								Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  								DataSqlConnection.mutex.WaitOne ();  								string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  								DataSqlConnection.mutex.ReleaseMutex ();  								if (optionsData == "") {  									contactingEvent.Option1 = false;  									contactingEvent.Option2 = false;  								}  								else {  									string[] ops = optionsData.Split ('\n');  									string[] opsVals;  									opsVals = ops [0].Split ('|');  									contactingEvent.Option1 = true;  									contactingEvent.SetOption1 (opsVals [3]);  									contactingEvent.SetOption1Value (opsVals [4]);  									if (ops.Length == 3) {  										opsVals = ops [1].Split ('|');  										contactingEvent.Option2 = true;  										contactingEvent.SetOption2 (opsVals [3]);  										contactingEvent.SetOption2Value (opsVals [4]);  									}  								}  								contactingNode.AddEvent (contactingEvent);  							}  						}  					}  					contactingNode.SetVersion ((byte)version);  					transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  					transmit.Send (_serialPort);  					break;  				/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  					string name = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							name += (char)data [i];  					}  					contactingNode.SetName (name);  					contactingNode.SetRegistered (true);  					break;  				/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  					string brand = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							brand += (char)data [i];  					}  					contactingNode.SetBrand (brand);  					AddNodeToDatabase (contactingNode);  					break;  				/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  					byteCounter = 1;  					int nameLen = data [byteCounter++];  					string eventName = "";  					for (int i = 0; i < nameLen; i++) {  						if ((char)data [byteCounter] != '\0')  							eventName += (char)data [byteCounter];  						byteCounter++;  					}  					int descLen = data [byteCounter++];  					string description = "";  					for (int i = 0; i < descLen; i++) {  						if ((char)data [byteCounter] != '\0')  							description += (char)data [byteCounter];  						byteCounter++;  					}  					ushort doubleByte = (ushort)(data [byteCounter++] << 8);  					doubleByte = (ushort)(doubleByte | data [byteCounter++]);  					int eventID = doubleByte & 0x3FF;  					bool triggerable = (doubleByte & 0x8000) > 0;  					bool option1Exists = (doubleByte & 0x800) > 0;  					bool option2Exists = (doubleByte & 0x400) > 0;  					Event e = new Event (eventName' description' eventID' triggerable);  					e.Option1 = option1Exists;  					e.Option2 = option2Exists;  					contactingNode.AddEvent (e);  					AddEventToDatabase (contactingNode' e);  					break;  				case OPTION_BYTE:  					byteCounter = 1;  					int eventId = (ushort)(data [byteCounter++] << 8);  					eventId = (ushort)(eventId | data [byteCounter++]);  					int opDescLen = data [byteCounter++];  					string opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  					currEvent.SetOption1 (opDescription);  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					if (currEvent.Option2) {  						opDescLen = data [byteCounter++];  						opDescription = "";  						for (int i = 0; i < opDescLen; i++) {  							if ((char)data [byteCounter] != '\0')  								opDescription += (char)data [byteCounter];  							byteCounter++;  						}  						AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					}  					break;  				case THROW_BYTE:  					byteCounter = 1;  					if (!contactingNode.GetRegistered ()) {  						break;  					}  					int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  					Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  					string op1Str = "";  					string op2Str = "";  					if (thisEvent.Option1) {  						int op1len = data [byteCounter++];  						for (int i = 0; i < op1len; i++) {  							op1Str += (char)data [byteCounter++];  						}  					}  					if (thisEvent.Option2) {  						int op2len = data [byteCounter++];  						for (int i = 0; i < op2len; i++) {  							op2Str += (char)data [byteCounter++];  						}  					}  					contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  					ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  					break;  				default:  					break;  				}  			}  		}  	}  	catch (TimeoutException) {  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: while (_continue) {  	try {  		int message = _serialPort.ReadByte ();  		if (message == 0x7E) {  			XbeeRx incoming = new XbeeRx ();  			if (incoming.ParseIncomingMessage (_serialPort)) {  				if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  					remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  				}  				List<int> data = incoming.GetMessage ();  				ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  				int byteCounter;  				switch (data [0]) {  				case VERSION_BYTE:  					int version = data [1];  					XbeeTx64Bit transmit;  					List<byte> d = new List<byte> ();  					DataSqlConnection.mutex.WaitOne ();  					string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (ret == "") {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  					}  					else {  						int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  						if (version != databaseVersion) {  							d.Add (MISMATCH_BYTE);  							contactingNode.ResetNode ();  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  							DataSqlConnection.mutex.ReleaseMutex ();  						}  						else {  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  							d.Add (MATCH_BYTE);  							string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  							DataSqlConnection.mutex.ReleaseMutex ();  							string[] nodeInfo = node.Split ('|');  							contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  							contactingNode.SetName (nodeInfo [1]);  							contactingNode.SetAlias (nodeInfo [2]);  							contactingNode.SetBrand (nodeInfo [3]);  							contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  							contactingNode.SetHexAddress (nodeInfo [5]);  							contactingNode.SetRegistered (true);  							//nodeInfo[7] is IsForeign which we don't care about  							contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  							DataSqlConnection.mutex.WaitOne ();  							nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  							DataSqlConnection.mutex.ReleaseMutex ();  							foreach (string s in nodeInfo) {  								if (s == "")  									continue;  								string[] eventData = s.Split ('|');  								Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  								DataSqlConnection.mutex.WaitOne ();  								string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  								DataSqlConnection.mutex.ReleaseMutex ();  								if (optionsData == "") {  									contactingEvent.Option1 = false;  									contactingEvent.Option2 = false;  								}  								else {  									string[] ops = optionsData.Split ('\n');  									string[] opsVals;  									opsVals = ops [0].Split ('|');  									contactingEvent.Option1 = true;  									contactingEvent.SetOption1 (opsVals [3]);  									contactingEvent.SetOption1Value (opsVals [4]);  									if (ops.Length == 3) {  										opsVals = ops [1].Split ('|');  										contactingEvent.Option2 = true;  										contactingEvent.SetOption2 (opsVals [3]);  										contactingEvent.SetOption2Value (opsVals [4]);  									}  								}  								contactingNode.AddEvent (contactingEvent);  							}  						}  					}  					contactingNode.SetVersion ((byte)version);  					transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  					transmit.Send (_serialPort);  					break;  				/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  					string name = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							name += (char)data [i];  					}  					contactingNode.SetName (name);  					contactingNode.SetRegistered (true);  					break;  				/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  					string brand = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							brand += (char)data [i];  					}  					contactingNode.SetBrand (brand);  					AddNodeToDatabase (contactingNode);  					break;  				/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  					byteCounter = 1;  					int nameLen = data [byteCounter++];  					string eventName = "";  					for (int i = 0; i < nameLen; i++) {  						if ((char)data [byteCounter] != '\0')  							eventName += (char)data [byteCounter];  						byteCounter++;  					}  					int descLen = data [byteCounter++];  					string description = "";  					for (int i = 0; i < descLen; i++) {  						if ((char)data [byteCounter] != '\0')  							description += (char)data [byteCounter];  						byteCounter++;  					}  					ushort doubleByte = (ushort)(data [byteCounter++] << 8);  					doubleByte = (ushort)(doubleByte | data [byteCounter++]);  					int eventID = doubleByte & 0x3FF;  					bool triggerable = (doubleByte & 0x8000) > 0;  					bool option1Exists = (doubleByte & 0x800) > 0;  					bool option2Exists = (doubleByte & 0x400) > 0;  					Event e = new Event (eventName' description' eventID' triggerable);  					e.Option1 = option1Exists;  					e.Option2 = option2Exists;  					contactingNode.AddEvent (e);  					AddEventToDatabase (contactingNode' e);  					break;  				case OPTION_BYTE:  					byteCounter = 1;  					int eventId = (ushort)(data [byteCounter++] << 8);  					eventId = (ushort)(eventId | data [byteCounter++]);  					int opDescLen = data [byteCounter++];  					string opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  					currEvent.SetOption1 (opDescription);  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					if (currEvent.Option2) {  						opDescLen = data [byteCounter++];  						opDescription = "";  						for (int i = 0; i < opDescLen; i++) {  							if ((char)data [byteCounter] != '\0')  								opDescription += (char)data [byteCounter];  							byteCounter++;  						}  						AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					}  					break;  				case THROW_BYTE:  					byteCounter = 1;  					if (!contactingNode.GetRegistered ()) {  						break;  					}  					int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  					Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  					string op1Str = "";  					string op2Str = "";  					if (thisEvent.Option1) {  						int op1len = data [byteCounter++];  						for (int i = 0; i < op1len; i++) {  							op1Str += (char)data [byteCounter++];  						}  					}  					if (thisEvent.Option2) {  						int op2len = data [byteCounter++];  						for (int i = 0; i < op2len; i++) {  							op2Str += (char)data [byteCounter++];  						}  					}  					contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  					ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  					break;  				default:  					break;  				}  			}  		}  	}  	catch (TimeoutException) {  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: while (_continue) {  	try {  		int message = _serialPort.ReadByte ();  		if (message == 0x7E) {  			XbeeRx incoming = new XbeeRx ();  			if (incoming.ParseIncomingMessage (_serialPort)) {  				if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  					remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  				}  				List<int> data = incoming.GetMessage ();  				ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  				int byteCounter;  				switch (data [0]) {  				case VERSION_BYTE:  					int version = data [1];  					XbeeTx64Bit transmit;  					List<byte> d = new List<byte> ();  					DataSqlConnection.mutex.WaitOne ();  					string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (ret == "") {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  					}  					else {  						int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  						if (version != databaseVersion) {  							d.Add (MISMATCH_BYTE);  							contactingNode.ResetNode ();  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  							DataSqlConnection.mutex.ReleaseMutex ();  						}  						else {  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  							d.Add (MATCH_BYTE);  							string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  							DataSqlConnection.mutex.ReleaseMutex ();  							string[] nodeInfo = node.Split ('|');  							contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  							contactingNode.SetName (nodeInfo [1]);  							contactingNode.SetAlias (nodeInfo [2]);  							contactingNode.SetBrand (nodeInfo [3]);  							contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  							contactingNode.SetHexAddress (nodeInfo [5]);  							contactingNode.SetRegistered (true);  							//nodeInfo[7] is IsForeign which we don't care about  							contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  							DataSqlConnection.mutex.WaitOne ();  							nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  							DataSqlConnection.mutex.ReleaseMutex ();  							foreach (string s in nodeInfo) {  								if (s == "")  									continue;  								string[] eventData = s.Split ('|');  								Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  								DataSqlConnection.mutex.WaitOne ();  								string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  								DataSqlConnection.mutex.ReleaseMutex ();  								if (optionsData == "") {  									contactingEvent.Option1 = false;  									contactingEvent.Option2 = false;  								}  								else {  									string[] ops = optionsData.Split ('\n');  									string[] opsVals;  									opsVals = ops [0].Split ('|');  									contactingEvent.Option1 = true;  									contactingEvent.SetOption1 (opsVals [3]);  									contactingEvent.SetOption1Value (opsVals [4]);  									if (ops.Length == 3) {  										opsVals = ops [1].Split ('|');  										contactingEvent.Option2 = true;  										contactingEvent.SetOption2 (opsVals [3]);  										contactingEvent.SetOption2Value (opsVals [4]);  									}  								}  								contactingNode.AddEvent (contactingEvent);  							}  						}  					}  					contactingNode.SetVersion ((byte)version);  					transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  					transmit.Send (_serialPort);  					break;  				/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  					string name = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							name += (char)data [i];  					}  					contactingNode.SetName (name);  					contactingNode.SetRegistered (true);  					break;  				/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  					string brand = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							brand += (char)data [i];  					}  					contactingNode.SetBrand (brand);  					AddNodeToDatabase (contactingNode);  					break;  				/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  					byteCounter = 1;  					int nameLen = data [byteCounter++];  					string eventName = "";  					for (int i = 0; i < nameLen; i++) {  						if ((char)data [byteCounter] != '\0')  							eventName += (char)data [byteCounter];  						byteCounter++;  					}  					int descLen = data [byteCounter++];  					string description = "";  					for (int i = 0; i < descLen; i++) {  						if ((char)data [byteCounter] != '\0')  							description += (char)data [byteCounter];  						byteCounter++;  					}  					ushort doubleByte = (ushort)(data [byteCounter++] << 8);  					doubleByte = (ushort)(doubleByte | data [byteCounter++]);  					int eventID = doubleByte & 0x3FF;  					bool triggerable = (doubleByte & 0x8000) > 0;  					bool option1Exists = (doubleByte & 0x800) > 0;  					bool option2Exists = (doubleByte & 0x400) > 0;  					Event e = new Event (eventName' description' eventID' triggerable);  					e.Option1 = option1Exists;  					e.Option2 = option2Exists;  					contactingNode.AddEvent (e);  					AddEventToDatabase (contactingNode' e);  					break;  				case OPTION_BYTE:  					byteCounter = 1;  					int eventId = (ushort)(data [byteCounter++] << 8);  					eventId = (ushort)(eventId | data [byteCounter++]);  					int opDescLen = data [byteCounter++];  					string opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  					currEvent.SetOption1 (opDescription);  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					if (currEvent.Option2) {  						opDescLen = data [byteCounter++];  						opDescription = "";  						for (int i = 0; i < opDescLen; i++) {  							if ((char)data [byteCounter] != '\0')  								opDescription += (char)data [byteCounter];  							byteCounter++;  						}  						AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					}  					break;  				case THROW_BYTE:  					byteCounter = 1;  					if (!contactingNode.GetRegistered ()) {  						break;  					}  					int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  					Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  					string op1Str = "";  					string op2Str = "";  					if (thisEvent.Option1) {  						int op1len = data [byteCounter++];  						for (int i = 0; i < op1len; i++) {  							op1Str += (char)data [byteCounter++];  						}  					}  					if (thisEvent.Option2) {  						int op2len = data [byteCounter++];  						for (int i = 0; i < op2len; i++) {  							op2Str += (char)data [byteCounter++];  						}  					}  					contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  					ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  					break;  				default:  					break;  				}  			}  		}  	}  	catch (TimeoutException) {  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: while (_continue) {  	try {  		int message = _serialPort.ReadByte ();  		if (message == 0x7E) {  			XbeeRx incoming = new XbeeRx ();  			if (incoming.ParseIncomingMessage (_serialPort)) {  				if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  					remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  				}  				List<int> data = incoming.GetMessage ();  				ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  				int byteCounter;  				switch (data [0]) {  				case VERSION_BYTE:  					int version = data [1];  					XbeeTx64Bit transmit;  					List<byte> d = new List<byte> ();  					DataSqlConnection.mutex.WaitOne ();  					string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (ret == "") {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  					}  					else {  						int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  						if (version != databaseVersion) {  							d.Add (MISMATCH_BYTE);  							contactingNode.ResetNode ();  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  							DataSqlConnection.mutex.ReleaseMutex ();  						}  						else {  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  							d.Add (MATCH_BYTE);  							string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  							DataSqlConnection.mutex.ReleaseMutex ();  							string[] nodeInfo = node.Split ('|');  							contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  							contactingNode.SetName (nodeInfo [1]);  							contactingNode.SetAlias (nodeInfo [2]);  							contactingNode.SetBrand (nodeInfo [3]);  							contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  							contactingNode.SetHexAddress (nodeInfo [5]);  							contactingNode.SetRegistered (true);  							//nodeInfo[7] is IsForeign which we don't care about  							contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  							DataSqlConnection.mutex.WaitOne ();  							nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  							DataSqlConnection.mutex.ReleaseMutex ();  							foreach (string s in nodeInfo) {  								if (s == "")  									continue;  								string[] eventData = s.Split ('|');  								Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  								DataSqlConnection.mutex.WaitOne ();  								string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  								DataSqlConnection.mutex.ReleaseMutex ();  								if (optionsData == "") {  									contactingEvent.Option1 = false;  									contactingEvent.Option2 = false;  								}  								else {  									string[] ops = optionsData.Split ('\n');  									string[] opsVals;  									opsVals = ops [0].Split ('|');  									contactingEvent.Option1 = true;  									contactingEvent.SetOption1 (opsVals [3]);  									contactingEvent.SetOption1Value (opsVals [4]);  									if (ops.Length == 3) {  										opsVals = ops [1].Split ('|');  										contactingEvent.Option2 = true;  										contactingEvent.SetOption2 (opsVals [3]);  										contactingEvent.SetOption2Value (opsVals [4]);  									}  								}  								contactingNode.AddEvent (contactingEvent);  							}  						}  					}  					contactingNode.SetVersion ((byte)version);  					transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  					transmit.Send (_serialPort);  					break;  				/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  					string name = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							name += (char)data [i];  					}  					contactingNode.SetName (name);  					contactingNode.SetRegistered (true);  					break;  				/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  					string brand = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							brand += (char)data [i];  					}  					contactingNode.SetBrand (brand);  					AddNodeToDatabase (contactingNode);  					break;  				/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  					byteCounter = 1;  					int nameLen = data [byteCounter++];  					string eventName = "";  					for (int i = 0; i < nameLen; i++) {  						if ((char)data [byteCounter] != '\0')  							eventName += (char)data [byteCounter];  						byteCounter++;  					}  					int descLen = data [byteCounter++];  					string description = "";  					for (int i = 0; i < descLen; i++) {  						if ((char)data [byteCounter] != '\0')  							description += (char)data [byteCounter];  						byteCounter++;  					}  					ushort doubleByte = (ushort)(data [byteCounter++] << 8);  					doubleByte = (ushort)(doubleByte | data [byteCounter++]);  					int eventID = doubleByte & 0x3FF;  					bool triggerable = (doubleByte & 0x8000) > 0;  					bool option1Exists = (doubleByte & 0x800) > 0;  					bool option2Exists = (doubleByte & 0x400) > 0;  					Event e = new Event (eventName' description' eventID' triggerable);  					e.Option1 = option1Exists;  					e.Option2 = option2Exists;  					contactingNode.AddEvent (e);  					AddEventToDatabase (contactingNode' e);  					break;  				case OPTION_BYTE:  					byteCounter = 1;  					int eventId = (ushort)(data [byteCounter++] << 8);  					eventId = (ushort)(eventId | data [byteCounter++]);  					int opDescLen = data [byteCounter++];  					string opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  					currEvent.SetOption1 (opDescription);  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					if (currEvent.Option2) {  						opDescLen = data [byteCounter++];  						opDescription = "";  						for (int i = 0; i < opDescLen; i++) {  							if ((char)data [byteCounter] != '\0')  								opDescription += (char)data [byteCounter];  							byteCounter++;  						}  						AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					}  					break;  				case THROW_BYTE:  					byteCounter = 1;  					if (!contactingNode.GetRegistered ()) {  						break;  					}  					int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  					Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  					string op1Str = "";  					string op2Str = "";  					if (thisEvent.Option1) {  						int op1len = data [byteCounter++];  						for (int i = 0; i < op1len; i++) {  							op1Str += (char)data [byteCounter++];  						}  					}  					if (thisEvent.Option2) {  						int op2len = data [byteCounter++];  						for (int i = 0; i < op2len; i++) {  							op2Str += (char)data [byteCounter++];  						}  					}  					contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  					ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  					break;  				default:  					break;  				}  			}  		}  	}  	catch (TimeoutException) {  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: while (_continue) {  	try {  		int message = _serialPort.ReadByte ();  		if (message == 0x7E) {  			XbeeRx incoming = new XbeeRx ();  			if (incoming.ParseIncomingMessage (_serialPort)) {  				if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  					remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  				}  				List<int> data = incoming.GetMessage ();  				ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  				int byteCounter;  				switch (data [0]) {  				case VERSION_BYTE:  					int version = data [1];  					XbeeTx64Bit transmit;  					List<byte> d = new List<byte> ();  					DataSqlConnection.mutex.WaitOne ();  					string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (ret == "") {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  					}  					else {  						int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  						if (version != databaseVersion) {  							d.Add (MISMATCH_BYTE);  							contactingNode.ResetNode ();  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  							DataSqlConnection.mutex.ReleaseMutex ();  						}  						else {  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  							d.Add (MATCH_BYTE);  							string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  							DataSqlConnection.mutex.ReleaseMutex ();  							string[] nodeInfo = node.Split ('|');  							contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  							contactingNode.SetName (nodeInfo [1]);  							contactingNode.SetAlias (nodeInfo [2]);  							contactingNode.SetBrand (nodeInfo [3]);  							contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  							contactingNode.SetHexAddress (nodeInfo [5]);  							contactingNode.SetRegistered (true);  							//nodeInfo[7] is IsForeign which we don't care about  							contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  							DataSqlConnection.mutex.WaitOne ();  							nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  							DataSqlConnection.mutex.ReleaseMutex ();  							foreach (string s in nodeInfo) {  								if (s == "")  									continue;  								string[] eventData = s.Split ('|');  								Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  								DataSqlConnection.mutex.WaitOne ();  								string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  								DataSqlConnection.mutex.ReleaseMutex ();  								if (optionsData == "") {  									contactingEvent.Option1 = false;  									contactingEvent.Option2 = false;  								}  								else {  									string[] ops = optionsData.Split ('\n');  									string[] opsVals;  									opsVals = ops [0].Split ('|');  									contactingEvent.Option1 = true;  									contactingEvent.SetOption1 (opsVals [3]);  									contactingEvent.SetOption1Value (opsVals [4]);  									if (ops.Length == 3) {  										opsVals = ops [1].Split ('|');  										contactingEvent.Option2 = true;  										contactingEvent.SetOption2 (opsVals [3]);  										contactingEvent.SetOption2Value (opsVals [4]);  									}  								}  								contactingNode.AddEvent (contactingEvent);  							}  						}  					}  					contactingNode.SetVersion ((byte)version);  					transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  					transmit.Send (_serialPort);  					break;  				/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  					string name = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							name += (char)data [i];  					}  					contactingNode.SetName (name);  					contactingNode.SetRegistered (true);  					break;  				/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  					string brand = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							brand += (char)data [i];  					}  					contactingNode.SetBrand (brand);  					AddNodeToDatabase (contactingNode);  					break;  				/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  					byteCounter = 1;  					int nameLen = data [byteCounter++];  					string eventName = "";  					for (int i = 0; i < nameLen; i++) {  						if ((char)data [byteCounter] != '\0')  							eventName += (char)data [byteCounter];  						byteCounter++;  					}  					int descLen = data [byteCounter++];  					string description = "";  					for (int i = 0; i < descLen; i++) {  						if ((char)data [byteCounter] != '\0')  							description += (char)data [byteCounter];  						byteCounter++;  					}  					ushort doubleByte = (ushort)(data [byteCounter++] << 8);  					doubleByte = (ushort)(doubleByte | data [byteCounter++]);  					int eventID = doubleByte & 0x3FF;  					bool triggerable = (doubleByte & 0x8000) > 0;  					bool option1Exists = (doubleByte & 0x800) > 0;  					bool option2Exists = (doubleByte & 0x400) > 0;  					Event e = new Event (eventName' description' eventID' triggerable);  					e.Option1 = option1Exists;  					e.Option2 = option2Exists;  					contactingNode.AddEvent (e);  					AddEventToDatabase (contactingNode' e);  					break;  				case OPTION_BYTE:  					byteCounter = 1;  					int eventId = (ushort)(data [byteCounter++] << 8);  					eventId = (ushort)(eventId | data [byteCounter++]);  					int opDescLen = data [byteCounter++];  					string opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  					currEvent.SetOption1 (opDescription);  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					if (currEvent.Option2) {  						opDescLen = data [byteCounter++];  						opDescription = "";  						for (int i = 0; i < opDescLen; i++) {  							if ((char)data [byteCounter] != '\0')  								opDescription += (char)data [byteCounter];  							byteCounter++;  						}  						AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					}  					break;  				case THROW_BYTE:  					byteCounter = 1;  					if (!contactingNode.GetRegistered ()) {  						break;  					}  					int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  					Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  					string op1Str = "";  					string op2Str = "";  					if (thisEvent.Option1) {  						int op1len = data [byteCounter++];  						for (int i = 0; i < op1len; i++) {  							op1Str += (char)data [byteCounter++];  						}  					}  					if (thisEvent.Option2) {  						int op2len = data [byteCounter++];  						for (int i = 0; i < op2len; i++) {  							op2Str += (char)data [byteCounter++];  						}  					}  					contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  					ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  					break;  				default:  					break;  				}  			}  		}  	}  	catch (TimeoutException) {  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: while (_continue) {  	try {  		int message = _serialPort.ReadByte ();  		if (message == 0x7E) {  			XbeeRx incoming = new XbeeRx ();  			if (incoming.ParseIncomingMessage (_serialPort)) {  				if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  					remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  				}  				List<int> data = incoming.GetMessage ();  				ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  				int byteCounter;  				switch (data [0]) {  				case VERSION_BYTE:  					int version = data [1];  					XbeeTx64Bit transmit;  					List<byte> d = new List<byte> ();  					DataSqlConnection.mutex.WaitOne ();  					string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (ret == "") {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  					}  					else {  						int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  						if (version != databaseVersion) {  							d.Add (MISMATCH_BYTE);  							contactingNode.ResetNode ();  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  							DataSqlConnection.mutex.ReleaseMutex ();  						}  						else {  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  							d.Add (MATCH_BYTE);  							string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  							DataSqlConnection.mutex.ReleaseMutex ();  							string[] nodeInfo = node.Split ('|');  							contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  							contactingNode.SetName (nodeInfo [1]);  							contactingNode.SetAlias (nodeInfo [2]);  							contactingNode.SetBrand (nodeInfo [3]);  							contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  							contactingNode.SetHexAddress (nodeInfo [5]);  							contactingNode.SetRegistered (true);  							//nodeInfo[7] is IsForeign which we don't care about  							contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  							DataSqlConnection.mutex.WaitOne ();  							nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  							DataSqlConnection.mutex.ReleaseMutex ();  							foreach (string s in nodeInfo) {  								if (s == "")  									continue;  								string[] eventData = s.Split ('|');  								Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  								DataSqlConnection.mutex.WaitOne ();  								string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  								DataSqlConnection.mutex.ReleaseMutex ();  								if (optionsData == "") {  									contactingEvent.Option1 = false;  									contactingEvent.Option2 = false;  								}  								else {  									string[] ops = optionsData.Split ('\n');  									string[] opsVals;  									opsVals = ops [0].Split ('|');  									contactingEvent.Option1 = true;  									contactingEvent.SetOption1 (opsVals [3]);  									contactingEvent.SetOption1Value (opsVals [4]);  									if (ops.Length == 3) {  										opsVals = ops [1].Split ('|');  										contactingEvent.Option2 = true;  										contactingEvent.SetOption2 (opsVals [3]);  										contactingEvent.SetOption2Value (opsVals [4]);  									}  								}  								contactingNode.AddEvent (contactingEvent);  							}  						}  					}  					contactingNode.SetVersion ((byte)version);  					transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  					transmit.Send (_serialPort);  					break;  				/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  					string name = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							name += (char)data [i];  					}  					contactingNode.SetName (name);  					contactingNode.SetRegistered (true);  					break;  				/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  					string brand = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							brand += (char)data [i];  					}  					contactingNode.SetBrand (brand);  					AddNodeToDatabase (contactingNode);  					break;  				/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  					byteCounter = 1;  					int nameLen = data [byteCounter++];  					string eventName = "";  					for (int i = 0; i < nameLen; i++) {  						if ((char)data [byteCounter] != '\0')  							eventName += (char)data [byteCounter];  						byteCounter++;  					}  					int descLen = data [byteCounter++];  					string description = "";  					for (int i = 0; i < descLen; i++) {  						if ((char)data [byteCounter] != '\0')  							description += (char)data [byteCounter];  						byteCounter++;  					}  					ushort doubleByte = (ushort)(data [byteCounter++] << 8);  					doubleByte = (ushort)(doubleByte | data [byteCounter++]);  					int eventID = doubleByte & 0x3FF;  					bool triggerable = (doubleByte & 0x8000) > 0;  					bool option1Exists = (doubleByte & 0x800) > 0;  					bool option2Exists = (doubleByte & 0x400) > 0;  					Event e = new Event (eventName' description' eventID' triggerable);  					e.Option1 = option1Exists;  					e.Option2 = option2Exists;  					contactingNode.AddEvent (e);  					AddEventToDatabase (contactingNode' e);  					break;  				case OPTION_BYTE:  					byteCounter = 1;  					int eventId = (ushort)(data [byteCounter++] << 8);  					eventId = (ushort)(eventId | data [byteCounter++]);  					int opDescLen = data [byteCounter++];  					string opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  					currEvent.SetOption1 (opDescription);  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					if (currEvent.Option2) {  						opDescLen = data [byteCounter++];  						opDescription = "";  						for (int i = 0; i < opDescLen; i++) {  							if ((char)data [byteCounter] != '\0')  								opDescription += (char)data [byteCounter];  							byteCounter++;  						}  						AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					}  					break;  				case THROW_BYTE:  					byteCounter = 1;  					if (!contactingNode.GetRegistered ()) {  						break;  					}  					int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  					Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  					string op1Str = "";  					string op2Str = "";  					if (thisEvent.Option1) {  						int op1len = data [byteCounter++];  						for (int i = 0; i < op1len; i++) {  							op1Str += (char)data [byteCounter++];  						}  					}  					if (thisEvent.Option2) {  						int op2len = data [byteCounter++];  						for (int i = 0; i < op2len; i++) {  							op2Str += (char)data [byteCounter++];  						}  					}  					contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  					ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  					break;  				default:  					break;  				}  			}  		}  	}  	catch (TimeoutException) {  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: while (_continue) {  	try {  		int message = _serialPort.ReadByte ();  		if (message == 0x7E) {  			XbeeRx incoming = new XbeeRx ();  			if (incoming.ParseIncomingMessage (_serialPort)) {  				if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  					remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  				}  				List<int> data = incoming.GetMessage ();  				ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  				int byteCounter;  				switch (data [0]) {  				case VERSION_BYTE:  					int version = data [1];  					XbeeTx64Bit transmit;  					List<byte> d = new List<byte> ();  					DataSqlConnection.mutex.WaitOne ();  					string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (ret == "") {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  					}  					else {  						int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  						if (version != databaseVersion) {  							d.Add (MISMATCH_BYTE);  							contactingNode.ResetNode ();  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  							DataSqlConnection.mutex.ReleaseMutex ();  						}  						else {  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  							d.Add (MATCH_BYTE);  							string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  							DataSqlConnection.mutex.ReleaseMutex ();  							string[] nodeInfo = node.Split ('|');  							contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  							contactingNode.SetName (nodeInfo [1]);  							contactingNode.SetAlias (nodeInfo [2]);  							contactingNode.SetBrand (nodeInfo [3]);  							contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  							contactingNode.SetHexAddress (nodeInfo [5]);  							contactingNode.SetRegistered (true);  							//nodeInfo[7] is IsForeign which we don't care about  							contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  							DataSqlConnection.mutex.WaitOne ();  							nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  							DataSqlConnection.mutex.ReleaseMutex ();  							foreach (string s in nodeInfo) {  								if (s == "")  									continue;  								string[] eventData = s.Split ('|');  								Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  								DataSqlConnection.mutex.WaitOne ();  								string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  								DataSqlConnection.mutex.ReleaseMutex ();  								if (optionsData == "") {  									contactingEvent.Option1 = false;  									contactingEvent.Option2 = false;  								}  								else {  									string[] ops = optionsData.Split ('\n');  									string[] opsVals;  									opsVals = ops [0].Split ('|');  									contactingEvent.Option1 = true;  									contactingEvent.SetOption1 (opsVals [3]);  									contactingEvent.SetOption1Value (opsVals [4]);  									if (ops.Length == 3) {  										opsVals = ops [1].Split ('|');  										contactingEvent.Option2 = true;  										contactingEvent.SetOption2 (opsVals [3]);  										contactingEvent.SetOption2Value (opsVals [4]);  									}  								}  								contactingNode.AddEvent (contactingEvent);  							}  						}  					}  					contactingNode.SetVersion ((byte)version);  					transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  					transmit.Send (_serialPort);  					break;  				/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  					string name = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							name += (char)data [i];  					}  					contactingNode.SetName (name);  					contactingNode.SetRegistered (true);  					break;  				/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  					string brand = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							brand += (char)data [i];  					}  					contactingNode.SetBrand (brand);  					AddNodeToDatabase (contactingNode);  					break;  				/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  					byteCounter = 1;  					int nameLen = data [byteCounter++];  					string eventName = "";  					for (int i = 0; i < nameLen; i++) {  						if ((char)data [byteCounter] != '\0')  							eventName += (char)data [byteCounter];  						byteCounter++;  					}  					int descLen = data [byteCounter++];  					string description = "";  					for (int i = 0; i < descLen; i++) {  						if ((char)data [byteCounter] != '\0')  							description += (char)data [byteCounter];  						byteCounter++;  					}  					ushort doubleByte = (ushort)(data [byteCounter++] << 8);  					doubleByte = (ushort)(doubleByte | data [byteCounter++]);  					int eventID = doubleByte & 0x3FF;  					bool triggerable = (doubleByte & 0x8000) > 0;  					bool option1Exists = (doubleByte & 0x800) > 0;  					bool option2Exists = (doubleByte & 0x400) > 0;  					Event e = new Event (eventName' description' eventID' triggerable);  					e.Option1 = option1Exists;  					e.Option2 = option2Exists;  					contactingNode.AddEvent (e);  					AddEventToDatabase (contactingNode' e);  					break;  				case OPTION_BYTE:  					byteCounter = 1;  					int eventId = (ushort)(data [byteCounter++] << 8);  					eventId = (ushort)(eventId | data [byteCounter++]);  					int opDescLen = data [byteCounter++];  					string opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  					currEvent.SetOption1 (opDescription);  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					if (currEvent.Option2) {  						opDescLen = data [byteCounter++];  						opDescription = "";  						for (int i = 0; i < opDescLen; i++) {  							if ((char)data [byteCounter] != '\0')  								opDescription += (char)data [byteCounter];  							byteCounter++;  						}  						AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					}  					break;  				case THROW_BYTE:  					byteCounter = 1;  					if (!contactingNode.GetRegistered ()) {  						break;  					}  					int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  					Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  					string op1Str = "";  					string op2Str = "";  					if (thisEvent.Option1) {  						int op1len = data [byteCounter++];  						for (int i = 0; i < op1len; i++) {  							op1Str += (char)data [byteCounter++];  						}  					}  					if (thisEvent.Option2) {  						int op2len = data [byteCounter++];  						for (int i = 0; i < op2len; i++) {  							op2Str += (char)data [byteCounter++];  						}  					}  					contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  					ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  					break;  				default:  					break;  				}  			}  		}  	}  	catch (TimeoutException) {  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: while (_continue) {  	try {  		int message = _serialPort.ReadByte ();  		if (message == 0x7E) {  			XbeeRx incoming = new XbeeRx ();  			if (incoming.ParseIncomingMessage (_serialPort)) {  				if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  					remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  				}  				List<int> data = incoming.GetMessage ();  				ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  				int byteCounter;  				switch (data [0]) {  				case VERSION_BYTE:  					int version = data [1];  					XbeeTx64Bit transmit;  					List<byte> d = new List<byte> ();  					DataSqlConnection.mutex.WaitOne ();  					string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (ret == "") {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  					}  					else {  						int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  						if (version != databaseVersion) {  							d.Add (MISMATCH_BYTE);  							contactingNode.ResetNode ();  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  							DataSqlConnection.mutex.ReleaseMutex ();  						}  						else {  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  							d.Add (MATCH_BYTE);  							string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  							DataSqlConnection.mutex.ReleaseMutex ();  							string[] nodeInfo = node.Split ('|');  							contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  							contactingNode.SetName (nodeInfo [1]);  							contactingNode.SetAlias (nodeInfo [2]);  							contactingNode.SetBrand (nodeInfo [3]);  							contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  							contactingNode.SetHexAddress (nodeInfo [5]);  							contactingNode.SetRegistered (true);  							//nodeInfo[7] is IsForeign which we don't care about  							contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  							DataSqlConnection.mutex.WaitOne ();  							nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  							DataSqlConnection.mutex.ReleaseMutex ();  							foreach (string s in nodeInfo) {  								if (s == "")  									continue;  								string[] eventData = s.Split ('|');  								Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  								DataSqlConnection.mutex.WaitOne ();  								string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  								DataSqlConnection.mutex.ReleaseMutex ();  								if (optionsData == "") {  									contactingEvent.Option1 = false;  									contactingEvent.Option2 = false;  								}  								else {  									string[] ops = optionsData.Split ('\n');  									string[] opsVals;  									opsVals = ops [0].Split ('|');  									contactingEvent.Option1 = true;  									contactingEvent.SetOption1 (opsVals [3]);  									contactingEvent.SetOption1Value (opsVals [4]);  									if (ops.Length == 3) {  										opsVals = ops [1].Split ('|');  										contactingEvent.Option2 = true;  										contactingEvent.SetOption2 (opsVals [3]);  										contactingEvent.SetOption2Value (opsVals [4]);  									}  								}  								contactingNode.AddEvent (contactingEvent);  							}  						}  					}  					contactingNode.SetVersion ((byte)version);  					transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  					transmit.Send (_serialPort);  					break;  				/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  					string name = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							name += (char)data [i];  					}  					contactingNode.SetName (name);  					contactingNode.SetRegistered (true);  					break;  				/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  					string brand = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							brand += (char)data [i];  					}  					contactingNode.SetBrand (brand);  					AddNodeToDatabase (contactingNode);  					break;  				/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  					byteCounter = 1;  					int nameLen = data [byteCounter++];  					string eventName = "";  					for (int i = 0; i < nameLen; i++) {  						if ((char)data [byteCounter] != '\0')  							eventName += (char)data [byteCounter];  						byteCounter++;  					}  					int descLen = data [byteCounter++];  					string description = "";  					for (int i = 0; i < descLen; i++) {  						if ((char)data [byteCounter] != '\0')  							description += (char)data [byteCounter];  						byteCounter++;  					}  					ushort doubleByte = (ushort)(data [byteCounter++] << 8);  					doubleByte = (ushort)(doubleByte | data [byteCounter++]);  					int eventID = doubleByte & 0x3FF;  					bool triggerable = (doubleByte & 0x8000) > 0;  					bool option1Exists = (doubleByte & 0x800) > 0;  					bool option2Exists = (doubleByte & 0x400) > 0;  					Event e = new Event (eventName' description' eventID' triggerable);  					e.Option1 = option1Exists;  					e.Option2 = option2Exists;  					contactingNode.AddEvent (e);  					AddEventToDatabase (contactingNode' e);  					break;  				case OPTION_BYTE:  					byteCounter = 1;  					int eventId = (ushort)(data [byteCounter++] << 8);  					eventId = (ushort)(eventId | data [byteCounter++]);  					int opDescLen = data [byteCounter++];  					string opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  					currEvent.SetOption1 (opDescription);  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					if (currEvent.Option2) {  						opDescLen = data [byteCounter++];  						opDescription = "";  						for (int i = 0; i < opDescLen; i++) {  							if ((char)data [byteCounter] != '\0')  								opDescription += (char)data [byteCounter];  							byteCounter++;  						}  						AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					}  					break;  				case THROW_BYTE:  					byteCounter = 1;  					if (!contactingNode.GetRegistered ()) {  						break;  					}  					int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  					Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  					string op1Str = "";  					string op2Str = "";  					if (thisEvent.Option1) {  						int op1len = data [byteCounter++];  						for (int i = 0; i < op1len; i++) {  							op1Str += (char)data [byteCounter++];  						}  					}  					if (thisEvent.Option2) {  						int op2len = data [byteCounter++];  						for (int i = 0; i < op2len; i++) {  							op2Str += (char)data [byteCounter++];  						}  					}  					contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  					ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  					break;  				default:  					break;  				}  			}  		}  	}  	catch (TimeoutException) {  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: while (_continue) {  	try {  		int message = _serialPort.ReadByte ();  		if (message == 0x7E) {  			XbeeRx incoming = new XbeeRx ();  			if (incoming.ParseIncomingMessage (_serialPort)) {  				if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  					remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  				}  				List<int> data = incoming.GetMessage ();  				ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  				int byteCounter;  				switch (data [0]) {  				case VERSION_BYTE:  					int version = data [1];  					XbeeTx64Bit transmit;  					List<byte> d = new List<byte> ();  					DataSqlConnection.mutex.WaitOne ();  					string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (ret == "") {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  					}  					else {  						int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  						if (version != databaseVersion) {  							d.Add (MISMATCH_BYTE);  							contactingNode.ResetNode ();  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  							DataSqlConnection.mutex.ReleaseMutex ();  						}  						else {  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  							d.Add (MATCH_BYTE);  							string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  							DataSqlConnection.mutex.ReleaseMutex ();  							string[] nodeInfo = node.Split ('|');  							contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  							contactingNode.SetName (nodeInfo [1]);  							contactingNode.SetAlias (nodeInfo [2]);  							contactingNode.SetBrand (nodeInfo [3]);  							contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  							contactingNode.SetHexAddress (nodeInfo [5]);  							contactingNode.SetRegistered (true);  							//nodeInfo[7] is IsForeign which we don't care about  							contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  							DataSqlConnection.mutex.WaitOne ();  							nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  							DataSqlConnection.mutex.ReleaseMutex ();  							foreach (string s in nodeInfo) {  								if (s == "")  									continue;  								string[] eventData = s.Split ('|');  								Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  								DataSqlConnection.mutex.WaitOne ();  								string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  								DataSqlConnection.mutex.ReleaseMutex ();  								if (optionsData == "") {  									contactingEvent.Option1 = false;  									contactingEvent.Option2 = false;  								}  								else {  									string[] ops = optionsData.Split ('\n');  									string[] opsVals;  									opsVals = ops [0].Split ('|');  									contactingEvent.Option1 = true;  									contactingEvent.SetOption1 (opsVals [3]);  									contactingEvent.SetOption1Value (opsVals [4]);  									if (ops.Length == 3) {  										opsVals = ops [1].Split ('|');  										contactingEvent.Option2 = true;  										contactingEvent.SetOption2 (opsVals [3]);  										contactingEvent.SetOption2Value (opsVals [4]);  									}  								}  								contactingNode.AddEvent (contactingEvent);  							}  						}  					}  					contactingNode.SetVersion ((byte)version);  					transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  					transmit.Send (_serialPort);  					break;  				/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  					string name = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							name += (char)data [i];  					}  					contactingNode.SetName (name);  					contactingNode.SetRegistered (true);  					break;  				/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  					string brand = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							brand += (char)data [i];  					}  					contactingNode.SetBrand (brand);  					AddNodeToDatabase (contactingNode);  					break;  				/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  					byteCounter = 1;  					int nameLen = data [byteCounter++];  					string eventName = "";  					for (int i = 0; i < nameLen; i++) {  						if ((char)data [byteCounter] != '\0')  							eventName += (char)data [byteCounter];  						byteCounter++;  					}  					int descLen = data [byteCounter++];  					string description = "";  					for (int i = 0; i < descLen; i++) {  						if ((char)data [byteCounter] != '\0')  							description += (char)data [byteCounter];  						byteCounter++;  					}  					ushort doubleByte = (ushort)(data [byteCounter++] << 8);  					doubleByte = (ushort)(doubleByte | data [byteCounter++]);  					int eventID = doubleByte & 0x3FF;  					bool triggerable = (doubleByte & 0x8000) > 0;  					bool option1Exists = (doubleByte & 0x800) > 0;  					bool option2Exists = (doubleByte & 0x400) > 0;  					Event e = new Event (eventName' description' eventID' triggerable);  					e.Option1 = option1Exists;  					e.Option2 = option2Exists;  					contactingNode.AddEvent (e);  					AddEventToDatabase (contactingNode' e);  					break;  				case OPTION_BYTE:  					byteCounter = 1;  					int eventId = (ushort)(data [byteCounter++] << 8);  					eventId = (ushort)(eventId | data [byteCounter++]);  					int opDescLen = data [byteCounter++];  					string opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  					currEvent.SetOption1 (opDescription);  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					if (currEvent.Option2) {  						opDescLen = data [byteCounter++];  						opDescription = "";  						for (int i = 0; i < opDescLen; i++) {  							if ((char)data [byteCounter] != '\0')  								opDescription += (char)data [byteCounter];  							byteCounter++;  						}  						AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					}  					break;  				case THROW_BYTE:  					byteCounter = 1;  					if (!contactingNode.GetRegistered ()) {  						break;  					}  					int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  					Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  					string op1Str = "";  					string op2Str = "";  					if (thisEvent.Option1) {  						int op1len = data [byteCounter++];  						for (int i = 0; i < op1len; i++) {  							op1Str += (char)data [byteCounter++];  						}  					}  					if (thisEvent.Option2) {  						int op2len = data [byteCounter++];  						for (int i = 0; i < op2len; i++) {  							op2Str += (char)data [byteCounter++];  						}  					}  					contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  					ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  					break;  				default:  					break;  				}  			}  		}  	}  	catch (TimeoutException) {  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: while (_continue) {  	try {  		int message = _serialPort.ReadByte ();  		if (message == 0x7E) {  			XbeeRx incoming = new XbeeRx ();  			if (incoming.ParseIncomingMessage (_serialPort)) {  				if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  					remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  				}  				List<int> data = incoming.GetMessage ();  				ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  				int byteCounter;  				switch (data [0]) {  				case VERSION_BYTE:  					int version = data [1];  					XbeeTx64Bit transmit;  					List<byte> d = new List<byte> ();  					DataSqlConnection.mutex.WaitOne ();  					string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (ret == "") {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  					}  					else {  						int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  						if (version != databaseVersion) {  							d.Add (MISMATCH_BYTE);  							contactingNode.ResetNode ();  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  							DataSqlConnection.mutex.ReleaseMutex ();  						}  						else {  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  							d.Add (MATCH_BYTE);  							string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  							DataSqlConnection.mutex.ReleaseMutex ();  							string[] nodeInfo = node.Split ('|');  							contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  							contactingNode.SetName (nodeInfo [1]);  							contactingNode.SetAlias (nodeInfo [2]);  							contactingNode.SetBrand (nodeInfo [3]);  							contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  							contactingNode.SetHexAddress (nodeInfo [5]);  							contactingNode.SetRegistered (true);  							//nodeInfo[7] is IsForeign which we don't care about  							contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  							DataSqlConnection.mutex.WaitOne ();  							nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  							DataSqlConnection.mutex.ReleaseMutex ();  							foreach (string s in nodeInfo) {  								if (s == "")  									continue;  								string[] eventData = s.Split ('|');  								Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  								DataSqlConnection.mutex.WaitOne ();  								string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  								DataSqlConnection.mutex.ReleaseMutex ();  								if (optionsData == "") {  									contactingEvent.Option1 = false;  									contactingEvent.Option2 = false;  								}  								else {  									string[] ops = optionsData.Split ('\n');  									string[] opsVals;  									opsVals = ops [0].Split ('|');  									contactingEvent.Option1 = true;  									contactingEvent.SetOption1 (opsVals [3]);  									contactingEvent.SetOption1Value (opsVals [4]);  									if (ops.Length == 3) {  										opsVals = ops [1].Split ('|');  										contactingEvent.Option2 = true;  										contactingEvent.SetOption2 (opsVals [3]);  										contactingEvent.SetOption2Value (opsVals [4]);  									}  								}  								contactingNode.AddEvent (contactingEvent);  							}  						}  					}  					contactingNode.SetVersion ((byte)version);  					transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  					transmit.Send (_serialPort);  					break;  				/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  					string name = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							name += (char)data [i];  					}  					contactingNode.SetName (name);  					contactingNode.SetRegistered (true);  					break;  				/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  					string brand = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							brand += (char)data [i];  					}  					contactingNode.SetBrand (brand);  					AddNodeToDatabase (contactingNode);  					break;  				/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  					byteCounter = 1;  					int nameLen = data [byteCounter++];  					string eventName = "";  					for (int i = 0; i < nameLen; i++) {  						if ((char)data [byteCounter] != '\0')  							eventName += (char)data [byteCounter];  						byteCounter++;  					}  					int descLen = data [byteCounter++];  					string description = "";  					for (int i = 0; i < descLen; i++) {  						if ((char)data [byteCounter] != '\0')  							description += (char)data [byteCounter];  						byteCounter++;  					}  					ushort doubleByte = (ushort)(data [byteCounter++] << 8);  					doubleByte = (ushort)(doubleByte | data [byteCounter++]);  					int eventID = doubleByte & 0x3FF;  					bool triggerable = (doubleByte & 0x8000) > 0;  					bool option1Exists = (doubleByte & 0x800) > 0;  					bool option2Exists = (doubleByte & 0x400) > 0;  					Event e = new Event (eventName' description' eventID' triggerable);  					e.Option1 = option1Exists;  					e.Option2 = option2Exists;  					contactingNode.AddEvent (e);  					AddEventToDatabase (contactingNode' e);  					break;  				case OPTION_BYTE:  					byteCounter = 1;  					int eventId = (ushort)(data [byteCounter++] << 8);  					eventId = (ushort)(eventId | data [byteCounter++]);  					int opDescLen = data [byteCounter++];  					string opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  					currEvent.SetOption1 (opDescription);  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					if (currEvent.Option2) {  						opDescLen = data [byteCounter++];  						opDescription = "";  						for (int i = 0; i < opDescLen; i++) {  							if ((char)data [byteCounter] != '\0')  								opDescription += (char)data [byteCounter];  							byteCounter++;  						}  						AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					}  					break;  				case THROW_BYTE:  					byteCounter = 1;  					if (!contactingNode.GetRegistered ()) {  						break;  					}  					int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  					Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  					string op1Str = "";  					string op2Str = "";  					if (thisEvent.Option1) {  						int op1len = data [byteCounter++];  						for (int i = 0; i < op1len; i++) {  							op1Str += (char)data [byteCounter++];  						}  					}  					if (thisEvent.Option2) {  						int op2len = data [byteCounter++];  						for (int i = 0; i < op2len; i++) {  							op2Str += (char)data [byteCounter++];  						}  					}  					contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  					ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  					break;  				default:  					break;  				}  			}  		}  	}  	catch (TimeoutException) {  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: while (_continue) {  	try {  		int message = _serialPort.ReadByte ();  		if (message == 0x7E) {  			XbeeRx incoming = new XbeeRx ();  			if (incoming.ParseIncomingMessage (_serialPort)) {  				if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  					remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  				}  				List<int> data = incoming.GetMessage ();  				ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  				int byteCounter;  				switch (data [0]) {  				case VERSION_BYTE:  					int version = data [1];  					XbeeTx64Bit transmit;  					List<byte> d = new List<byte> ();  					DataSqlConnection.mutex.WaitOne ();  					string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (ret == "") {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  					}  					else {  						int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  						if (version != databaseVersion) {  							d.Add (MISMATCH_BYTE);  							contactingNode.ResetNode ();  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  							DataSqlConnection.mutex.ReleaseMutex ();  						}  						else {  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  							d.Add (MATCH_BYTE);  							string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  							DataSqlConnection.mutex.ReleaseMutex ();  							string[] nodeInfo = node.Split ('|');  							contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  							contactingNode.SetName (nodeInfo [1]);  							contactingNode.SetAlias (nodeInfo [2]);  							contactingNode.SetBrand (nodeInfo [3]);  							contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  							contactingNode.SetHexAddress (nodeInfo [5]);  							contactingNode.SetRegistered (true);  							//nodeInfo[7] is IsForeign which we don't care about  							contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  							DataSqlConnection.mutex.WaitOne ();  							nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  							DataSqlConnection.mutex.ReleaseMutex ();  							foreach (string s in nodeInfo) {  								if (s == "")  									continue;  								string[] eventData = s.Split ('|');  								Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  								DataSqlConnection.mutex.WaitOne ();  								string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  								DataSqlConnection.mutex.ReleaseMutex ();  								if (optionsData == "") {  									contactingEvent.Option1 = false;  									contactingEvent.Option2 = false;  								}  								else {  									string[] ops = optionsData.Split ('\n');  									string[] opsVals;  									opsVals = ops [0].Split ('|');  									contactingEvent.Option1 = true;  									contactingEvent.SetOption1 (opsVals [3]);  									contactingEvent.SetOption1Value (opsVals [4]);  									if (ops.Length == 3) {  										opsVals = ops [1].Split ('|');  										contactingEvent.Option2 = true;  										contactingEvent.SetOption2 (opsVals [3]);  										contactingEvent.SetOption2Value (opsVals [4]);  									}  								}  								contactingNode.AddEvent (contactingEvent);  							}  						}  					}  					contactingNode.SetVersion ((byte)version);  					transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  					transmit.Send (_serialPort);  					break;  				/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  					string name = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							name += (char)data [i];  					}  					contactingNode.SetName (name);  					contactingNode.SetRegistered (true);  					break;  				/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  					string brand = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							brand += (char)data [i];  					}  					contactingNode.SetBrand (brand);  					AddNodeToDatabase (contactingNode);  					break;  				/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  					byteCounter = 1;  					int nameLen = data [byteCounter++];  					string eventName = "";  					for (int i = 0; i < nameLen; i++) {  						if ((char)data [byteCounter] != '\0')  							eventName += (char)data [byteCounter];  						byteCounter++;  					}  					int descLen = data [byteCounter++];  					string description = "";  					for (int i = 0; i < descLen; i++) {  						if ((char)data [byteCounter] != '\0')  							description += (char)data [byteCounter];  						byteCounter++;  					}  					ushort doubleByte = (ushort)(data [byteCounter++] << 8);  					doubleByte = (ushort)(doubleByte | data [byteCounter++]);  					int eventID = doubleByte & 0x3FF;  					bool triggerable = (doubleByte & 0x8000) > 0;  					bool option1Exists = (doubleByte & 0x800) > 0;  					bool option2Exists = (doubleByte & 0x400) > 0;  					Event e = new Event (eventName' description' eventID' triggerable);  					e.Option1 = option1Exists;  					e.Option2 = option2Exists;  					contactingNode.AddEvent (e);  					AddEventToDatabase (contactingNode' e);  					break;  				case OPTION_BYTE:  					byteCounter = 1;  					int eventId = (ushort)(data [byteCounter++] << 8);  					eventId = (ushort)(eventId | data [byteCounter++]);  					int opDescLen = data [byteCounter++];  					string opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  					currEvent.SetOption1 (opDescription);  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					if (currEvent.Option2) {  						opDescLen = data [byteCounter++];  						opDescription = "";  						for (int i = 0; i < opDescLen; i++) {  							if ((char)data [byteCounter] != '\0')  								opDescription += (char)data [byteCounter];  							byteCounter++;  						}  						AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					}  					break;  				case THROW_BYTE:  					byteCounter = 1;  					if (!contactingNode.GetRegistered ()) {  						break;  					}  					int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  					Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  					string op1Str = "";  					string op2Str = "";  					if (thisEvent.Option1) {  						int op1len = data [byteCounter++];  						for (int i = 0; i < op1len; i++) {  							op1Str += (char)data [byteCounter++];  						}  					}  					if (thisEvent.Option2) {  						int op2len = data [byteCounter++];  						for (int i = 0; i < op2len; i++) {  							op2Str += (char)data [byteCounter++];  						}  					}  					contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  					ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  					break;  				default:  					break;  				}  			}  		}  	}  	catch (TimeoutException) {  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: while (_continue) {  	try {  		int message = _serialPort.ReadByte ();  		if (message == 0x7E) {  			XbeeRx incoming = new XbeeRx ();  			if (incoming.ParseIncomingMessage (_serialPort)) {  				if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  					remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  				}  				List<int> data = incoming.GetMessage ();  				ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  				int byteCounter;  				switch (data [0]) {  				case VERSION_BYTE:  					int version = data [1];  					XbeeTx64Bit transmit;  					List<byte> d = new List<byte> ();  					DataSqlConnection.mutex.WaitOne ();  					string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (ret == "") {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  					}  					else {  						int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  						if (version != databaseVersion) {  							d.Add (MISMATCH_BYTE);  							contactingNode.ResetNode ();  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  							DataSqlConnection.mutex.ReleaseMutex ();  						}  						else {  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  							d.Add (MATCH_BYTE);  							string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  							DataSqlConnection.mutex.ReleaseMutex ();  							string[] nodeInfo = node.Split ('|');  							contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  							contactingNode.SetName (nodeInfo [1]);  							contactingNode.SetAlias (nodeInfo [2]);  							contactingNode.SetBrand (nodeInfo [3]);  							contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  							contactingNode.SetHexAddress (nodeInfo [5]);  							contactingNode.SetRegistered (true);  							//nodeInfo[7] is IsForeign which we don't care about  							contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  							DataSqlConnection.mutex.WaitOne ();  							nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  							DataSqlConnection.mutex.ReleaseMutex ();  							foreach (string s in nodeInfo) {  								if (s == "")  									continue;  								string[] eventData = s.Split ('|');  								Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  								DataSqlConnection.mutex.WaitOne ();  								string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  								DataSqlConnection.mutex.ReleaseMutex ();  								if (optionsData == "") {  									contactingEvent.Option1 = false;  									contactingEvent.Option2 = false;  								}  								else {  									string[] ops = optionsData.Split ('\n');  									string[] opsVals;  									opsVals = ops [0].Split ('|');  									contactingEvent.Option1 = true;  									contactingEvent.SetOption1 (opsVals [3]);  									contactingEvent.SetOption1Value (opsVals [4]);  									if (ops.Length == 3) {  										opsVals = ops [1].Split ('|');  										contactingEvent.Option2 = true;  										contactingEvent.SetOption2 (opsVals [3]);  										contactingEvent.SetOption2Value (opsVals [4]);  									}  								}  								contactingNode.AddEvent (contactingEvent);  							}  						}  					}  					contactingNode.SetVersion ((byte)version);  					transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  					transmit.Send (_serialPort);  					break;  				/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  					string name = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							name += (char)data [i];  					}  					contactingNode.SetName (name);  					contactingNode.SetRegistered (true);  					break;  				/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  					string brand = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							brand += (char)data [i];  					}  					contactingNode.SetBrand (brand);  					AddNodeToDatabase (contactingNode);  					break;  				/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  					byteCounter = 1;  					int nameLen = data [byteCounter++];  					string eventName = "";  					for (int i = 0; i < nameLen; i++) {  						if ((char)data [byteCounter] != '\0')  							eventName += (char)data [byteCounter];  						byteCounter++;  					}  					int descLen = data [byteCounter++];  					string description = "";  					for (int i = 0; i < descLen; i++) {  						if ((char)data [byteCounter] != '\0')  							description += (char)data [byteCounter];  						byteCounter++;  					}  					ushort doubleByte = (ushort)(data [byteCounter++] << 8);  					doubleByte = (ushort)(doubleByte | data [byteCounter++]);  					int eventID = doubleByte & 0x3FF;  					bool triggerable = (doubleByte & 0x8000) > 0;  					bool option1Exists = (doubleByte & 0x800) > 0;  					bool option2Exists = (doubleByte & 0x400) > 0;  					Event e = new Event (eventName' description' eventID' triggerable);  					e.Option1 = option1Exists;  					e.Option2 = option2Exists;  					contactingNode.AddEvent (e);  					AddEventToDatabase (contactingNode' e);  					break;  				case OPTION_BYTE:  					byteCounter = 1;  					int eventId = (ushort)(data [byteCounter++] << 8);  					eventId = (ushort)(eventId | data [byteCounter++]);  					int opDescLen = data [byteCounter++];  					string opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  					currEvent.SetOption1 (opDescription);  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					if (currEvent.Option2) {  						opDescLen = data [byteCounter++];  						opDescription = "";  						for (int i = 0; i < opDescLen; i++) {  							if ((char)data [byteCounter] != '\0')  								opDescription += (char)data [byteCounter];  							byteCounter++;  						}  						AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					}  					break;  				case THROW_BYTE:  					byteCounter = 1;  					if (!contactingNode.GetRegistered ()) {  						break;  					}  					int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  					Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  					string op1Str = "";  					string op2Str = "";  					if (thisEvent.Option1) {  						int op1len = data [byteCounter++];  						for (int i = 0; i < op1len; i++) {  							op1Str += (char)data [byteCounter++];  						}  					}  					if (thisEvent.Option2) {  						int op2len = data [byteCounter++];  						for (int i = 0; i < op2len; i++) {  							op2Str += (char)data [byteCounter++];  						}  					}  					contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  					ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  					break;  				default:  					break;  				}  			}  		}  	}  	catch (TimeoutException) {  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: while (_continue) {  	try {  		int message = _serialPort.ReadByte ();  		if (message == 0x7E) {  			XbeeRx incoming = new XbeeRx ();  			if (incoming.ParseIncomingMessage (_serialPort)) {  				if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  					remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  				}  				List<int> data = incoming.GetMessage ();  				ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  				int byteCounter;  				switch (data [0]) {  				case VERSION_BYTE:  					int version = data [1];  					XbeeTx64Bit transmit;  					List<byte> d = new List<byte> ();  					DataSqlConnection.mutex.WaitOne ();  					string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (ret == "") {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  					}  					else {  						int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  						if (version != databaseVersion) {  							d.Add (MISMATCH_BYTE);  							contactingNode.ResetNode ();  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  							DataSqlConnection.mutex.ReleaseMutex ();  						}  						else {  							DataSqlConnection.mutex.WaitOne ();  							DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  							d.Add (MATCH_BYTE);  							string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  							DataSqlConnection.mutex.ReleaseMutex ();  							string[] nodeInfo = node.Split ('|');  							contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  							contactingNode.SetName (nodeInfo [1]);  							contactingNode.SetAlias (nodeInfo [2]);  							contactingNode.SetBrand (nodeInfo [3]);  							contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  							contactingNode.SetHexAddress (nodeInfo [5]);  							contactingNode.SetRegistered (true);  							//nodeInfo[7] is IsForeign which we don't care about  							contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  							DataSqlConnection.mutex.WaitOne ();  							nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  							DataSqlConnection.mutex.ReleaseMutex ();  							foreach (string s in nodeInfo) {  								if (s == "")  									continue;  								string[] eventData = s.Split ('|');  								Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  								DataSqlConnection.mutex.WaitOne ();  								string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  								DataSqlConnection.mutex.ReleaseMutex ();  								if (optionsData == "") {  									contactingEvent.Option1 = false;  									contactingEvent.Option2 = false;  								}  								else {  									string[] ops = optionsData.Split ('\n');  									string[] opsVals;  									opsVals = ops [0].Split ('|');  									contactingEvent.Option1 = true;  									contactingEvent.SetOption1 (opsVals [3]);  									contactingEvent.SetOption1Value (opsVals [4]);  									if (ops.Length == 3) {  										opsVals = ops [1].Split ('|');  										contactingEvent.Option2 = true;  										contactingEvent.SetOption2 (opsVals [3]);  										contactingEvent.SetOption2Value (opsVals [4]);  									}  								}  								contactingNode.AddEvent (contactingEvent);  							}  						}  					}  					contactingNode.SetVersion ((byte)version);  					transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  					transmit.Send (_serialPort);  					break;  				/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  					string name = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							name += (char)data [i];  					}  					contactingNode.SetName (name);  					contactingNode.SetRegistered (true);  					break;  				/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  					string brand = "";  					for (int i = 1; i < data.Count; i++) {  						if ((char)data [i] != '\0')  							brand += (char)data [i];  					}  					contactingNode.SetBrand (brand);  					AddNodeToDatabase (contactingNode);  					break;  				/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  					byteCounter = 1;  					int nameLen = data [byteCounter++];  					string eventName = "";  					for (int i = 0; i < nameLen; i++) {  						if ((char)data [byteCounter] != '\0')  							eventName += (char)data [byteCounter];  						byteCounter++;  					}  					int descLen = data [byteCounter++];  					string description = "";  					for (int i = 0; i < descLen; i++) {  						if ((char)data [byteCounter] != '\0')  							description += (char)data [byteCounter];  						byteCounter++;  					}  					ushort doubleByte = (ushort)(data [byteCounter++] << 8);  					doubleByte = (ushort)(doubleByte | data [byteCounter++]);  					int eventID = doubleByte & 0x3FF;  					bool triggerable = (doubleByte & 0x8000) > 0;  					bool option1Exists = (doubleByte & 0x800) > 0;  					bool option2Exists = (doubleByte & 0x400) > 0;  					Event e = new Event (eventName' description' eventID' triggerable);  					e.Option1 = option1Exists;  					e.Option2 = option2Exists;  					contactingNode.AddEvent (e);  					AddEventToDatabase (contactingNode' e);  					break;  				case OPTION_BYTE:  					byteCounter = 1;  					int eventId = (ushort)(data [byteCounter++] << 8);  					eventId = (ushort)(eventId | data [byteCounter++]);  					int opDescLen = data [byteCounter++];  					string opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  					currEvent.SetOption1 (opDescription);  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					if (currEvent.Option2) {  						opDescLen = data [byteCounter++];  						opDescription = "";  						for (int i = 0; i < opDescLen; i++) {  							if ((char)data [byteCounter] != '\0')  								opDescription += (char)data [byteCounter];  							byteCounter++;  						}  						AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  					}  					break;  				case THROW_BYTE:  					byteCounter = 1;  					if (!contactingNode.GetRegistered ()) {  						break;  					}  					int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  					Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  					string op1Str = "";  					string op2Str = "";  					if (thisEvent.Option1) {  						int op1len = data [byteCounter++];  						for (int i = 0; i < op1len; i++) {  							op1Str += (char)data [byteCounter++];  						}  					}  					if (thisEvent.Option2) {  						int op2len = data [byteCounter++];  						for (int i = 0; i < op2len; i++) {  							op2Str += (char)data [byteCounter++];  						}  					}  					contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  					ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  					break;  				default:  					break;  				}  			}  		}  	}  	catch (TimeoutException) {  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: try {  	int message = _serialPort.ReadByte ();  	if (message == 0x7E) {  		XbeeRx incoming = new XbeeRx ();  		if (incoming.ParseIncomingMessage (_serialPort)) {  			if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  				remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  			}  			List<int> data = incoming.GetMessage ();  			ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  			int byteCounter;  			switch (data [0]) {  			case VERSION_BYTE:  				int version = data [1];  				XbeeTx64Bit transmit;  				List<byte> d = new List<byte> ();  				DataSqlConnection.mutex.WaitOne ();  				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (ret == "") {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  				}  				else {  					int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  					if (version != databaseVersion) {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  						DataSqlConnection.mutex.ReleaseMutex ();  					}  					else {  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  						d.Add (MATCH_BYTE);  						string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  						DataSqlConnection.mutex.ReleaseMutex ();  						string[] nodeInfo = node.Split ('|');  						contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  						contactingNode.SetName (nodeInfo [1]);  						contactingNode.SetAlias (nodeInfo [2]);  						contactingNode.SetBrand (nodeInfo [3]);  						contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  						contactingNode.SetHexAddress (nodeInfo [5]);  						contactingNode.SetRegistered (true);  						//nodeInfo[7] is IsForeign which we don't care about  						contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  						DataSqlConnection.mutex.WaitOne ();  						nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  						DataSqlConnection.mutex.ReleaseMutex ();  						foreach (string s in nodeInfo) {  							if (s == "")  								continue;  							string[] eventData = s.Split ('|');  							Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  							DataSqlConnection.mutex.WaitOne ();  							string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  							DataSqlConnection.mutex.ReleaseMutex ();  							if (optionsData == "") {  								contactingEvent.Option1 = false;  								contactingEvent.Option2 = false;  							}  							else {  								string[] ops = optionsData.Split ('\n');  								string[] opsVals;  								opsVals = ops [0].Split ('|');  								contactingEvent.Option1 = true;  								contactingEvent.SetOption1 (opsVals [3]);  								contactingEvent.SetOption1Value (opsVals [4]);  								if (ops.Length == 3) {  									opsVals = ops [1].Split ('|');  									contactingEvent.Option2 = true;  									contactingEvent.SetOption2 (opsVals [3]);  									contactingEvent.SetOption2Value (opsVals [4]);  								}  							}  							contactingNode.AddEvent (contactingEvent);  						}  					}  				}  				contactingNode.SetVersion ((byte)version);  				transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  				transmit.Send (_serialPort);  				break;  			/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  				string name = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						name += (char)data [i];  				}  				contactingNode.SetName (name);  				contactingNode.SetRegistered (true);  				break;  			/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  				string brand = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						brand += (char)data [i];  				}  				contactingNode.SetBrand (brand);  				AddNodeToDatabase (contactingNode);  				break;  			/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  				byteCounter = 1;  				int nameLen = data [byteCounter++];  				string eventName = "";  				for (int i = 0; i < nameLen; i++) {  					if ((char)data [byteCounter] != '\0')  						eventName += (char)data [byteCounter];  					byteCounter++;  				}  				int descLen = data [byteCounter++];  				string description = "";  				for (int i = 0; i < descLen; i++) {  					if ((char)data [byteCounter] != '\0')  						description += (char)data [byteCounter];  					byteCounter++;  				}  				ushort doubleByte = (ushort)(data [byteCounter++] << 8);  				doubleByte = (ushort)(doubleByte | data [byteCounter++]);  				int eventID = doubleByte & 0x3FF;  				bool triggerable = (doubleByte & 0x8000) > 0;  				bool option1Exists = (doubleByte & 0x800) > 0;  				bool option2Exists = (doubleByte & 0x400) > 0;  				Event e = new Event (eventName' description' eventID' triggerable);  				e.Option1 = option1Exists;  				e.Option2 = option2Exists;  				contactingNode.AddEvent (e);  				AddEventToDatabase (contactingNode' e);  				break;  			case OPTION_BYTE:  				byteCounter = 1;  				int eventId = (ushort)(data [byteCounter++] << 8);  				eventId = (ushort)(eventId | data [byteCounter++]);  				int opDescLen = data [byteCounter++];  				string opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  				currEvent.SetOption1 (opDescription);  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				if (currEvent.Option2) {  					opDescLen = data [byteCounter++];  					opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				}  				break;  			case THROW_BYTE:  				byteCounter = 1;  				if (!contactingNode.GetRegistered ()) {  					break;  				}  				int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  				Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  				string op1Str = "";  				string op2Str = "";  				if (thisEvent.Option1) {  					int op1len = data [byteCounter++];  					for (int i = 0; i < op1len; i++) {  						op1Str += (char)data [byteCounter++];  					}  				}  				if (thisEvent.Option2) {  					int op2len = data [byteCounter++];  					for (int i = 0; i < op2len; i++) {  						op2Str += (char)data [byteCounter++];  					}  				}  				contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  				ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  				break;  			default:  				break;  			}  		}  	}  }  catch (TimeoutException) {  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: try {  	int message = _serialPort.ReadByte ();  	if (message == 0x7E) {  		XbeeRx incoming = new XbeeRx ();  		if (incoming.ParseIncomingMessage (_serialPort)) {  			if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  				remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  			}  			List<int> data = incoming.GetMessage ();  			ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  			int byteCounter;  			switch (data [0]) {  			case VERSION_BYTE:  				int version = data [1];  				XbeeTx64Bit transmit;  				List<byte> d = new List<byte> ();  				DataSqlConnection.mutex.WaitOne ();  				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (ret == "") {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  				}  				else {  					int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  					if (version != databaseVersion) {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  						DataSqlConnection.mutex.ReleaseMutex ();  					}  					else {  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  						d.Add (MATCH_BYTE);  						string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  						DataSqlConnection.mutex.ReleaseMutex ();  						string[] nodeInfo = node.Split ('|');  						contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  						contactingNode.SetName (nodeInfo [1]);  						contactingNode.SetAlias (nodeInfo [2]);  						contactingNode.SetBrand (nodeInfo [3]);  						contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  						contactingNode.SetHexAddress (nodeInfo [5]);  						contactingNode.SetRegistered (true);  						//nodeInfo[7] is IsForeign which we don't care about  						contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  						DataSqlConnection.mutex.WaitOne ();  						nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  						DataSqlConnection.mutex.ReleaseMutex ();  						foreach (string s in nodeInfo) {  							if (s == "")  								continue;  							string[] eventData = s.Split ('|');  							Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  							DataSqlConnection.mutex.WaitOne ();  							string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  							DataSqlConnection.mutex.ReleaseMutex ();  							if (optionsData == "") {  								contactingEvent.Option1 = false;  								contactingEvent.Option2 = false;  							}  							else {  								string[] ops = optionsData.Split ('\n');  								string[] opsVals;  								opsVals = ops [0].Split ('|');  								contactingEvent.Option1 = true;  								contactingEvent.SetOption1 (opsVals [3]);  								contactingEvent.SetOption1Value (opsVals [4]);  								if (ops.Length == 3) {  									opsVals = ops [1].Split ('|');  									contactingEvent.Option2 = true;  									contactingEvent.SetOption2 (opsVals [3]);  									contactingEvent.SetOption2Value (opsVals [4]);  								}  							}  							contactingNode.AddEvent (contactingEvent);  						}  					}  				}  				contactingNode.SetVersion ((byte)version);  				transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  				transmit.Send (_serialPort);  				break;  			/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  				string name = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						name += (char)data [i];  				}  				contactingNode.SetName (name);  				contactingNode.SetRegistered (true);  				break;  			/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  				string brand = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						brand += (char)data [i];  				}  				contactingNode.SetBrand (brand);  				AddNodeToDatabase (contactingNode);  				break;  			/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  				byteCounter = 1;  				int nameLen = data [byteCounter++];  				string eventName = "";  				for (int i = 0; i < nameLen; i++) {  					if ((char)data [byteCounter] != '\0')  						eventName += (char)data [byteCounter];  					byteCounter++;  				}  				int descLen = data [byteCounter++];  				string description = "";  				for (int i = 0; i < descLen; i++) {  					if ((char)data [byteCounter] != '\0')  						description += (char)data [byteCounter];  					byteCounter++;  				}  				ushort doubleByte = (ushort)(data [byteCounter++] << 8);  				doubleByte = (ushort)(doubleByte | data [byteCounter++]);  				int eventID = doubleByte & 0x3FF;  				bool triggerable = (doubleByte & 0x8000) > 0;  				bool option1Exists = (doubleByte & 0x800) > 0;  				bool option2Exists = (doubleByte & 0x400) > 0;  				Event e = new Event (eventName' description' eventID' triggerable);  				e.Option1 = option1Exists;  				e.Option2 = option2Exists;  				contactingNode.AddEvent (e);  				AddEventToDatabase (contactingNode' e);  				break;  			case OPTION_BYTE:  				byteCounter = 1;  				int eventId = (ushort)(data [byteCounter++] << 8);  				eventId = (ushort)(eventId | data [byteCounter++]);  				int opDescLen = data [byteCounter++];  				string opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  				currEvent.SetOption1 (opDescription);  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				if (currEvent.Option2) {  					opDescLen = data [byteCounter++];  					opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				}  				break;  			case THROW_BYTE:  				byteCounter = 1;  				if (!contactingNode.GetRegistered ()) {  					break;  				}  				int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  				Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  				string op1Str = "";  				string op2Str = "";  				if (thisEvent.Option1) {  					int op1len = data [byteCounter++];  					for (int i = 0; i < op1len; i++) {  						op1Str += (char)data [byteCounter++];  					}  				}  				if (thisEvent.Option2) {  					int op2len = data [byteCounter++];  					for (int i = 0; i < op2len; i++) {  						op2Str += (char)data [byteCounter++];  					}  				}  				contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  				ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  				break;  			default:  				break;  			}  		}  	}  }  catch (TimeoutException) {  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: try {  	int message = _serialPort.ReadByte ();  	if (message == 0x7E) {  		XbeeRx incoming = new XbeeRx ();  		if (incoming.ParseIncomingMessage (_serialPort)) {  			if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  				remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  			}  			List<int> data = incoming.GetMessage ();  			ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  			int byteCounter;  			switch (data [0]) {  			case VERSION_BYTE:  				int version = data [1];  				XbeeTx64Bit transmit;  				List<byte> d = new List<byte> ();  				DataSqlConnection.mutex.WaitOne ();  				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (ret == "") {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  				}  				else {  					int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  					if (version != databaseVersion) {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  						DataSqlConnection.mutex.ReleaseMutex ();  					}  					else {  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  						d.Add (MATCH_BYTE);  						string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  						DataSqlConnection.mutex.ReleaseMutex ();  						string[] nodeInfo = node.Split ('|');  						contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  						contactingNode.SetName (nodeInfo [1]);  						contactingNode.SetAlias (nodeInfo [2]);  						contactingNode.SetBrand (nodeInfo [3]);  						contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  						contactingNode.SetHexAddress (nodeInfo [5]);  						contactingNode.SetRegistered (true);  						//nodeInfo[7] is IsForeign which we don't care about  						contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  						DataSqlConnection.mutex.WaitOne ();  						nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  						DataSqlConnection.mutex.ReleaseMutex ();  						foreach (string s in nodeInfo) {  							if (s == "")  								continue;  							string[] eventData = s.Split ('|');  							Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  							DataSqlConnection.mutex.WaitOne ();  							string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  							DataSqlConnection.mutex.ReleaseMutex ();  							if (optionsData == "") {  								contactingEvent.Option1 = false;  								contactingEvent.Option2 = false;  							}  							else {  								string[] ops = optionsData.Split ('\n');  								string[] opsVals;  								opsVals = ops [0].Split ('|');  								contactingEvent.Option1 = true;  								contactingEvent.SetOption1 (opsVals [3]);  								contactingEvent.SetOption1Value (opsVals [4]);  								if (ops.Length == 3) {  									opsVals = ops [1].Split ('|');  									contactingEvent.Option2 = true;  									contactingEvent.SetOption2 (opsVals [3]);  									contactingEvent.SetOption2Value (opsVals [4]);  								}  							}  							contactingNode.AddEvent (contactingEvent);  						}  					}  				}  				contactingNode.SetVersion ((byte)version);  				transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  				transmit.Send (_serialPort);  				break;  			/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  				string name = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						name += (char)data [i];  				}  				contactingNode.SetName (name);  				contactingNode.SetRegistered (true);  				break;  			/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  				string brand = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						brand += (char)data [i];  				}  				contactingNode.SetBrand (brand);  				AddNodeToDatabase (contactingNode);  				break;  			/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  				byteCounter = 1;  				int nameLen = data [byteCounter++];  				string eventName = "";  				for (int i = 0; i < nameLen; i++) {  					if ((char)data [byteCounter] != '\0')  						eventName += (char)data [byteCounter];  					byteCounter++;  				}  				int descLen = data [byteCounter++];  				string description = "";  				for (int i = 0; i < descLen; i++) {  					if ((char)data [byteCounter] != '\0')  						description += (char)data [byteCounter];  					byteCounter++;  				}  				ushort doubleByte = (ushort)(data [byteCounter++] << 8);  				doubleByte = (ushort)(doubleByte | data [byteCounter++]);  				int eventID = doubleByte & 0x3FF;  				bool triggerable = (doubleByte & 0x8000) > 0;  				bool option1Exists = (doubleByte & 0x800) > 0;  				bool option2Exists = (doubleByte & 0x400) > 0;  				Event e = new Event (eventName' description' eventID' triggerable);  				e.Option1 = option1Exists;  				e.Option2 = option2Exists;  				contactingNode.AddEvent (e);  				AddEventToDatabase (contactingNode' e);  				break;  			case OPTION_BYTE:  				byteCounter = 1;  				int eventId = (ushort)(data [byteCounter++] << 8);  				eventId = (ushort)(eventId | data [byteCounter++]);  				int opDescLen = data [byteCounter++];  				string opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  				currEvent.SetOption1 (opDescription);  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				if (currEvent.Option2) {  					opDescLen = data [byteCounter++];  					opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				}  				break;  			case THROW_BYTE:  				byteCounter = 1;  				if (!contactingNode.GetRegistered ()) {  					break;  				}  				int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  				Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  				string op1Str = "";  				string op2Str = "";  				if (thisEvent.Option1) {  					int op1len = data [byteCounter++];  					for (int i = 0; i < op1len; i++) {  						op1Str += (char)data [byteCounter++];  					}  				}  				if (thisEvent.Option2) {  					int op2len = data [byteCounter++];  					for (int i = 0; i < op2len; i++) {  						op2Str += (char)data [byteCounter++];  					}  				}  				contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  				ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  				break;  			default:  				break;  			}  		}  	}  }  catch (TimeoutException) {  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: try {  	int message = _serialPort.ReadByte ();  	if (message == 0x7E) {  		XbeeRx incoming = new XbeeRx ();  		if (incoming.ParseIncomingMessage (_serialPort)) {  			if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  				remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  			}  			List<int> data = incoming.GetMessage ();  			ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  			int byteCounter;  			switch (data [0]) {  			case VERSION_BYTE:  				int version = data [1];  				XbeeTx64Bit transmit;  				List<byte> d = new List<byte> ();  				DataSqlConnection.mutex.WaitOne ();  				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (ret == "") {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  				}  				else {  					int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  					if (version != databaseVersion) {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  						DataSqlConnection.mutex.ReleaseMutex ();  					}  					else {  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  						d.Add (MATCH_BYTE);  						string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  						DataSqlConnection.mutex.ReleaseMutex ();  						string[] nodeInfo = node.Split ('|');  						contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  						contactingNode.SetName (nodeInfo [1]);  						contactingNode.SetAlias (nodeInfo [2]);  						contactingNode.SetBrand (nodeInfo [3]);  						contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  						contactingNode.SetHexAddress (nodeInfo [5]);  						contactingNode.SetRegistered (true);  						//nodeInfo[7] is IsForeign which we don't care about  						contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  						DataSqlConnection.mutex.WaitOne ();  						nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  						DataSqlConnection.mutex.ReleaseMutex ();  						foreach (string s in nodeInfo) {  							if (s == "")  								continue;  							string[] eventData = s.Split ('|');  							Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  							DataSqlConnection.mutex.WaitOne ();  							string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  							DataSqlConnection.mutex.ReleaseMutex ();  							if (optionsData == "") {  								contactingEvent.Option1 = false;  								contactingEvent.Option2 = false;  							}  							else {  								string[] ops = optionsData.Split ('\n');  								string[] opsVals;  								opsVals = ops [0].Split ('|');  								contactingEvent.Option1 = true;  								contactingEvent.SetOption1 (opsVals [3]);  								contactingEvent.SetOption1Value (opsVals [4]);  								if (ops.Length == 3) {  									opsVals = ops [1].Split ('|');  									contactingEvent.Option2 = true;  									contactingEvent.SetOption2 (opsVals [3]);  									contactingEvent.SetOption2Value (opsVals [4]);  								}  							}  							contactingNode.AddEvent (contactingEvent);  						}  					}  				}  				contactingNode.SetVersion ((byte)version);  				transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  				transmit.Send (_serialPort);  				break;  			/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  				string name = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						name += (char)data [i];  				}  				contactingNode.SetName (name);  				contactingNode.SetRegistered (true);  				break;  			/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  				string brand = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						brand += (char)data [i];  				}  				contactingNode.SetBrand (brand);  				AddNodeToDatabase (contactingNode);  				break;  			/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  				byteCounter = 1;  				int nameLen = data [byteCounter++];  				string eventName = "";  				for (int i = 0; i < nameLen; i++) {  					if ((char)data [byteCounter] != '\0')  						eventName += (char)data [byteCounter];  					byteCounter++;  				}  				int descLen = data [byteCounter++];  				string description = "";  				for (int i = 0; i < descLen; i++) {  					if ((char)data [byteCounter] != '\0')  						description += (char)data [byteCounter];  					byteCounter++;  				}  				ushort doubleByte = (ushort)(data [byteCounter++] << 8);  				doubleByte = (ushort)(doubleByte | data [byteCounter++]);  				int eventID = doubleByte & 0x3FF;  				bool triggerable = (doubleByte & 0x8000) > 0;  				bool option1Exists = (doubleByte & 0x800) > 0;  				bool option2Exists = (doubleByte & 0x400) > 0;  				Event e = new Event (eventName' description' eventID' triggerable);  				e.Option1 = option1Exists;  				e.Option2 = option2Exists;  				contactingNode.AddEvent (e);  				AddEventToDatabase (contactingNode' e);  				break;  			case OPTION_BYTE:  				byteCounter = 1;  				int eventId = (ushort)(data [byteCounter++] << 8);  				eventId = (ushort)(eventId | data [byteCounter++]);  				int opDescLen = data [byteCounter++];  				string opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  				currEvent.SetOption1 (opDescription);  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				if (currEvent.Option2) {  					opDescLen = data [byteCounter++];  					opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				}  				break;  			case THROW_BYTE:  				byteCounter = 1;  				if (!contactingNode.GetRegistered ()) {  					break;  				}  				int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  				Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  				string op1Str = "";  				string op2Str = "";  				if (thisEvent.Option1) {  					int op1len = data [byteCounter++];  					for (int i = 0; i < op1len; i++) {  						op1Str += (char)data [byteCounter++];  					}  				}  				if (thisEvent.Option2) {  					int op2len = data [byteCounter++];  					for (int i = 0; i < op2len; i++) {  						op2Str += (char)data [byteCounter++];  					}  				}  				contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  				ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  				break;  			default:  				break;  			}  		}  	}  }  catch (TimeoutException) {  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: try {  	int message = _serialPort.ReadByte ();  	if (message == 0x7E) {  		XbeeRx incoming = new XbeeRx ();  		if (incoming.ParseIncomingMessage (_serialPort)) {  			if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  				remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  			}  			List<int> data = incoming.GetMessage ();  			ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  			int byteCounter;  			switch (data [0]) {  			case VERSION_BYTE:  				int version = data [1];  				XbeeTx64Bit transmit;  				List<byte> d = new List<byte> ();  				DataSqlConnection.mutex.WaitOne ();  				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (ret == "") {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  				}  				else {  					int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  					if (version != databaseVersion) {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  						DataSqlConnection.mutex.ReleaseMutex ();  					}  					else {  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  						d.Add (MATCH_BYTE);  						string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  						DataSqlConnection.mutex.ReleaseMutex ();  						string[] nodeInfo = node.Split ('|');  						contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  						contactingNode.SetName (nodeInfo [1]);  						contactingNode.SetAlias (nodeInfo [2]);  						contactingNode.SetBrand (nodeInfo [3]);  						contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  						contactingNode.SetHexAddress (nodeInfo [5]);  						contactingNode.SetRegistered (true);  						//nodeInfo[7] is IsForeign which we don't care about  						contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  						DataSqlConnection.mutex.WaitOne ();  						nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  						DataSqlConnection.mutex.ReleaseMutex ();  						foreach (string s in nodeInfo) {  							if (s == "")  								continue;  							string[] eventData = s.Split ('|');  							Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  							DataSqlConnection.mutex.WaitOne ();  							string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  							DataSqlConnection.mutex.ReleaseMutex ();  							if (optionsData == "") {  								contactingEvent.Option1 = false;  								contactingEvent.Option2 = false;  							}  							else {  								string[] ops = optionsData.Split ('\n');  								string[] opsVals;  								opsVals = ops [0].Split ('|');  								contactingEvent.Option1 = true;  								contactingEvent.SetOption1 (opsVals [3]);  								contactingEvent.SetOption1Value (opsVals [4]);  								if (ops.Length == 3) {  									opsVals = ops [1].Split ('|');  									contactingEvent.Option2 = true;  									contactingEvent.SetOption2 (opsVals [3]);  									contactingEvent.SetOption2Value (opsVals [4]);  								}  							}  							contactingNode.AddEvent (contactingEvent);  						}  					}  				}  				contactingNode.SetVersion ((byte)version);  				transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  				transmit.Send (_serialPort);  				break;  			/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  				string name = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						name += (char)data [i];  				}  				contactingNode.SetName (name);  				contactingNode.SetRegistered (true);  				break;  			/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  				string brand = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						brand += (char)data [i];  				}  				contactingNode.SetBrand (brand);  				AddNodeToDatabase (contactingNode);  				break;  			/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  				byteCounter = 1;  				int nameLen = data [byteCounter++];  				string eventName = "";  				for (int i = 0; i < nameLen; i++) {  					if ((char)data [byteCounter] != '\0')  						eventName += (char)data [byteCounter];  					byteCounter++;  				}  				int descLen = data [byteCounter++];  				string description = "";  				for (int i = 0; i < descLen; i++) {  					if ((char)data [byteCounter] != '\0')  						description += (char)data [byteCounter];  					byteCounter++;  				}  				ushort doubleByte = (ushort)(data [byteCounter++] << 8);  				doubleByte = (ushort)(doubleByte | data [byteCounter++]);  				int eventID = doubleByte & 0x3FF;  				bool triggerable = (doubleByte & 0x8000) > 0;  				bool option1Exists = (doubleByte & 0x800) > 0;  				bool option2Exists = (doubleByte & 0x400) > 0;  				Event e = new Event (eventName' description' eventID' triggerable);  				e.Option1 = option1Exists;  				e.Option2 = option2Exists;  				contactingNode.AddEvent (e);  				AddEventToDatabase (contactingNode' e);  				break;  			case OPTION_BYTE:  				byteCounter = 1;  				int eventId = (ushort)(data [byteCounter++] << 8);  				eventId = (ushort)(eventId | data [byteCounter++]);  				int opDescLen = data [byteCounter++];  				string opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  				currEvent.SetOption1 (opDescription);  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				if (currEvent.Option2) {  					opDescLen = data [byteCounter++];  					opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				}  				break;  			case THROW_BYTE:  				byteCounter = 1;  				if (!contactingNode.GetRegistered ()) {  					break;  				}  				int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  				Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  				string op1Str = "";  				string op2Str = "";  				if (thisEvent.Option1) {  					int op1len = data [byteCounter++];  					for (int i = 0; i < op1len; i++) {  						op1Str += (char)data [byteCounter++];  					}  				}  				if (thisEvent.Option2) {  					int op2len = data [byteCounter++];  					for (int i = 0; i < op2len; i++) {  						op2Str += (char)data [byteCounter++];  					}  				}  				contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  				ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  				break;  			default:  				break;  			}  		}  	}  }  catch (TimeoutException) {  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: try {  	int message = _serialPort.ReadByte ();  	if (message == 0x7E) {  		XbeeRx incoming = new XbeeRx ();  		if (incoming.ParseIncomingMessage (_serialPort)) {  			if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  				remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  			}  			List<int> data = incoming.GetMessage ();  			ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  			int byteCounter;  			switch (data [0]) {  			case VERSION_BYTE:  				int version = data [1];  				XbeeTx64Bit transmit;  				List<byte> d = new List<byte> ();  				DataSqlConnection.mutex.WaitOne ();  				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (ret == "") {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  				}  				else {  					int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  					if (version != databaseVersion) {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  						DataSqlConnection.mutex.ReleaseMutex ();  					}  					else {  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  						d.Add (MATCH_BYTE);  						string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  						DataSqlConnection.mutex.ReleaseMutex ();  						string[] nodeInfo = node.Split ('|');  						contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  						contactingNode.SetName (nodeInfo [1]);  						contactingNode.SetAlias (nodeInfo [2]);  						contactingNode.SetBrand (nodeInfo [3]);  						contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  						contactingNode.SetHexAddress (nodeInfo [5]);  						contactingNode.SetRegistered (true);  						//nodeInfo[7] is IsForeign which we don't care about  						contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  						DataSqlConnection.mutex.WaitOne ();  						nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  						DataSqlConnection.mutex.ReleaseMutex ();  						foreach (string s in nodeInfo) {  							if (s == "")  								continue;  							string[] eventData = s.Split ('|');  							Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  							DataSqlConnection.mutex.WaitOne ();  							string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  							DataSqlConnection.mutex.ReleaseMutex ();  							if (optionsData == "") {  								contactingEvent.Option1 = false;  								contactingEvent.Option2 = false;  							}  							else {  								string[] ops = optionsData.Split ('\n');  								string[] opsVals;  								opsVals = ops [0].Split ('|');  								contactingEvent.Option1 = true;  								contactingEvent.SetOption1 (opsVals [3]);  								contactingEvent.SetOption1Value (opsVals [4]);  								if (ops.Length == 3) {  									opsVals = ops [1].Split ('|');  									contactingEvent.Option2 = true;  									contactingEvent.SetOption2 (opsVals [3]);  									contactingEvent.SetOption2Value (opsVals [4]);  								}  							}  							contactingNode.AddEvent (contactingEvent);  						}  					}  				}  				contactingNode.SetVersion ((byte)version);  				transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  				transmit.Send (_serialPort);  				break;  			/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  				string name = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						name += (char)data [i];  				}  				contactingNode.SetName (name);  				contactingNode.SetRegistered (true);  				break;  			/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  				string brand = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						brand += (char)data [i];  				}  				contactingNode.SetBrand (brand);  				AddNodeToDatabase (contactingNode);  				break;  			/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  				byteCounter = 1;  				int nameLen = data [byteCounter++];  				string eventName = "";  				for (int i = 0; i < nameLen; i++) {  					if ((char)data [byteCounter] != '\0')  						eventName += (char)data [byteCounter];  					byteCounter++;  				}  				int descLen = data [byteCounter++];  				string description = "";  				for (int i = 0; i < descLen; i++) {  					if ((char)data [byteCounter] != '\0')  						description += (char)data [byteCounter];  					byteCounter++;  				}  				ushort doubleByte = (ushort)(data [byteCounter++] << 8);  				doubleByte = (ushort)(doubleByte | data [byteCounter++]);  				int eventID = doubleByte & 0x3FF;  				bool triggerable = (doubleByte & 0x8000) > 0;  				bool option1Exists = (doubleByte & 0x800) > 0;  				bool option2Exists = (doubleByte & 0x400) > 0;  				Event e = new Event (eventName' description' eventID' triggerable);  				e.Option1 = option1Exists;  				e.Option2 = option2Exists;  				contactingNode.AddEvent (e);  				AddEventToDatabase (contactingNode' e);  				break;  			case OPTION_BYTE:  				byteCounter = 1;  				int eventId = (ushort)(data [byteCounter++] << 8);  				eventId = (ushort)(eventId | data [byteCounter++]);  				int opDescLen = data [byteCounter++];  				string opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  				currEvent.SetOption1 (opDescription);  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				if (currEvent.Option2) {  					opDescLen = data [byteCounter++];  					opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				}  				break;  			case THROW_BYTE:  				byteCounter = 1;  				if (!contactingNode.GetRegistered ()) {  					break;  				}  				int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  				Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  				string op1Str = "";  				string op2Str = "";  				if (thisEvent.Option1) {  					int op1len = data [byteCounter++];  					for (int i = 0; i < op1len; i++) {  						op1Str += (char)data [byteCounter++];  					}  				}  				if (thisEvent.Option2) {  					int op2len = data [byteCounter++];  					for (int i = 0; i < op2len; i++) {  						op2Str += (char)data [byteCounter++];  					}  				}  				contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  				ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  				break;  			default:  				break;  			}  		}  	}  }  catch (TimeoutException) {  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: try {  	int message = _serialPort.ReadByte ();  	if (message == 0x7E) {  		XbeeRx incoming = new XbeeRx ();  		if (incoming.ParseIncomingMessage (_serialPort)) {  			if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  				remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  			}  			List<int> data = incoming.GetMessage ();  			ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  			int byteCounter;  			switch (data [0]) {  			case VERSION_BYTE:  				int version = data [1];  				XbeeTx64Bit transmit;  				List<byte> d = new List<byte> ();  				DataSqlConnection.mutex.WaitOne ();  				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (ret == "") {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  				}  				else {  					int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  					if (version != databaseVersion) {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  						DataSqlConnection.mutex.ReleaseMutex ();  					}  					else {  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  						d.Add (MATCH_BYTE);  						string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  						DataSqlConnection.mutex.ReleaseMutex ();  						string[] nodeInfo = node.Split ('|');  						contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  						contactingNode.SetName (nodeInfo [1]);  						contactingNode.SetAlias (nodeInfo [2]);  						contactingNode.SetBrand (nodeInfo [3]);  						contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  						contactingNode.SetHexAddress (nodeInfo [5]);  						contactingNode.SetRegistered (true);  						//nodeInfo[7] is IsForeign which we don't care about  						contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  						DataSqlConnection.mutex.WaitOne ();  						nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  						DataSqlConnection.mutex.ReleaseMutex ();  						foreach (string s in nodeInfo) {  							if (s == "")  								continue;  							string[] eventData = s.Split ('|');  							Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  							DataSqlConnection.mutex.WaitOne ();  							string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  							DataSqlConnection.mutex.ReleaseMutex ();  							if (optionsData == "") {  								contactingEvent.Option1 = false;  								contactingEvent.Option2 = false;  							}  							else {  								string[] ops = optionsData.Split ('\n');  								string[] opsVals;  								opsVals = ops [0].Split ('|');  								contactingEvent.Option1 = true;  								contactingEvent.SetOption1 (opsVals [3]);  								contactingEvent.SetOption1Value (opsVals [4]);  								if (ops.Length == 3) {  									opsVals = ops [1].Split ('|');  									contactingEvent.Option2 = true;  									contactingEvent.SetOption2 (opsVals [3]);  									contactingEvent.SetOption2Value (opsVals [4]);  								}  							}  							contactingNode.AddEvent (contactingEvent);  						}  					}  				}  				contactingNode.SetVersion ((byte)version);  				transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  				transmit.Send (_serialPort);  				break;  			/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  				string name = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						name += (char)data [i];  				}  				contactingNode.SetName (name);  				contactingNode.SetRegistered (true);  				break;  			/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  				string brand = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						brand += (char)data [i];  				}  				contactingNode.SetBrand (brand);  				AddNodeToDatabase (contactingNode);  				break;  			/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  				byteCounter = 1;  				int nameLen = data [byteCounter++];  				string eventName = "";  				for (int i = 0; i < nameLen; i++) {  					if ((char)data [byteCounter] != '\0')  						eventName += (char)data [byteCounter];  					byteCounter++;  				}  				int descLen = data [byteCounter++];  				string description = "";  				for (int i = 0; i < descLen; i++) {  					if ((char)data [byteCounter] != '\0')  						description += (char)data [byteCounter];  					byteCounter++;  				}  				ushort doubleByte = (ushort)(data [byteCounter++] << 8);  				doubleByte = (ushort)(doubleByte | data [byteCounter++]);  				int eventID = doubleByte & 0x3FF;  				bool triggerable = (doubleByte & 0x8000) > 0;  				bool option1Exists = (doubleByte & 0x800) > 0;  				bool option2Exists = (doubleByte & 0x400) > 0;  				Event e = new Event (eventName' description' eventID' triggerable);  				e.Option1 = option1Exists;  				e.Option2 = option2Exists;  				contactingNode.AddEvent (e);  				AddEventToDatabase (contactingNode' e);  				break;  			case OPTION_BYTE:  				byteCounter = 1;  				int eventId = (ushort)(data [byteCounter++] << 8);  				eventId = (ushort)(eventId | data [byteCounter++]);  				int opDescLen = data [byteCounter++];  				string opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  				currEvent.SetOption1 (opDescription);  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				if (currEvent.Option2) {  					opDescLen = data [byteCounter++];  					opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				}  				break;  			case THROW_BYTE:  				byteCounter = 1;  				if (!contactingNode.GetRegistered ()) {  					break;  				}  				int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  				Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  				string op1Str = "";  				string op2Str = "";  				if (thisEvent.Option1) {  					int op1len = data [byteCounter++];  					for (int i = 0; i < op1len; i++) {  						op1Str += (char)data [byteCounter++];  					}  				}  				if (thisEvent.Option2) {  					int op2len = data [byteCounter++];  					for (int i = 0; i < op2len; i++) {  						op2Str += (char)data [byteCounter++];  					}  				}  				contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  				ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  				break;  			default:  				break;  			}  		}  	}  }  catch (TimeoutException) {  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: try {  	int message = _serialPort.ReadByte ();  	if (message == 0x7E) {  		XbeeRx incoming = new XbeeRx ();  		if (incoming.ParseIncomingMessage (_serialPort)) {  			if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  				remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  			}  			List<int> data = incoming.GetMessage ();  			ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  			int byteCounter;  			switch (data [0]) {  			case VERSION_BYTE:  				int version = data [1];  				XbeeTx64Bit transmit;  				List<byte> d = new List<byte> ();  				DataSqlConnection.mutex.WaitOne ();  				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (ret == "") {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  				}  				else {  					int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  					if (version != databaseVersion) {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  						DataSqlConnection.mutex.ReleaseMutex ();  					}  					else {  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  						d.Add (MATCH_BYTE);  						string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  						DataSqlConnection.mutex.ReleaseMutex ();  						string[] nodeInfo = node.Split ('|');  						contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  						contactingNode.SetName (nodeInfo [1]);  						contactingNode.SetAlias (nodeInfo [2]);  						contactingNode.SetBrand (nodeInfo [3]);  						contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  						contactingNode.SetHexAddress (nodeInfo [5]);  						contactingNode.SetRegistered (true);  						//nodeInfo[7] is IsForeign which we don't care about  						contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  						DataSqlConnection.mutex.WaitOne ();  						nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  						DataSqlConnection.mutex.ReleaseMutex ();  						foreach (string s in nodeInfo) {  							if (s == "")  								continue;  							string[] eventData = s.Split ('|');  							Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  							DataSqlConnection.mutex.WaitOne ();  							string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  							DataSqlConnection.mutex.ReleaseMutex ();  							if (optionsData == "") {  								contactingEvent.Option1 = false;  								contactingEvent.Option2 = false;  							}  							else {  								string[] ops = optionsData.Split ('\n');  								string[] opsVals;  								opsVals = ops [0].Split ('|');  								contactingEvent.Option1 = true;  								contactingEvent.SetOption1 (opsVals [3]);  								contactingEvent.SetOption1Value (opsVals [4]);  								if (ops.Length == 3) {  									opsVals = ops [1].Split ('|');  									contactingEvent.Option2 = true;  									contactingEvent.SetOption2 (opsVals [3]);  									contactingEvent.SetOption2Value (opsVals [4]);  								}  							}  							contactingNode.AddEvent (contactingEvent);  						}  					}  				}  				contactingNode.SetVersion ((byte)version);  				transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  				transmit.Send (_serialPort);  				break;  			/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  				string name = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						name += (char)data [i];  				}  				contactingNode.SetName (name);  				contactingNode.SetRegistered (true);  				break;  			/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  				string brand = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						brand += (char)data [i];  				}  				contactingNode.SetBrand (brand);  				AddNodeToDatabase (contactingNode);  				break;  			/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  				byteCounter = 1;  				int nameLen = data [byteCounter++];  				string eventName = "";  				for (int i = 0; i < nameLen; i++) {  					if ((char)data [byteCounter] != '\0')  						eventName += (char)data [byteCounter];  					byteCounter++;  				}  				int descLen = data [byteCounter++];  				string description = "";  				for (int i = 0; i < descLen; i++) {  					if ((char)data [byteCounter] != '\0')  						description += (char)data [byteCounter];  					byteCounter++;  				}  				ushort doubleByte = (ushort)(data [byteCounter++] << 8);  				doubleByte = (ushort)(doubleByte | data [byteCounter++]);  				int eventID = doubleByte & 0x3FF;  				bool triggerable = (doubleByte & 0x8000) > 0;  				bool option1Exists = (doubleByte & 0x800) > 0;  				bool option2Exists = (doubleByte & 0x400) > 0;  				Event e = new Event (eventName' description' eventID' triggerable);  				e.Option1 = option1Exists;  				e.Option2 = option2Exists;  				contactingNode.AddEvent (e);  				AddEventToDatabase (contactingNode' e);  				break;  			case OPTION_BYTE:  				byteCounter = 1;  				int eventId = (ushort)(data [byteCounter++] << 8);  				eventId = (ushort)(eventId | data [byteCounter++]);  				int opDescLen = data [byteCounter++];  				string opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  				currEvent.SetOption1 (opDescription);  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				if (currEvent.Option2) {  					opDescLen = data [byteCounter++];  					opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				}  				break;  			case THROW_BYTE:  				byteCounter = 1;  				if (!contactingNode.GetRegistered ()) {  					break;  				}  				int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  				Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  				string op1Str = "";  				string op2Str = "";  				if (thisEvent.Option1) {  					int op1len = data [byteCounter++];  					for (int i = 0; i < op1len; i++) {  						op1Str += (char)data [byteCounter++];  					}  				}  				if (thisEvent.Option2) {  					int op2len = data [byteCounter++];  					for (int i = 0; i < op2len; i++) {  						op2Str += (char)data [byteCounter++];  					}  				}  				contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  				ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  				break;  			default:  				break;  			}  		}  	}  }  catch (TimeoutException) {  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: try {  	int message = _serialPort.ReadByte ();  	if (message == 0x7E) {  		XbeeRx incoming = new XbeeRx ();  		if (incoming.ParseIncomingMessage (_serialPort)) {  			if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  				remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  			}  			List<int> data = incoming.GetMessage ();  			ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  			int byteCounter;  			switch (data [0]) {  			case VERSION_BYTE:  				int version = data [1];  				XbeeTx64Bit transmit;  				List<byte> d = new List<byte> ();  				DataSqlConnection.mutex.WaitOne ();  				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (ret == "") {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  				}  				else {  					int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  					if (version != databaseVersion) {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  						DataSqlConnection.mutex.ReleaseMutex ();  					}  					else {  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  						d.Add (MATCH_BYTE);  						string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  						DataSqlConnection.mutex.ReleaseMutex ();  						string[] nodeInfo = node.Split ('|');  						contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  						contactingNode.SetName (nodeInfo [1]);  						contactingNode.SetAlias (nodeInfo [2]);  						contactingNode.SetBrand (nodeInfo [3]);  						contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  						contactingNode.SetHexAddress (nodeInfo [5]);  						contactingNode.SetRegistered (true);  						//nodeInfo[7] is IsForeign which we don't care about  						contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  						DataSqlConnection.mutex.WaitOne ();  						nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  						DataSqlConnection.mutex.ReleaseMutex ();  						foreach (string s in nodeInfo) {  							if (s == "")  								continue;  							string[] eventData = s.Split ('|');  							Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  							DataSqlConnection.mutex.WaitOne ();  							string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  							DataSqlConnection.mutex.ReleaseMutex ();  							if (optionsData == "") {  								contactingEvent.Option1 = false;  								contactingEvent.Option2 = false;  							}  							else {  								string[] ops = optionsData.Split ('\n');  								string[] opsVals;  								opsVals = ops [0].Split ('|');  								contactingEvent.Option1 = true;  								contactingEvent.SetOption1 (opsVals [3]);  								contactingEvent.SetOption1Value (opsVals [4]);  								if (ops.Length == 3) {  									opsVals = ops [1].Split ('|');  									contactingEvent.Option2 = true;  									contactingEvent.SetOption2 (opsVals [3]);  									contactingEvent.SetOption2Value (opsVals [4]);  								}  							}  							contactingNode.AddEvent (contactingEvent);  						}  					}  				}  				contactingNode.SetVersion ((byte)version);  				transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  				transmit.Send (_serialPort);  				break;  			/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  				string name = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						name += (char)data [i];  				}  				contactingNode.SetName (name);  				contactingNode.SetRegistered (true);  				break;  			/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  				string brand = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						brand += (char)data [i];  				}  				contactingNode.SetBrand (brand);  				AddNodeToDatabase (contactingNode);  				break;  			/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  				byteCounter = 1;  				int nameLen = data [byteCounter++];  				string eventName = "";  				for (int i = 0; i < nameLen; i++) {  					if ((char)data [byteCounter] != '\0')  						eventName += (char)data [byteCounter];  					byteCounter++;  				}  				int descLen = data [byteCounter++];  				string description = "";  				for (int i = 0; i < descLen; i++) {  					if ((char)data [byteCounter] != '\0')  						description += (char)data [byteCounter];  					byteCounter++;  				}  				ushort doubleByte = (ushort)(data [byteCounter++] << 8);  				doubleByte = (ushort)(doubleByte | data [byteCounter++]);  				int eventID = doubleByte & 0x3FF;  				bool triggerable = (doubleByte & 0x8000) > 0;  				bool option1Exists = (doubleByte & 0x800) > 0;  				bool option2Exists = (doubleByte & 0x400) > 0;  				Event e = new Event (eventName' description' eventID' triggerable);  				e.Option1 = option1Exists;  				e.Option2 = option2Exists;  				contactingNode.AddEvent (e);  				AddEventToDatabase (contactingNode' e);  				break;  			case OPTION_BYTE:  				byteCounter = 1;  				int eventId = (ushort)(data [byteCounter++] << 8);  				eventId = (ushort)(eventId | data [byteCounter++]);  				int opDescLen = data [byteCounter++];  				string opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  				currEvent.SetOption1 (opDescription);  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				if (currEvent.Option2) {  					opDescLen = data [byteCounter++];  					opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				}  				break;  			case THROW_BYTE:  				byteCounter = 1;  				if (!contactingNode.GetRegistered ()) {  					break;  				}  				int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  				Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  				string op1Str = "";  				string op2Str = "";  				if (thisEvent.Option1) {  					int op1len = data [byteCounter++];  					for (int i = 0; i < op1len; i++) {  						op1Str += (char)data [byteCounter++];  					}  				}  				if (thisEvent.Option2) {  					int op2len = data [byteCounter++];  					for (int i = 0; i < op2len; i++) {  						op2Str += (char)data [byteCounter++];  					}  				}  				contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  				ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  				break;  			default:  				break;  			}  		}  	}  }  catch (TimeoutException) {  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: try {  	int message = _serialPort.ReadByte ();  	if (message == 0x7E) {  		XbeeRx incoming = new XbeeRx ();  		if (incoming.ParseIncomingMessage (_serialPort)) {  			if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  				remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  			}  			List<int> data = incoming.GetMessage ();  			ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  			int byteCounter;  			switch (data [0]) {  			case VERSION_BYTE:  				int version = data [1];  				XbeeTx64Bit transmit;  				List<byte> d = new List<byte> ();  				DataSqlConnection.mutex.WaitOne ();  				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (ret == "") {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  				}  				else {  					int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  					if (version != databaseVersion) {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  						DataSqlConnection.mutex.ReleaseMutex ();  					}  					else {  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  						d.Add (MATCH_BYTE);  						string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  						DataSqlConnection.mutex.ReleaseMutex ();  						string[] nodeInfo = node.Split ('|');  						contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  						contactingNode.SetName (nodeInfo [1]);  						contactingNode.SetAlias (nodeInfo [2]);  						contactingNode.SetBrand (nodeInfo [3]);  						contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  						contactingNode.SetHexAddress (nodeInfo [5]);  						contactingNode.SetRegistered (true);  						//nodeInfo[7] is IsForeign which we don't care about  						contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  						DataSqlConnection.mutex.WaitOne ();  						nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  						DataSqlConnection.mutex.ReleaseMutex ();  						foreach (string s in nodeInfo) {  							if (s == "")  								continue;  							string[] eventData = s.Split ('|');  							Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  							DataSqlConnection.mutex.WaitOne ();  							string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  							DataSqlConnection.mutex.ReleaseMutex ();  							if (optionsData == "") {  								contactingEvent.Option1 = false;  								contactingEvent.Option2 = false;  							}  							else {  								string[] ops = optionsData.Split ('\n');  								string[] opsVals;  								opsVals = ops [0].Split ('|');  								contactingEvent.Option1 = true;  								contactingEvent.SetOption1 (opsVals [3]);  								contactingEvent.SetOption1Value (opsVals [4]);  								if (ops.Length == 3) {  									opsVals = ops [1].Split ('|');  									contactingEvent.Option2 = true;  									contactingEvent.SetOption2 (opsVals [3]);  									contactingEvent.SetOption2Value (opsVals [4]);  								}  							}  							contactingNode.AddEvent (contactingEvent);  						}  					}  				}  				contactingNode.SetVersion ((byte)version);  				transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  				transmit.Send (_serialPort);  				break;  			/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  				string name = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						name += (char)data [i];  				}  				contactingNode.SetName (name);  				contactingNode.SetRegistered (true);  				break;  			/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  				string brand = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						brand += (char)data [i];  				}  				contactingNode.SetBrand (brand);  				AddNodeToDatabase (contactingNode);  				break;  			/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  				byteCounter = 1;  				int nameLen = data [byteCounter++];  				string eventName = "";  				for (int i = 0; i < nameLen; i++) {  					if ((char)data [byteCounter] != '\0')  						eventName += (char)data [byteCounter];  					byteCounter++;  				}  				int descLen = data [byteCounter++];  				string description = "";  				for (int i = 0; i < descLen; i++) {  					if ((char)data [byteCounter] != '\0')  						description += (char)data [byteCounter];  					byteCounter++;  				}  				ushort doubleByte = (ushort)(data [byteCounter++] << 8);  				doubleByte = (ushort)(doubleByte | data [byteCounter++]);  				int eventID = doubleByte & 0x3FF;  				bool triggerable = (doubleByte & 0x8000) > 0;  				bool option1Exists = (doubleByte & 0x800) > 0;  				bool option2Exists = (doubleByte & 0x400) > 0;  				Event e = new Event (eventName' description' eventID' triggerable);  				e.Option1 = option1Exists;  				e.Option2 = option2Exists;  				contactingNode.AddEvent (e);  				AddEventToDatabase (contactingNode' e);  				break;  			case OPTION_BYTE:  				byteCounter = 1;  				int eventId = (ushort)(data [byteCounter++] << 8);  				eventId = (ushort)(eventId | data [byteCounter++]);  				int opDescLen = data [byteCounter++];  				string opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  				currEvent.SetOption1 (opDescription);  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				if (currEvent.Option2) {  					opDescLen = data [byteCounter++];  					opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				}  				break;  			case THROW_BYTE:  				byteCounter = 1;  				if (!contactingNode.GetRegistered ()) {  					break;  				}  				int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  				Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  				string op1Str = "";  				string op2Str = "";  				if (thisEvent.Option1) {  					int op1len = data [byteCounter++];  					for (int i = 0; i < op1len; i++) {  						op1Str += (char)data [byteCounter++];  					}  				}  				if (thisEvent.Option2) {  					int op2len = data [byteCounter++];  					for (int i = 0; i < op2len; i++) {  						op2Str += (char)data [byteCounter++];  					}  				}  				contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  				ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  				break;  			default:  				break;  			}  		}  	}  }  catch (TimeoutException) {  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: try {  	int message = _serialPort.ReadByte ();  	if (message == 0x7E) {  		XbeeRx incoming = new XbeeRx ();  		if (incoming.ParseIncomingMessage (_serialPort)) {  			if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  				remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  			}  			List<int> data = incoming.GetMessage ();  			ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  			int byteCounter;  			switch (data [0]) {  			case VERSION_BYTE:  				int version = data [1];  				XbeeTx64Bit transmit;  				List<byte> d = new List<byte> ();  				DataSqlConnection.mutex.WaitOne ();  				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (ret == "") {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  				}  				else {  					int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  					if (version != databaseVersion) {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  						DataSqlConnection.mutex.ReleaseMutex ();  					}  					else {  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  						d.Add (MATCH_BYTE);  						string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  						DataSqlConnection.mutex.ReleaseMutex ();  						string[] nodeInfo = node.Split ('|');  						contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  						contactingNode.SetName (nodeInfo [1]);  						contactingNode.SetAlias (nodeInfo [2]);  						contactingNode.SetBrand (nodeInfo [3]);  						contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  						contactingNode.SetHexAddress (nodeInfo [5]);  						contactingNode.SetRegistered (true);  						//nodeInfo[7] is IsForeign which we don't care about  						contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  						DataSqlConnection.mutex.WaitOne ();  						nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  						DataSqlConnection.mutex.ReleaseMutex ();  						foreach (string s in nodeInfo) {  							if (s == "")  								continue;  							string[] eventData = s.Split ('|');  							Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  							DataSqlConnection.mutex.WaitOne ();  							string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  							DataSqlConnection.mutex.ReleaseMutex ();  							if (optionsData == "") {  								contactingEvent.Option1 = false;  								contactingEvent.Option2 = false;  							}  							else {  								string[] ops = optionsData.Split ('\n');  								string[] opsVals;  								opsVals = ops [0].Split ('|');  								contactingEvent.Option1 = true;  								contactingEvent.SetOption1 (opsVals [3]);  								contactingEvent.SetOption1Value (opsVals [4]);  								if (ops.Length == 3) {  									opsVals = ops [1].Split ('|');  									contactingEvent.Option2 = true;  									contactingEvent.SetOption2 (opsVals [3]);  									contactingEvent.SetOption2Value (opsVals [4]);  								}  							}  							contactingNode.AddEvent (contactingEvent);  						}  					}  				}  				contactingNode.SetVersion ((byte)version);  				transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  				transmit.Send (_serialPort);  				break;  			/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  				string name = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						name += (char)data [i];  				}  				contactingNode.SetName (name);  				contactingNode.SetRegistered (true);  				break;  			/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  				string brand = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						brand += (char)data [i];  				}  				contactingNode.SetBrand (brand);  				AddNodeToDatabase (contactingNode);  				break;  			/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  				byteCounter = 1;  				int nameLen = data [byteCounter++];  				string eventName = "";  				for (int i = 0; i < nameLen; i++) {  					if ((char)data [byteCounter] != '\0')  						eventName += (char)data [byteCounter];  					byteCounter++;  				}  				int descLen = data [byteCounter++];  				string description = "";  				for (int i = 0; i < descLen; i++) {  					if ((char)data [byteCounter] != '\0')  						description += (char)data [byteCounter];  					byteCounter++;  				}  				ushort doubleByte = (ushort)(data [byteCounter++] << 8);  				doubleByte = (ushort)(doubleByte | data [byteCounter++]);  				int eventID = doubleByte & 0x3FF;  				bool triggerable = (doubleByte & 0x8000) > 0;  				bool option1Exists = (doubleByte & 0x800) > 0;  				bool option2Exists = (doubleByte & 0x400) > 0;  				Event e = new Event (eventName' description' eventID' triggerable);  				e.Option1 = option1Exists;  				e.Option2 = option2Exists;  				contactingNode.AddEvent (e);  				AddEventToDatabase (contactingNode' e);  				break;  			case OPTION_BYTE:  				byteCounter = 1;  				int eventId = (ushort)(data [byteCounter++] << 8);  				eventId = (ushort)(eventId | data [byteCounter++]);  				int opDescLen = data [byteCounter++];  				string opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  				currEvent.SetOption1 (opDescription);  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				if (currEvent.Option2) {  					opDescLen = data [byteCounter++];  					opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				}  				break;  			case THROW_BYTE:  				byteCounter = 1;  				if (!contactingNode.GetRegistered ()) {  					break;  				}  				int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  				Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  				string op1Str = "";  				string op2Str = "";  				if (thisEvent.Option1) {  					int op1len = data [byteCounter++];  					for (int i = 0; i < op1len; i++) {  						op1Str += (char)data [byteCounter++];  					}  				}  				if (thisEvent.Option2) {  					int op2len = data [byteCounter++];  					for (int i = 0; i < op2len; i++) {  						op2Str += (char)data [byteCounter++];  					}  				}  				contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  				ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  				break;  			default:  				break;  			}  		}  	}  }  catch (TimeoutException) {  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: try {  	int message = _serialPort.ReadByte ();  	if (message == 0x7E) {  		XbeeRx incoming = new XbeeRx ();  		if (incoming.ParseIncomingMessage (_serialPort)) {  			if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  				remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  			}  			List<int> data = incoming.GetMessage ();  			ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  			int byteCounter;  			switch (data [0]) {  			case VERSION_BYTE:  				int version = data [1];  				XbeeTx64Bit transmit;  				List<byte> d = new List<byte> ();  				DataSqlConnection.mutex.WaitOne ();  				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (ret == "") {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  				}  				else {  					int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  					if (version != databaseVersion) {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  						DataSqlConnection.mutex.ReleaseMutex ();  					}  					else {  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  						d.Add (MATCH_BYTE);  						string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  						DataSqlConnection.mutex.ReleaseMutex ();  						string[] nodeInfo = node.Split ('|');  						contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  						contactingNode.SetName (nodeInfo [1]);  						contactingNode.SetAlias (nodeInfo [2]);  						contactingNode.SetBrand (nodeInfo [3]);  						contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  						contactingNode.SetHexAddress (nodeInfo [5]);  						contactingNode.SetRegistered (true);  						//nodeInfo[7] is IsForeign which we don't care about  						contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  						DataSqlConnection.mutex.WaitOne ();  						nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  						DataSqlConnection.mutex.ReleaseMutex ();  						foreach (string s in nodeInfo) {  							if (s == "")  								continue;  							string[] eventData = s.Split ('|');  							Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  							DataSqlConnection.mutex.WaitOne ();  							string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  							DataSqlConnection.mutex.ReleaseMutex ();  							if (optionsData == "") {  								contactingEvent.Option1 = false;  								contactingEvent.Option2 = false;  							}  							else {  								string[] ops = optionsData.Split ('\n');  								string[] opsVals;  								opsVals = ops [0].Split ('|');  								contactingEvent.Option1 = true;  								contactingEvent.SetOption1 (opsVals [3]);  								contactingEvent.SetOption1Value (opsVals [4]);  								if (ops.Length == 3) {  									opsVals = ops [1].Split ('|');  									contactingEvent.Option2 = true;  									contactingEvent.SetOption2 (opsVals [3]);  									contactingEvent.SetOption2Value (opsVals [4]);  								}  							}  							contactingNode.AddEvent (contactingEvent);  						}  					}  				}  				contactingNode.SetVersion ((byte)version);  				transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  				transmit.Send (_serialPort);  				break;  			/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  				string name = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						name += (char)data [i];  				}  				contactingNode.SetName (name);  				contactingNode.SetRegistered (true);  				break;  			/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  				string brand = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						brand += (char)data [i];  				}  				contactingNode.SetBrand (brand);  				AddNodeToDatabase (contactingNode);  				break;  			/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  				byteCounter = 1;  				int nameLen = data [byteCounter++];  				string eventName = "";  				for (int i = 0; i < nameLen; i++) {  					if ((char)data [byteCounter] != '\0')  						eventName += (char)data [byteCounter];  					byteCounter++;  				}  				int descLen = data [byteCounter++];  				string description = "";  				for (int i = 0; i < descLen; i++) {  					if ((char)data [byteCounter] != '\0')  						description += (char)data [byteCounter];  					byteCounter++;  				}  				ushort doubleByte = (ushort)(data [byteCounter++] << 8);  				doubleByte = (ushort)(doubleByte | data [byteCounter++]);  				int eventID = doubleByte & 0x3FF;  				bool triggerable = (doubleByte & 0x8000) > 0;  				bool option1Exists = (doubleByte & 0x800) > 0;  				bool option2Exists = (doubleByte & 0x400) > 0;  				Event e = new Event (eventName' description' eventID' triggerable);  				e.Option1 = option1Exists;  				e.Option2 = option2Exists;  				contactingNode.AddEvent (e);  				AddEventToDatabase (contactingNode' e);  				break;  			case OPTION_BYTE:  				byteCounter = 1;  				int eventId = (ushort)(data [byteCounter++] << 8);  				eventId = (ushort)(eventId | data [byteCounter++]);  				int opDescLen = data [byteCounter++];  				string opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  				currEvent.SetOption1 (opDescription);  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				if (currEvent.Option2) {  					opDescLen = data [byteCounter++];  					opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				}  				break;  			case THROW_BYTE:  				byteCounter = 1;  				if (!contactingNode.GetRegistered ()) {  					break;  				}  				int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  				Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  				string op1Str = "";  				string op2Str = "";  				if (thisEvent.Option1) {  					int op1len = data [byteCounter++];  					for (int i = 0; i < op1len; i++) {  						op1Str += (char)data [byteCounter++];  					}  				}  				if (thisEvent.Option2) {  					int op2len = data [byteCounter++];  					for (int i = 0; i < op2len; i++) {  						op2Str += (char)data [byteCounter++];  					}  				}  				contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  				ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  				break;  			default:  				break;  			}  		}  	}  }  catch (TimeoutException) {  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: try {  	int message = _serialPort.ReadByte ();  	if (message == 0x7E) {  		XbeeRx incoming = new XbeeRx ();  		if (incoming.ParseIncomingMessage (_serialPort)) {  			if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  				remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  			}  			List<int> data = incoming.GetMessage ();  			ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  			int byteCounter;  			switch (data [0]) {  			case VERSION_BYTE:  				int version = data [1];  				XbeeTx64Bit transmit;  				List<byte> d = new List<byte> ();  				DataSqlConnection.mutex.WaitOne ();  				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (ret == "") {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  				}  				else {  					int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  					if (version != databaseVersion) {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  						DataSqlConnection.mutex.ReleaseMutex ();  					}  					else {  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  						d.Add (MATCH_BYTE);  						string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  						DataSqlConnection.mutex.ReleaseMutex ();  						string[] nodeInfo = node.Split ('|');  						contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  						contactingNode.SetName (nodeInfo [1]);  						contactingNode.SetAlias (nodeInfo [2]);  						contactingNode.SetBrand (nodeInfo [3]);  						contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  						contactingNode.SetHexAddress (nodeInfo [5]);  						contactingNode.SetRegistered (true);  						//nodeInfo[7] is IsForeign which we don't care about  						contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  						DataSqlConnection.mutex.WaitOne ();  						nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  						DataSqlConnection.mutex.ReleaseMutex ();  						foreach (string s in nodeInfo) {  							if (s == "")  								continue;  							string[] eventData = s.Split ('|');  							Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  							DataSqlConnection.mutex.WaitOne ();  							string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  							DataSqlConnection.mutex.ReleaseMutex ();  							if (optionsData == "") {  								contactingEvent.Option1 = false;  								contactingEvent.Option2 = false;  							}  							else {  								string[] ops = optionsData.Split ('\n');  								string[] opsVals;  								opsVals = ops [0].Split ('|');  								contactingEvent.Option1 = true;  								contactingEvent.SetOption1 (opsVals [3]);  								contactingEvent.SetOption1Value (opsVals [4]);  								if (ops.Length == 3) {  									opsVals = ops [1].Split ('|');  									contactingEvent.Option2 = true;  									contactingEvent.SetOption2 (opsVals [3]);  									contactingEvent.SetOption2Value (opsVals [4]);  								}  							}  							contactingNode.AddEvent (contactingEvent);  						}  					}  				}  				contactingNode.SetVersion ((byte)version);  				transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  				transmit.Send (_serialPort);  				break;  			/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  				string name = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						name += (char)data [i];  				}  				contactingNode.SetName (name);  				contactingNode.SetRegistered (true);  				break;  			/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  				string brand = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						brand += (char)data [i];  				}  				contactingNode.SetBrand (brand);  				AddNodeToDatabase (contactingNode);  				break;  			/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  				byteCounter = 1;  				int nameLen = data [byteCounter++];  				string eventName = "";  				for (int i = 0; i < nameLen; i++) {  					if ((char)data [byteCounter] != '\0')  						eventName += (char)data [byteCounter];  					byteCounter++;  				}  				int descLen = data [byteCounter++];  				string description = "";  				for (int i = 0; i < descLen; i++) {  					if ((char)data [byteCounter] != '\0')  						description += (char)data [byteCounter];  					byteCounter++;  				}  				ushort doubleByte = (ushort)(data [byteCounter++] << 8);  				doubleByte = (ushort)(doubleByte | data [byteCounter++]);  				int eventID = doubleByte & 0x3FF;  				bool triggerable = (doubleByte & 0x8000) > 0;  				bool option1Exists = (doubleByte & 0x800) > 0;  				bool option2Exists = (doubleByte & 0x400) > 0;  				Event e = new Event (eventName' description' eventID' triggerable);  				e.Option1 = option1Exists;  				e.Option2 = option2Exists;  				contactingNode.AddEvent (e);  				AddEventToDatabase (contactingNode' e);  				break;  			case OPTION_BYTE:  				byteCounter = 1;  				int eventId = (ushort)(data [byteCounter++] << 8);  				eventId = (ushort)(eventId | data [byteCounter++]);  				int opDescLen = data [byteCounter++];  				string opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  				currEvent.SetOption1 (opDescription);  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				if (currEvent.Option2) {  					opDescLen = data [byteCounter++];  					opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				}  				break;  			case THROW_BYTE:  				byteCounter = 1;  				if (!contactingNode.GetRegistered ()) {  					break;  				}  				int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  				Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  				string op1Str = "";  				string op2Str = "";  				if (thisEvent.Option1) {  					int op1len = data [byteCounter++];  					for (int i = 0; i < op1len; i++) {  						op1Str += (char)data [byteCounter++];  					}  				}  				if (thisEvent.Option2) {  					int op2len = data [byteCounter++];  					for (int i = 0; i < op2len; i++) {  						op2Str += (char)data [byteCounter++];  					}  				}  				contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  				ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  				break;  			default:  				break;  			}  		}  	}  }  catch (TimeoutException) {  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: try {  	int message = _serialPort.ReadByte ();  	if (message == 0x7E) {  		XbeeRx incoming = new XbeeRx ();  		if (incoming.ParseIncomingMessage (_serialPort)) {  			if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  				remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  			}  			List<int> data = incoming.GetMessage ();  			ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  			int byteCounter;  			switch (data [0]) {  			case VERSION_BYTE:  				int version = data [1];  				XbeeTx64Bit transmit;  				List<byte> d = new List<byte> ();  				DataSqlConnection.mutex.WaitOne ();  				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (ret == "") {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  				}  				else {  					int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  					if (version != databaseVersion) {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  						DataSqlConnection.mutex.ReleaseMutex ();  					}  					else {  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  						d.Add (MATCH_BYTE);  						string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  						DataSqlConnection.mutex.ReleaseMutex ();  						string[] nodeInfo = node.Split ('|');  						contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  						contactingNode.SetName (nodeInfo [1]);  						contactingNode.SetAlias (nodeInfo [2]);  						contactingNode.SetBrand (nodeInfo [3]);  						contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  						contactingNode.SetHexAddress (nodeInfo [5]);  						contactingNode.SetRegistered (true);  						//nodeInfo[7] is IsForeign which we don't care about  						contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  						DataSqlConnection.mutex.WaitOne ();  						nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  						DataSqlConnection.mutex.ReleaseMutex ();  						foreach (string s in nodeInfo) {  							if (s == "")  								continue;  							string[] eventData = s.Split ('|');  							Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  							DataSqlConnection.mutex.WaitOne ();  							string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  							DataSqlConnection.mutex.ReleaseMutex ();  							if (optionsData == "") {  								contactingEvent.Option1 = false;  								contactingEvent.Option2 = false;  							}  							else {  								string[] ops = optionsData.Split ('\n');  								string[] opsVals;  								opsVals = ops [0].Split ('|');  								contactingEvent.Option1 = true;  								contactingEvent.SetOption1 (opsVals [3]);  								contactingEvent.SetOption1Value (opsVals [4]);  								if (ops.Length == 3) {  									opsVals = ops [1].Split ('|');  									contactingEvent.Option2 = true;  									contactingEvent.SetOption2 (opsVals [3]);  									contactingEvent.SetOption2Value (opsVals [4]);  								}  							}  							contactingNode.AddEvent (contactingEvent);  						}  					}  				}  				contactingNode.SetVersion ((byte)version);  				transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  				transmit.Send (_serialPort);  				break;  			/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  				string name = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						name += (char)data [i];  				}  				contactingNode.SetName (name);  				contactingNode.SetRegistered (true);  				break;  			/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  				string brand = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						brand += (char)data [i];  				}  				contactingNode.SetBrand (brand);  				AddNodeToDatabase (contactingNode);  				break;  			/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  				byteCounter = 1;  				int nameLen = data [byteCounter++];  				string eventName = "";  				for (int i = 0; i < nameLen; i++) {  					if ((char)data [byteCounter] != '\0')  						eventName += (char)data [byteCounter];  					byteCounter++;  				}  				int descLen = data [byteCounter++];  				string description = "";  				for (int i = 0; i < descLen; i++) {  					if ((char)data [byteCounter] != '\0')  						description += (char)data [byteCounter];  					byteCounter++;  				}  				ushort doubleByte = (ushort)(data [byteCounter++] << 8);  				doubleByte = (ushort)(doubleByte | data [byteCounter++]);  				int eventID = doubleByte & 0x3FF;  				bool triggerable = (doubleByte & 0x8000) > 0;  				bool option1Exists = (doubleByte & 0x800) > 0;  				bool option2Exists = (doubleByte & 0x400) > 0;  				Event e = new Event (eventName' description' eventID' triggerable);  				e.Option1 = option1Exists;  				e.Option2 = option2Exists;  				contactingNode.AddEvent (e);  				AddEventToDatabase (contactingNode' e);  				break;  			case OPTION_BYTE:  				byteCounter = 1;  				int eventId = (ushort)(data [byteCounter++] << 8);  				eventId = (ushort)(eventId | data [byteCounter++]);  				int opDescLen = data [byteCounter++];  				string opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  				currEvent.SetOption1 (opDescription);  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				if (currEvent.Option2) {  					opDescLen = data [byteCounter++];  					opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				}  				break;  			case THROW_BYTE:  				byteCounter = 1;  				if (!contactingNode.GetRegistered ()) {  					break;  				}  				int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  				Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  				string op1Str = "";  				string op2Str = "";  				if (thisEvent.Option1) {  					int op1len = data [byteCounter++];  					for (int i = 0; i < op1len; i++) {  						op1Str += (char)data [byteCounter++];  					}  				}  				if (thisEvent.Option2) {  					int op2len = data [byteCounter++];  					for (int i = 0; i < op2len; i++) {  						op2Str += (char)data [byteCounter++];  					}  				}  				contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  				ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  				break;  			default:  				break;  			}  		}  	}  }  catch (TimeoutException) {  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: try {  	int message = _serialPort.ReadByte ();  	if (message == 0x7E) {  		XbeeRx incoming = new XbeeRx ();  		if (incoming.ParseIncomingMessage (_serialPort)) {  			if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  				remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  			}  			List<int> data = incoming.GetMessage ();  			ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  			int byteCounter;  			switch (data [0]) {  			case VERSION_BYTE:  				int version = data [1];  				XbeeTx64Bit transmit;  				List<byte> d = new List<byte> ();  				DataSqlConnection.mutex.WaitOne ();  				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (ret == "") {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  				}  				else {  					int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  					if (version != databaseVersion) {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  						DataSqlConnection.mutex.ReleaseMutex ();  					}  					else {  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  						d.Add (MATCH_BYTE);  						string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  						DataSqlConnection.mutex.ReleaseMutex ();  						string[] nodeInfo = node.Split ('|');  						contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  						contactingNode.SetName (nodeInfo [1]);  						contactingNode.SetAlias (nodeInfo [2]);  						contactingNode.SetBrand (nodeInfo [3]);  						contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  						contactingNode.SetHexAddress (nodeInfo [5]);  						contactingNode.SetRegistered (true);  						//nodeInfo[7] is IsForeign which we don't care about  						contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  						DataSqlConnection.mutex.WaitOne ();  						nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  						DataSqlConnection.mutex.ReleaseMutex ();  						foreach (string s in nodeInfo) {  							if (s == "")  								continue;  							string[] eventData = s.Split ('|');  							Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  							DataSqlConnection.mutex.WaitOne ();  							string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  							DataSqlConnection.mutex.ReleaseMutex ();  							if (optionsData == "") {  								contactingEvent.Option1 = false;  								contactingEvent.Option2 = false;  							}  							else {  								string[] ops = optionsData.Split ('\n');  								string[] opsVals;  								opsVals = ops [0].Split ('|');  								contactingEvent.Option1 = true;  								contactingEvent.SetOption1 (opsVals [3]);  								contactingEvent.SetOption1Value (opsVals [4]);  								if (ops.Length == 3) {  									opsVals = ops [1].Split ('|');  									contactingEvent.Option2 = true;  									contactingEvent.SetOption2 (opsVals [3]);  									contactingEvent.SetOption2Value (opsVals [4]);  								}  							}  							contactingNode.AddEvent (contactingEvent);  						}  					}  				}  				contactingNode.SetVersion ((byte)version);  				transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  				transmit.Send (_serialPort);  				break;  			/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  				string name = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						name += (char)data [i];  				}  				contactingNode.SetName (name);  				contactingNode.SetRegistered (true);  				break;  			/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  				string brand = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						brand += (char)data [i];  				}  				contactingNode.SetBrand (brand);  				AddNodeToDatabase (contactingNode);  				break;  			/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  				byteCounter = 1;  				int nameLen = data [byteCounter++];  				string eventName = "";  				for (int i = 0; i < nameLen; i++) {  					if ((char)data [byteCounter] != '\0')  						eventName += (char)data [byteCounter];  					byteCounter++;  				}  				int descLen = data [byteCounter++];  				string description = "";  				for (int i = 0; i < descLen; i++) {  					if ((char)data [byteCounter] != '\0')  						description += (char)data [byteCounter];  					byteCounter++;  				}  				ushort doubleByte = (ushort)(data [byteCounter++] << 8);  				doubleByte = (ushort)(doubleByte | data [byteCounter++]);  				int eventID = doubleByte & 0x3FF;  				bool triggerable = (doubleByte & 0x8000) > 0;  				bool option1Exists = (doubleByte & 0x800) > 0;  				bool option2Exists = (doubleByte & 0x400) > 0;  				Event e = new Event (eventName' description' eventID' triggerable);  				e.Option1 = option1Exists;  				e.Option2 = option2Exists;  				contactingNode.AddEvent (e);  				AddEventToDatabase (contactingNode' e);  				break;  			case OPTION_BYTE:  				byteCounter = 1;  				int eventId = (ushort)(data [byteCounter++] << 8);  				eventId = (ushort)(eventId | data [byteCounter++]);  				int opDescLen = data [byteCounter++];  				string opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  				currEvent.SetOption1 (opDescription);  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				if (currEvent.Option2) {  					opDescLen = data [byteCounter++];  					opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				}  				break;  			case THROW_BYTE:  				byteCounter = 1;  				if (!contactingNode.GetRegistered ()) {  					break;  				}  				int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  				Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  				string op1Str = "";  				string op2Str = "";  				if (thisEvent.Option1) {  					int op1len = data [byteCounter++];  					for (int i = 0; i < op1len; i++) {  						op1Str += (char)data [byteCounter++];  					}  				}  				if (thisEvent.Option2) {  					int op2len = data [byteCounter++];  					for (int i = 0; i < op2len; i++) {  						op2Str += (char)data [byteCounter++];  					}  				}  				contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  				ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  				break;  			default:  				break;  			}  		}  	}  }  catch (TimeoutException) {  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: try {  	int message = _serialPort.ReadByte ();  	if (message == 0x7E) {  		XbeeRx incoming = new XbeeRx ();  		if (incoming.ParseIncomingMessage (_serialPort)) {  			if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  				remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  			}  			List<int> data = incoming.GetMessage ();  			ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  			int byteCounter;  			switch (data [0]) {  			case VERSION_BYTE:  				int version = data [1];  				XbeeTx64Bit transmit;  				List<byte> d = new List<byte> ();  				DataSqlConnection.mutex.WaitOne ();  				string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (ret == "") {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  				}  				else {  					int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  					if (version != databaseVersion) {  						d.Add (MISMATCH_BYTE);  						contactingNode.ResetNode ();  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  						DataSqlConnection.mutex.ReleaseMutex ();  					}  					else {  						DataSqlConnection.mutex.WaitOne ();  						DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  						d.Add (MATCH_BYTE);  						string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  						DataSqlConnection.mutex.ReleaseMutex ();  						string[] nodeInfo = node.Split ('|');  						contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  						contactingNode.SetName (nodeInfo [1]);  						contactingNode.SetAlias (nodeInfo [2]);  						contactingNode.SetBrand (nodeInfo [3]);  						contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  						contactingNode.SetHexAddress (nodeInfo [5]);  						contactingNode.SetRegistered (true);  						//nodeInfo[7] is IsForeign which we don't care about  						contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  						DataSqlConnection.mutex.WaitOne ();  						nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  						DataSqlConnection.mutex.ReleaseMutex ();  						foreach (string s in nodeInfo) {  							if (s == "")  								continue;  							string[] eventData = s.Split ('|');  							Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  							DataSqlConnection.mutex.WaitOne ();  							string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  							DataSqlConnection.mutex.ReleaseMutex ();  							if (optionsData == "") {  								contactingEvent.Option1 = false;  								contactingEvent.Option2 = false;  							}  							else {  								string[] ops = optionsData.Split ('\n');  								string[] opsVals;  								opsVals = ops [0].Split ('|');  								contactingEvent.Option1 = true;  								contactingEvent.SetOption1 (opsVals [3]);  								contactingEvent.SetOption1Value (opsVals [4]);  								if (ops.Length == 3) {  									opsVals = ops [1].Split ('|');  									contactingEvent.Option2 = true;  									contactingEvent.SetOption2 (opsVals [3]);  									contactingEvent.SetOption2Value (opsVals [4]);  								}  							}  							contactingNode.AddEvent (contactingEvent);  						}  					}  				}  				contactingNode.SetVersion ((byte)version);  				transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  				transmit.Send (_serialPort);  				break;  			/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  				string name = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						name += (char)data [i];  				}  				contactingNode.SetName (name);  				contactingNode.SetRegistered (true);  				break;  			/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  				string brand = "";  				for (int i = 1; i < data.Count; i++) {  					if ((char)data [i] != '\0')  						brand += (char)data [i];  				}  				contactingNode.SetBrand (brand);  				AddNodeToDatabase (contactingNode);  				break;  			/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  				byteCounter = 1;  				int nameLen = data [byteCounter++];  				string eventName = "";  				for (int i = 0; i < nameLen; i++) {  					if ((char)data [byteCounter] != '\0')  						eventName += (char)data [byteCounter];  					byteCounter++;  				}  				int descLen = data [byteCounter++];  				string description = "";  				for (int i = 0; i < descLen; i++) {  					if ((char)data [byteCounter] != '\0')  						description += (char)data [byteCounter];  					byteCounter++;  				}  				ushort doubleByte = (ushort)(data [byteCounter++] << 8);  				doubleByte = (ushort)(doubleByte | data [byteCounter++]);  				int eventID = doubleByte & 0x3FF;  				bool triggerable = (doubleByte & 0x8000) > 0;  				bool option1Exists = (doubleByte & 0x800) > 0;  				bool option2Exists = (doubleByte & 0x400) > 0;  				Event e = new Event (eventName' description' eventID' triggerable);  				e.Option1 = option1Exists;  				e.Option2 = option2Exists;  				contactingNode.AddEvent (e);  				AddEventToDatabase (contactingNode' e);  				break;  			case OPTION_BYTE:  				byteCounter = 1;  				int eventId = (ushort)(data [byteCounter++] << 8);  				eventId = (ushort)(eventId | data [byteCounter++]);  				int opDescLen = data [byteCounter++];  				string opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  				currEvent.SetOption1 (opDescription);  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				if (currEvent.Option2) {  					opDescLen = data [byteCounter++];  					opDescription = "";  					for (int i = 0; i < opDescLen; i++) {  						if ((char)data [byteCounter] != '\0')  							opDescription += (char)data [byteCounter];  						byteCounter++;  					}  					AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  				}  				break;  			case THROW_BYTE:  				byteCounter = 1;  				if (!contactingNode.GetRegistered ()) {  					break;  				}  				int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  				Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  				string op1Str = "";  				string op2Str = "";  				if (thisEvent.Option1) {  					int op1len = data [byteCounter++];  					for (int i = 0; i < op1len; i++) {  						op1Str += (char)data [byteCounter++];  					}  				}  				if (thisEvent.Option2) {  					int op2len = data [byteCounter++];  					for (int i = 0; i < op2len; i++) {  						op2Str += (char)data [byteCounter++];  					}  				}  				contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  				ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  				break;  			default:  				break;  			}  		}  	}  }  catch (TimeoutException) {  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (message == 0x7E) {  	XbeeRx incoming = new XbeeRx ();  	if (incoming.ParseIncomingMessage (_serialPort)) {  		if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  			remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  		}  		List<int> data = incoming.GetMessage ();  		ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  		int byteCounter;  		switch (data [0]) {  		case VERSION_BYTE:  			int version = data [1];  			XbeeTx64Bit transmit;  			List<byte> d = new List<byte> ();  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "") {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  			}  			else {  				int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  				if (version != databaseVersion) {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  				}  				else {  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					d.Add (MATCH_BYTE);  					string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  					DataSqlConnection.mutex.ReleaseMutex ();  					string[] nodeInfo = node.Split ('|');  					contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  					contactingNode.SetName (nodeInfo [1]);  					contactingNode.SetAlias (nodeInfo [2]);  					contactingNode.SetBrand (nodeInfo [3]);  					contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  					contactingNode.SetHexAddress (nodeInfo [5]);  					contactingNode.SetRegistered (true);  					//nodeInfo[7] is IsForeign which we don't care about  					contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  					DataSqlConnection.mutex.WaitOne ();  					nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  					DataSqlConnection.mutex.ReleaseMutex ();  					foreach (string s in nodeInfo) {  						if (s == "")  							continue;  						string[] eventData = s.Split ('|');  						Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  						DataSqlConnection.mutex.WaitOne ();  						string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  						DataSqlConnection.mutex.ReleaseMutex ();  						if (optionsData == "") {  							contactingEvent.Option1 = false;  							contactingEvent.Option2 = false;  						}  						else {  							string[] ops = optionsData.Split ('\n');  							string[] opsVals;  							opsVals = ops [0].Split ('|');  							contactingEvent.Option1 = true;  							contactingEvent.SetOption1 (opsVals [3]);  							contactingEvent.SetOption1Value (opsVals [4]);  							if (ops.Length == 3) {  								opsVals = ops [1].Split ('|');  								contactingEvent.Option2 = true;  								contactingEvent.SetOption2 (opsVals [3]);  								contactingEvent.SetOption2Value (opsVals [4]);  							}  						}  						contactingNode.AddEvent (contactingEvent);  					}  				}  			}  			contactingNode.SetVersion ((byte)version);  			transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  			transmit.Send (_serialPort);  			break;  		/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  			string name = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					name += (char)data [i];  			}  			contactingNode.SetName (name);  			contactingNode.SetRegistered (true);  			break;  		/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  			string brand = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					brand += (char)data [i];  			}  			contactingNode.SetBrand (brand);  			AddNodeToDatabase (contactingNode);  			break;  		/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  			byteCounter = 1;  			int nameLen = data [byteCounter++];  			string eventName = "";  			for (int i = 0; i < nameLen; i++) {  				if ((char)data [byteCounter] != '\0')  					eventName += (char)data [byteCounter];  				byteCounter++;  			}  			int descLen = data [byteCounter++];  			string description = "";  			for (int i = 0; i < descLen; i++) {  				if ((char)data [byteCounter] != '\0')  					description += (char)data [byteCounter];  				byteCounter++;  			}  			ushort doubleByte = (ushort)(data [byteCounter++] << 8);  			doubleByte = (ushort)(doubleByte | data [byteCounter++]);  			int eventID = doubleByte & 0x3FF;  			bool triggerable = (doubleByte & 0x8000) > 0;  			bool option1Exists = (doubleByte & 0x800) > 0;  			bool option2Exists = (doubleByte & 0x400) > 0;  			Event e = new Event (eventName' description' eventID' triggerable);  			e.Option1 = option1Exists;  			e.Option2 = option2Exists;  			contactingNode.AddEvent (e);  			AddEventToDatabase (contactingNode' e);  			break;  		case OPTION_BYTE:  			byteCounter = 1;  			int eventId = (ushort)(data [byteCounter++] << 8);  			eventId = (ushort)(eventId | data [byteCounter++]);  			int opDescLen = data [byteCounter++];  			string opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  			currEvent.SetOption1 (opDescription);  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			if (currEvent.Option2) {  				opDescLen = data [byteCounter++];  				opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			}  			break;  		case THROW_BYTE:  			byteCounter = 1;  			if (!contactingNode.GetRegistered ()) {  				break;  			}  			int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  			Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  			string op1Str = "";  			string op2Str = "";  			if (thisEvent.Option1) {  				int op1len = data [byteCounter++];  				for (int i = 0; i < op1len; i++) {  					op1Str += (char)data [byteCounter++];  				}  			}  			if (thisEvent.Option2) {  				int op2len = data [byteCounter++];  				for (int i = 0; i < op2len; i++) {  					op2Str += (char)data [byteCounter++];  				}  			}  			contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  			ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  			break;  		default:  			break;  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (message == 0x7E) {  	XbeeRx incoming = new XbeeRx ();  	if (incoming.ParseIncomingMessage (_serialPort)) {  		if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  			remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  		}  		List<int> data = incoming.GetMessage ();  		ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  		int byteCounter;  		switch (data [0]) {  		case VERSION_BYTE:  			int version = data [1];  			XbeeTx64Bit transmit;  			List<byte> d = new List<byte> ();  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "") {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  			}  			else {  				int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  				if (version != databaseVersion) {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  				}  				else {  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					d.Add (MATCH_BYTE);  					string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  					DataSqlConnection.mutex.ReleaseMutex ();  					string[] nodeInfo = node.Split ('|');  					contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  					contactingNode.SetName (nodeInfo [1]);  					contactingNode.SetAlias (nodeInfo [2]);  					contactingNode.SetBrand (nodeInfo [3]);  					contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  					contactingNode.SetHexAddress (nodeInfo [5]);  					contactingNode.SetRegistered (true);  					//nodeInfo[7] is IsForeign which we don't care about  					contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  					DataSqlConnection.mutex.WaitOne ();  					nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  					DataSqlConnection.mutex.ReleaseMutex ();  					foreach (string s in nodeInfo) {  						if (s == "")  							continue;  						string[] eventData = s.Split ('|');  						Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  						DataSqlConnection.mutex.WaitOne ();  						string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  						DataSqlConnection.mutex.ReleaseMutex ();  						if (optionsData == "") {  							contactingEvent.Option1 = false;  							contactingEvent.Option2 = false;  						}  						else {  							string[] ops = optionsData.Split ('\n');  							string[] opsVals;  							opsVals = ops [0].Split ('|');  							contactingEvent.Option1 = true;  							contactingEvent.SetOption1 (opsVals [3]);  							contactingEvent.SetOption1Value (opsVals [4]);  							if (ops.Length == 3) {  								opsVals = ops [1].Split ('|');  								contactingEvent.Option2 = true;  								contactingEvent.SetOption2 (opsVals [3]);  								contactingEvent.SetOption2Value (opsVals [4]);  							}  						}  						contactingNode.AddEvent (contactingEvent);  					}  				}  			}  			contactingNode.SetVersion ((byte)version);  			transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  			transmit.Send (_serialPort);  			break;  		/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  			string name = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					name += (char)data [i];  			}  			contactingNode.SetName (name);  			contactingNode.SetRegistered (true);  			break;  		/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  			string brand = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					brand += (char)data [i];  			}  			contactingNode.SetBrand (brand);  			AddNodeToDatabase (contactingNode);  			break;  		/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  			byteCounter = 1;  			int nameLen = data [byteCounter++];  			string eventName = "";  			for (int i = 0; i < nameLen; i++) {  				if ((char)data [byteCounter] != '\0')  					eventName += (char)data [byteCounter];  				byteCounter++;  			}  			int descLen = data [byteCounter++];  			string description = "";  			for (int i = 0; i < descLen; i++) {  				if ((char)data [byteCounter] != '\0')  					description += (char)data [byteCounter];  				byteCounter++;  			}  			ushort doubleByte = (ushort)(data [byteCounter++] << 8);  			doubleByte = (ushort)(doubleByte | data [byteCounter++]);  			int eventID = doubleByte & 0x3FF;  			bool triggerable = (doubleByte & 0x8000) > 0;  			bool option1Exists = (doubleByte & 0x800) > 0;  			bool option2Exists = (doubleByte & 0x400) > 0;  			Event e = new Event (eventName' description' eventID' triggerable);  			e.Option1 = option1Exists;  			e.Option2 = option2Exists;  			contactingNode.AddEvent (e);  			AddEventToDatabase (contactingNode' e);  			break;  		case OPTION_BYTE:  			byteCounter = 1;  			int eventId = (ushort)(data [byteCounter++] << 8);  			eventId = (ushort)(eventId | data [byteCounter++]);  			int opDescLen = data [byteCounter++];  			string opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  			currEvent.SetOption1 (opDescription);  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			if (currEvent.Option2) {  				opDescLen = data [byteCounter++];  				opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			}  			break;  		case THROW_BYTE:  			byteCounter = 1;  			if (!contactingNode.GetRegistered ()) {  				break;  			}  			int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  			Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  			string op1Str = "";  			string op2Str = "";  			if (thisEvent.Option1) {  				int op1len = data [byteCounter++];  				for (int i = 0; i < op1len; i++) {  					op1Str += (char)data [byteCounter++];  				}  			}  			if (thisEvent.Option2) {  				int op2len = data [byteCounter++];  				for (int i = 0; i < op2len; i++) {  					op2Str += (char)data [byteCounter++];  				}  			}  			contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  			ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  			break;  		default:  			break;  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (message == 0x7E) {  	XbeeRx incoming = new XbeeRx ();  	if (incoming.ParseIncomingMessage (_serialPort)) {  		if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  			remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  		}  		List<int> data = incoming.GetMessage ();  		ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  		int byteCounter;  		switch (data [0]) {  		case VERSION_BYTE:  			int version = data [1];  			XbeeTx64Bit transmit;  			List<byte> d = new List<byte> ();  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "") {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  			}  			else {  				int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  				if (version != databaseVersion) {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  				}  				else {  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					d.Add (MATCH_BYTE);  					string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  					DataSqlConnection.mutex.ReleaseMutex ();  					string[] nodeInfo = node.Split ('|');  					contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  					contactingNode.SetName (nodeInfo [1]);  					contactingNode.SetAlias (nodeInfo [2]);  					contactingNode.SetBrand (nodeInfo [3]);  					contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  					contactingNode.SetHexAddress (nodeInfo [5]);  					contactingNode.SetRegistered (true);  					//nodeInfo[7] is IsForeign which we don't care about  					contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  					DataSqlConnection.mutex.WaitOne ();  					nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  					DataSqlConnection.mutex.ReleaseMutex ();  					foreach (string s in nodeInfo) {  						if (s == "")  							continue;  						string[] eventData = s.Split ('|');  						Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  						DataSqlConnection.mutex.WaitOne ();  						string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  						DataSqlConnection.mutex.ReleaseMutex ();  						if (optionsData == "") {  							contactingEvent.Option1 = false;  							contactingEvent.Option2 = false;  						}  						else {  							string[] ops = optionsData.Split ('\n');  							string[] opsVals;  							opsVals = ops [0].Split ('|');  							contactingEvent.Option1 = true;  							contactingEvent.SetOption1 (opsVals [3]);  							contactingEvent.SetOption1Value (opsVals [4]);  							if (ops.Length == 3) {  								opsVals = ops [1].Split ('|');  								contactingEvent.Option2 = true;  								contactingEvent.SetOption2 (opsVals [3]);  								contactingEvent.SetOption2Value (opsVals [4]);  							}  						}  						contactingNode.AddEvent (contactingEvent);  					}  				}  			}  			contactingNode.SetVersion ((byte)version);  			transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  			transmit.Send (_serialPort);  			break;  		/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  			string name = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					name += (char)data [i];  			}  			contactingNode.SetName (name);  			contactingNode.SetRegistered (true);  			break;  		/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  			string brand = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					brand += (char)data [i];  			}  			contactingNode.SetBrand (brand);  			AddNodeToDatabase (contactingNode);  			break;  		/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  			byteCounter = 1;  			int nameLen = data [byteCounter++];  			string eventName = "";  			for (int i = 0; i < nameLen; i++) {  				if ((char)data [byteCounter] != '\0')  					eventName += (char)data [byteCounter];  				byteCounter++;  			}  			int descLen = data [byteCounter++];  			string description = "";  			for (int i = 0; i < descLen; i++) {  				if ((char)data [byteCounter] != '\0')  					description += (char)data [byteCounter];  				byteCounter++;  			}  			ushort doubleByte = (ushort)(data [byteCounter++] << 8);  			doubleByte = (ushort)(doubleByte | data [byteCounter++]);  			int eventID = doubleByte & 0x3FF;  			bool triggerable = (doubleByte & 0x8000) > 0;  			bool option1Exists = (doubleByte & 0x800) > 0;  			bool option2Exists = (doubleByte & 0x400) > 0;  			Event e = new Event (eventName' description' eventID' triggerable);  			e.Option1 = option1Exists;  			e.Option2 = option2Exists;  			contactingNode.AddEvent (e);  			AddEventToDatabase (contactingNode' e);  			break;  		case OPTION_BYTE:  			byteCounter = 1;  			int eventId = (ushort)(data [byteCounter++] << 8);  			eventId = (ushort)(eventId | data [byteCounter++]);  			int opDescLen = data [byteCounter++];  			string opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  			currEvent.SetOption1 (opDescription);  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			if (currEvent.Option2) {  				opDescLen = data [byteCounter++];  				opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			}  			break;  		case THROW_BYTE:  			byteCounter = 1;  			if (!contactingNode.GetRegistered ()) {  				break;  			}  			int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  			Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  			string op1Str = "";  			string op2Str = "";  			if (thisEvent.Option1) {  				int op1len = data [byteCounter++];  				for (int i = 0; i < op1len; i++) {  					op1Str += (char)data [byteCounter++];  				}  			}  			if (thisEvent.Option2) {  				int op2len = data [byteCounter++];  				for (int i = 0; i < op2len; i++) {  					op2Str += (char)data [byteCounter++];  				}  			}  			contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  			ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  			break;  		default:  			break;  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (message == 0x7E) {  	XbeeRx incoming = new XbeeRx ();  	if (incoming.ParseIncomingMessage (_serialPort)) {  		if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  			remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  		}  		List<int> data = incoming.GetMessage ();  		ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  		int byteCounter;  		switch (data [0]) {  		case VERSION_BYTE:  			int version = data [1];  			XbeeTx64Bit transmit;  			List<byte> d = new List<byte> ();  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "") {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  			}  			else {  				int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  				if (version != databaseVersion) {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  				}  				else {  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					d.Add (MATCH_BYTE);  					string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  					DataSqlConnection.mutex.ReleaseMutex ();  					string[] nodeInfo = node.Split ('|');  					contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  					contactingNode.SetName (nodeInfo [1]);  					contactingNode.SetAlias (nodeInfo [2]);  					contactingNode.SetBrand (nodeInfo [3]);  					contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  					contactingNode.SetHexAddress (nodeInfo [5]);  					contactingNode.SetRegistered (true);  					//nodeInfo[7] is IsForeign which we don't care about  					contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  					DataSqlConnection.mutex.WaitOne ();  					nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  					DataSqlConnection.mutex.ReleaseMutex ();  					foreach (string s in nodeInfo) {  						if (s == "")  							continue;  						string[] eventData = s.Split ('|');  						Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  						DataSqlConnection.mutex.WaitOne ();  						string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  						DataSqlConnection.mutex.ReleaseMutex ();  						if (optionsData == "") {  							contactingEvent.Option1 = false;  							contactingEvent.Option2 = false;  						}  						else {  							string[] ops = optionsData.Split ('\n');  							string[] opsVals;  							opsVals = ops [0].Split ('|');  							contactingEvent.Option1 = true;  							contactingEvent.SetOption1 (opsVals [3]);  							contactingEvent.SetOption1Value (opsVals [4]);  							if (ops.Length == 3) {  								opsVals = ops [1].Split ('|');  								contactingEvent.Option2 = true;  								contactingEvent.SetOption2 (opsVals [3]);  								contactingEvent.SetOption2Value (opsVals [4]);  							}  						}  						contactingNode.AddEvent (contactingEvent);  					}  				}  			}  			contactingNode.SetVersion ((byte)version);  			transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  			transmit.Send (_serialPort);  			break;  		/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  			string name = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					name += (char)data [i];  			}  			contactingNode.SetName (name);  			contactingNode.SetRegistered (true);  			break;  		/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  			string brand = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					brand += (char)data [i];  			}  			contactingNode.SetBrand (brand);  			AddNodeToDatabase (contactingNode);  			break;  		/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  			byteCounter = 1;  			int nameLen = data [byteCounter++];  			string eventName = "";  			for (int i = 0; i < nameLen; i++) {  				if ((char)data [byteCounter] != '\0')  					eventName += (char)data [byteCounter];  				byteCounter++;  			}  			int descLen = data [byteCounter++];  			string description = "";  			for (int i = 0; i < descLen; i++) {  				if ((char)data [byteCounter] != '\0')  					description += (char)data [byteCounter];  				byteCounter++;  			}  			ushort doubleByte = (ushort)(data [byteCounter++] << 8);  			doubleByte = (ushort)(doubleByte | data [byteCounter++]);  			int eventID = doubleByte & 0x3FF;  			bool triggerable = (doubleByte & 0x8000) > 0;  			bool option1Exists = (doubleByte & 0x800) > 0;  			bool option2Exists = (doubleByte & 0x400) > 0;  			Event e = new Event (eventName' description' eventID' triggerable);  			e.Option1 = option1Exists;  			e.Option2 = option2Exists;  			contactingNode.AddEvent (e);  			AddEventToDatabase (contactingNode' e);  			break;  		case OPTION_BYTE:  			byteCounter = 1;  			int eventId = (ushort)(data [byteCounter++] << 8);  			eventId = (ushort)(eventId | data [byteCounter++]);  			int opDescLen = data [byteCounter++];  			string opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  			currEvent.SetOption1 (opDescription);  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			if (currEvent.Option2) {  				opDescLen = data [byteCounter++];  				opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			}  			break;  		case THROW_BYTE:  			byteCounter = 1;  			if (!contactingNode.GetRegistered ()) {  				break;  			}  			int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  			Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  			string op1Str = "";  			string op2Str = "";  			if (thisEvent.Option1) {  				int op1len = data [byteCounter++];  				for (int i = 0; i < op1len; i++) {  					op1Str += (char)data [byteCounter++];  				}  			}  			if (thisEvent.Option2) {  				int op2len = data [byteCounter++];  				for (int i = 0; i < op2len; i++) {  					op2Str += (char)data [byteCounter++];  				}  			}  			contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  			ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  			break;  		default:  			break;  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (message == 0x7E) {  	XbeeRx incoming = new XbeeRx ();  	if (incoming.ParseIncomingMessage (_serialPort)) {  		if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  			remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  		}  		List<int> data = incoming.GetMessage ();  		ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  		int byteCounter;  		switch (data [0]) {  		case VERSION_BYTE:  			int version = data [1];  			XbeeTx64Bit transmit;  			List<byte> d = new List<byte> ();  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "") {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  			}  			else {  				int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  				if (version != databaseVersion) {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  				}  				else {  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					d.Add (MATCH_BYTE);  					string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  					DataSqlConnection.mutex.ReleaseMutex ();  					string[] nodeInfo = node.Split ('|');  					contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  					contactingNode.SetName (nodeInfo [1]);  					contactingNode.SetAlias (nodeInfo [2]);  					contactingNode.SetBrand (nodeInfo [3]);  					contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  					contactingNode.SetHexAddress (nodeInfo [5]);  					contactingNode.SetRegistered (true);  					//nodeInfo[7] is IsForeign which we don't care about  					contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  					DataSqlConnection.mutex.WaitOne ();  					nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  					DataSqlConnection.mutex.ReleaseMutex ();  					foreach (string s in nodeInfo) {  						if (s == "")  							continue;  						string[] eventData = s.Split ('|');  						Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  						DataSqlConnection.mutex.WaitOne ();  						string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  						DataSqlConnection.mutex.ReleaseMutex ();  						if (optionsData == "") {  							contactingEvent.Option1 = false;  							contactingEvent.Option2 = false;  						}  						else {  							string[] ops = optionsData.Split ('\n');  							string[] opsVals;  							opsVals = ops [0].Split ('|');  							contactingEvent.Option1 = true;  							contactingEvent.SetOption1 (opsVals [3]);  							contactingEvent.SetOption1Value (opsVals [4]);  							if (ops.Length == 3) {  								opsVals = ops [1].Split ('|');  								contactingEvent.Option2 = true;  								contactingEvent.SetOption2 (opsVals [3]);  								contactingEvent.SetOption2Value (opsVals [4]);  							}  						}  						contactingNode.AddEvent (contactingEvent);  					}  				}  			}  			contactingNode.SetVersion ((byte)version);  			transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  			transmit.Send (_serialPort);  			break;  		/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  			string name = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					name += (char)data [i];  			}  			contactingNode.SetName (name);  			contactingNode.SetRegistered (true);  			break;  		/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  			string brand = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					brand += (char)data [i];  			}  			contactingNode.SetBrand (brand);  			AddNodeToDatabase (contactingNode);  			break;  		/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  			byteCounter = 1;  			int nameLen = data [byteCounter++];  			string eventName = "";  			for (int i = 0; i < nameLen; i++) {  				if ((char)data [byteCounter] != '\0')  					eventName += (char)data [byteCounter];  				byteCounter++;  			}  			int descLen = data [byteCounter++];  			string description = "";  			for (int i = 0; i < descLen; i++) {  				if ((char)data [byteCounter] != '\0')  					description += (char)data [byteCounter];  				byteCounter++;  			}  			ushort doubleByte = (ushort)(data [byteCounter++] << 8);  			doubleByte = (ushort)(doubleByte | data [byteCounter++]);  			int eventID = doubleByte & 0x3FF;  			bool triggerable = (doubleByte & 0x8000) > 0;  			bool option1Exists = (doubleByte & 0x800) > 0;  			bool option2Exists = (doubleByte & 0x400) > 0;  			Event e = new Event (eventName' description' eventID' triggerable);  			e.Option1 = option1Exists;  			e.Option2 = option2Exists;  			contactingNode.AddEvent (e);  			AddEventToDatabase (contactingNode' e);  			break;  		case OPTION_BYTE:  			byteCounter = 1;  			int eventId = (ushort)(data [byteCounter++] << 8);  			eventId = (ushort)(eventId | data [byteCounter++]);  			int opDescLen = data [byteCounter++];  			string opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  			currEvent.SetOption1 (opDescription);  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			if (currEvent.Option2) {  				opDescLen = data [byteCounter++];  				opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			}  			break;  		case THROW_BYTE:  			byteCounter = 1;  			if (!contactingNode.GetRegistered ()) {  				break;  			}  			int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  			Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  			string op1Str = "";  			string op2Str = "";  			if (thisEvent.Option1) {  				int op1len = data [byteCounter++];  				for (int i = 0; i < op1len; i++) {  					op1Str += (char)data [byteCounter++];  				}  			}  			if (thisEvent.Option2) {  				int op2len = data [byteCounter++];  				for (int i = 0; i < op2len; i++) {  					op2Str += (char)data [byteCounter++];  				}  			}  			contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  			ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  			break;  		default:  			break;  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (message == 0x7E) {  	XbeeRx incoming = new XbeeRx ();  	if (incoming.ParseIncomingMessage (_serialPort)) {  		if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  			remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  		}  		List<int> data = incoming.GetMessage ();  		ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  		int byteCounter;  		switch (data [0]) {  		case VERSION_BYTE:  			int version = data [1];  			XbeeTx64Bit transmit;  			List<byte> d = new List<byte> ();  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "") {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  			}  			else {  				int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  				if (version != databaseVersion) {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  				}  				else {  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					d.Add (MATCH_BYTE);  					string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  					DataSqlConnection.mutex.ReleaseMutex ();  					string[] nodeInfo = node.Split ('|');  					contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  					contactingNode.SetName (nodeInfo [1]);  					contactingNode.SetAlias (nodeInfo [2]);  					contactingNode.SetBrand (nodeInfo [3]);  					contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  					contactingNode.SetHexAddress (nodeInfo [5]);  					contactingNode.SetRegistered (true);  					//nodeInfo[7] is IsForeign which we don't care about  					contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  					DataSqlConnection.mutex.WaitOne ();  					nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  					DataSqlConnection.mutex.ReleaseMutex ();  					foreach (string s in nodeInfo) {  						if (s == "")  							continue;  						string[] eventData = s.Split ('|');  						Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  						DataSqlConnection.mutex.WaitOne ();  						string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  						DataSqlConnection.mutex.ReleaseMutex ();  						if (optionsData == "") {  							contactingEvent.Option1 = false;  							contactingEvent.Option2 = false;  						}  						else {  							string[] ops = optionsData.Split ('\n');  							string[] opsVals;  							opsVals = ops [0].Split ('|');  							contactingEvent.Option1 = true;  							contactingEvent.SetOption1 (opsVals [3]);  							contactingEvent.SetOption1Value (opsVals [4]);  							if (ops.Length == 3) {  								opsVals = ops [1].Split ('|');  								contactingEvent.Option2 = true;  								contactingEvent.SetOption2 (opsVals [3]);  								contactingEvent.SetOption2Value (opsVals [4]);  							}  						}  						contactingNode.AddEvent (contactingEvent);  					}  				}  			}  			contactingNode.SetVersion ((byte)version);  			transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  			transmit.Send (_serialPort);  			break;  		/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  			string name = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					name += (char)data [i];  			}  			contactingNode.SetName (name);  			contactingNode.SetRegistered (true);  			break;  		/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  			string brand = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					brand += (char)data [i];  			}  			contactingNode.SetBrand (brand);  			AddNodeToDatabase (contactingNode);  			break;  		/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  			byteCounter = 1;  			int nameLen = data [byteCounter++];  			string eventName = "";  			for (int i = 0; i < nameLen; i++) {  				if ((char)data [byteCounter] != '\0')  					eventName += (char)data [byteCounter];  				byteCounter++;  			}  			int descLen = data [byteCounter++];  			string description = "";  			for (int i = 0; i < descLen; i++) {  				if ((char)data [byteCounter] != '\0')  					description += (char)data [byteCounter];  				byteCounter++;  			}  			ushort doubleByte = (ushort)(data [byteCounter++] << 8);  			doubleByte = (ushort)(doubleByte | data [byteCounter++]);  			int eventID = doubleByte & 0x3FF;  			bool triggerable = (doubleByte & 0x8000) > 0;  			bool option1Exists = (doubleByte & 0x800) > 0;  			bool option2Exists = (doubleByte & 0x400) > 0;  			Event e = new Event (eventName' description' eventID' triggerable);  			e.Option1 = option1Exists;  			e.Option2 = option2Exists;  			contactingNode.AddEvent (e);  			AddEventToDatabase (contactingNode' e);  			break;  		case OPTION_BYTE:  			byteCounter = 1;  			int eventId = (ushort)(data [byteCounter++] << 8);  			eventId = (ushort)(eventId | data [byteCounter++]);  			int opDescLen = data [byteCounter++];  			string opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  			currEvent.SetOption1 (opDescription);  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			if (currEvent.Option2) {  				opDescLen = data [byteCounter++];  				opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			}  			break;  		case THROW_BYTE:  			byteCounter = 1;  			if (!contactingNode.GetRegistered ()) {  				break;  			}  			int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  			Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  			string op1Str = "";  			string op2Str = "";  			if (thisEvent.Option1) {  				int op1len = data [byteCounter++];  				for (int i = 0; i < op1len; i++) {  					op1Str += (char)data [byteCounter++];  				}  			}  			if (thisEvent.Option2) {  				int op2len = data [byteCounter++];  				for (int i = 0; i < op2len; i++) {  					op2Str += (char)data [byteCounter++];  				}  			}  			contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  			ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  			break;  		default:  			break;  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (message == 0x7E) {  	XbeeRx incoming = new XbeeRx ();  	if (incoming.ParseIncomingMessage (_serialPort)) {  		if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  			remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  		}  		List<int> data = incoming.GetMessage ();  		ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  		int byteCounter;  		switch (data [0]) {  		case VERSION_BYTE:  			int version = data [1];  			XbeeTx64Bit transmit;  			List<byte> d = new List<byte> ();  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "") {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  			}  			else {  				int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  				if (version != databaseVersion) {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  				}  				else {  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					d.Add (MATCH_BYTE);  					string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  					DataSqlConnection.mutex.ReleaseMutex ();  					string[] nodeInfo = node.Split ('|');  					contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  					contactingNode.SetName (nodeInfo [1]);  					contactingNode.SetAlias (nodeInfo [2]);  					contactingNode.SetBrand (nodeInfo [3]);  					contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  					contactingNode.SetHexAddress (nodeInfo [5]);  					contactingNode.SetRegistered (true);  					//nodeInfo[7] is IsForeign which we don't care about  					contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  					DataSqlConnection.mutex.WaitOne ();  					nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  					DataSqlConnection.mutex.ReleaseMutex ();  					foreach (string s in nodeInfo) {  						if (s == "")  							continue;  						string[] eventData = s.Split ('|');  						Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  						DataSqlConnection.mutex.WaitOne ();  						string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  						DataSqlConnection.mutex.ReleaseMutex ();  						if (optionsData == "") {  							contactingEvent.Option1 = false;  							contactingEvent.Option2 = false;  						}  						else {  							string[] ops = optionsData.Split ('\n');  							string[] opsVals;  							opsVals = ops [0].Split ('|');  							contactingEvent.Option1 = true;  							contactingEvent.SetOption1 (opsVals [3]);  							contactingEvent.SetOption1Value (opsVals [4]);  							if (ops.Length == 3) {  								opsVals = ops [1].Split ('|');  								contactingEvent.Option2 = true;  								contactingEvent.SetOption2 (opsVals [3]);  								contactingEvent.SetOption2Value (opsVals [4]);  							}  						}  						contactingNode.AddEvent (contactingEvent);  					}  				}  			}  			contactingNode.SetVersion ((byte)version);  			transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  			transmit.Send (_serialPort);  			break;  		/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  			string name = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					name += (char)data [i];  			}  			contactingNode.SetName (name);  			contactingNode.SetRegistered (true);  			break;  		/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  			string brand = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					brand += (char)data [i];  			}  			contactingNode.SetBrand (brand);  			AddNodeToDatabase (contactingNode);  			break;  		/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  			byteCounter = 1;  			int nameLen = data [byteCounter++];  			string eventName = "";  			for (int i = 0; i < nameLen; i++) {  				if ((char)data [byteCounter] != '\0')  					eventName += (char)data [byteCounter];  				byteCounter++;  			}  			int descLen = data [byteCounter++];  			string description = "";  			for (int i = 0; i < descLen; i++) {  				if ((char)data [byteCounter] != '\0')  					description += (char)data [byteCounter];  				byteCounter++;  			}  			ushort doubleByte = (ushort)(data [byteCounter++] << 8);  			doubleByte = (ushort)(doubleByte | data [byteCounter++]);  			int eventID = doubleByte & 0x3FF;  			bool triggerable = (doubleByte & 0x8000) > 0;  			bool option1Exists = (doubleByte & 0x800) > 0;  			bool option2Exists = (doubleByte & 0x400) > 0;  			Event e = new Event (eventName' description' eventID' triggerable);  			e.Option1 = option1Exists;  			e.Option2 = option2Exists;  			contactingNode.AddEvent (e);  			AddEventToDatabase (contactingNode' e);  			break;  		case OPTION_BYTE:  			byteCounter = 1;  			int eventId = (ushort)(data [byteCounter++] << 8);  			eventId = (ushort)(eventId | data [byteCounter++]);  			int opDescLen = data [byteCounter++];  			string opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  			currEvent.SetOption1 (opDescription);  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			if (currEvent.Option2) {  				opDescLen = data [byteCounter++];  				opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			}  			break;  		case THROW_BYTE:  			byteCounter = 1;  			if (!contactingNode.GetRegistered ()) {  				break;  			}  			int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  			Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  			string op1Str = "";  			string op2Str = "";  			if (thisEvent.Option1) {  				int op1len = data [byteCounter++];  				for (int i = 0; i < op1len; i++) {  					op1Str += (char)data [byteCounter++];  				}  			}  			if (thisEvent.Option2) {  				int op2len = data [byteCounter++];  				for (int i = 0; i < op2len; i++) {  					op2Str += (char)data [byteCounter++];  				}  			}  			contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  			ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  			break;  		default:  			break;  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (message == 0x7E) {  	XbeeRx incoming = new XbeeRx ();  	if (incoming.ParseIncomingMessage (_serialPort)) {  		if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  			remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  		}  		List<int> data = incoming.GetMessage ();  		ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  		int byteCounter;  		switch (data [0]) {  		case VERSION_BYTE:  			int version = data [1];  			XbeeTx64Bit transmit;  			List<byte> d = new List<byte> ();  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "") {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  			}  			else {  				int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  				if (version != databaseVersion) {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  				}  				else {  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					d.Add (MATCH_BYTE);  					string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  					DataSqlConnection.mutex.ReleaseMutex ();  					string[] nodeInfo = node.Split ('|');  					contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  					contactingNode.SetName (nodeInfo [1]);  					contactingNode.SetAlias (nodeInfo [2]);  					contactingNode.SetBrand (nodeInfo [3]);  					contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  					contactingNode.SetHexAddress (nodeInfo [5]);  					contactingNode.SetRegistered (true);  					//nodeInfo[7] is IsForeign which we don't care about  					contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  					DataSqlConnection.mutex.WaitOne ();  					nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  					DataSqlConnection.mutex.ReleaseMutex ();  					foreach (string s in nodeInfo) {  						if (s == "")  							continue;  						string[] eventData = s.Split ('|');  						Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  						DataSqlConnection.mutex.WaitOne ();  						string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  						DataSqlConnection.mutex.ReleaseMutex ();  						if (optionsData == "") {  							contactingEvent.Option1 = false;  							contactingEvent.Option2 = false;  						}  						else {  							string[] ops = optionsData.Split ('\n');  							string[] opsVals;  							opsVals = ops [0].Split ('|');  							contactingEvent.Option1 = true;  							contactingEvent.SetOption1 (opsVals [3]);  							contactingEvent.SetOption1Value (opsVals [4]);  							if (ops.Length == 3) {  								opsVals = ops [1].Split ('|');  								contactingEvent.Option2 = true;  								contactingEvent.SetOption2 (opsVals [3]);  								contactingEvent.SetOption2Value (opsVals [4]);  							}  						}  						contactingNode.AddEvent (contactingEvent);  					}  				}  			}  			contactingNode.SetVersion ((byte)version);  			transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  			transmit.Send (_serialPort);  			break;  		/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  			string name = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					name += (char)data [i];  			}  			contactingNode.SetName (name);  			contactingNode.SetRegistered (true);  			break;  		/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  			string brand = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					brand += (char)data [i];  			}  			contactingNode.SetBrand (brand);  			AddNodeToDatabase (contactingNode);  			break;  		/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  			byteCounter = 1;  			int nameLen = data [byteCounter++];  			string eventName = "";  			for (int i = 0; i < nameLen; i++) {  				if ((char)data [byteCounter] != '\0')  					eventName += (char)data [byteCounter];  				byteCounter++;  			}  			int descLen = data [byteCounter++];  			string description = "";  			for (int i = 0; i < descLen; i++) {  				if ((char)data [byteCounter] != '\0')  					description += (char)data [byteCounter];  				byteCounter++;  			}  			ushort doubleByte = (ushort)(data [byteCounter++] << 8);  			doubleByte = (ushort)(doubleByte | data [byteCounter++]);  			int eventID = doubleByte & 0x3FF;  			bool triggerable = (doubleByte & 0x8000) > 0;  			bool option1Exists = (doubleByte & 0x800) > 0;  			bool option2Exists = (doubleByte & 0x400) > 0;  			Event e = new Event (eventName' description' eventID' triggerable);  			e.Option1 = option1Exists;  			e.Option2 = option2Exists;  			contactingNode.AddEvent (e);  			AddEventToDatabase (contactingNode' e);  			break;  		case OPTION_BYTE:  			byteCounter = 1;  			int eventId = (ushort)(data [byteCounter++] << 8);  			eventId = (ushort)(eventId | data [byteCounter++]);  			int opDescLen = data [byteCounter++];  			string opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  			currEvent.SetOption1 (opDescription);  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			if (currEvent.Option2) {  				opDescLen = data [byteCounter++];  				opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			}  			break;  		case THROW_BYTE:  			byteCounter = 1;  			if (!contactingNode.GetRegistered ()) {  				break;  			}  			int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  			Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  			string op1Str = "";  			string op2Str = "";  			if (thisEvent.Option1) {  				int op1len = data [byteCounter++];  				for (int i = 0; i < op1len; i++) {  					op1Str += (char)data [byteCounter++];  				}  			}  			if (thisEvent.Option2) {  				int op2len = data [byteCounter++];  				for (int i = 0; i < op2len; i++) {  					op2Str += (char)data [byteCounter++];  				}  			}  			contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  			ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  			break;  		default:  			break;  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (message == 0x7E) {  	XbeeRx incoming = new XbeeRx ();  	if (incoming.ParseIncomingMessage (_serialPort)) {  		if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  			remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  		}  		List<int> data = incoming.GetMessage ();  		ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  		int byteCounter;  		switch (data [0]) {  		case VERSION_BYTE:  			int version = data [1];  			XbeeTx64Bit transmit;  			List<byte> d = new List<byte> ();  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "") {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  			}  			else {  				int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  				if (version != databaseVersion) {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  				}  				else {  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					d.Add (MATCH_BYTE);  					string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  					DataSqlConnection.mutex.ReleaseMutex ();  					string[] nodeInfo = node.Split ('|');  					contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  					contactingNode.SetName (nodeInfo [1]);  					contactingNode.SetAlias (nodeInfo [2]);  					contactingNode.SetBrand (nodeInfo [3]);  					contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  					contactingNode.SetHexAddress (nodeInfo [5]);  					contactingNode.SetRegistered (true);  					//nodeInfo[7] is IsForeign which we don't care about  					contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  					DataSqlConnection.mutex.WaitOne ();  					nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  					DataSqlConnection.mutex.ReleaseMutex ();  					foreach (string s in nodeInfo) {  						if (s == "")  							continue;  						string[] eventData = s.Split ('|');  						Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  						DataSqlConnection.mutex.WaitOne ();  						string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  						DataSqlConnection.mutex.ReleaseMutex ();  						if (optionsData == "") {  							contactingEvent.Option1 = false;  							contactingEvent.Option2 = false;  						}  						else {  							string[] ops = optionsData.Split ('\n');  							string[] opsVals;  							opsVals = ops [0].Split ('|');  							contactingEvent.Option1 = true;  							contactingEvent.SetOption1 (opsVals [3]);  							contactingEvent.SetOption1Value (opsVals [4]);  							if (ops.Length == 3) {  								opsVals = ops [1].Split ('|');  								contactingEvent.Option2 = true;  								contactingEvent.SetOption2 (opsVals [3]);  								contactingEvent.SetOption2Value (opsVals [4]);  							}  						}  						contactingNode.AddEvent (contactingEvent);  					}  				}  			}  			contactingNode.SetVersion ((byte)version);  			transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  			transmit.Send (_serialPort);  			break;  		/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  			string name = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					name += (char)data [i];  			}  			contactingNode.SetName (name);  			contactingNode.SetRegistered (true);  			break;  		/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  			string brand = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					brand += (char)data [i];  			}  			contactingNode.SetBrand (brand);  			AddNodeToDatabase (contactingNode);  			break;  		/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  			byteCounter = 1;  			int nameLen = data [byteCounter++];  			string eventName = "";  			for (int i = 0; i < nameLen; i++) {  				if ((char)data [byteCounter] != '\0')  					eventName += (char)data [byteCounter];  				byteCounter++;  			}  			int descLen = data [byteCounter++];  			string description = "";  			for (int i = 0; i < descLen; i++) {  				if ((char)data [byteCounter] != '\0')  					description += (char)data [byteCounter];  				byteCounter++;  			}  			ushort doubleByte = (ushort)(data [byteCounter++] << 8);  			doubleByte = (ushort)(doubleByte | data [byteCounter++]);  			int eventID = doubleByte & 0x3FF;  			bool triggerable = (doubleByte & 0x8000) > 0;  			bool option1Exists = (doubleByte & 0x800) > 0;  			bool option2Exists = (doubleByte & 0x400) > 0;  			Event e = new Event (eventName' description' eventID' triggerable);  			e.Option1 = option1Exists;  			e.Option2 = option2Exists;  			contactingNode.AddEvent (e);  			AddEventToDatabase (contactingNode' e);  			break;  		case OPTION_BYTE:  			byteCounter = 1;  			int eventId = (ushort)(data [byteCounter++] << 8);  			eventId = (ushort)(eventId | data [byteCounter++]);  			int opDescLen = data [byteCounter++];  			string opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  			currEvent.SetOption1 (opDescription);  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			if (currEvent.Option2) {  				opDescLen = data [byteCounter++];  				opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			}  			break;  		case THROW_BYTE:  			byteCounter = 1;  			if (!contactingNode.GetRegistered ()) {  				break;  			}  			int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  			Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  			string op1Str = "";  			string op2Str = "";  			if (thisEvent.Option1) {  				int op1len = data [byteCounter++];  				for (int i = 0; i < op1len; i++) {  					op1Str += (char)data [byteCounter++];  				}  			}  			if (thisEvent.Option2) {  				int op2len = data [byteCounter++];  				for (int i = 0; i < op2len; i++) {  					op2Str += (char)data [byteCounter++];  				}  			}  			contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  			ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  			break;  		default:  			break;  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (message == 0x7E) {  	XbeeRx incoming = new XbeeRx ();  	if (incoming.ParseIncomingMessage (_serialPort)) {  		if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  			remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  		}  		List<int> data = incoming.GetMessage ();  		ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  		int byteCounter;  		switch (data [0]) {  		case VERSION_BYTE:  			int version = data [1];  			XbeeTx64Bit transmit;  			List<byte> d = new List<byte> ();  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "") {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  			}  			else {  				int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  				if (version != databaseVersion) {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  				}  				else {  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					d.Add (MATCH_BYTE);  					string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  					DataSqlConnection.mutex.ReleaseMutex ();  					string[] nodeInfo = node.Split ('|');  					contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  					contactingNode.SetName (nodeInfo [1]);  					contactingNode.SetAlias (nodeInfo [2]);  					contactingNode.SetBrand (nodeInfo [3]);  					contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  					contactingNode.SetHexAddress (nodeInfo [5]);  					contactingNode.SetRegistered (true);  					//nodeInfo[7] is IsForeign which we don't care about  					contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  					DataSqlConnection.mutex.WaitOne ();  					nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  					DataSqlConnection.mutex.ReleaseMutex ();  					foreach (string s in nodeInfo) {  						if (s == "")  							continue;  						string[] eventData = s.Split ('|');  						Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  						DataSqlConnection.mutex.WaitOne ();  						string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  						DataSqlConnection.mutex.ReleaseMutex ();  						if (optionsData == "") {  							contactingEvent.Option1 = false;  							contactingEvent.Option2 = false;  						}  						else {  							string[] ops = optionsData.Split ('\n');  							string[] opsVals;  							opsVals = ops [0].Split ('|');  							contactingEvent.Option1 = true;  							contactingEvent.SetOption1 (opsVals [3]);  							contactingEvent.SetOption1Value (opsVals [4]);  							if (ops.Length == 3) {  								opsVals = ops [1].Split ('|');  								contactingEvent.Option2 = true;  								contactingEvent.SetOption2 (opsVals [3]);  								contactingEvent.SetOption2Value (opsVals [4]);  							}  						}  						contactingNode.AddEvent (contactingEvent);  					}  				}  			}  			contactingNode.SetVersion ((byte)version);  			transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  			transmit.Send (_serialPort);  			break;  		/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  			string name = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					name += (char)data [i];  			}  			contactingNode.SetName (name);  			contactingNode.SetRegistered (true);  			break;  		/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  			string brand = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					brand += (char)data [i];  			}  			contactingNode.SetBrand (brand);  			AddNodeToDatabase (contactingNode);  			break;  		/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  			byteCounter = 1;  			int nameLen = data [byteCounter++];  			string eventName = "";  			for (int i = 0; i < nameLen; i++) {  				if ((char)data [byteCounter] != '\0')  					eventName += (char)data [byteCounter];  				byteCounter++;  			}  			int descLen = data [byteCounter++];  			string description = "";  			for (int i = 0; i < descLen; i++) {  				if ((char)data [byteCounter] != '\0')  					description += (char)data [byteCounter];  				byteCounter++;  			}  			ushort doubleByte = (ushort)(data [byteCounter++] << 8);  			doubleByte = (ushort)(doubleByte | data [byteCounter++]);  			int eventID = doubleByte & 0x3FF;  			bool triggerable = (doubleByte & 0x8000) > 0;  			bool option1Exists = (doubleByte & 0x800) > 0;  			bool option2Exists = (doubleByte & 0x400) > 0;  			Event e = new Event (eventName' description' eventID' triggerable);  			e.Option1 = option1Exists;  			e.Option2 = option2Exists;  			contactingNode.AddEvent (e);  			AddEventToDatabase (contactingNode' e);  			break;  		case OPTION_BYTE:  			byteCounter = 1;  			int eventId = (ushort)(data [byteCounter++] << 8);  			eventId = (ushort)(eventId | data [byteCounter++]);  			int opDescLen = data [byteCounter++];  			string opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  			currEvent.SetOption1 (opDescription);  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			if (currEvent.Option2) {  				opDescLen = data [byteCounter++];  				opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			}  			break;  		case THROW_BYTE:  			byteCounter = 1;  			if (!contactingNode.GetRegistered ()) {  				break;  			}  			int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  			Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  			string op1Str = "";  			string op2Str = "";  			if (thisEvent.Option1) {  				int op1len = data [byteCounter++];  				for (int i = 0; i < op1len; i++) {  					op1Str += (char)data [byteCounter++];  				}  			}  			if (thisEvent.Option2) {  				int op2len = data [byteCounter++];  				for (int i = 0; i < op2len; i++) {  					op2Str += (char)data [byteCounter++];  				}  			}  			contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  			ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  			break;  		default:  			break;  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (message == 0x7E) {  	XbeeRx incoming = new XbeeRx ();  	if (incoming.ParseIncomingMessage (_serialPort)) {  		if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  			remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  		}  		List<int> data = incoming.GetMessage ();  		ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  		int byteCounter;  		switch (data [0]) {  		case VERSION_BYTE:  			int version = data [1];  			XbeeTx64Bit transmit;  			List<byte> d = new List<byte> ();  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "") {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  			}  			else {  				int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  				if (version != databaseVersion) {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  				}  				else {  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					d.Add (MATCH_BYTE);  					string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  					DataSqlConnection.mutex.ReleaseMutex ();  					string[] nodeInfo = node.Split ('|');  					contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  					contactingNode.SetName (nodeInfo [1]);  					contactingNode.SetAlias (nodeInfo [2]);  					contactingNode.SetBrand (nodeInfo [3]);  					contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  					contactingNode.SetHexAddress (nodeInfo [5]);  					contactingNode.SetRegistered (true);  					//nodeInfo[7] is IsForeign which we don't care about  					contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  					DataSqlConnection.mutex.WaitOne ();  					nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  					DataSqlConnection.mutex.ReleaseMutex ();  					foreach (string s in nodeInfo) {  						if (s == "")  							continue;  						string[] eventData = s.Split ('|');  						Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  						DataSqlConnection.mutex.WaitOne ();  						string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  						DataSqlConnection.mutex.ReleaseMutex ();  						if (optionsData == "") {  							contactingEvent.Option1 = false;  							contactingEvent.Option2 = false;  						}  						else {  							string[] ops = optionsData.Split ('\n');  							string[] opsVals;  							opsVals = ops [0].Split ('|');  							contactingEvent.Option1 = true;  							contactingEvent.SetOption1 (opsVals [3]);  							contactingEvent.SetOption1Value (opsVals [4]);  							if (ops.Length == 3) {  								opsVals = ops [1].Split ('|');  								contactingEvent.Option2 = true;  								contactingEvent.SetOption2 (opsVals [3]);  								contactingEvent.SetOption2Value (opsVals [4]);  							}  						}  						contactingNode.AddEvent (contactingEvent);  					}  				}  			}  			contactingNode.SetVersion ((byte)version);  			transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  			transmit.Send (_serialPort);  			break;  		/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  			string name = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					name += (char)data [i];  			}  			contactingNode.SetName (name);  			contactingNode.SetRegistered (true);  			break;  		/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  			string brand = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					brand += (char)data [i];  			}  			contactingNode.SetBrand (brand);  			AddNodeToDatabase (contactingNode);  			break;  		/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  			byteCounter = 1;  			int nameLen = data [byteCounter++];  			string eventName = "";  			for (int i = 0; i < nameLen; i++) {  				if ((char)data [byteCounter] != '\0')  					eventName += (char)data [byteCounter];  				byteCounter++;  			}  			int descLen = data [byteCounter++];  			string description = "";  			for (int i = 0; i < descLen; i++) {  				if ((char)data [byteCounter] != '\0')  					description += (char)data [byteCounter];  				byteCounter++;  			}  			ushort doubleByte = (ushort)(data [byteCounter++] << 8);  			doubleByte = (ushort)(doubleByte | data [byteCounter++]);  			int eventID = doubleByte & 0x3FF;  			bool triggerable = (doubleByte & 0x8000) > 0;  			bool option1Exists = (doubleByte & 0x800) > 0;  			bool option2Exists = (doubleByte & 0x400) > 0;  			Event e = new Event (eventName' description' eventID' triggerable);  			e.Option1 = option1Exists;  			e.Option2 = option2Exists;  			contactingNode.AddEvent (e);  			AddEventToDatabase (contactingNode' e);  			break;  		case OPTION_BYTE:  			byteCounter = 1;  			int eventId = (ushort)(data [byteCounter++] << 8);  			eventId = (ushort)(eventId | data [byteCounter++]);  			int opDescLen = data [byteCounter++];  			string opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  			currEvent.SetOption1 (opDescription);  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			if (currEvent.Option2) {  				opDescLen = data [byteCounter++];  				opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			}  			break;  		case THROW_BYTE:  			byteCounter = 1;  			if (!contactingNode.GetRegistered ()) {  				break;  			}  			int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  			Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  			string op1Str = "";  			string op2Str = "";  			if (thisEvent.Option1) {  				int op1len = data [byteCounter++];  				for (int i = 0; i < op1len; i++) {  					op1Str += (char)data [byteCounter++];  				}  			}  			if (thisEvent.Option2) {  				int op2len = data [byteCounter++];  				for (int i = 0; i < op2len; i++) {  					op2Str += (char)data [byteCounter++];  				}  			}  			contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  			ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  			break;  		default:  			break;  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (message == 0x7E) {  	XbeeRx incoming = new XbeeRx ();  	if (incoming.ParseIncomingMessage (_serialPort)) {  		if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  			remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  		}  		List<int> data = incoming.GetMessage ();  		ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  		int byteCounter;  		switch (data [0]) {  		case VERSION_BYTE:  			int version = data [1];  			XbeeTx64Bit transmit;  			List<byte> d = new List<byte> ();  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "") {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  			}  			else {  				int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  				if (version != databaseVersion) {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  				}  				else {  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					d.Add (MATCH_BYTE);  					string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  					DataSqlConnection.mutex.ReleaseMutex ();  					string[] nodeInfo = node.Split ('|');  					contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  					contactingNode.SetName (nodeInfo [1]);  					contactingNode.SetAlias (nodeInfo [2]);  					contactingNode.SetBrand (nodeInfo [3]);  					contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  					contactingNode.SetHexAddress (nodeInfo [5]);  					contactingNode.SetRegistered (true);  					//nodeInfo[7] is IsForeign which we don't care about  					contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  					DataSqlConnection.mutex.WaitOne ();  					nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  					DataSqlConnection.mutex.ReleaseMutex ();  					foreach (string s in nodeInfo) {  						if (s == "")  							continue;  						string[] eventData = s.Split ('|');  						Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  						DataSqlConnection.mutex.WaitOne ();  						string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  						DataSqlConnection.mutex.ReleaseMutex ();  						if (optionsData == "") {  							contactingEvent.Option1 = false;  							contactingEvent.Option2 = false;  						}  						else {  							string[] ops = optionsData.Split ('\n');  							string[] opsVals;  							opsVals = ops [0].Split ('|');  							contactingEvent.Option1 = true;  							contactingEvent.SetOption1 (opsVals [3]);  							contactingEvent.SetOption1Value (opsVals [4]);  							if (ops.Length == 3) {  								opsVals = ops [1].Split ('|');  								contactingEvent.Option2 = true;  								contactingEvent.SetOption2 (opsVals [3]);  								contactingEvent.SetOption2Value (opsVals [4]);  							}  						}  						contactingNode.AddEvent (contactingEvent);  					}  				}  			}  			contactingNode.SetVersion ((byte)version);  			transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  			transmit.Send (_serialPort);  			break;  		/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  			string name = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					name += (char)data [i];  			}  			contactingNode.SetName (name);  			contactingNode.SetRegistered (true);  			break;  		/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  			string brand = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					brand += (char)data [i];  			}  			contactingNode.SetBrand (brand);  			AddNodeToDatabase (contactingNode);  			break;  		/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  			byteCounter = 1;  			int nameLen = data [byteCounter++];  			string eventName = "";  			for (int i = 0; i < nameLen; i++) {  				if ((char)data [byteCounter] != '\0')  					eventName += (char)data [byteCounter];  				byteCounter++;  			}  			int descLen = data [byteCounter++];  			string description = "";  			for (int i = 0; i < descLen; i++) {  				if ((char)data [byteCounter] != '\0')  					description += (char)data [byteCounter];  				byteCounter++;  			}  			ushort doubleByte = (ushort)(data [byteCounter++] << 8);  			doubleByte = (ushort)(doubleByte | data [byteCounter++]);  			int eventID = doubleByte & 0x3FF;  			bool triggerable = (doubleByte & 0x8000) > 0;  			bool option1Exists = (doubleByte & 0x800) > 0;  			bool option2Exists = (doubleByte & 0x400) > 0;  			Event e = new Event (eventName' description' eventID' triggerable);  			e.Option1 = option1Exists;  			e.Option2 = option2Exists;  			contactingNode.AddEvent (e);  			AddEventToDatabase (contactingNode' e);  			break;  		case OPTION_BYTE:  			byteCounter = 1;  			int eventId = (ushort)(data [byteCounter++] << 8);  			eventId = (ushort)(eventId | data [byteCounter++]);  			int opDescLen = data [byteCounter++];  			string opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  			currEvent.SetOption1 (opDescription);  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			if (currEvent.Option2) {  				opDescLen = data [byteCounter++];  				opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			}  			break;  		case THROW_BYTE:  			byteCounter = 1;  			if (!contactingNode.GetRegistered ()) {  				break;  			}  			int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  			Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  			string op1Str = "";  			string op2Str = "";  			if (thisEvent.Option1) {  				int op1len = data [byteCounter++];  				for (int i = 0; i < op1len; i++) {  					op1Str += (char)data [byteCounter++];  				}  			}  			if (thisEvent.Option2) {  				int op2len = data [byteCounter++];  				for (int i = 0; i < op2len; i++) {  					op2Str += (char)data [byteCounter++];  				}  			}  			contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  			ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  			break;  		default:  			break;  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (message == 0x7E) {  	XbeeRx incoming = new XbeeRx ();  	if (incoming.ParseIncomingMessage (_serialPort)) {  		if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  			remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  		}  		List<int> data = incoming.GetMessage ();  		ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  		int byteCounter;  		switch (data [0]) {  		case VERSION_BYTE:  			int version = data [1];  			XbeeTx64Bit transmit;  			List<byte> d = new List<byte> ();  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "") {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  			}  			else {  				int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  				if (version != databaseVersion) {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  				}  				else {  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					d.Add (MATCH_BYTE);  					string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  					DataSqlConnection.mutex.ReleaseMutex ();  					string[] nodeInfo = node.Split ('|');  					contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  					contactingNode.SetName (nodeInfo [1]);  					contactingNode.SetAlias (nodeInfo [2]);  					contactingNode.SetBrand (nodeInfo [3]);  					contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  					contactingNode.SetHexAddress (nodeInfo [5]);  					contactingNode.SetRegistered (true);  					//nodeInfo[7] is IsForeign which we don't care about  					contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  					DataSqlConnection.mutex.WaitOne ();  					nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  					DataSqlConnection.mutex.ReleaseMutex ();  					foreach (string s in nodeInfo) {  						if (s == "")  							continue;  						string[] eventData = s.Split ('|');  						Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  						DataSqlConnection.mutex.WaitOne ();  						string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  						DataSqlConnection.mutex.ReleaseMutex ();  						if (optionsData == "") {  							contactingEvent.Option1 = false;  							contactingEvent.Option2 = false;  						}  						else {  							string[] ops = optionsData.Split ('\n');  							string[] opsVals;  							opsVals = ops [0].Split ('|');  							contactingEvent.Option1 = true;  							contactingEvent.SetOption1 (opsVals [3]);  							contactingEvent.SetOption1Value (opsVals [4]);  							if (ops.Length == 3) {  								opsVals = ops [1].Split ('|');  								contactingEvent.Option2 = true;  								contactingEvent.SetOption2 (opsVals [3]);  								contactingEvent.SetOption2Value (opsVals [4]);  							}  						}  						contactingNode.AddEvent (contactingEvent);  					}  				}  			}  			contactingNode.SetVersion ((byte)version);  			transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  			transmit.Send (_serialPort);  			break;  		/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  			string name = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					name += (char)data [i];  			}  			contactingNode.SetName (name);  			contactingNode.SetRegistered (true);  			break;  		/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  			string brand = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					brand += (char)data [i];  			}  			contactingNode.SetBrand (brand);  			AddNodeToDatabase (contactingNode);  			break;  		/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  			byteCounter = 1;  			int nameLen = data [byteCounter++];  			string eventName = "";  			for (int i = 0; i < nameLen; i++) {  				if ((char)data [byteCounter] != '\0')  					eventName += (char)data [byteCounter];  				byteCounter++;  			}  			int descLen = data [byteCounter++];  			string description = "";  			for (int i = 0; i < descLen; i++) {  				if ((char)data [byteCounter] != '\0')  					description += (char)data [byteCounter];  				byteCounter++;  			}  			ushort doubleByte = (ushort)(data [byteCounter++] << 8);  			doubleByte = (ushort)(doubleByte | data [byteCounter++]);  			int eventID = doubleByte & 0x3FF;  			bool triggerable = (doubleByte & 0x8000) > 0;  			bool option1Exists = (doubleByte & 0x800) > 0;  			bool option2Exists = (doubleByte & 0x400) > 0;  			Event e = new Event (eventName' description' eventID' triggerable);  			e.Option1 = option1Exists;  			e.Option2 = option2Exists;  			contactingNode.AddEvent (e);  			AddEventToDatabase (contactingNode' e);  			break;  		case OPTION_BYTE:  			byteCounter = 1;  			int eventId = (ushort)(data [byteCounter++] << 8);  			eventId = (ushort)(eventId | data [byteCounter++]);  			int opDescLen = data [byteCounter++];  			string opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  			currEvent.SetOption1 (opDescription);  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			if (currEvent.Option2) {  				opDescLen = data [byteCounter++];  				opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			}  			break;  		case THROW_BYTE:  			byteCounter = 1;  			if (!contactingNode.GetRegistered ()) {  				break;  			}  			int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  			Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  			string op1Str = "";  			string op2Str = "";  			if (thisEvent.Option1) {  				int op1len = data [byteCounter++];  				for (int i = 0; i < op1len; i++) {  					op1Str += (char)data [byteCounter++];  				}  			}  			if (thisEvent.Option2) {  				int op2len = data [byteCounter++];  				for (int i = 0; i < op2len; i++) {  					op2Str += (char)data [byteCounter++];  				}  			}  			contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  			ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  			break;  		default:  			break;  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (message == 0x7E) {  	XbeeRx incoming = new XbeeRx ();  	if (incoming.ParseIncomingMessage (_serialPort)) {  		if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  			remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  		}  		List<int> data = incoming.GetMessage ();  		ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  		int byteCounter;  		switch (data [0]) {  		case VERSION_BYTE:  			int version = data [1];  			XbeeTx64Bit transmit;  			List<byte> d = new List<byte> ();  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "") {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  			}  			else {  				int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  				if (version != databaseVersion) {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  				}  				else {  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					d.Add (MATCH_BYTE);  					string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  					DataSqlConnection.mutex.ReleaseMutex ();  					string[] nodeInfo = node.Split ('|');  					contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  					contactingNode.SetName (nodeInfo [1]);  					contactingNode.SetAlias (nodeInfo [2]);  					contactingNode.SetBrand (nodeInfo [3]);  					contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  					contactingNode.SetHexAddress (nodeInfo [5]);  					contactingNode.SetRegistered (true);  					//nodeInfo[7] is IsForeign which we don't care about  					contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  					DataSqlConnection.mutex.WaitOne ();  					nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  					DataSqlConnection.mutex.ReleaseMutex ();  					foreach (string s in nodeInfo) {  						if (s == "")  							continue;  						string[] eventData = s.Split ('|');  						Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  						DataSqlConnection.mutex.WaitOne ();  						string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  						DataSqlConnection.mutex.ReleaseMutex ();  						if (optionsData == "") {  							contactingEvent.Option1 = false;  							contactingEvent.Option2 = false;  						}  						else {  							string[] ops = optionsData.Split ('\n');  							string[] opsVals;  							opsVals = ops [0].Split ('|');  							contactingEvent.Option1 = true;  							contactingEvent.SetOption1 (opsVals [3]);  							contactingEvent.SetOption1Value (opsVals [4]);  							if (ops.Length == 3) {  								opsVals = ops [1].Split ('|');  								contactingEvent.Option2 = true;  								contactingEvent.SetOption2 (opsVals [3]);  								contactingEvent.SetOption2Value (opsVals [4]);  							}  						}  						contactingNode.AddEvent (contactingEvent);  					}  				}  			}  			contactingNode.SetVersion ((byte)version);  			transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  			transmit.Send (_serialPort);  			break;  		/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  			string name = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					name += (char)data [i];  			}  			contactingNode.SetName (name);  			contactingNode.SetRegistered (true);  			break;  		/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  			string brand = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					brand += (char)data [i];  			}  			contactingNode.SetBrand (brand);  			AddNodeToDatabase (contactingNode);  			break;  		/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  			byteCounter = 1;  			int nameLen = data [byteCounter++];  			string eventName = "";  			for (int i = 0; i < nameLen; i++) {  				if ((char)data [byteCounter] != '\0')  					eventName += (char)data [byteCounter];  				byteCounter++;  			}  			int descLen = data [byteCounter++];  			string description = "";  			for (int i = 0; i < descLen; i++) {  				if ((char)data [byteCounter] != '\0')  					description += (char)data [byteCounter];  				byteCounter++;  			}  			ushort doubleByte = (ushort)(data [byteCounter++] << 8);  			doubleByte = (ushort)(doubleByte | data [byteCounter++]);  			int eventID = doubleByte & 0x3FF;  			bool triggerable = (doubleByte & 0x8000) > 0;  			bool option1Exists = (doubleByte & 0x800) > 0;  			bool option2Exists = (doubleByte & 0x400) > 0;  			Event e = new Event (eventName' description' eventID' triggerable);  			e.Option1 = option1Exists;  			e.Option2 = option2Exists;  			contactingNode.AddEvent (e);  			AddEventToDatabase (contactingNode' e);  			break;  		case OPTION_BYTE:  			byteCounter = 1;  			int eventId = (ushort)(data [byteCounter++] << 8);  			eventId = (ushort)(eventId | data [byteCounter++]);  			int opDescLen = data [byteCounter++];  			string opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  			currEvent.SetOption1 (opDescription);  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			if (currEvent.Option2) {  				opDescLen = data [byteCounter++];  				opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			}  			break;  		case THROW_BYTE:  			byteCounter = 1;  			if (!contactingNode.GetRegistered ()) {  				break;  			}  			int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  			Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  			string op1Str = "";  			string op2Str = "";  			if (thisEvent.Option1) {  				int op1len = data [byteCounter++];  				for (int i = 0; i < op1len; i++) {  					op1Str += (char)data [byteCounter++];  				}  			}  			if (thisEvent.Option2) {  				int op2len = data [byteCounter++];  				for (int i = 0; i < op2len; i++) {  					op2Str += (char)data [byteCounter++];  				}  			}  			contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  			ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  			break;  		default:  			break;  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (message == 0x7E) {  	XbeeRx incoming = new XbeeRx ();  	if (incoming.ParseIncomingMessage (_serialPort)) {  		if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  			remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  		}  		List<int> data = incoming.GetMessage ();  		ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  		int byteCounter;  		switch (data [0]) {  		case VERSION_BYTE:  			int version = data [1];  			XbeeTx64Bit transmit;  			List<byte> d = new List<byte> ();  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "") {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  			}  			else {  				int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  				if (version != databaseVersion) {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  				}  				else {  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					d.Add (MATCH_BYTE);  					string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  					DataSqlConnection.mutex.ReleaseMutex ();  					string[] nodeInfo = node.Split ('|');  					contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  					contactingNode.SetName (nodeInfo [1]);  					contactingNode.SetAlias (nodeInfo [2]);  					contactingNode.SetBrand (nodeInfo [3]);  					contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  					contactingNode.SetHexAddress (nodeInfo [5]);  					contactingNode.SetRegistered (true);  					//nodeInfo[7] is IsForeign which we don't care about  					contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  					DataSqlConnection.mutex.WaitOne ();  					nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  					DataSqlConnection.mutex.ReleaseMutex ();  					foreach (string s in nodeInfo) {  						if (s == "")  							continue;  						string[] eventData = s.Split ('|');  						Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  						DataSqlConnection.mutex.WaitOne ();  						string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  						DataSqlConnection.mutex.ReleaseMutex ();  						if (optionsData == "") {  							contactingEvent.Option1 = false;  							contactingEvent.Option2 = false;  						}  						else {  							string[] ops = optionsData.Split ('\n');  							string[] opsVals;  							opsVals = ops [0].Split ('|');  							contactingEvent.Option1 = true;  							contactingEvent.SetOption1 (opsVals [3]);  							contactingEvent.SetOption1Value (opsVals [4]);  							if (ops.Length == 3) {  								opsVals = ops [1].Split ('|');  								contactingEvent.Option2 = true;  								contactingEvent.SetOption2 (opsVals [3]);  								contactingEvent.SetOption2Value (opsVals [4]);  							}  						}  						contactingNode.AddEvent (contactingEvent);  					}  				}  			}  			contactingNode.SetVersion ((byte)version);  			transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  			transmit.Send (_serialPort);  			break;  		/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  			string name = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					name += (char)data [i];  			}  			contactingNode.SetName (name);  			contactingNode.SetRegistered (true);  			break;  		/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  			string brand = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					brand += (char)data [i];  			}  			contactingNode.SetBrand (brand);  			AddNodeToDatabase (contactingNode);  			break;  		/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  			byteCounter = 1;  			int nameLen = data [byteCounter++];  			string eventName = "";  			for (int i = 0; i < nameLen; i++) {  				if ((char)data [byteCounter] != '\0')  					eventName += (char)data [byteCounter];  				byteCounter++;  			}  			int descLen = data [byteCounter++];  			string description = "";  			for (int i = 0; i < descLen; i++) {  				if ((char)data [byteCounter] != '\0')  					description += (char)data [byteCounter];  				byteCounter++;  			}  			ushort doubleByte = (ushort)(data [byteCounter++] << 8);  			doubleByte = (ushort)(doubleByte | data [byteCounter++]);  			int eventID = doubleByte & 0x3FF;  			bool triggerable = (doubleByte & 0x8000) > 0;  			bool option1Exists = (doubleByte & 0x800) > 0;  			bool option2Exists = (doubleByte & 0x400) > 0;  			Event e = new Event (eventName' description' eventID' triggerable);  			e.Option1 = option1Exists;  			e.Option2 = option2Exists;  			contactingNode.AddEvent (e);  			AddEventToDatabase (contactingNode' e);  			break;  		case OPTION_BYTE:  			byteCounter = 1;  			int eventId = (ushort)(data [byteCounter++] << 8);  			eventId = (ushort)(eventId | data [byteCounter++]);  			int opDescLen = data [byteCounter++];  			string opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  			currEvent.SetOption1 (opDescription);  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			if (currEvent.Option2) {  				opDescLen = data [byteCounter++];  				opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			}  			break;  		case THROW_BYTE:  			byteCounter = 1;  			if (!contactingNode.GetRegistered ()) {  				break;  			}  			int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  			Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  			string op1Str = "";  			string op2Str = "";  			if (thisEvent.Option1) {  				int op1len = data [byteCounter++];  				for (int i = 0; i < op1len; i++) {  					op1Str += (char)data [byteCounter++];  				}  			}  			if (thisEvent.Option2) {  				int op2len = data [byteCounter++];  				for (int i = 0; i < op2len; i++) {  					op2Str += (char)data [byteCounter++];  				}  			}  			contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  			ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  			break;  		default:  			break;  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (message == 0x7E) {  	XbeeRx incoming = new XbeeRx ();  	if (incoming.ParseIncomingMessage (_serialPort)) {  		if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  			remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  		}  		List<int> data = incoming.GetMessage ();  		ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  		int byteCounter;  		switch (data [0]) {  		case VERSION_BYTE:  			int version = data [1];  			XbeeTx64Bit transmit;  			List<byte> d = new List<byte> ();  			DataSqlConnection.mutex.WaitOne ();  			string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (ret == "") {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  			}  			else {  				int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  				if (version != databaseVersion) {  					d.Add (MISMATCH_BYTE);  					contactingNode.ResetNode ();  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  					DataSqlConnection.mutex.ReleaseMutex ();  				}  				else {  					DataSqlConnection.mutex.WaitOne ();  					DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  					d.Add (MATCH_BYTE);  					string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  					DataSqlConnection.mutex.ReleaseMutex ();  					string[] nodeInfo = node.Split ('|');  					contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  					contactingNode.SetName (nodeInfo [1]);  					contactingNode.SetAlias (nodeInfo [2]);  					contactingNode.SetBrand (nodeInfo [3]);  					contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  					contactingNode.SetHexAddress (nodeInfo [5]);  					contactingNode.SetRegistered (true);  					//nodeInfo[7] is IsForeign which we don't care about  					contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  					DataSqlConnection.mutex.WaitOne ();  					nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  					DataSqlConnection.mutex.ReleaseMutex ();  					foreach (string s in nodeInfo) {  						if (s == "")  							continue;  						string[] eventData = s.Split ('|');  						Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  						DataSqlConnection.mutex.WaitOne ();  						string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  						DataSqlConnection.mutex.ReleaseMutex ();  						if (optionsData == "") {  							contactingEvent.Option1 = false;  							contactingEvent.Option2 = false;  						}  						else {  							string[] ops = optionsData.Split ('\n');  							string[] opsVals;  							opsVals = ops [0].Split ('|');  							contactingEvent.Option1 = true;  							contactingEvent.SetOption1 (opsVals [3]);  							contactingEvent.SetOption1Value (opsVals [4]);  							if (ops.Length == 3) {  								opsVals = ops [1].Split ('|');  								contactingEvent.Option2 = true;  								contactingEvent.SetOption2 (opsVals [3]);  								contactingEvent.SetOption2Value (opsVals [4]);  							}  						}  						contactingNode.AddEvent (contactingEvent);  					}  				}  			}  			contactingNode.SetVersion ((byte)version);  			transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  			transmit.Send (_serialPort);  			break;  		/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  			string name = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					name += (char)data [i];  			}  			contactingNode.SetName (name);  			contactingNode.SetRegistered (true);  			break;  		/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  			string brand = "";  			for (int i = 1; i < data.Count; i++) {  				if ((char)data [i] != '\0')  					brand += (char)data [i];  			}  			contactingNode.SetBrand (brand);  			AddNodeToDatabase (contactingNode);  			break;  		/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  			byteCounter = 1;  			int nameLen = data [byteCounter++];  			string eventName = "";  			for (int i = 0; i < nameLen; i++) {  				if ((char)data [byteCounter] != '\0')  					eventName += (char)data [byteCounter];  				byteCounter++;  			}  			int descLen = data [byteCounter++];  			string description = "";  			for (int i = 0; i < descLen; i++) {  				if ((char)data [byteCounter] != '\0')  					description += (char)data [byteCounter];  				byteCounter++;  			}  			ushort doubleByte = (ushort)(data [byteCounter++] << 8);  			doubleByte = (ushort)(doubleByte | data [byteCounter++]);  			int eventID = doubleByte & 0x3FF;  			bool triggerable = (doubleByte & 0x8000) > 0;  			bool option1Exists = (doubleByte & 0x800) > 0;  			bool option2Exists = (doubleByte & 0x400) > 0;  			Event e = new Event (eventName' description' eventID' triggerable);  			e.Option1 = option1Exists;  			e.Option2 = option2Exists;  			contactingNode.AddEvent (e);  			AddEventToDatabase (contactingNode' e);  			break;  		case OPTION_BYTE:  			byteCounter = 1;  			int eventId = (ushort)(data [byteCounter++] << 8);  			eventId = (ushort)(eventId | data [byteCounter++]);  			int opDescLen = data [byteCounter++];  			string opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  			currEvent.SetOption1 (opDescription);  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			if (currEvent.Option2) {  				opDescLen = data [byteCounter++];  				opDescription = "";  				for (int i = 0; i < opDescLen; i++) {  					if ((char)data [byteCounter] != '\0')  						opDescription += (char)data [byteCounter];  					byteCounter++;  				}  				AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  			}  			break;  		case THROW_BYTE:  			byteCounter = 1;  			if (!contactingNode.GetRegistered ()) {  				break;  			}  			int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  			Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  			string op1Str = "";  			string op2Str = "";  			if (thisEvent.Option1) {  				int op1len = data [byteCounter++];  				for (int i = 0; i < op1len; i++) {  					op1Str += (char)data [byteCounter++];  				}  			}  			if (thisEvent.Option2) {  				int op2len = data [byteCounter++];  				for (int i = 0; i < op2len; i++) {  					op2Str += (char)data [byteCounter++];  				}  			}  			contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  			ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  			break;  		default:  			break;  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (incoming.ParseIncomingMessage (_serialPort)) {  	if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  		remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  	}  	List<int> data = incoming.GetMessage ();  	ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  	int byteCounter;  	switch (data [0]) {  	case VERSION_BYTE:  		int version = data [1];  		XbeeTx64Bit transmit;  		List<byte> d = new List<byte> ();  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "") {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  		}  		else {  			int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  			if (version != databaseVersion) {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  			}  			else {  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				d.Add (MATCH_BYTE);  				string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  				DataSqlConnection.mutex.ReleaseMutex ();  				string[] nodeInfo = node.Split ('|');  				contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  				contactingNode.SetName (nodeInfo [1]);  				contactingNode.SetAlias (nodeInfo [2]);  				contactingNode.SetBrand (nodeInfo [3]);  				contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  				contactingNode.SetHexAddress (nodeInfo [5]);  				contactingNode.SetRegistered (true);  				//nodeInfo[7] is IsForeign which we don't care about  				contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  				DataSqlConnection.mutex.WaitOne ();  				nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  				DataSqlConnection.mutex.ReleaseMutex ();  				foreach (string s in nodeInfo) {  					if (s == "")  						continue;  					string[] eventData = s.Split ('|');  					Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  					DataSqlConnection.mutex.WaitOne ();  					string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (optionsData == "") {  						contactingEvent.Option1 = false;  						contactingEvent.Option2 = false;  					}  					else {  						string[] ops = optionsData.Split ('\n');  						string[] opsVals;  						opsVals = ops [0].Split ('|');  						contactingEvent.Option1 = true;  						contactingEvent.SetOption1 (opsVals [3]);  						contactingEvent.SetOption1Value (opsVals [4]);  						if (ops.Length == 3) {  							opsVals = ops [1].Split ('|');  							contactingEvent.Option2 = true;  							contactingEvent.SetOption2 (opsVals [3]);  							contactingEvent.SetOption2Value (opsVals [4]);  						}  					}  					contactingNode.AddEvent (contactingEvent);  				}  			}  		}  		contactingNode.SetVersion ((byte)version);  		transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  		transmit.Send (_serialPort);  		break;  	/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  		string name = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				name += (char)data [i];  		}  		contactingNode.SetName (name);  		contactingNode.SetRegistered (true);  		break;  	/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  		string brand = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				brand += (char)data [i];  		}  		contactingNode.SetBrand (brand);  		AddNodeToDatabase (contactingNode);  		break;  	/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  		byteCounter = 1;  		int nameLen = data [byteCounter++];  		string eventName = "";  		for (int i = 0; i < nameLen; i++) {  			if ((char)data [byteCounter] != '\0')  				eventName += (char)data [byteCounter];  			byteCounter++;  		}  		int descLen = data [byteCounter++];  		string description = "";  		for (int i = 0; i < descLen; i++) {  			if ((char)data [byteCounter] != '\0')  				description += (char)data [byteCounter];  			byteCounter++;  		}  		ushort doubleByte = (ushort)(data [byteCounter++] << 8);  		doubleByte = (ushort)(doubleByte | data [byteCounter++]);  		int eventID = doubleByte & 0x3FF;  		bool triggerable = (doubleByte & 0x8000) > 0;  		bool option1Exists = (doubleByte & 0x800) > 0;  		bool option2Exists = (doubleByte & 0x400) > 0;  		Event e = new Event (eventName' description' eventID' triggerable);  		e.Option1 = option1Exists;  		e.Option2 = option2Exists;  		contactingNode.AddEvent (e);  		AddEventToDatabase (contactingNode' e);  		break;  	case OPTION_BYTE:  		byteCounter = 1;  		int eventId = (ushort)(data [byteCounter++] << 8);  		eventId = (ushort)(eventId | data [byteCounter++]);  		int opDescLen = data [byteCounter++];  		string opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  		currEvent.SetOption1 (opDescription);  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		if (currEvent.Option2) {  			opDescLen = data [byteCounter++];  			opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		}  		break;  	case THROW_BYTE:  		byteCounter = 1;  		if (!contactingNode.GetRegistered ()) {  			break;  		}  		int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  		Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  		string op1Str = "";  		string op2Str = "";  		if (thisEvent.Option1) {  			int op1len = data [byteCounter++];  			for (int i = 0; i < op1len; i++) {  				op1Str += (char)data [byteCounter++];  			}  		}  		if (thisEvent.Option2) {  			int op2len = data [byteCounter++];  			for (int i = 0; i < op2len; i++) {  				op2Str += (char)data [byteCounter++];  			}  		}  		contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  		ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  		break;  	default:  		break;  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (incoming.ParseIncomingMessage (_serialPort)) {  	if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  		remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  	}  	List<int> data = incoming.GetMessage ();  	ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  	int byteCounter;  	switch (data [0]) {  	case VERSION_BYTE:  		int version = data [1];  		XbeeTx64Bit transmit;  		List<byte> d = new List<byte> ();  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "") {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  		}  		else {  			int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  			if (version != databaseVersion) {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  			}  			else {  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				d.Add (MATCH_BYTE);  				string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  				DataSqlConnection.mutex.ReleaseMutex ();  				string[] nodeInfo = node.Split ('|');  				contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  				contactingNode.SetName (nodeInfo [1]);  				contactingNode.SetAlias (nodeInfo [2]);  				contactingNode.SetBrand (nodeInfo [3]);  				contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  				contactingNode.SetHexAddress (nodeInfo [5]);  				contactingNode.SetRegistered (true);  				//nodeInfo[7] is IsForeign which we don't care about  				contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  				DataSqlConnection.mutex.WaitOne ();  				nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  				DataSqlConnection.mutex.ReleaseMutex ();  				foreach (string s in nodeInfo) {  					if (s == "")  						continue;  					string[] eventData = s.Split ('|');  					Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  					DataSqlConnection.mutex.WaitOne ();  					string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (optionsData == "") {  						contactingEvent.Option1 = false;  						contactingEvent.Option2 = false;  					}  					else {  						string[] ops = optionsData.Split ('\n');  						string[] opsVals;  						opsVals = ops [0].Split ('|');  						contactingEvent.Option1 = true;  						contactingEvent.SetOption1 (opsVals [3]);  						contactingEvent.SetOption1Value (opsVals [4]);  						if (ops.Length == 3) {  							opsVals = ops [1].Split ('|');  							contactingEvent.Option2 = true;  							contactingEvent.SetOption2 (opsVals [3]);  							contactingEvent.SetOption2Value (opsVals [4]);  						}  					}  					contactingNode.AddEvent (contactingEvent);  				}  			}  		}  		contactingNode.SetVersion ((byte)version);  		transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  		transmit.Send (_serialPort);  		break;  	/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  		string name = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				name += (char)data [i];  		}  		contactingNode.SetName (name);  		contactingNode.SetRegistered (true);  		break;  	/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  		string brand = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				brand += (char)data [i];  		}  		contactingNode.SetBrand (brand);  		AddNodeToDatabase (contactingNode);  		break;  	/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  		byteCounter = 1;  		int nameLen = data [byteCounter++];  		string eventName = "";  		for (int i = 0; i < nameLen; i++) {  			if ((char)data [byteCounter] != '\0')  				eventName += (char)data [byteCounter];  			byteCounter++;  		}  		int descLen = data [byteCounter++];  		string description = "";  		for (int i = 0; i < descLen; i++) {  			if ((char)data [byteCounter] != '\0')  				description += (char)data [byteCounter];  			byteCounter++;  		}  		ushort doubleByte = (ushort)(data [byteCounter++] << 8);  		doubleByte = (ushort)(doubleByte | data [byteCounter++]);  		int eventID = doubleByte & 0x3FF;  		bool triggerable = (doubleByte & 0x8000) > 0;  		bool option1Exists = (doubleByte & 0x800) > 0;  		bool option2Exists = (doubleByte & 0x400) > 0;  		Event e = new Event (eventName' description' eventID' triggerable);  		e.Option1 = option1Exists;  		e.Option2 = option2Exists;  		contactingNode.AddEvent (e);  		AddEventToDatabase (contactingNode' e);  		break;  	case OPTION_BYTE:  		byteCounter = 1;  		int eventId = (ushort)(data [byteCounter++] << 8);  		eventId = (ushort)(eventId | data [byteCounter++]);  		int opDescLen = data [byteCounter++];  		string opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  		currEvent.SetOption1 (opDescription);  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		if (currEvent.Option2) {  			opDescLen = data [byteCounter++];  			opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		}  		break;  	case THROW_BYTE:  		byteCounter = 1;  		if (!contactingNode.GetRegistered ()) {  			break;  		}  		int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  		Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  		string op1Str = "";  		string op2Str = "";  		if (thisEvent.Option1) {  			int op1len = data [byteCounter++];  			for (int i = 0; i < op1len; i++) {  				op1Str += (char)data [byteCounter++];  			}  		}  		if (thisEvent.Option2) {  			int op2len = data [byteCounter++];  			for (int i = 0; i < op2len; i++) {  				op2Str += (char)data [byteCounter++];  			}  		}  		contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  		ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  		break;  	default:  		break;  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (incoming.ParseIncomingMessage (_serialPort)) {  	if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  		remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  	}  	List<int> data = incoming.GetMessage ();  	ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  	int byteCounter;  	switch (data [0]) {  	case VERSION_BYTE:  		int version = data [1];  		XbeeTx64Bit transmit;  		List<byte> d = new List<byte> ();  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "") {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  		}  		else {  			int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  			if (version != databaseVersion) {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  			}  			else {  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				d.Add (MATCH_BYTE);  				string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  				DataSqlConnection.mutex.ReleaseMutex ();  				string[] nodeInfo = node.Split ('|');  				contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  				contactingNode.SetName (nodeInfo [1]);  				contactingNode.SetAlias (nodeInfo [2]);  				contactingNode.SetBrand (nodeInfo [3]);  				contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  				contactingNode.SetHexAddress (nodeInfo [5]);  				contactingNode.SetRegistered (true);  				//nodeInfo[7] is IsForeign which we don't care about  				contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  				DataSqlConnection.mutex.WaitOne ();  				nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  				DataSqlConnection.mutex.ReleaseMutex ();  				foreach (string s in nodeInfo) {  					if (s == "")  						continue;  					string[] eventData = s.Split ('|');  					Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  					DataSqlConnection.mutex.WaitOne ();  					string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (optionsData == "") {  						contactingEvent.Option1 = false;  						contactingEvent.Option2 = false;  					}  					else {  						string[] ops = optionsData.Split ('\n');  						string[] opsVals;  						opsVals = ops [0].Split ('|');  						contactingEvent.Option1 = true;  						contactingEvent.SetOption1 (opsVals [3]);  						contactingEvent.SetOption1Value (opsVals [4]);  						if (ops.Length == 3) {  							opsVals = ops [1].Split ('|');  							contactingEvent.Option2 = true;  							contactingEvent.SetOption2 (opsVals [3]);  							contactingEvent.SetOption2Value (opsVals [4]);  						}  					}  					contactingNode.AddEvent (contactingEvent);  				}  			}  		}  		contactingNode.SetVersion ((byte)version);  		transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  		transmit.Send (_serialPort);  		break;  	/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  		string name = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				name += (char)data [i];  		}  		contactingNode.SetName (name);  		contactingNode.SetRegistered (true);  		break;  	/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  		string brand = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				brand += (char)data [i];  		}  		contactingNode.SetBrand (brand);  		AddNodeToDatabase (contactingNode);  		break;  	/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  		byteCounter = 1;  		int nameLen = data [byteCounter++];  		string eventName = "";  		for (int i = 0; i < nameLen; i++) {  			if ((char)data [byteCounter] != '\0')  				eventName += (char)data [byteCounter];  			byteCounter++;  		}  		int descLen = data [byteCounter++];  		string description = "";  		for (int i = 0; i < descLen; i++) {  			if ((char)data [byteCounter] != '\0')  				description += (char)data [byteCounter];  			byteCounter++;  		}  		ushort doubleByte = (ushort)(data [byteCounter++] << 8);  		doubleByte = (ushort)(doubleByte | data [byteCounter++]);  		int eventID = doubleByte & 0x3FF;  		bool triggerable = (doubleByte & 0x8000) > 0;  		bool option1Exists = (doubleByte & 0x800) > 0;  		bool option2Exists = (doubleByte & 0x400) > 0;  		Event e = new Event (eventName' description' eventID' triggerable);  		e.Option1 = option1Exists;  		e.Option2 = option2Exists;  		contactingNode.AddEvent (e);  		AddEventToDatabase (contactingNode' e);  		break;  	case OPTION_BYTE:  		byteCounter = 1;  		int eventId = (ushort)(data [byteCounter++] << 8);  		eventId = (ushort)(eventId | data [byteCounter++]);  		int opDescLen = data [byteCounter++];  		string opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  		currEvent.SetOption1 (opDescription);  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		if (currEvent.Option2) {  			opDescLen = data [byteCounter++];  			opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		}  		break;  	case THROW_BYTE:  		byteCounter = 1;  		if (!contactingNode.GetRegistered ()) {  			break;  		}  		int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  		Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  		string op1Str = "";  		string op2Str = "";  		if (thisEvent.Option1) {  			int op1len = data [byteCounter++];  			for (int i = 0; i < op1len; i++) {  				op1Str += (char)data [byteCounter++];  			}  		}  		if (thisEvent.Option2) {  			int op2len = data [byteCounter++];  			for (int i = 0; i < op2len; i++) {  				op2Str += (char)data [byteCounter++];  			}  		}  		contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  		ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  		break;  	default:  		break;  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (incoming.ParseIncomingMessage (_serialPort)) {  	if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  		remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  	}  	List<int> data = incoming.GetMessage ();  	ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  	int byteCounter;  	switch (data [0]) {  	case VERSION_BYTE:  		int version = data [1];  		XbeeTx64Bit transmit;  		List<byte> d = new List<byte> ();  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "") {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  		}  		else {  			int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  			if (version != databaseVersion) {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  			}  			else {  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				d.Add (MATCH_BYTE);  				string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  				DataSqlConnection.mutex.ReleaseMutex ();  				string[] nodeInfo = node.Split ('|');  				contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  				contactingNode.SetName (nodeInfo [1]);  				contactingNode.SetAlias (nodeInfo [2]);  				contactingNode.SetBrand (nodeInfo [3]);  				contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  				contactingNode.SetHexAddress (nodeInfo [5]);  				contactingNode.SetRegistered (true);  				//nodeInfo[7] is IsForeign which we don't care about  				contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  				DataSqlConnection.mutex.WaitOne ();  				nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  				DataSqlConnection.mutex.ReleaseMutex ();  				foreach (string s in nodeInfo) {  					if (s == "")  						continue;  					string[] eventData = s.Split ('|');  					Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  					DataSqlConnection.mutex.WaitOne ();  					string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (optionsData == "") {  						contactingEvent.Option1 = false;  						contactingEvent.Option2 = false;  					}  					else {  						string[] ops = optionsData.Split ('\n');  						string[] opsVals;  						opsVals = ops [0].Split ('|');  						contactingEvent.Option1 = true;  						contactingEvent.SetOption1 (opsVals [3]);  						contactingEvent.SetOption1Value (opsVals [4]);  						if (ops.Length == 3) {  							opsVals = ops [1].Split ('|');  							contactingEvent.Option2 = true;  							contactingEvent.SetOption2 (opsVals [3]);  							contactingEvent.SetOption2Value (opsVals [4]);  						}  					}  					contactingNode.AddEvent (contactingEvent);  				}  			}  		}  		contactingNode.SetVersion ((byte)version);  		transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  		transmit.Send (_serialPort);  		break;  	/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  		string name = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				name += (char)data [i];  		}  		contactingNode.SetName (name);  		contactingNode.SetRegistered (true);  		break;  	/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  		string brand = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				brand += (char)data [i];  		}  		contactingNode.SetBrand (brand);  		AddNodeToDatabase (contactingNode);  		break;  	/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  		byteCounter = 1;  		int nameLen = data [byteCounter++];  		string eventName = "";  		for (int i = 0; i < nameLen; i++) {  			if ((char)data [byteCounter] != '\0')  				eventName += (char)data [byteCounter];  			byteCounter++;  		}  		int descLen = data [byteCounter++];  		string description = "";  		for (int i = 0; i < descLen; i++) {  			if ((char)data [byteCounter] != '\0')  				description += (char)data [byteCounter];  			byteCounter++;  		}  		ushort doubleByte = (ushort)(data [byteCounter++] << 8);  		doubleByte = (ushort)(doubleByte | data [byteCounter++]);  		int eventID = doubleByte & 0x3FF;  		bool triggerable = (doubleByte & 0x8000) > 0;  		bool option1Exists = (doubleByte & 0x800) > 0;  		bool option2Exists = (doubleByte & 0x400) > 0;  		Event e = new Event (eventName' description' eventID' triggerable);  		e.Option1 = option1Exists;  		e.Option2 = option2Exists;  		contactingNode.AddEvent (e);  		AddEventToDatabase (contactingNode' e);  		break;  	case OPTION_BYTE:  		byteCounter = 1;  		int eventId = (ushort)(data [byteCounter++] << 8);  		eventId = (ushort)(eventId | data [byteCounter++]);  		int opDescLen = data [byteCounter++];  		string opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  		currEvent.SetOption1 (opDescription);  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		if (currEvent.Option2) {  			opDescLen = data [byteCounter++];  			opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		}  		break;  	case THROW_BYTE:  		byteCounter = 1;  		if (!contactingNode.GetRegistered ()) {  			break;  		}  		int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  		Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  		string op1Str = "";  		string op2Str = "";  		if (thisEvent.Option1) {  			int op1len = data [byteCounter++];  			for (int i = 0; i < op1len; i++) {  				op1Str += (char)data [byteCounter++];  			}  		}  		if (thisEvent.Option2) {  			int op2len = data [byteCounter++];  			for (int i = 0; i < op2len; i++) {  				op2Str += (char)data [byteCounter++];  			}  		}  		contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  		ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  		break;  	default:  		break;  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (incoming.ParseIncomingMessage (_serialPort)) {  	if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  		remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  	}  	List<int> data = incoming.GetMessage ();  	ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  	int byteCounter;  	switch (data [0]) {  	case VERSION_BYTE:  		int version = data [1];  		XbeeTx64Bit transmit;  		List<byte> d = new List<byte> ();  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "") {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  		}  		else {  			int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  			if (version != databaseVersion) {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  			}  			else {  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				d.Add (MATCH_BYTE);  				string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  				DataSqlConnection.mutex.ReleaseMutex ();  				string[] nodeInfo = node.Split ('|');  				contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  				contactingNode.SetName (nodeInfo [1]);  				contactingNode.SetAlias (nodeInfo [2]);  				contactingNode.SetBrand (nodeInfo [3]);  				contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  				contactingNode.SetHexAddress (nodeInfo [5]);  				contactingNode.SetRegistered (true);  				//nodeInfo[7] is IsForeign which we don't care about  				contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  				DataSqlConnection.mutex.WaitOne ();  				nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  				DataSqlConnection.mutex.ReleaseMutex ();  				foreach (string s in nodeInfo) {  					if (s == "")  						continue;  					string[] eventData = s.Split ('|');  					Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  					DataSqlConnection.mutex.WaitOne ();  					string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (optionsData == "") {  						contactingEvent.Option1 = false;  						contactingEvent.Option2 = false;  					}  					else {  						string[] ops = optionsData.Split ('\n');  						string[] opsVals;  						opsVals = ops [0].Split ('|');  						contactingEvent.Option1 = true;  						contactingEvent.SetOption1 (opsVals [3]);  						contactingEvent.SetOption1Value (opsVals [4]);  						if (ops.Length == 3) {  							opsVals = ops [1].Split ('|');  							contactingEvent.Option2 = true;  							contactingEvent.SetOption2 (opsVals [3]);  							contactingEvent.SetOption2Value (opsVals [4]);  						}  					}  					contactingNode.AddEvent (contactingEvent);  				}  			}  		}  		contactingNode.SetVersion ((byte)version);  		transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  		transmit.Send (_serialPort);  		break;  	/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  		string name = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				name += (char)data [i];  		}  		contactingNode.SetName (name);  		contactingNode.SetRegistered (true);  		break;  	/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  		string brand = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				brand += (char)data [i];  		}  		contactingNode.SetBrand (brand);  		AddNodeToDatabase (contactingNode);  		break;  	/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  		byteCounter = 1;  		int nameLen = data [byteCounter++];  		string eventName = "";  		for (int i = 0; i < nameLen; i++) {  			if ((char)data [byteCounter] != '\0')  				eventName += (char)data [byteCounter];  			byteCounter++;  		}  		int descLen = data [byteCounter++];  		string description = "";  		for (int i = 0; i < descLen; i++) {  			if ((char)data [byteCounter] != '\0')  				description += (char)data [byteCounter];  			byteCounter++;  		}  		ushort doubleByte = (ushort)(data [byteCounter++] << 8);  		doubleByte = (ushort)(doubleByte | data [byteCounter++]);  		int eventID = doubleByte & 0x3FF;  		bool triggerable = (doubleByte & 0x8000) > 0;  		bool option1Exists = (doubleByte & 0x800) > 0;  		bool option2Exists = (doubleByte & 0x400) > 0;  		Event e = new Event (eventName' description' eventID' triggerable);  		e.Option1 = option1Exists;  		e.Option2 = option2Exists;  		contactingNode.AddEvent (e);  		AddEventToDatabase (contactingNode' e);  		break;  	case OPTION_BYTE:  		byteCounter = 1;  		int eventId = (ushort)(data [byteCounter++] << 8);  		eventId = (ushort)(eventId | data [byteCounter++]);  		int opDescLen = data [byteCounter++];  		string opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  		currEvent.SetOption1 (opDescription);  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		if (currEvent.Option2) {  			opDescLen = data [byteCounter++];  			opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		}  		break;  	case THROW_BYTE:  		byteCounter = 1;  		if (!contactingNode.GetRegistered ()) {  			break;  		}  		int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  		Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  		string op1Str = "";  		string op2Str = "";  		if (thisEvent.Option1) {  			int op1len = data [byteCounter++];  			for (int i = 0; i < op1len; i++) {  				op1Str += (char)data [byteCounter++];  			}  		}  		if (thisEvent.Option2) {  			int op2len = data [byteCounter++];  			for (int i = 0; i < op2len; i++) {  				op2Str += (char)data [byteCounter++];  			}  		}  		contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  		ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  		break;  	default:  		break;  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (incoming.ParseIncomingMessage (_serialPort)) {  	if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  		remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  	}  	List<int> data = incoming.GetMessage ();  	ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  	int byteCounter;  	switch (data [0]) {  	case VERSION_BYTE:  		int version = data [1];  		XbeeTx64Bit transmit;  		List<byte> d = new List<byte> ();  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "") {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  		}  		else {  			int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  			if (version != databaseVersion) {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  			}  			else {  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				d.Add (MATCH_BYTE);  				string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  				DataSqlConnection.mutex.ReleaseMutex ();  				string[] nodeInfo = node.Split ('|');  				contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  				contactingNode.SetName (nodeInfo [1]);  				contactingNode.SetAlias (nodeInfo [2]);  				contactingNode.SetBrand (nodeInfo [3]);  				contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  				contactingNode.SetHexAddress (nodeInfo [5]);  				contactingNode.SetRegistered (true);  				//nodeInfo[7] is IsForeign which we don't care about  				contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  				DataSqlConnection.mutex.WaitOne ();  				nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  				DataSqlConnection.mutex.ReleaseMutex ();  				foreach (string s in nodeInfo) {  					if (s == "")  						continue;  					string[] eventData = s.Split ('|');  					Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  					DataSqlConnection.mutex.WaitOne ();  					string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (optionsData == "") {  						contactingEvent.Option1 = false;  						contactingEvent.Option2 = false;  					}  					else {  						string[] ops = optionsData.Split ('\n');  						string[] opsVals;  						opsVals = ops [0].Split ('|');  						contactingEvent.Option1 = true;  						contactingEvent.SetOption1 (opsVals [3]);  						contactingEvent.SetOption1Value (opsVals [4]);  						if (ops.Length == 3) {  							opsVals = ops [1].Split ('|');  							contactingEvent.Option2 = true;  							contactingEvent.SetOption2 (opsVals [3]);  							contactingEvent.SetOption2Value (opsVals [4]);  						}  					}  					contactingNode.AddEvent (contactingEvent);  				}  			}  		}  		contactingNode.SetVersion ((byte)version);  		transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  		transmit.Send (_serialPort);  		break;  	/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  		string name = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				name += (char)data [i];  		}  		contactingNode.SetName (name);  		contactingNode.SetRegistered (true);  		break;  	/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  		string brand = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				brand += (char)data [i];  		}  		contactingNode.SetBrand (brand);  		AddNodeToDatabase (contactingNode);  		break;  	/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  		byteCounter = 1;  		int nameLen = data [byteCounter++];  		string eventName = "";  		for (int i = 0; i < nameLen; i++) {  			if ((char)data [byteCounter] != '\0')  				eventName += (char)data [byteCounter];  			byteCounter++;  		}  		int descLen = data [byteCounter++];  		string description = "";  		for (int i = 0; i < descLen; i++) {  			if ((char)data [byteCounter] != '\0')  				description += (char)data [byteCounter];  			byteCounter++;  		}  		ushort doubleByte = (ushort)(data [byteCounter++] << 8);  		doubleByte = (ushort)(doubleByte | data [byteCounter++]);  		int eventID = doubleByte & 0x3FF;  		bool triggerable = (doubleByte & 0x8000) > 0;  		bool option1Exists = (doubleByte & 0x800) > 0;  		bool option2Exists = (doubleByte & 0x400) > 0;  		Event e = new Event (eventName' description' eventID' triggerable);  		e.Option1 = option1Exists;  		e.Option2 = option2Exists;  		contactingNode.AddEvent (e);  		AddEventToDatabase (contactingNode' e);  		break;  	case OPTION_BYTE:  		byteCounter = 1;  		int eventId = (ushort)(data [byteCounter++] << 8);  		eventId = (ushort)(eventId | data [byteCounter++]);  		int opDescLen = data [byteCounter++];  		string opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  		currEvent.SetOption1 (opDescription);  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		if (currEvent.Option2) {  			opDescLen = data [byteCounter++];  			opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		}  		break;  	case THROW_BYTE:  		byteCounter = 1;  		if (!contactingNode.GetRegistered ()) {  			break;  		}  		int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  		Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  		string op1Str = "";  		string op2Str = "";  		if (thisEvent.Option1) {  			int op1len = data [byteCounter++];  			for (int i = 0; i < op1len; i++) {  				op1Str += (char)data [byteCounter++];  			}  		}  		if (thisEvent.Option2) {  			int op2len = data [byteCounter++];  			for (int i = 0; i < op2len; i++) {  				op2Str += (char)data [byteCounter++];  			}  		}  		contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  		ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  		break;  	default:  		break;  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (incoming.ParseIncomingMessage (_serialPort)) {  	if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  		remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  	}  	List<int> data = incoming.GetMessage ();  	ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  	int byteCounter;  	switch (data [0]) {  	case VERSION_BYTE:  		int version = data [1];  		XbeeTx64Bit transmit;  		List<byte> d = new List<byte> ();  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "") {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  		}  		else {  			int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  			if (version != databaseVersion) {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  			}  			else {  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				d.Add (MATCH_BYTE);  				string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  				DataSqlConnection.mutex.ReleaseMutex ();  				string[] nodeInfo = node.Split ('|');  				contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  				contactingNode.SetName (nodeInfo [1]);  				contactingNode.SetAlias (nodeInfo [2]);  				contactingNode.SetBrand (nodeInfo [3]);  				contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  				contactingNode.SetHexAddress (nodeInfo [5]);  				contactingNode.SetRegistered (true);  				//nodeInfo[7] is IsForeign which we don't care about  				contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  				DataSqlConnection.mutex.WaitOne ();  				nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  				DataSqlConnection.mutex.ReleaseMutex ();  				foreach (string s in nodeInfo) {  					if (s == "")  						continue;  					string[] eventData = s.Split ('|');  					Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  					DataSqlConnection.mutex.WaitOne ();  					string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (optionsData == "") {  						contactingEvent.Option1 = false;  						contactingEvent.Option2 = false;  					}  					else {  						string[] ops = optionsData.Split ('\n');  						string[] opsVals;  						opsVals = ops [0].Split ('|');  						contactingEvent.Option1 = true;  						contactingEvent.SetOption1 (opsVals [3]);  						contactingEvent.SetOption1Value (opsVals [4]);  						if (ops.Length == 3) {  							opsVals = ops [1].Split ('|');  							contactingEvent.Option2 = true;  							contactingEvent.SetOption2 (opsVals [3]);  							contactingEvent.SetOption2Value (opsVals [4]);  						}  					}  					contactingNode.AddEvent (contactingEvent);  				}  			}  		}  		contactingNode.SetVersion ((byte)version);  		transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  		transmit.Send (_serialPort);  		break;  	/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  		string name = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				name += (char)data [i];  		}  		contactingNode.SetName (name);  		contactingNode.SetRegistered (true);  		break;  	/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  		string brand = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				brand += (char)data [i];  		}  		contactingNode.SetBrand (brand);  		AddNodeToDatabase (contactingNode);  		break;  	/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  		byteCounter = 1;  		int nameLen = data [byteCounter++];  		string eventName = "";  		for (int i = 0; i < nameLen; i++) {  			if ((char)data [byteCounter] != '\0')  				eventName += (char)data [byteCounter];  			byteCounter++;  		}  		int descLen = data [byteCounter++];  		string description = "";  		for (int i = 0; i < descLen; i++) {  			if ((char)data [byteCounter] != '\0')  				description += (char)data [byteCounter];  			byteCounter++;  		}  		ushort doubleByte = (ushort)(data [byteCounter++] << 8);  		doubleByte = (ushort)(doubleByte | data [byteCounter++]);  		int eventID = doubleByte & 0x3FF;  		bool triggerable = (doubleByte & 0x8000) > 0;  		bool option1Exists = (doubleByte & 0x800) > 0;  		bool option2Exists = (doubleByte & 0x400) > 0;  		Event e = new Event (eventName' description' eventID' triggerable);  		e.Option1 = option1Exists;  		e.Option2 = option2Exists;  		contactingNode.AddEvent (e);  		AddEventToDatabase (contactingNode' e);  		break;  	case OPTION_BYTE:  		byteCounter = 1;  		int eventId = (ushort)(data [byteCounter++] << 8);  		eventId = (ushort)(eventId | data [byteCounter++]);  		int opDescLen = data [byteCounter++];  		string opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  		currEvent.SetOption1 (opDescription);  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		if (currEvent.Option2) {  			opDescLen = data [byteCounter++];  			opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		}  		break;  	case THROW_BYTE:  		byteCounter = 1;  		if (!contactingNode.GetRegistered ()) {  			break;  		}  		int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  		Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  		string op1Str = "";  		string op2Str = "";  		if (thisEvent.Option1) {  			int op1len = data [byteCounter++];  			for (int i = 0; i < op1len; i++) {  				op1Str += (char)data [byteCounter++];  			}  		}  		if (thisEvent.Option2) {  			int op2len = data [byteCounter++];  			for (int i = 0; i < op2len; i++) {  				op2Str += (char)data [byteCounter++];  			}  		}  		contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  		ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  		break;  	default:  		break;  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (incoming.ParseIncomingMessage (_serialPort)) {  	if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  		remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  	}  	List<int> data = incoming.GetMessage ();  	ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  	int byteCounter;  	switch (data [0]) {  	case VERSION_BYTE:  		int version = data [1];  		XbeeTx64Bit transmit;  		List<byte> d = new List<byte> ();  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "") {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  		}  		else {  			int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  			if (version != databaseVersion) {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  			}  			else {  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				d.Add (MATCH_BYTE);  				string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  				DataSqlConnection.mutex.ReleaseMutex ();  				string[] nodeInfo = node.Split ('|');  				contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  				contactingNode.SetName (nodeInfo [1]);  				contactingNode.SetAlias (nodeInfo [2]);  				contactingNode.SetBrand (nodeInfo [3]);  				contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  				contactingNode.SetHexAddress (nodeInfo [5]);  				contactingNode.SetRegistered (true);  				//nodeInfo[7] is IsForeign which we don't care about  				contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  				DataSqlConnection.mutex.WaitOne ();  				nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  				DataSqlConnection.mutex.ReleaseMutex ();  				foreach (string s in nodeInfo) {  					if (s == "")  						continue;  					string[] eventData = s.Split ('|');  					Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  					DataSqlConnection.mutex.WaitOne ();  					string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (optionsData == "") {  						contactingEvent.Option1 = false;  						contactingEvent.Option2 = false;  					}  					else {  						string[] ops = optionsData.Split ('\n');  						string[] opsVals;  						opsVals = ops [0].Split ('|');  						contactingEvent.Option1 = true;  						contactingEvent.SetOption1 (opsVals [3]);  						contactingEvent.SetOption1Value (opsVals [4]);  						if (ops.Length == 3) {  							opsVals = ops [1].Split ('|');  							contactingEvent.Option2 = true;  							contactingEvent.SetOption2 (opsVals [3]);  							contactingEvent.SetOption2Value (opsVals [4]);  						}  					}  					contactingNode.AddEvent (contactingEvent);  				}  			}  		}  		contactingNode.SetVersion ((byte)version);  		transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  		transmit.Send (_serialPort);  		break;  	/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  		string name = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				name += (char)data [i];  		}  		contactingNode.SetName (name);  		contactingNode.SetRegistered (true);  		break;  	/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  		string brand = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				brand += (char)data [i];  		}  		contactingNode.SetBrand (brand);  		AddNodeToDatabase (contactingNode);  		break;  	/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  		byteCounter = 1;  		int nameLen = data [byteCounter++];  		string eventName = "";  		for (int i = 0; i < nameLen; i++) {  			if ((char)data [byteCounter] != '\0')  				eventName += (char)data [byteCounter];  			byteCounter++;  		}  		int descLen = data [byteCounter++];  		string description = "";  		for (int i = 0; i < descLen; i++) {  			if ((char)data [byteCounter] != '\0')  				description += (char)data [byteCounter];  			byteCounter++;  		}  		ushort doubleByte = (ushort)(data [byteCounter++] << 8);  		doubleByte = (ushort)(doubleByte | data [byteCounter++]);  		int eventID = doubleByte & 0x3FF;  		bool triggerable = (doubleByte & 0x8000) > 0;  		bool option1Exists = (doubleByte & 0x800) > 0;  		bool option2Exists = (doubleByte & 0x400) > 0;  		Event e = new Event (eventName' description' eventID' triggerable);  		e.Option1 = option1Exists;  		e.Option2 = option2Exists;  		contactingNode.AddEvent (e);  		AddEventToDatabase (contactingNode' e);  		break;  	case OPTION_BYTE:  		byteCounter = 1;  		int eventId = (ushort)(data [byteCounter++] << 8);  		eventId = (ushort)(eventId | data [byteCounter++]);  		int opDescLen = data [byteCounter++];  		string opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  		currEvent.SetOption1 (opDescription);  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		if (currEvent.Option2) {  			opDescLen = data [byteCounter++];  			opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		}  		break;  	case THROW_BYTE:  		byteCounter = 1;  		if (!contactingNode.GetRegistered ()) {  			break;  		}  		int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  		Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  		string op1Str = "";  		string op2Str = "";  		if (thisEvent.Option1) {  			int op1len = data [byteCounter++];  			for (int i = 0; i < op1len; i++) {  				op1Str += (char)data [byteCounter++];  			}  		}  		if (thisEvent.Option2) {  			int op2len = data [byteCounter++];  			for (int i = 0; i < op2len; i++) {  				op2Str += (char)data [byteCounter++];  			}  		}  		contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  		ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  		break;  	default:  		break;  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (incoming.ParseIncomingMessage (_serialPort)) {  	if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  		remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  	}  	List<int> data = incoming.GetMessage ();  	ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  	int byteCounter;  	switch (data [0]) {  	case VERSION_BYTE:  		int version = data [1];  		XbeeTx64Bit transmit;  		List<byte> d = new List<byte> ();  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "") {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  		}  		else {  			int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  			if (version != databaseVersion) {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  			}  			else {  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				d.Add (MATCH_BYTE);  				string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  				DataSqlConnection.mutex.ReleaseMutex ();  				string[] nodeInfo = node.Split ('|');  				contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  				contactingNode.SetName (nodeInfo [1]);  				contactingNode.SetAlias (nodeInfo [2]);  				contactingNode.SetBrand (nodeInfo [3]);  				contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  				contactingNode.SetHexAddress (nodeInfo [5]);  				contactingNode.SetRegistered (true);  				//nodeInfo[7] is IsForeign which we don't care about  				contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  				DataSqlConnection.mutex.WaitOne ();  				nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  				DataSqlConnection.mutex.ReleaseMutex ();  				foreach (string s in nodeInfo) {  					if (s == "")  						continue;  					string[] eventData = s.Split ('|');  					Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  					DataSqlConnection.mutex.WaitOne ();  					string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (optionsData == "") {  						contactingEvent.Option1 = false;  						contactingEvent.Option2 = false;  					}  					else {  						string[] ops = optionsData.Split ('\n');  						string[] opsVals;  						opsVals = ops [0].Split ('|');  						contactingEvent.Option1 = true;  						contactingEvent.SetOption1 (opsVals [3]);  						contactingEvent.SetOption1Value (opsVals [4]);  						if (ops.Length == 3) {  							opsVals = ops [1].Split ('|');  							contactingEvent.Option2 = true;  							contactingEvent.SetOption2 (opsVals [3]);  							contactingEvent.SetOption2Value (opsVals [4]);  						}  					}  					contactingNode.AddEvent (contactingEvent);  				}  			}  		}  		contactingNode.SetVersion ((byte)version);  		transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  		transmit.Send (_serialPort);  		break;  	/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  		string name = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				name += (char)data [i];  		}  		contactingNode.SetName (name);  		contactingNode.SetRegistered (true);  		break;  	/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  		string brand = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				brand += (char)data [i];  		}  		contactingNode.SetBrand (brand);  		AddNodeToDatabase (contactingNode);  		break;  	/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  		byteCounter = 1;  		int nameLen = data [byteCounter++];  		string eventName = "";  		for (int i = 0; i < nameLen; i++) {  			if ((char)data [byteCounter] != '\0')  				eventName += (char)data [byteCounter];  			byteCounter++;  		}  		int descLen = data [byteCounter++];  		string description = "";  		for (int i = 0; i < descLen; i++) {  			if ((char)data [byteCounter] != '\0')  				description += (char)data [byteCounter];  			byteCounter++;  		}  		ushort doubleByte = (ushort)(data [byteCounter++] << 8);  		doubleByte = (ushort)(doubleByte | data [byteCounter++]);  		int eventID = doubleByte & 0x3FF;  		bool triggerable = (doubleByte & 0x8000) > 0;  		bool option1Exists = (doubleByte & 0x800) > 0;  		bool option2Exists = (doubleByte & 0x400) > 0;  		Event e = new Event (eventName' description' eventID' triggerable);  		e.Option1 = option1Exists;  		e.Option2 = option2Exists;  		contactingNode.AddEvent (e);  		AddEventToDatabase (contactingNode' e);  		break;  	case OPTION_BYTE:  		byteCounter = 1;  		int eventId = (ushort)(data [byteCounter++] << 8);  		eventId = (ushort)(eventId | data [byteCounter++]);  		int opDescLen = data [byteCounter++];  		string opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  		currEvent.SetOption1 (opDescription);  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		if (currEvent.Option2) {  			opDescLen = data [byteCounter++];  			opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		}  		break;  	case THROW_BYTE:  		byteCounter = 1;  		if (!contactingNode.GetRegistered ()) {  			break;  		}  		int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  		Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  		string op1Str = "";  		string op2Str = "";  		if (thisEvent.Option1) {  			int op1len = data [byteCounter++];  			for (int i = 0; i < op1len; i++) {  				op1Str += (char)data [byteCounter++];  			}  		}  		if (thisEvent.Option2) {  			int op2len = data [byteCounter++];  			for (int i = 0; i < op2len; i++) {  				op2Str += (char)data [byteCounter++];  			}  		}  		contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  		ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  		break;  	default:  		break;  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (incoming.ParseIncomingMessage (_serialPort)) {  	if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  		remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  	}  	List<int> data = incoming.GetMessage ();  	ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  	int byteCounter;  	switch (data [0]) {  	case VERSION_BYTE:  		int version = data [1];  		XbeeTx64Bit transmit;  		List<byte> d = new List<byte> ();  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "") {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  		}  		else {  			int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  			if (version != databaseVersion) {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  			}  			else {  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				d.Add (MATCH_BYTE);  				string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  				DataSqlConnection.mutex.ReleaseMutex ();  				string[] nodeInfo = node.Split ('|');  				contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  				contactingNode.SetName (nodeInfo [1]);  				contactingNode.SetAlias (nodeInfo [2]);  				contactingNode.SetBrand (nodeInfo [3]);  				contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  				contactingNode.SetHexAddress (nodeInfo [5]);  				contactingNode.SetRegistered (true);  				//nodeInfo[7] is IsForeign which we don't care about  				contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  				DataSqlConnection.mutex.WaitOne ();  				nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  				DataSqlConnection.mutex.ReleaseMutex ();  				foreach (string s in nodeInfo) {  					if (s == "")  						continue;  					string[] eventData = s.Split ('|');  					Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  					DataSqlConnection.mutex.WaitOne ();  					string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (optionsData == "") {  						contactingEvent.Option1 = false;  						contactingEvent.Option2 = false;  					}  					else {  						string[] ops = optionsData.Split ('\n');  						string[] opsVals;  						opsVals = ops [0].Split ('|');  						contactingEvent.Option1 = true;  						contactingEvent.SetOption1 (opsVals [3]);  						contactingEvent.SetOption1Value (opsVals [4]);  						if (ops.Length == 3) {  							opsVals = ops [1].Split ('|');  							contactingEvent.Option2 = true;  							contactingEvent.SetOption2 (opsVals [3]);  							contactingEvent.SetOption2Value (opsVals [4]);  						}  					}  					contactingNode.AddEvent (contactingEvent);  				}  			}  		}  		contactingNode.SetVersion ((byte)version);  		transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  		transmit.Send (_serialPort);  		break;  	/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  		string name = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				name += (char)data [i];  		}  		contactingNode.SetName (name);  		contactingNode.SetRegistered (true);  		break;  	/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  		string brand = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				brand += (char)data [i];  		}  		contactingNode.SetBrand (brand);  		AddNodeToDatabase (contactingNode);  		break;  	/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  		byteCounter = 1;  		int nameLen = data [byteCounter++];  		string eventName = "";  		for (int i = 0; i < nameLen; i++) {  			if ((char)data [byteCounter] != '\0')  				eventName += (char)data [byteCounter];  			byteCounter++;  		}  		int descLen = data [byteCounter++];  		string description = "";  		for (int i = 0; i < descLen; i++) {  			if ((char)data [byteCounter] != '\0')  				description += (char)data [byteCounter];  			byteCounter++;  		}  		ushort doubleByte = (ushort)(data [byteCounter++] << 8);  		doubleByte = (ushort)(doubleByte | data [byteCounter++]);  		int eventID = doubleByte & 0x3FF;  		bool triggerable = (doubleByte & 0x8000) > 0;  		bool option1Exists = (doubleByte & 0x800) > 0;  		bool option2Exists = (doubleByte & 0x400) > 0;  		Event e = new Event (eventName' description' eventID' triggerable);  		e.Option1 = option1Exists;  		e.Option2 = option2Exists;  		contactingNode.AddEvent (e);  		AddEventToDatabase (contactingNode' e);  		break;  	case OPTION_BYTE:  		byteCounter = 1;  		int eventId = (ushort)(data [byteCounter++] << 8);  		eventId = (ushort)(eventId | data [byteCounter++]);  		int opDescLen = data [byteCounter++];  		string opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  		currEvent.SetOption1 (opDescription);  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		if (currEvent.Option2) {  			opDescLen = data [byteCounter++];  			opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		}  		break;  	case THROW_BYTE:  		byteCounter = 1;  		if (!contactingNode.GetRegistered ()) {  			break;  		}  		int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  		Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  		string op1Str = "";  		string op2Str = "";  		if (thisEvent.Option1) {  			int op1len = data [byteCounter++];  			for (int i = 0; i < op1len; i++) {  				op1Str += (char)data [byteCounter++];  			}  		}  		if (thisEvent.Option2) {  			int op2len = data [byteCounter++];  			for (int i = 0; i < op2len; i++) {  				op2Str += (char)data [byteCounter++];  			}  		}  		contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  		ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  		break;  	default:  		break;  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (incoming.ParseIncomingMessage (_serialPort)) {  	if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  		remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  	}  	List<int> data = incoming.GetMessage ();  	ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  	int byteCounter;  	switch (data [0]) {  	case VERSION_BYTE:  		int version = data [1];  		XbeeTx64Bit transmit;  		List<byte> d = new List<byte> ();  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "") {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  		}  		else {  			int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  			if (version != databaseVersion) {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  			}  			else {  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				d.Add (MATCH_BYTE);  				string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  				DataSqlConnection.mutex.ReleaseMutex ();  				string[] nodeInfo = node.Split ('|');  				contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  				contactingNode.SetName (nodeInfo [1]);  				contactingNode.SetAlias (nodeInfo [2]);  				contactingNode.SetBrand (nodeInfo [3]);  				contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  				contactingNode.SetHexAddress (nodeInfo [5]);  				contactingNode.SetRegistered (true);  				//nodeInfo[7] is IsForeign which we don't care about  				contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  				DataSqlConnection.mutex.WaitOne ();  				nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  				DataSqlConnection.mutex.ReleaseMutex ();  				foreach (string s in nodeInfo) {  					if (s == "")  						continue;  					string[] eventData = s.Split ('|');  					Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  					DataSqlConnection.mutex.WaitOne ();  					string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (optionsData == "") {  						contactingEvent.Option1 = false;  						contactingEvent.Option2 = false;  					}  					else {  						string[] ops = optionsData.Split ('\n');  						string[] opsVals;  						opsVals = ops [0].Split ('|');  						contactingEvent.Option1 = true;  						contactingEvent.SetOption1 (opsVals [3]);  						contactingEvent.SetOption1Value (opsVals [4]);  						if (ops.Length == 3) {  							opsVals = ops [1].Split ('|');  							contactingEvent.Option2 = true;  							contactingEvent.SetOption2 (opsVals [3]);  							contactingEvent.SetOption2Value (opsVals [4]);  						}  					}  					contactingNode.AddEvent (contactingEvent);  				}  			}  		}  		contactingNode.SetVersion ((byte)version);  		transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  		transmit.Send (_serialPort);  		break;  	/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  		string name = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				name += (char)data [i];  		}  		contactingNode.SetName (name);  		contactingNode.SetRegistered (true);  		break;  	/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  		string brand = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				brand += (char)data [i];  		}  		contactingNode.SetBrand (brand);  		AddNodeToDatabase (contactingNode);  		break;  	/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  		byteCounter = 1;  		int nameLen = data [byteCounter++];  		string eventName = "";  		for (int i = 0; i < nameLen; i++) {  			if ((char)data [byteCounter] != '\0')  				eventName += (char)data [byteCounter];  			byteCounter++;  		}  		int descLen = data [byteCounter++];  		string description = "";  		for (int i = 0; i < descLen; i++) {  			if ((char)data [byteCounter] != '\0')  				description += (char)data [byteCounter];  			byteCounter++;  		}  		ushort doubleByte = (ushort)(data [byteCounter++] << 8);  		doubleByte = (ushort)(doubleByte | data [byteCounter++]);  		int eventID = doubleByte & 0x3FF;  		bool triggerable = (doubleByte & 0x8000) > 0;  		bool option1Exists = (doubleByte & 0x800) > 0;  		bool option2Exists = (doubleByte & 0x400) > 0;  		Event e = new Event (eventName' description' eventID' triggerable);  		e.Option1 = option1Exists;  		e.Option2 = option2Exists;  		contactingNode.AddEvent (e);  		AddEventToDatabase (contactingNode' e);  		break;  	case OPTION_BYTE:  		byteCounter = 1;  		int eventId = (ushort)(data [byteCounter++] << 8);  		eventId = (ushort)(eventId | data [byteCounter++]);  		int opDescLen = data [byteCounter++];  		string opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  		currEvent.SetOption1 (opDescription);  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		if (currEvent.Option2) {  			opDescLen = data [byteCounter++];  			opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		}  		break;  	case THROW_BYTE:  		byteCounter = 1;  		if (!contactingNode.GetRegistered ()) {  			break;  		}  		int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  		Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  		string op1Str = "";  		string op2Str = "";  		if (thisEvent.Option1) {  			int op1len = data [byteCounter++];  			for (int i = 0; i < op1len; i++) {  				op1Str += (char)data [byteCounter++];  			}  		}  		if (thisEvent.Option2) {  			int op2len = data [byteCounter++];  			for (int i = 0; i < op2len; i++) {  				op2Str += (char)data [byteCounter++];  			}  		}  		contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  		ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  		break;  	default:  		break;  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (incoming.ParseIncomingMessage (_serialPort)) {  	if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  		remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  	}  	List<int> data = incoming.GetMessage ();  	ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  	int byteCounter;  	switch (data [0]) {  	case VERSION_BYTE:  		int version = data [1];  		XbeeTx64Bit transmit;  		List<byte> d = new List<byte> ();  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "") {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  		}  		else {  			int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  			if (version != databaseVersion) {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  			}  			else {  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				d.Add (MATCH_BYTE);  				string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  				DataSqlConnection.mutex.ReleaseMutex ();  				string[] nodeInfo = node.Split ('|');  				contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  				contactingNode.SetName (nodeInfo [1]);  				contactingNode.SetAlias (nodeInfo [2]);  				contactingNode.SetBrand (nodeInfo [3]);  				contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  				contactingNode.SetHexAddress (nodeInfo [5]);  				contactingNode.SetRegistered (true);  				//nodeInfo[7] is IsForeign which we don't care about  				contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  				DataSqlConnection.mutex.WaitOne ();  				nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  				DataSqlConnection.mutex.ReleaseMutex ();  				foreach (string s in nodeInfo) {  					if (s == "")  						continue;  					string[] eventData = s.Split ('|');  					Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  					DataSqlConnection.mutex.WaitOne ();  					string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (optionsData == "") {  						contactingEvent.Option1 = false;  						contactingEvent.Option2 = false;  					}  					else {  						string[] ops = optionsData.Split ('\n');  						string[] opsVals;  						opsVals = ops [0].Split ('|');  						contactingEvent.Option1 = true;  						contactingEvent.SetOption1 (opsVals [3]);  						contactingEvent.SetOption1Value (opsVals [4]);  						if (ops.Length == 3) {  							opsVals = ops [1].Split ('|');  							contactingEvent.Option2 = true;  							contactingEvent.SetOption2 (opsVals [3]);  							contactingEvent.SetOption2Value (opsVals [4]);  						}  					}  					contactingNode.AddEvent (contactingEvent);  				}  			}  		}  		contactingNode.SetVersion ((byte)version);  		transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  		transmit.Send (_serialPort);  		break;  	/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  		string name = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				name += (char)data [i];  		}  		contactingNode.SetName (name);  		contactingNode.SetRegistered (true);  		break;  	/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  		string brand = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				brand += (char)data [i];  		}  		contactingNode.SetBrand (brand);  		AddNodeToDatabase (contactingNode);  		break;  	/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  		byteCounter = 1;  		int nameLen = data [byteCounter++];  		string eventName = "";  		for (int i = 0; i < nameLen; i++) {  			if ((char)data [byteCounter] != '\0')  				eventName += (char)data [byteCounter];  			byteCounter++;  		}  		int descLen = data [byteCounter++];  		string description = "";  		for (int i = 0; i < descLen; i++) {  			if ((char)data [byteCounter] != '\0')  				description += (char)data [byteCounter];  			byteCounter++;  		}  		ushort doubleByte = (ushort)(data [byteCounter++] << 8);  		doubleByte = (ushort)(doubleByte | data [byteCounter++]);  		int eventID = doubleByte & 0x3FF;  		bool triggerable = (doubleByte & 0x8000) > 0;  		bool option1Exists = (doubleByte & 0x800) > 0;  		bool option2Exists = (doubleByte & 0x400) > 0;  		Event e = new Event (eventName' description' eventID' triggerable);  		e.Option1 = option1Exists;  		e.Option2 = option2Exists;  		contactingNode.AddEvent (e);  		AddEventToDatabase (contactingNode' e);  		break;  	case OPTION_BYTE:  		byteCounter = 1;  		int eventId = (ushort)(data [byteCounter++] << 8);  		eventId = (ushort)(eventId | data [byteCounter++]);  		int opDescLen = data [byteCounter++];  		string opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  		currEvent.SetOption1 (opDescription);  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		if (currEvent.Option2) {  			opDescLen = data [byteCounter++];  			opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		}  		break;  	case THROW_BYTE:  		byteCounter = 1;  		if (!contactingNode.GetRegistered ()) {  			break;  		}  		int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  		Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  		string op1Str = "";  		string op2Str = "";  		if (thisEvent.Option1) {  			int op1len = data [byteCounter++];  			for (int i = 0; i < op1len; i++) {  				op1Str += (char)data [byteCounter++];  			}  		}  		if (thisEvent.Option2) {  			int op2len = data [byteCounter++];  			for (int i = 0; i < op2len; i++) {  				op2Str += (char)data [byteCounter++];  			}  		}  		contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  		ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  		break;  	default:  		break;  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (incoming.ParseIncomingMessage (_serialPort)) {  	if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  		remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  	}  	List<int> data = incoming.GetMessage ();  	ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  	int byteCounter;  	switch (data [0]) {  	case VERSION_BYTE:  		int version = data [1];  		XbeeTx64Bit transmit;  		List<byte> d = new List<byte> ();  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "") {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  		}  		else {  			int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  			if (version != databaseVersion) {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  			}  			else {  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				d.Add (MATCH_BYTE);  				string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  				DataSqlConnection.mutex.ReleaseMutex ();  				string[] nodeInfo = node.Split ('|');  				contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  				contactingNode.SetName (nodeInfo [1]);  				contactingNode.SetAlias (nodeInfo [2]);  				contactingNode.SetBrand (nodeInfo [3]);  				contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  				contactingNode.SetHexAddress (nodeInfo [5]);  				contactingNode.SetRegistered (true);  				//nodeInfo[7] is IsForeign which we don't care about  				contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  				DataSqlConnection.mutex.WaitOne ();  				nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  				DataSqlConnection.mutex.ReleaseMutex ();  				foreach (string s in nodeInfo) {  					if (s == "")  						continue;  					string[] eventData = s.Split ('|');  					Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  					DataSqlConnection.mutex.WaitOne ();  					string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (optionsData == "") {  						contactingEvent.Option1 = false;  						contactingEvent.Option2 = false;  					}  					else {  						string[] ops = optionsData.Split ('\n');  						string[] opsVals;  						opsVals = ops [0].Split ('|');  						contactingEvent.Option1 = true;  						contactingEvent.SetOption1 (opsVals [3]);  						contactingEvent.SetOption1Value (opsVals [4]);  						if (ops.Length == 3) {  							opsVals = ops [1].Split ('|');  							contactingEvent.Option2 = true;  							contactingEvent.SetOption2 (opsVals [3]);  							contactingEvent.SetOption2Value (opsVals [4]);  						}  					}  					contactingNode.AddEvent (contactingEvent);  				}  			}  		}  		contactingNode.SetVersion ((byte)version);  		transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  		transmit.Send (_serialPort);  		break;  	/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  		string name = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				name += (char)data [i];  		}  		contactingNode.SetName (name);  		contactingNode.SetRegistered (true);  		break;  	/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  		string brand = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				brand += (char)data [i];  		}  		contactingNode.SetBrand (brand);  		AddNodeToDatabase (contactingNode);  		break;  	/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  		byteCounter = 1;  		int nameLen = data [byteCounter++];  		string eventName = "";  		for (int i = 0; i < nameLen; i++) {  			if ((char)data [byteCounter] != '\0')  				eventName += (char)data [byteCounter];  			byteCounter++;  		}  		int descLen = data [byteCounter++];  		string description = "";  		for (int i = 0; i < descLen; i++) {  			if ((char)data [byteCounter] != '\0')  				description += (char)data [byteCounter];  			byteCounter++;  		}  		ushort doubleByte = (ushort)(data [byteCounter++] << 8);  		doubleByte = (ushort)(doubleByte | data [byteCounter++]);  		int eventID = doubleByte & 0x3FF;  		bool triggerable = (doubleByte & 0x8000) > 0;  		bool option1Exists = (doubleByte & 0x800) > 0;  		bool option2Exists = (doubleByte & 0x400) > 0;  		Event e = new Event (eventName' description' eventID' triggerable);  		e.Option1 = option1Exists;  		e.Option2 = option2Exists;  		contactingNode.AddEvent (e);  		AddEventToDatabase (contactingNode' e);  		break;  	case OPTION_BYTE:  		byteCounter = 1;  		int eventId = (ushort)(data [byteCounter++] << 8);  		eventId = (ushort)(eventId | data [byteCounter++]);  		int opDescLen = data [byteCounter++];  		string opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  		currEvent.SetOption1 (opDescription);  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		if (currEvent.Option2) {  			opDescLen = data [byteCounter++];  			opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		}  		break;  	case THROW_BYTE:  		byteCounter = 1;  		if (!contactingNode.GetRegistered ()) {  			break;  		}  		int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  		Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  		string op1Str = "";  		string op2Str = "";  		if (thisEvent.Option1) {  			int op1len = data [byteCounter++];  			for (int i = 0; i < op1len; i++) {  				op1Str += (char)data [byteCounter++];  			}  		}  		if (thisEvent.Option2) {  			int op2len = data [byteCounter++];  			for (int i = 0; i < op2len; i++) {  				op2Str += (char)data [byteCounter++];  			}  		}  		contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  		ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  		break;  	default:  		break;  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (incoming.ParseIncomingMessage (_serialPort)) {  	if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  		remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  	}  	List<int> data = incoming.GetMessage ();  	ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  	int byteCounter;  	switch (data [0]) {  	case VERSION_BYTE:  		int version = data [1];  		XbeeTx64Bit transmit;  		List<byte> d = new List<byte> ();  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "") {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  		}  		else {  			int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  			if (version != databaseVersion) {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  			}  			else {  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				d.Add (MATCH_BYTE);  				string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  				DataSqlConnection.mutex.ReleaseMutex ();  				string[] nodeInfo = node.Split ('|');  				contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  				contactingNode.SetName (nodeInfo [1]);  				contactingNode.SetAlias (nodeInfo [2]);  				contactingNode.SetBrand (nodeInfo [3]);  				contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  				contactingNode.SetHexAddress (nodeInfo [5]);  				contactingNode.SetRegistered (true);  				//nodeInfo[7] is IsForeign which we don't care about  				contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  				DataSqlConnection.mutex.WaitOne ();  				nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  				DataSqlConnection.mutex.ReleaseMutex ();  				foreach (string s in nodeInfo) {  					if (s == "")  						continue;  					string[] eventData = s.Split ('|');  					Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  					DataSqlConnection.mutex.WaitOne ();  					string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (optionsData == "") {  						contactingEvent.Option1 = false;  						contactingEvent.Option2 = false;  					}  					else {  						string[] ops = optionsData.Split ('\n');  						string[] opsVals;  						opsVals = ops [0].Split ('|');  						contactingEvent.Option1 = true;  						contactingEvent.SetOption1 (opsVals [3]);  						contactingEvent.SetOption1Value (opsVals [4]);  						if (ops.Length == 3) {  							opsVals = ops [1].Split ('|');  							contactingEvent.Option2 = true;  							contactingEvent.SetOption2 (opsVals [3]);  							contactingEvent.SetOption2Value (opsVals [4]);  						}  					}  					contactingNode.AddEvent (contactingEvent);  				}  			}  		}  		contactingNode.SetVersion ((byte)version);  		transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  		transmit.Send (_serialPort);  		break;  	/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  		string name = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				name += (char)data [i];  		}  		contactingNode.SetName (name);  		contactingNode.SetRegistered (true);  		break;  	/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  		string brand = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				brand += (char)data [i];  		}  		contactingNode.SetBrand (brand);  		AddNodeToDatabase (contactingNode);  		break;  	/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  		byteCounter = 1;  		int nameLen = data [byteCounter++];  		string eventName = "";  		for (int i = 0; i < nameLen; i++) {  			if ((char)data [byteCounter] != '\0')  				eventName += (char)data [byteCounter];  			byteCounter++;  		}  		int descLen = data [byteCounter++];  		string description = "";  		for (int i = 0; i < descLen; i++) {  			if ((char)data [byteCounter] != '\0')  				description += (char)data [byteCounter];  			byteCounter++;  		}  		ushort doubleByte = (ushort)(data [byteCounter++] << 8);  		doubleByte = (ushort)(doubleByte | data [byteCounter++]);  		int eventID = doubleByte & 0x3FF;  		bool triggerable = (doubleByte & 0x8000) > 0;  		bool option1Exists = (doubleByte & 0x800) > 0;  		bool option2Exists = (doubleByte & 0x400) > 0;  		Event e = new Event (eventName' description' eventID' triggerable);  		e.Option1 = option1Exists;  		e.Option2 = option2Exists;  		contactingNode.AddEvent (e);  		AddEventToDatabase (contactingNode' e);  		break;  	case OPTION_BYTE:  		byteCounter = 1;  		int eventId = (ushort)(data [byteCounter++] << 8);  		eventId = (ushort)(eventId | data [byteCounter++]);  		int opDescLen = data [byteCounter++];  		string opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  		currEvent.SetOption1 (opDescription);  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		if (currEvent.Option2) {  			opDescLen = data [byteCounter++];  			opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		}  		break;  	case THROW_BYTE:  		byteCounter = 1;  		if (!contactingNode.GetRegistered ()) {  			break;  		}  		int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  		Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  		string op1Str = "";  		string op2Str = "";  		if (thisEvent.Option1) {  			int op1len = data [byteCounter++];  			for (int i = 0; i < op1len; i++) {  				op1Str += (char)data [byteCounter++];  			}  		}  		if (thisEvent.Option2) {  			int op2len = data [byteCounter++];  			for (int i = 0; i < op2len; i++) {  				op2Str += (char)data [byteCounter++];  			}  		}  		contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  		ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  		break;  	default:  		break;  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (incoming.ParseIncomingMessage (_serialPort)) {  	if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  		remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  	}  	List<int> data = incoming.GetMessage ();  	ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  	int byteCounter;  	switch (data [0]) {  	case VERSION_BYTE:  		int version = data [1];  		XbeeTx64Bit transmit;  		List<byte> d = new List<byte> ();  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "") {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  		}  		else {  			int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  			if (version != databaseVersion) {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  			}  			else {  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				d.Add (MATCH_BYTE);  				string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  				DataSqlConnection.mutex.ReleaseMutex ();  				string[] nodeInfo = node.Split ('|');  				contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  				contactingNode.SetName (nodeInfo [1]);  				contactingNode.SetAlias (nodeInfo [2]);  				contactingNode.SetBrand (nodeInfo [3]);  				contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  				contactingNode.SetHexAddress (nodeInfo [5]);  				contactingNode.SetRegistered (true);  				//nodeInfo[7] is IsForeign which we don't care about  				contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  				DataSqlConnection.mutex.WaitOne ();  				nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  				DataSqlConnection.mutex.ReleaseMutex ();  				foreach (string s in nodeInfo) {  					if (s == "")  						continue;  					string[] eventData = s.Split ('|');  					Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  					DataSqlConnection.mutex.WaitOne ();  					string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (optionsData == "") {  						contactingEvent.Option1 = false;  						contactingEvent.Option2 = false;  					}  					else {  						string[] ops = optionsData.Split ('\n');  						string[] opsVals;  						opsVals = ops [0].Split ('|');  						contactingEvent.Option1 = true;  						contactingEvent.SetOption1 (opsVals [3]);  						contactingEvent.SetOption1Value (opsVals [4]);  						if (ops.Length == 3) {  							opsVals = ops [1].Split ('|');  							contactingEvent.Option2 = true;  							contactingEvent.SetOption2 (opsVals [3]);  							contactingEvent.SetOption2Value (opsVals [4]);  						}  					}  					contactingNode.AddEvent (contactingEvent);  				}  			}  		}  		contactingNode.SetVersion ((byte)version);  		transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  		transmit.Send (_serialPort);  		break;  	/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  		string name = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				name += (char)data [i];  		}  		contactingNode.SetName (name);  		contactingNode.SetRegistered (true);  		break;  	/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  		string brand = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				brand += (char)data [i];  		}  		contactingNode.SetBrand (brand);  		AddNodeToDatabase (contactingNode);  		break;  	/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  		byteCounter = 1;  		int nameLen = data [byteCounter++];  		string eventName = "";  		for (int i = 0; i < nameLen; i++) {  			if ((char)data [byteCounter] != '\0')  				eventName += (char)data [byteCounter];  			byteCounter++;  		}  		int descLen = data [byteCounter++];  		string description = "";  		for (int i = 0; i < descLen; i++) {  			if ((char)data [byteCounter] != '\0')  				description += (char)data [byteCounter];  			byteCounter++;  		}  		ushort doubleByte = (ushort)(data [byteCounter++] << 8);  		doubleByte = (ushort)(doubleByte | data [byteCounter++]);  		int eventID = doubleByte & 0x3FF;  		bool triggerable = (doubleByte & 0x8000) > 0;  		bool option1Exists = (doubleByte & 0x800) > 0;  		bool option2Exists = (doubleByte & 0x400) > 0;  		Event e = new Event (eventName' description' eventID' triggerable);  		e.Option1 = option1Exists;  		e.Option2 = option2Exists;  		contactingNode.AddEvent (e);  		AddEventToDatabase (contactingNode' e);  		break;  	case OPTION_BYTE:  		byteCounter = 1;  		int eventId = (ushort)(data [byteCounter++] << 8);  		eventId = (ushort)(eventId | data [byteCounter++]);  		int opDescLen = data [byteCounter++];  		string opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  		currEvent.SetOption1 (opDescription);  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		if (currEvent.Option2) {  			opDescLen = data [byteCounter++];  			opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		}  		break;  	case THROW_BYTE:  		byteCounter = 1;  		if (!contactingNode.GetRegistered ()) {  			break;  		}  		int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  		Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  		string op1Str = "";  		string op2Str = "";  		if (thisEvent.Option1) {  			int op1len = data [byteCounter++];  			for (int i = 0; i < op1len; i++) {  				op1Str += (char)data [byteCounter++];  			}  		}  		if (thisEvent.Option2) {  			int op2len = data [byteCounter++];  			for (int i = 0; i < op2len; i++) {  				op2Str += (char)data [byteCounter++];  			}  		}  		contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  		ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  		break;  	default:  		break;  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (incoming.ParseIncomingMessage (_serialPort)) {  	if (!incoming.GetIsTxResponse () && !remoteNodeList.Any<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ())) {  		remoteNodeList.Add (new ForeignNode (incoming.GetRemoteAddress ()));  	}  	List<int> data = incoming.GetMessage ();  	ForeignNode contactingNode = remoteNodeList.Single<ForeignNode> (node => node.GetAddress () == incoming.GetRemoteAddress ());  	int byteCounter;  	switch (data [0]) {  	case VERSION_BYTE:  		int version = data [1];  		XbeeTx64Bit transmit;  		List<byte> d = new List<byte> ();  		DataSqlConnection.mutex.WaitOne ();  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (ret == "") {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  		}  		else {  			int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  			if (version != databaseVersion) {  				d.Add (MISMATCH_BYTE);  				contactingNode.ResetNode ();  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  				DataSqlConnection.mutex.ReleaseMutex ();  			}  			else {  				DataSqlConnection.mutex.WaitOne ();  				DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  				d.Add (MATCH_BYTE);  				string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  				DataSqlConnection.mutex.ReleaseMutex ();  				string[] nodeInfo = node.Split ('|');  				contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  				contactingNode.SetName (nodeInfo [1]);  				contactingNode.SetAlias (nodeInfo [2]);  				contactingNode.SetBrand (nodeInfo [3]);  				contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  				contactingNode.SetHexAddress (nodeInfo [5]);  				contactingNode.SetRegistered (true);  				//nodeInfo[7] is IsForeign which we don't care about  				contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  				DataSqlConnection.mutex.WaitOne ();  				nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  				DataSqlConnection.mutex.ReleaseMutex ();  				foreach (string s in nodeInfo) {  					if (s == "")  						continue;  					string[] eventData = s.Split ('|');  					Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  					DataSqlConnection.mutex.WaitOne ();  					string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  					DataSqlConnection.mutex.ReleaseMutex ();  					if (optionsData == "") {  						contactingEvent.Option1 = false;  						contactingEvent.Option2 = false;  					}  					else {  						string[] ops = optionsData.Split ('\n');  						string[] opsVals;  						opsVals = ops [0].Split ('|');  						contactingEvent.Option1 = true;  						contactingEvent.SetOption1 (opsVals [3]);  						contactingEvent.SetOption1Value (opsVals [4]);  						if (ops.Length == 3) {  							opsVals = ops [1].Split ('|');  							contactingEvent.Option2 = true;  							contactingEvent.SetOption2 (opsVals [3]);  							contactingEvent.SetOption2Value (opsVals [4]);  						}  					}  					contactingNode.AddEvent (contactingEvent);  				}  			}  		}  		contactingNode.SetVersion ((byte)version);  		transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  		transmit.Send (_serialPort);  		break;  	/* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  		string name = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				name += (char)data [i];  		}  		contactingNode.SetName (name);  		contactingNode.SetRegistered (true);  		break;  	/* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  		string brand = "";  		for (int i = 1; i < data.Count; i++) {  			if ((char)data [i] != '\0')  				brand += (char)data [i];  		}  		contactingNode.SetBrand (brand);  		AddNodeToDatabase (contactingNode);  		break;  	/* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  		byteCounter = 1;  		int nameLen = data [byteCounter++];  		string eventName = "";  		for (int i = 0; i < nameLen; i++) {  			if ((char)data [byteCounter] != '\0')  				eventName += (char)data [byteCounter];  			byteCounter++;  		}  		int descLen = data [byteCounter++];  		string description = "";  		for (int i = 0; i < descLen; i++) {  			if ((char)data [byteCounter] != '\0')  				description += (char)data [byteCounter];  			byteCounter++;  		}  		ushort doubleByte = (ushort)(data [byteCounter++] << 8);  		doubleByte = (ushort)(doubleByte | data [byteCounter++]);  		int eventID = doubleByte & 0x3FF;  		bool triggerable = (doubleByte & 0x8000) > 0;  		bool option1Exists = (doubleByte & 0x800) > 0;  		bool option2Exists = (doubleByte & 0x400) > 0;  		Event e = new Event (eventName' description' eventID' triggerable);  		e.Option1 = option1Exists;  		e.Option2 = option2Exists;  		contactingNode.AddEvent (e);  		AddEventToDatabase (contactingNode' e);  		break;  	case OPTION_BYTE:  		byteCounter = 1;  		int eventId = (ushort)(data [byteCounter++] << 8);  		eventId = (ushort)(eventId | data [byteCounter++]);  		int opDescLen = data [byteCounter++];  		string opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  		currEvent.SetOption1 (opDescription);  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		if (currEvent.Option2) {  			opDescLen = data [byteCounter++];  			opDescription = "";  			for (int i = 0; i < opDescLen; i++) {  				if ((char)data [byteCounter] != '\0')  					opDescription += (char)data [byteCounter];  				byteCounter++;  			}  			AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  		}  		break;  	case THROW_BYTE:  		byteCounter = 1;  		if (!contactingNode.GetRegistered ()) {  			break;  		}  		int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  		Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  		string op1Str = "";  		string op2Str = "";  		if (thisEvent.Option1) {  			int op1len = data [byteCounter++];  			for (int i = 0; i < op1len; i++) {  				op1Str += (char)data [byteCounter++];  			}  		}  		if (thisEvent.Option2) {  			int op2len = data [byteCounter++];  			for (int i = 0; i < op2len; i++) {  				op2Str += (char)data [byteCounter++];  			}  		}  		contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  		ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  		break;  	default:  		break;  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: switch (data [0]) {  case VERSION_BYTE:  	int version = data [1];  	XbeeTx64Bit transmit;  	List<byte> d = new List<byte> ();  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "") {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  	}  	else {  		int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  		if (version != databaseVersion) {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  		}  		else {  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			d.Add (MATCH_BYTE);  			string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  			DataSqlConnection.mutex.ReleaseMutex ();  			string[] nodeInfo = node.Split ('|');  			contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  			contactingNode.SetName (nodeInfo [1]);  			contactingNode.SetAlias (nodeInfo [2]);  			contactingNode.SetBrand (nodeInfo [3]);  			contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  			contactingNode.SetHexAddress (nodeInfo [5]);  			contactingNode.SetRegistered (true);  			//nodeInfo[7] is IsForeign which we don't care about  			contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  			DataSqlConnection.mutex.WaitOne ();  			nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  			DataSqlConnection.mutex.ReleaseMutex ();  			foreach (string s in nodeInfo) {  				if (s == "")  					continue;  				string[] eventData = s.Split ('|');  				Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  				DataSqlConnection.mutex.WaitOne ();  				string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (optionsData == "") {  					contactingEvent.Option1 = false;  					contactingEvent.Option2 = false;  				}  				else {  					string[] ops = optionsData.Split ('\n');  					string[] opsVals;  					opsVals = ops [0].Split ('|');  					contactingEvent.Option1 = true;  					contactingEvent.SetOption1 (opsVals [3]);  					contactingEvent.SetOption1Value (opsVals [4]);  					if (ops.Length == 3) {  						opsVals = ops [1].Split ('|');  						contactingEvent.Option2 = true;  						contactingEvent.SetOption2 (opsVals [3]);  						contactingEvent.SetOption2Value (opsVals [4]);  					}  				}  				contactingNode.AddEvent (contactingEvent);  			}  		}  	}  	contactingNode.SetVersion ((byte)version);  	transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  	transmit.Send (_serialPort);  	break;  /* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  	string name = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			name += (char)data [i];  	}  	contactingNode.SetName (name);  	contactingNode.SetRegistered (true);  	break;  /* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  	string brand = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			brand += (char)data [i];  	}  	contactingNode.SetBrand (brand);  	AddNodeToDatabase (contactingNode);  	break;  /* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  	byteCounter = 1;  	int nameLen = data [byteCounter++];  	string eventName = "";  	for (int i = 0; i < nameLen; i++) {  		if ((char)data [byteCounter] != '\0')  			eventName += (char)data [byteCounter];  		byteCounter++;  	}  	int descLen = data [byteCounter++];  	string description = "";  	for (int i = 0; i < descLen; i++) {  		if ((char)data [byteCounter] != '\0')  			description += (char)data [byteCounter];  		byteCounter++;  	}  	ushort doubleByte = (ushort)(data [byteCounter++] << 8);  	doubleByte = (ushort)(doubleByte | data [byteCounter++]);  	int eventID = doubleByte & 0x3FF;  	bool triggerable = (doubleByte & 0x8000) > 0;  	bool option1Exists = (doubleByte & 0x800) > 0;  	bool option2Exists = (doubleByte & 0x400) > 0;  	Event e = new Event (eventName' description' eventID' triggerable);  	e.Option1 = option1Exists;  	e.Option2 = option2Exists;  	contactingNode.AddEvent (e);  	AddEventToDatabase (contactingNode' e);  	break;  case OPTION_BYTE:  	byteCounter = 1;  	int eventId = (ushort)(data [byteCounter++] << 8);  	eventId = (ushort)(eventId | data [byteCounter++]);  	int opDescLen = data [byteCounter++];  	string opDescription = "";  	for (int i = 0; i < opDescLen; i++) {  		if ((char)data [byteCounter] != '\0')  			opDescription += (char)data [byteCounter];  		byteCounter++;  	}  	Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  	currEvent.SetOption1 (opDescription);  	AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	if (currEvent.Option2) {  		opDescLen = data [byteCounter++];  		opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	}  	break;  case THROW_BYTE:  	byteCounter = 1;  	if (!contactingNode.GetRegistered ()) {  		break;  	}  	int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  	Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  	string op1Str = "";  	string op2Str = "";  	if (thisEvent.Option1) {  		int op1len = data [byteCounter++];  		for (int i = 0; i < op1len; i++) {  			op1Str += (char)data [byteCounter++];  		}  	}  	if (thisEvent.Option2) {  		int op2len = data [byteCounter++];  		for (int i = 0; i < op2len; i++) {  			op2Str += (char)data [byteCounter++];  		}  	}  	contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  	ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  	break;  default:  	break;  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: switch (data [0]) {  case VERSION_BYTE:  	int version = data [1];  	XbeeTx64Bit transmit;  	List<byte> d = new List<byte> ();  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "") {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  	}  	else {  		int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  		if (version != databaseVersion) {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  		}  		else {  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			d.Add (MATCH_BYTE);  			string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  			DataSqlConnection.mutex.ReleaseMutex ();  			string[] nodeInfo = node.Split ('|');  			contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  			contactingNode.SetName (nodeInfo [1]);  			contactingNode.SetAlias (nodeInfo [2]);  			contactingNode.SetBrand (nodeInfo [3]);  			contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  			contactingNode.SetHexAddress (nodeInfo [5]);  			contactingNode.SetRegistered (true);  			//nodeInfo[7] is IsForeign which we don't care about  			contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  			DataSqlConnection.mutex.WaitOne ();  			nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  			DataSqlConnection.mutex.ReleaseMutex ();  			foreach (string s in nodeInfo) {  				if (s == "")  					continue;  				string[] eventData = s.Split ('|');  				Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  				DataSqlConnection.mutex.WaitOne ();  				string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (optionsData == "") {  					contactingEvent.Option1 = false;  					contactingEvent.Option2 = false;  				}  				else {  					string[] ops = optionsData.Split ('\n');  					string[] opsVals;  					opsVals = ops [0].Split ('|');  					contactingEvent.Option1 = true;  					contactingEvent.SetOption1 (opsVals [3]);  					contactingEvent.SetOption1Value (opsVals [4]);  					if (ops.Length == 3) {  						opsVals = ops [1].Split ('|');  						contactingEvent.Option2 = true;  						contactingEvent.SetOption2 (opsVals [3]);  						contactingEvent.SetOption2Value (opsVals [4]);  					}  				}  				contactingNode.AddEvent (contactingEvent);  			}  		}  	}  	contactingNode.SetVersion ((byte)version);  	transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  	transmit.Send (_serialPort);  	break;  /* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  	string name = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			name += (char)data [i];  	}  	contactingNode.SetName (name);  	contactingNode.SetRegistered (true);  	break;  /* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  	string brand = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			brand += (char)data [i];  	}  	contactingNode.SetBrand (brand);  	AddNodeToDatabase (contactingNode);  	break;  /* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  	byteCounter = 1;  	int nameLen = data [byteCounter++];  	string eventName = "";  	for (int i = 0; i < nameLen; i++) {  		if ((char)data [byteCounter] != '\0')  			eventName += (char)data [byteCounter];  		byteCounter++;  	}  	int descLen = data [byteCounter++];  	string description = "";  	for (int i = 0; i < descLen; i++) {  		if ((char)data [byteCounter] != '\0')  			description += (char)data [byteCounter];  		byteCounter++;  	}  	ushort doubleByte = (ushort)(data [byteCounter++] << 8);  	doubleByte = (ushort)(doubleByte | data [byteCounter++]);  	int eventID = doubleByte & 0x3FF;  	bool triggerable = (doubleByte & 0x8000) > 0;  	bool option1Exists = (doubleByte & 0x800) > 0;  	bool option2Exists = (doubleByte & 0x400) > 0;  	Event e = new Event (eventName' description' eventID' triggerable);  	e.Option1 = option1Exists;  	e.Option2 = option2Exists;  	contactingNode.AddEvent (e);  	AddEventToDatabase (contactingNode' e);  	break;  case OPTION_BYTE:  	byteCounter = 1;  	int eventId = (ushort)(data [byteCounter++] << 8);  	eventId = (ushort)(eventId | data [byteCounter++]);  	int opDescLen = data [byteCounter++];  	string opDescription = "";  	for (int i = 0; i < opDescLen; i++) {  		if ((char)data [byteCounter] != '\0')  			opDescription += (char)data [byteCounter];  		byteCounter++;  	}  	Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  	currEvent.SetOption1 (opDescription);  	AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	if (currEvent.Option2) {  		opDescLen = data [byteCounter++];  		opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	}  	break;  case THROW_BYTE:  	byteCounter = 1;  	if (!contactingNode.GetRegistered ()) {  		break;  	}  	int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  	Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  	string op1Str = "";  	string op2Str = "";  	if (thisEvent.Option1) {  		int op1len = data [byteCounter++];  		for (int i = 0; i < op1len; i++) {  			op1Str += (char)data [byteCounter++];  		}  	}  	if (thisEvent.Option2) {  		int op2len = data [byteCounter++];  		for (int i = 0; i < op2len; i++) {  			op2Str += (char)data [byteCounter++];  		}  	}  	contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  	ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  	break;  default:  	break;  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: switch (data [0]) {  case VERSION_BYTE:  	int version = data [1];  	XbeeTx64Bit transmit;  	List<byte> d = new List<byte> ();  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "") {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  	}  	else {  		int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  		if (version != databaseVersion) {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  		}  		else {  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			d.Add (MATCH_BYTE);  			string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  			DataSqlConnection.mutex.ReleaseMutex ();  			string[] nodeInfo = node.Split ('|');  			contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  			contactingNode.SetName (nodeInfo [1]);  			contactingNode.SetAlias (nodeInfo [2]);  			contactingNode.SetBrand (nodeInfo [3]);  			contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  			contactingNode.SetHexAddress (nodeInfo [5]);  			contactingNode.SetRegistered (true);  			//nodeInfo[7] is IsForeign which we don't care about  			contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  			DataSqlConnection.mutex.WaitOne ();  			nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  			DataSqlConnection.mutex.ReleaseMutex ();  			foreach (string s in nodeInfo) {  				if (s == "")  					continue;  				string[] eventData = s.Split ('|');  				Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  				DataSqlConnection.mutex.WaitOne ();  				string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (optionsData == "") {  					contactingEvent.Option1 = false;  					contactingEvent.Option2 = false;  				}  				else {  					string[] ops = optionsData.Split ('\n');  					string[] opsVals;  					opsVals = ops [0].Split ('|');  					contactingEvent.Option1 = true;  					contactingEvent.SetOption1 (opsVals [3]);  					contactingEvent.SetOption1Value (opsVals [4]);  					if (ops.Length == 3) {  						opsVals = ops [1].Split ('|');  						contactingEvent.Option2 = true;  						contactingEvent.SetOption2 (opsVals [3]);  						contactingEvent.SetOption2Value (opsVals [4]);  					}  				}  				contactingNode.AddEvent (contactingEvent);  			}  		}  	}  	contactingNode.SetVersion ((byte)version);  	transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  	transmit.Send (_serialPort);  	break;  /* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  	string name = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			name += (char)data [i];  	}  	contactingNode.SetName (name);  	contactingNode.SetRegistered (true);  	break;  /* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  	string brand = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			brand += (char)data [i];  	}  	contactingNode.SetBrand (brand);  	AddNodeToDatabase (contactingNode);  	break;  /* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  	byteCounter = 1;  	int nameLen = data [byteCounter++];  	string eventName = "";  	for (int i = 0; i < nameLen; i++) {  		if ((char)data [byteCounter] != '\0')  			eventName += (char)data [byteCounter];  		byteCounter++;  	}  	int descLen = data [byteCounter++];  	string description = "";  	for (int i = 0; i < descLen; i++) {  		if ((char)data [byteCounter] != '\0')  			description += (char)data [byteCounter];  		byteCounter++;  	}  	ushort doubleByte = (ushort)(data [byteCounter++] << 8);  	doubleByte = (ushort)(doubleByte | data [byteCounter++]);  	int eventID = doubleByte & 0x3FF;  	bool triggerable = (doubleByte & 0x8000) > 0;  	bool option1Exists = (doubleByte & 0x800) > 0;  	bool option2Exists = (doubleByte & 0x400) > 0;  	Event e = new Event (eventName' description' eventID' triggerable);  	e.Option1 = option1Exists;  	e.Option2 = option2Exists;  	contactingNode.AddEvent (e);  	AddEventToDatabase (contactingNode' e);  	break;  case OPTION_BYTE:  	byteCounter = 1;  	int eventId = (ushort)(data [byteCounter++] << 8);  	eventId = (ushort)(eventId | data [byteCounter++]);  	int opDescLen = data [byteCounter++];  	string opDescription = "";  	for (int i = 0; i < opDescLen; i++) {  		if ((char)data [byteCounter] != '\0')  			opDescription += (char)data [byteCounter];  		byteCounter++;  	}  	Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  	currEvent.SetOption1 (opDescription);  	AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	if (currEvent.Option2) {  		opDescLen = data [byteCounter++];  		opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	}  	break;  case THROW_BYTE:  	byteCounter = 1;  	if (!contactingNode.GetRegistered ()) {  		break;  	}  	int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  	Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  	string op1Str = "";  	string op2Str = "";  	if (thisEvent.Option1) {  		int op1len = data [byteCounter++];  		for (int i = 0; i < op1len; i++) {  			op1Str += (char)data [byteCounter++];  		}  	}  	if (thisEvent.Option2) {  		int op2len = data [byteCounter++];  		for (int i = 0; i < op2len; i++) {  			op2Str += (char)data [byteCounter++];  		}  	}  	contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  	ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  	break;  default:  	break;  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: switch (data [0]) {  case VERSION_BYTE:  	int version = data [1];  	XbeeTx64Bit transmit;  	List<byte> d = new List<byte> ();  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "") {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  	}  	else {  		int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  		if (version != databaseVersion) {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  		}  		else {  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			d.Add (MATCH_BYTE);  			string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  			DataSqlConnection.mutex.ReleaseMutex ();  			string[] nodeInfo = node.Split ('|');  			contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  			contactingNode.SetName (nodeInfo [1]);  			contactingNode.SetAlias (nodeInfo [2]);  			contactingNode.SetBrand (nodeInfo [3]);  			contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  			contactingNode.SetHexAddress (nodeInfo [5]);  			contactingNode.SetRegistered (true);  			//nodeInfo[7] is IsForeign which we don't care about  			contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  			DataSqlConnection.mutex.WaitOne ();  			nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  			DataSqlConnection.mutex.ReleaseMutex ();  			foreach (string s in nodeInfo) {  				if (s == "")  					continue;  				string[] eventData = s.Split ('|');  				Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  				DataSqlConnection.mutex.WaitOne ();  				string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (optionsData == "") {  					contactingEvent.Option1 = false;  					contactingEvent.Option2 = false;  				}  				else {  					string[] ops = optionsData.Split ('\n');  					string[] opsVals;  					opsVals = ops [0].Split ('|');  					contactingEvent.Option1 = true;  					contactingEvent.SetOption1 (opsVals [3]);  					contactingEvent.SetOption1Value (opsVals [4]);  					if (ops.Length == 3) {  						opsVals = ops [1].Split ('|');  						contactingEvent.Option2 = true;  						contactingEvent.SetOption2 (opsVals [3]);  						contactingEvent.SetOption2Value (opsVals [4]);  					}  				}  				contactingNode.AddEvent (contactingEvent);  			}  		}  	}  	contactingNode.SetVersion ((byte)version);  	transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  	transmit.Send (_serialPort);  	break;  /* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  	string name = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			name += (char)data [i];  	}  	contactingNode.SetName (name);  	contactingNode.SetRegistered (true);  	break;  /* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  	string brand = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			brand += (char)data [i];  	}  	contactingNode.SetBrand (brand);  	AddNodeToDatabase (contactingNode);  	break;  /* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  	byteCounter = 1;  	int nameLen = data [byteCounter++];  	string eventName = "";  	for (int i = 0; i < nameLen; i++) {  		if ((char)data [byteCounter] != '\0')  			eventName += (char)data [byteCounter];  		byteCounter++;  	}  	int descLen = data [byteCounter++];  	string description = "";  	for (int i = 0; i < descLen; i++) {  		if ((char)data [byteCounter] != '\0')  			description += (char)data [byteCounter];  		byteCounter++;  	}  	ushort doubleByte = (ushort)(data [byteCounter++] << 8);  	doubleByte = (ushort)(doubleByte | data [byteCounter++]);  	int eventID = doubleByte & 0x3FF;  	bool triggerable = (doubleByte & 0x8000) > 0;  	bool option1Exists = (doubleByte & 0x800) > 0;  	bool option2Exists = (doubleByte & 0x400) > 0;  	Event e = new Event (eventName' description' eventID' triggerable);  	e.Option1 = option1Exists;  	e.Option2 = option2Exists;  	contactingNode.AddEvent (e);  	AddEventToDatabase (contactingNode' e);  	break;  case OPTION_BYTE:  	byteCounter = 1;  	int eventId = (ushort)(data [byteCounter++] << 8);  	eventId = (ushort)(eventId | data [byteCounter++]);  	int opDescLen = data [byteCounter++];  	string opDescription = "";  	for (int i = 0; i < opDescLen; i++) {  		if ((char)data [byteCounter] != '\0')  			opDescription += (char)data [byteCounter];  		byteCounter++;  	}  	Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  	currEvent.SetOption1 (opDescription);  	AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	if (currEvent.Option2) {  		opDescLen = data [byteCounter++];  		opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	}  	break;  case THROW_BYTE:  	byteCounter = 1;  	if (!contactingNode.GetRegistered ()) {  		break;  	}  	int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  	Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  	string op1Str = "";  	string op2Str = "";  	if (thisEvent.Option1) {  		int op1len = data [byteCounter++];  		for (int i = 0; i < op1len; i++) {  			op1Str += (char)data [byteCounter++];  		}  	}  	if (thisEvent.Option2) {  		int op2len = data [byteCounter++];  		for (int i = 0; i < op2len; i++) {  			op2Str += (char)data [byteCounter++];  		}  	}  	contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  	ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  	break;  default:  	break;  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: switch (data [0]) {  case VERSION_BYTE:  	int version = data [1];  	XbeeTx64Bit transmit;  	List<byte> d = new List<byte> ();  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "") {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  	}  	else {  		int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  		if (version != databaseVersion) {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  		}  		else {  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			d.Add (MATCH_BYTE);  			string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  			DataSqlConnection.mutex.ReleaseMutex ();  			string[] nodeInfo = node.Split ('|');  			contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  			contactingNode.SetName (nodeInfo [1]);  			contactingNode.SetAlias (nodeInfo [2]);  			contactingNode.SetBrand (nodeInfo [3]);  			contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  			contactingNode.SetHexAddress (nodeInfo [5]);  			contactingNode.SetRegistered (true);  			//nodeInfo[7] is IsForeign which we don't care about  			contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  			DataSqlConnection.mutex.WaitOne ();  			nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  			DataSqlConnection.mutex.ReleaseMutex ();  			foreach (string s in nodeInfo) {  				if (s == "")  					continue;  				string[] eventData = s.Split ('|');  				Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  				DataSqlConnection.mutex.WaitOne ();  				string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (optionsData == "") {  					contactingEvent.Option1 = false;  					contactingEvent.Option2 = false;  				}  				else {  					string[] ops = optionsData.Split ('\n');  					string[] opsVals;  					opsVals = ops [0].Split ('|');  					contactingEvent.Option1 = true;  					contactingEvent.SetOption1 (opsVals [3]);  					contactingEvent.SetOption1Value (opsVals [4]);  					if (ops.Length == 3) {  						opsVals = ops [1].Split ('|');  						contactingEvent.Option2 = true;  						contactingEvent.SetOption2 (opsVals [3]);  						contactingEvent.SetOption2Value (opsVals [4]);  					}  				}  				contactingNode.AddEvent (contactingEvent);  			}  		}  	}  	contactingNode.SetVersion ((byte)version);  	transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  	transmit.Send (_serialPort);  	break;  /* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  	string name = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			name += (char)data [i];  	}  	contactingNode.SetName (name);  	contactingNode.SetRegistered (true);  	break;  /* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  	string brand = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			brand += (char)data [i];  	}  	contactingNode.SetBrand (brand);  	AddNodeToDatabase (contactingNode);  	break;  /* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  	byteCounter = 1;  	int nameLen = data [byteCounter++];  	string eventName = "";  	for (int i = 0; i < nameLen; i++) {  		if ((char)data [byteCounter] != '\0')  			eventName += (char)data [byteCounter];  		byteCounter++;  	}  	int descLen = data [byteCounter++];  	string description = "";  	for (int i = 0; i < descLen; i++) {  		if ((char)data [byteCounter] != '\0')  			description += (char)data [byteCounter];  		byteCounter++;  	}  	ushort doubleByte = (ushort)(data [byteCounter++] << 8);  	doubleByte = (ushort)(doubleByte | data [byteCounter++]);  	int eventID = doubleByte & 0x3FF;  	bool triggerable = (doubleByte & 0x8000) > 0;  	bool option1Exists = (doubleByte & 0x800) > 0;  	bool option2Exists = (doubleByte & 0x400) > 0;  	Event e = new Event (eventName' description' eventID' triggerable);  	e.Option1 = option1Exists;  	e.Option2 = option2Exists;  	contactingNode.AddEvent (e);  	AddEventToDatabase (contactingNode' e);  	break;  case OPTION_BYTE:  	byteCounter = 1;  	int eventId = (ushort)(data [byteCounter++] << 8);  	eventId = (ushort)(eventId | data [byteCounter++]);  	int opDescLen = data [byteCounter++];  	string opDescription = "";  	for (int i = 0; i < opDescLen; i++) {  		if ((char)data [byteCounter] != '\0')  			opDescription += (char)data [byteCounter];  		byteCounter++;  	}  	Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  	currEvent.SetOption1 (opDescription);  	AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	if (currEvent.Option2) {  		opDescLen = data [byteCounter++];  		opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	}  	break;  case THROW_BYTE:  	byteCounter = 1;  	if (!contactingNode.GetRegistered ()) {  		break;  	}  	int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  	Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  	string op1Str = "";  	string op2Str = "";  	if (thisEvent.Option1) {  		int op1len = data [byteCounter++];  		for (int i = 0; i < op1len; i++) {  			op1Str += (char)data [byteCounter++];  		}  	}  	if (thisEvent.Option2) {  		int op2len = data [byteCounter++];  		for (int i = 0; i < op2len; i++) {  			op2Str += (char)data [byteCounter++];  		}  	}  	contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  	ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  	break;  default:  	break;  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: switch (data [0]) {  case VERSION_BYTE:  	int version = data [1];  	XbeeTx64Bit transmit;  	List<byte> d = new List<byte> ();  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "") {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  	}  	else {  		int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  		if (version != databaseVersion) {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  		}  		else {  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			d.Add (MATCH_BYTE);  			string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  			DataSqlConnection.mutex.ReleaseMutex ();  			string[] nodeInfo = node.Split ('|');  			contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  			contactingNode.SetName (nodeInfo [1]);  			contactingNode.SetAlias (nodeInfo [2]);  			contactingNode.SetBrand (nodeInfo [3]);  			contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  			contactingNode.SetHexAddress (nodeInfo [5]);  			contactingNode.SetRegistered (true);  			//nodeInfo[7] is IsForeign which we don't care about  			contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  			DataSqlConnection.mutex.WaitOne ();  			nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  			DataSqlConnection.mutex.ReleaseMutex ();  			foreach (string s in nodeInfo) {  				if (s == "")  					continue;  				string[] eventData = s.Split ('|');  				Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  				DataSqlConnection.mutex.WaitOne ();  				string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (optionsData == "") {  					contactingEvent.Option1 = false;  					contactingEvent.Option2 = false;  				}  				else {  					string[] ops = optionsData.Split ('\n');  					string[] opsVals;  					opsVals = ops [0].Split ('|');  					contactingEvent.Option1 = true;  					contactingEvent.SetOption1 (opsVals [3]);  					contactingEvent.SetOption1Value (opsVals [4]);  					if (ops.Length == 3) {  						opsVals = ops [1].Split ('|');  						contactingEvent.Option2 = true;  						contactingEvent.SetOption2 (opsVals [3]);  						contactingEvent.SetOption2Value (opsVals [4]);  					}  				}  				contactingNode.AddEvent (contactingEvent);  			}  		}  	}  	contactingNode.SetVersion ((byte)version);  	transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  	transmit.Send (_serialPort);  	break;  /* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  	string name = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			name += (char)data [i];  	}  	contactingNode.SetName (name);  	contactingNode.SetRegistered (true);  	break;  /* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  	string brand = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			brand += (char)data [i];  	}  	contactingNode.SetBrand (brand);  	AddNodeToDatabase (contactingNode);  	break;  /* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  	byteCounter = 1;  	int nameLen = data [byteCounter++];  	string eventName = "";  	for (int i = 0; i < nameLen; i++) {  		if ((char)data [byteCounter] != '\0')  			eventName += (char)data [byteCounter];  		byteCounter++;  	}  	int descLen = data [byteCounter++];  	string description = "";  	for (int i = 0; i < descLen; i++) {  		if ((char)data [byteCounter] != '\0')  			description += (char)data [byteCounter];  		byteCounter++;  	}  	ushort doubleByte = (ushort)(data [byteCounter++] << 8);  	doubleByte = (ushort)(doubleByte | data [byteCounter++]);  	int eventID = doubleByte & 0x3FF;  	bool triggerable = (doubleByte & 0x8000) > 0;  	bool option1Exists = (doubleByte & 0x800) > 0;  	bool option2Exists = (doubleByte & 0x400) > 0;  	Event e = new Event (eventName' description' eventID' triggerable);  	e.Option1 = option1Exists;  	e.Option2 = option2Exists;  	contactingNode.AddEvent (e);  	AddEventToDatabase (contactingNode' e);  	break;  case OPTION_BYTE:  	byteCounter = 1;  	int eventId = (ushort)(data [byteCounter++] << 8);  	eventId = (ushort)(eventId | data [byteCounter++]);  	int opDescLen = data [byteCounter++];  	string opDescription = "";  	for (int i = 0; i < opDescLen; i++) {  		if ((char)data [byteCounter] != '\0')  			opDescription += (char)data [byteCounter];  		byteCounter++;  	}  	Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  	currEvent.SetOption1 (opDescription);  	AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	if (currEvent.Option2) {  		opDescLen = data [byteCounter++];  		opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	}  	break;  case THROW_BYTE:  	byteCounter = 1;  	if (!contactingNode.GetRegistered ()) {  		break;  	}  	int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  	Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  	string op1Str = "";  	string op2Str = "";  	if (thisEvent.Option1) {  		int op1len = data [byteCounter++];  		for (int i = 0; i < op1len; i++) {  			op1Str += (char)data [byteCounter++];  		}  	}  	if (thisEvent.Option2) {  		int op2len = data [byteCounter++];  		for (int i = 0; i < op2len; i++) {  			op2Str += (char)data [byteCounter++];  		}  	}  	contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  	ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  	break;  default:  	break;  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: switch (data [0]) {  case VERSION_BYTE:  	int version = data [1];  	XbeeTx64Bit transmit;  	List<byte> d = new List<byte> ();  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "") {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  	}  	else {  		int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  		if (version != databaseVersion) {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  		}  		else {  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			d.Add (MATCH_BYTE);  			string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  			DataSqlConnection.mutex.ReleaseMutex ();  			string[] nodeInfo = node.Split ('|');  			contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  			contactingNode.SetName (nodeInfo [1]);  			contactingNode.SetAlias (nodeInfo [2]);  			contactingNode.SetBrand (nodeInfo [3]);  			contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  			contactingNode.SetHexAddress (nodeInfo [5]);  			contactingNode.SetRegistered (true);  			//nodeInfo[7] is IsForeign which we don't care about  			contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  			DataSqlConnection.mutex.WaitOne ();  			nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  			DataSqlConnection.mutex.ReleaseMutex ();  			foreach (string s in nodeInfo) {  				if (s == "")  					continue;  				string[] eventData = s.Split ('|');  				Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  				DataSqlConnection.mutex.WaitOne ();  				string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (optionsData == "") {  					contactingEvent.Option1 = false;  					contactingEvent.Option2 = false;  				}  				else {  					string[] ops = optionsData.Split ('\n');  					string[] opsVals;  					opsVals = ops [0].Split ('|');  					contactingEvent.Option1 = true;  					contactingEvent.SetOption1 (opsVals [3]);  					contactingEvent.SetOption1Value (opsVals [4]);  					if (ops.Length == 3) {  						opsVals = ops [1].Split ('|');  						contactingEvent.Option2 = true;  						contactingEvent.SetOption2 (opsVals [3]);  						contactingEvent.SetOption2Value (opsVals [4]);  					}  				}  				contactingNode.AddEvent (contactingEvent);  			}  		}  	}  	contactingNode.SetVersion ((byte)version);  	transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  	transmit.Send (_serialPort);  	break;  /* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  	string name = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			name += (char)data [i];  	}  	contactingNode.SetName (name);  	contactingNode.SetRegistered (true);  	break;  /* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  	string brand = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			brand += (char)data [i];  	}  	contactingNode.SetBrand (brand);  	AddNodeToDatabase (contactingNode);  	break;  /* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  	byteCounter = 1;  	int nameLen = data [byteCounter++];  	string eventName = "";  	for (int i = 0; i < nameLen; i++) {  		if ((char)data [byteCounter] != '\0')  			eventName += (char)data [byteCounter];  		byteCounter++;  	}  	int descLen = data [byteCounter++];  	string description = "";  	for (int i = 0; i < descLen; i++) {  		if ((char)data [byteCounter] != '\0')  			description += (char)data [byteCounter];  		byteCounter++;  	}  	ushort doubleByte = (ushort)(data [byteCounter++] << 8);  	doubleByte = (ushort)(doubleByte | data [byteCounter++]);  	int eventID = doubleByte & 0x3FF;  	bool triggerable = (doubleByte & 0x8000) > 0;  	bool option1Exists = (doubleByte & 0x800) > 0;  	bool option2Exists = (doubleByte & 0x400) > 0;  	Event e = new Event (eventName' description' eventID' triggerable);  	e.Option1 = option1Exists;  	e.Option2 = option2Exists;  	contactingNode.AddEvent (e);  	AddEventToDatabase (contactingNode' e);  	break;  case OPTION_BYTE:  	byteCounter = 1;  	int eventId = (ushort)(data [byteCounter++] << 8);  	eventId = (ushort)(eventId | data [byteCounter++]);  	int opDescLen = data [byteCounter++];  	string opDescription = "";  	for (int i = 0; i < opDescLen; i++) {  		if ((char)data [byteCounter] != '\0')  			opDescription += (char)data [byteCounter];  		byteCounter++;  	}  	Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  	currEvent.SetOption1 (opDescription);  	AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	if (currEvent.Option2) {  		opDescLen = data [byteCounter++];  		opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	}  	break;  case THROW_BYTE:  	byteCounter = 1;  	if (!contactingNode.GetRegistered ()) {  		break;  	}  	int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  	Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  	string op1Str = "";  	string op2Str = "";  	if (thisEvent.Option1) {  		int op1len = data [byteCounter++];  		for (int i = 0; i < op1len; i++) {  			op1Str += (char)data [byteCounter++];  		}  	}  	if (thisEvent.Option2) {  		int op2len = data [byteCounter++];  		for (int i = 0; i < op2len; i++) {  			op2Str += (char)data [byteCounter++];  		}  	}  	contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  	ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  	break;  default:  	break;  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: switch (data [0]) {  case VERSION_BYTE:  	int version = data [1];  	XbeeTx64Bit transmit;  	List<byte> d = new List<byte> ();  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "") {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  	}  	else {  		int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  		if (version != databaseVersion) {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  		}  		else {  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			d.Add (MATCH_BYTE);  			string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  			DataSqlConnection.mutex.ReleaseMutex ();  			string[] nodeInfo = node.Split ('|');  			contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  			contactingNode.SetName (nodeInfo [1]);  			contactingNode.SetAlias (nodeInfo [2]);  			contactingNode.SetBrand (nodeInfo [3]);  			contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  			contactingNode.SetHexAddress (nodeInfo [5]);  			contactingNode.SetRegistered (true);  			//nodeInfo[7] is IsForeign which we don't care about  			contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  			DataSqlConnection.mutex.WaitOne ();  			nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  			DataSqlConnection.mutex.ReleaseMutex ();  			foreach (string s in nodeInfo) {  				if (s == "")  					continue;  				string[] eventData = s.Split ('|');  				Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  				DataSqlConnection.mutex.WaitOne ();  				string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (optionsData == "") {  					contactingEvent.Option1 = false;  					contactingEvent.Option2 = false;  				}  				else {  					string[] ops = optionsData.Split ('\n');  					string[] opsVals;  					opsVals = ops [0].Split ('|');  					contactingEvent.Option1 = true;  					contactingEvent.SetOption1 (opsVals [3]);  					contactingEvent.SetOption1Value (opsVals [4]);  					if (ops.Length == 3) {  						opsVals = ops [1].Split ('|');  						contactingEvent.Option2 = true;  						contactingEvent.SetOption2 (opsVals [3]);  						contactingEvent.SetOption2Value (opsVals [4]);  					}  				}  				contactingNode.AddEvent (contactingEvent);  			}  		}  	}  	contactingNode.SetVersion ((byte)version);  	transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  	transmit.Send (_serialPort);  	break;  /* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  	string name = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			name += (char)data [i];  	}  	contactingNode.SetName (name);  	contactingNode.SetRegistered (true);  	break;  /* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  	string brand = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			brand += (char)data [i];  	}  	contactingNode.SetBrand (brand);  	AddNodeToDatabase (contactingNode);  	break;  /* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  	byteCounter = 1;  	int nameLen = data [byteCounter++];  	string eventName = "";  	for (int i = 0; i < nameLen; i++) {  		if ((char)data [byteCounter] != '\0')  			eventName += (char)data [byteCounter];  		byteCounter++;  	}  	int descLen = data [byteCounter++];  	string description = "";  	for (int i = 0; i < descLen; i++) {  		if ((char)data [byteCounter] != '\0')  			description += (char)data [byteCounter];  		byteCounter++;  	}  	ushort doubleByte = (ushort)(data [byteCounter++] << 8);  	doubleByte = (ushort)(doubleByte | data [byteCounter++]);  	int eventID = doubleByte & 0x3FF;  	bool triggerable = (doubleByte & 0x8000) > 0;  	bool option1Exists = (doubleByte & 0x800) > 0;  	bool option2Exists = (doubleByte & 0x400) > 0;  	Event e = new Event (eventName' description' eventID' triggerable);  	e.Option1 = option1Exists;  	e.Option2 = option2Exists;  	contactingNode.AddEvent (e);  	AddEventToDatabase (contactingNode' e);  	break;  case OPTION_BYTE:  	byteCounter = 1;  	int eventId = (ushort)(data [byteCounter++] << 8);  	eventId = (ushort)(eventId | data [byteCounter++]);  	int opDescLen = data [byteCounter++];  	string opDescription = "";  	for (int i = 0; i < opDescLen; i++) {  		if ((char)data [byteCounter] != '\0')  			opDescription += (char)data [byteCounter];  		byteCounter++;  	}  	Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  	currEvent.SetOption1 (opDescription);  	AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	if (currEvent.Option2) {  		opDescLen = data [byteCounter++];  		opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	}  	break;  case THROW_BYTE:  	byteCounter = 1;  	if (!contactingNode.GetRegistered ()) {  		break;  	}  	int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  	Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  	string op1Str = "";  	string op2Str = "";  	if (thisEvent.Option1) {  		int op1len = data [byteCounter++];  		for (int i = 0; i < op1len; i++) {  			op1Str += (char)data [byteCounter++];  		}  	}  	if (thisEvent.Option2) {  		int op2len = data [byteCounter++];  		for (int i = 0; i < op2len; i++) {  			op2Str += (char)data [byteCounter++];  		}  	}  	contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  	ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  	break;  default:  	break;  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: switch (data [0]) {  case VERSION_BYTE:  	int version = data [1];  	XbeeTx64Bit transmit;  	List<byte> d = new List<byte> ();  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "") {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  	}  	else {  		int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  		if (version != databaseVersion) {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  		}  		else {  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			d.Add (MATCH_BYTE);  			string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  			DataSqlConnection.mutex.ReleaseMutex ();  			string[] nodeInfo = node.Split ('|');  			contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  			contactingNode.SetName (nodeInfo [1]);  			contactingNode.SetAlias (nodeInfo [2]);  			contactingNode.SetBrand (nodeInfo [3]);  			contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  			contactingNode.SetHexAddress (nodeInfo [5]);  			contactingNode.SetRegistered (true);  			//nodeInfo[7] is IsForeign which we don't care about  			contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  			DataSqlConnection.mutex.WaitOne ();  			nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  			DataSqlConnection.mutex.ReleaseMutex ();  			foreach (string s in nodeInfo) {  				if (s == "")  					continue;  				string[] eventData = s.Split ('|');  				Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  				DataSqlConnection.mutex.WaitOne ();  				string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (optionsData == "") {  					contactingEvent.Option1 = false;  					contactingEvent.Option2 = false;  				}  				else {  					string[] ops = optionsData.Split ('\n');  					string[] opsVals;  					opsVals = ops [0].Split ('|');  					contactingEvent.Option1 = true;  					contactingEvent.SetOption1 (opsVals [3]);  					contactingEvent.SetOption1Value (opsVals [4]);  					if (ops.Length == 3) {  						opsVals = ops [1].Split ('|');  						contactingEvent.Option2 = true;  						contactingEvent.SetOption2 (opsVals [3]);  						contactingEvent.SetOption2Value (opsVals [4]);  					}  				}  				contactingNode.AddEvent (contactingEvent);  			}  		}  	}  	contactingNode.SetVersion ((byte)version);  	transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  	transmit.Send (_serialPort);  	break;  /* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  	string name = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			name += (char)data [i];  	}  	contactingNode.SetName (name);  	contactingNode.SetRegistered (true);  	break;  /* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  	string brand = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			brand += (char)data [i];  	}  	contactingNode.SetBrand (brand);  	AddNodeToDatabase (contactingNode);  	break;  /* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  	byteCounter = 1;  	int nameLen = data [byteCounter++];  	string eventName = "";  	for (int i = 0; i < nameLen; i++) {  		if ((char)data [byteCounter] != '\0')  			eventName += (char)data [byteCounter];  		byteCounter++;  	}  	int descLen = data [byteCounter++];  	string description = "";  	for (int i = 0; i < descLen; i++) {  		if ((char)data [byteCounter] != '\0')  			description += (char)data [byteCounter];  		byteCounter++;  	}  	ushort doubleByte = (ushort)(data [byteCounter++] << 8);  	doubleByte = (ushort)(doubleByte | data [byteCounter++]);  	int eventID = doubleByte & 0x3FF;  	bool triggerable = (doubleByte & 0x8000) > 0;  	bool option1Exists = (doubleByte & 0x800) > 0;  	bool option2Exists = (doubleByte & 0x400) > 0;  	Event e = new Event (eventName' description' eventID' triggerable);  	e.Option1 = option1Exists;  	e.Option2 = option2Exists;  	contactingNode.AddEvent (e);  	AddEventToDatabase (contactingNode' e);  	break;  case OPTION_BYTE:  	byteCounter = 1;  	int eventId = (ushort)(data [byteCounter++] << 8);  	eventId = (ushort)(eventId | data [byteCounter++]);  	int opDescLen = data [byteCounter++];  	string opDescription = "";  	for (int i = 0; i < opDescLen; i++) {  		if ((char)data [byteCounter] != '\0')  			opDescription += (char)data [byteCounter];  		byteCounter++;  	}  	Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  	currEvent.SetOption1 (opDescription);  	AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	if (currEvent.Option2) {  		opDescLen = data [byteCounter++];  		opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	}  	break;  case THROW_BYTE:  	byteCounter = 1;  	if (!contactingNode.GetRegistered ()) {  		break;  	}  	int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  	Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  	string op1Str = "";  	string op2Str = "";  	if (thisEvent.Option1) {  		int op1len = data [byteCounter++];  		for (int i = 0; i < op1len; i++) {  			op1Str += (char)data [byteCounter++];  		}  	}  	if (thisEvent.Option2) {  		int op2len = data [byteCounter++];  		for (int i = 0; i < op2len; i++) {  			op2Str += (char)data [byteCounter++];  		}  	}  	contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  	ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  	break;  default:  	break;  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: switch (data [0]) {  case VERSION_BYTE:  	int version = data [1];  	XbeeTx64Bit transmit;  	List<byte> d = new List<byte> ();  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "") {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  	}  	else {  		int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  		if (version != databaseVersion) {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  		}  		else {  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			d.Add (MATCH_BYTE);  			string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  			DataSqlConnection.mutex.ReleaseMutex ();  			string[] nodeInfo = node.Split ('|');  			contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  			contactingNode.SetName (nodeInfo [1]);  			contactingNode.SetAlias (nodeInfo [2]);  			contactingNode.SetBrand (nodeInfo [3]);  			contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  			contactingNode.SetHexAddress (nodeInfo [5]);  			contactingNode.SetRegistered (true);  			//nodeInfo[7] is IsForeign which we don't care about  			contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  			DataSqlConnection.mutex.WaitOne ();  			nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  			DataSqlConnection.mutex.ReleaseMutex ();  			foreach (string s in nodeInfo) {  				if (s == "")  					continue;  				string[] eventData = s.Split ('|');  				Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  				DataSqlConnection.mutex.WaitOne ();  				string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (optionsData == "") {  					contactingEvent.Option1 = false;  					contactingEvent.Option2 = false;  				}  				else {  					string[] ops = optionsData.Split ('\n');  					string[] opsVals;  					opsVals = ops [0].Split ('|');  					contactingEvent.Option1 = true;  					contactingEvent.SetOption1 (opsVals [3]);  					contactingEvent.SetOption1Value (opsVals [4]);  					if (ops.Length == 3) {  						opsVals = ops [1].Split ('|');  						contactingEvent.Option2 = true;  						contactingEvent.SetOption2 (opsVals [3]);  						contactingEvent.SetOption2Value (opsVals [4]);  					}  				}  				contactingNode.AddEvent (contactingEvent);  			}  		}  	}  	contactingNode.SetVersion ((byte)version);  	transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  	transmit.Send (_serialPort);  	break;  /* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  	string name = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			name += (char)data [i];  	}  	contactingNode.SetName (name);  	contactingNode.SetRegistered (true);  	break;  /* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  	string brand = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			brand += (char)data [i];  	}  	contactingNode.SetBrand (brand);  	AddNodeToDatabase (contactingNode);  	break;  /* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  	byteCounter = 1;  	int nameLen = data [byteCounter++];  	string eventName = "";  	for (int i = 0; i < nameLen; i++) {  		if ((char)data [byteCounter] != '\0')  			eventName += (char)data [byteCounter];  		byteCounter++;  	}  	int descLen = data [byteCounter++];  	string description = "";  	for (int i = 0; i < descLen; i++) {  		if ((char)data [byteCounter] != '\0')  			description += (char)data [byteCounter];  		byteCounter++;  	}  	ushort doubleByte = (ushort)(data [byteCounter++] << 8);  	doubleByte = (ushort)(doubleByte | data [byteCounter++]);  	int eventID = doubleByte & 0x3FF;  	bool triggerable = (doubleByte & 0x8000) > 0;  	bool option1Exists = (doubleByte & 0x800) > 0;  	bool option2Exists = (doubleByte & 0x400) > 0;  	Event e = new Event (eventName' description' eventID' triggerable);  	e.Option1 = option1Exists;  	e.Option2 = option2Exists;  	contactingNode.AddEvent (e);  	AddEventToDatabase (contactingNode' e);  	break;  case OPTION_BYTE:  	byteCounter = 1;  	int eventId = (ushort)(data [byteCounter++] << 8);  	eventId = (ushort)(eventId | data [byteCounter++]);  	int opDescLen = data [byteCounter++];  	string opDescription = "";  	for (int i = 0; i < opDescLen; i++) {  		if ((char)data [byteCounter] != '\0')  			opDescription += (char)data [byteCounter];  		byteCounter++;  	}  	Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  	currEvent.SetOption1 (opDescription);  	AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	if (currEvent.Option2) {  		opDescLen = data [byteCounter++];  		opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	}  	break;  case THROW_BYTE:  	byteCounter = 1;  	if (!contactingNode.GetRegistered ()) {  		break;  	}  	int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  	Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  	string op1Str = "";  	string op2Str = "";  	if (thisEvent.Option1) {  		int op1len = data [byteCounter++];  		for (int i = 0; i < op1len; i++) {  			op1Str += (char)data [byteCounter++];  		}  	}  	if (thisEvent.Option2) {  		int op2len = data [byteCounter++];  		for (int i = 0; i < op2len; i++) {  			op2Str += (char)data [byteCounter++];  		}  	}  	contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  	ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  	break;  default:  	break;  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: switch (data [0]) {  case VERSION_BYTE:  	int version = data [1];  	XbeeTx64Bit transmit;  	List<byte> d = new List<byte> ();  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "") {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  	}  	else {  		int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  		if (version != databaseVersion) {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  		}  		else {  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			d.Add (MATCH_BYTE);  			string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  			DataSqlConnection.mutex.ReleaseMutex ();  			string[] nodeInfo = node.Split ('|');  			contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  			contactingNode.SetName (nodeInfo [1]);  			contactingNode.SetAlias (nodeInfo [2]);  			contactingNode.SetBrand (nodeInfo [3]);  			contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  			contactingNode.SetHexAddress (nodeInfo [5]);  			contactingNode.SetRegistered (true);  			//nodeInfo[7] is IsForeign which we don't care about  			contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  			DataSqlConnection.mutex.WaitOne ();  			nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  			DataSqlConnection.mutex.ReleaseMutex ();  			foreach (string s in nodeInfo) {  				if (s == "")  					continue;  				string[] eventData = s.Split ('|');  				Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  				DataSqlConnection.mutex.WaitOne ();  				string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (optionsData == "") {  					contactingEvent.Option1 = false;  					contactingEvent.Option2 = false;  				}  				else {  					string[] ops = optionsData.Split ('\n');  					string[] opsVals;  					opsVals = ops [0].Split ('|');  					contactingEvent.Option1 = true;  					contactingEvent.SetOption1 (opsVals [3]);  					contactingEvent.SetOption1Value (opsVals [4]);  					if (ops.Length == 3) {  						opsVals = ops [1].Split ('|');  						contactingEvent.Option2 = true;  						contactingEvent.SetOption2 (opsVals [3]);  						contactingEvent.SetOption2Value (opsVals [4]);  					}  				}  				contactingNode.AddEvent (contactingEvent);  			}  		}  	}  	contactingNode.SetVersion ((byte)version);  	transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  	transmit.Send (_serialPort);  	break;  /* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  	string name = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			name += (char)data [i];  	}  	contactingNode.SetName (name);  	contactingNode.SetRegistered (true);  	break;  /* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  	string brand = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			brand += (char)data [i];  	}  	contactingNode.SetBrand (brand);  	AddNodeToDatabase (contactingNode);  	break;  /* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  	byteCounter = 1;  	int nameLen = data [byteCounter++];  	string eventName = "";  	for (int i = 0; i < nameLen; i++) {  		if ((char)data [byteCounter] != '\0')  			eventName += (char)data [byteCounter];  		byteCounter++;  	}  	int descLen = data [byteCounter++];  	string description = "";  	for (int i = 0; i < descLen; i++) {  		if ((char)data [byteCounter] != '\0')  			description += (char)data [byteCounter];  		byteCounter++;  	}  	ushort doubleByte = (ushort)(data [byteCounter++] << 8);  	doubleByte = (ushort)(doubleByte | data [byteCounter++]);  	int eventID = doubleByte & 0x3FF;  	bool triggerable = (doubleByte & 0x8000) > 0;  	bool option1Exists = (doubleByte & 0x800) > 0;  	bool option2Exists = (doubleByte & 0x400) > 0;  	Event e = new Event (eventName' description' eventID' triggerable);  	e.Option1 = option1Exists;  	e.Option2 = option2Exists;  	contactingNode.AddEvent (e);  	AddEventToDatabase (contactingNode' e);  	break;  case OPTION_BYTE:  	byteCounter = 1;  	int eventId = (ushort)(data [byteCounter++] << 8);  	eventId = (ushort)(eventId | data [byteCounter++]);  	int opDescLen = data [byteCounter++];  	string opDescription = "";  	for (int i = 0; i < opDescLen; i++) {  		if ((char)data [byteCounter] != '\0')  			opDescription += (char)data [byteCounter];  		byteCounter++;  	}  	Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  	currEvent.SetOption1 (opDescription);  	AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	if (currEvent.Option2) {  		opDescLen = data [byteCounter++];  		opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	}  	break;  case THROW_BYTE:  	byteCounter = 1;  	if (!contactingNode.GetRegistered ()) {  		break;  	}  	int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  	Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  	string op1Str = "";  	string op2Str = "";  	if (thisEvent.Option1) {  		int op1len = data [byteCounter++];  		for (int i = 0; i < op1len; i++) {  			op1Str += (char)data [byteCounter++];  		}  	}  	if (thisEvent.Option2) {  		int op2len = data [byteCounter++];  		for (int i = 0; i < op2len; i++) {  			op2Str += (char)data [byteCounter++];  		}  	}  	contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  	ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  	break;  default:  	break;  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: switch (data [0]) {  case VERSION_BYTE:  	int version = data [1];  	XbeeTx64Bit transmit;  	List<byte> d = new List<byte> ();  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "") {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  	}  	else {  		int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  		if (version != databaseVersion) {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  		}  		else {  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			d.Add (MATCH_BYTE);  			string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  			DataSqlConnection.mutex.ReleaseMutex ();  			string[] nodeInfo = node.Split ('|');  			contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  			contactingNode.SetName (nodeInfo [1]);  			contactingNode.SetAlias (nodeInfo [2]);  			contactingNode.SetBrand (nodeInfo [3]);  			contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  			contactingNode.SetHexAddress (nodeInfo [5]);  			contactingNode.SetRegistered (true);  			//nodeInfo[7] is IsForeign which we don't care about  			contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  			DataSqlConnection.mutex.WaitOne ();  			nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  			DataSqlConnection.mutex.ReleaseMutex ();  			foreach (string s in nodeInfo) {  				if (s == "")  					continue;  				string[] eventData = s.Split ('|');  				Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  				DataSqlConnection.mutex.WaitOne ();  				string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (optionsData == "") {  					contactingEvent.Option1 = false;  					contactingEvent.Option2 = false;  				}  				else {  					string[] ops = optionsData.Split ('\n');  					string[] opsVals;  					opsVals = ops [0].Split ('|');  					contactingEvent.Option1 = true;  					contactingEvent.SetOption1 (opsVals [3]);  					contactingEvent.SetOption1Value (opsVals [4]);  					if (ops.Length == 3) {  						opsVals = ops [1].Split ('|');  						contactingEvent.Option2 = true;  						contactingEvent.SetOption2 (opsVals [3]);  						contactingEvent.SetOption2Value (opsVals [4]);  					}  				}  				contactingNode.AddEvent (contactingEvent);  			}  		}  	}  	contactingNode.SetVersion ((byte)version);  	transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  	transmit.Send (_serialPort);  	break;  /* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  	string name = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			name += (char)data [i];  	}  	contactingNode.SetName (name);  	contactingNode.SetRegistered (true);  	break;  /* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  	string brand = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			brand += (char)data [i];  	}  	contactingNode.SetBrand (brand);  	AddNodeToDatabase (contactingNode);  	break;  /* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  	byteCounter = 1;  	int nameLen = data [byteCounter++];  	string eventName = "";  	for (int i = 0; i < nameLen; i++) {  		if ((char)data [byteCounter] != '\0')  			eventName += (char)data [byteCounter];  		byteCounter++;  	}  	int descLen = data [byteCounter++];  	string description = "";  	for (int i = 0; i < descLen; i++) {  		if ((char)data [byteCounter] != '\0')  			description += (char)data [byteCounter];  		byteCounter++;  	}  	ushort doubleByte = (ushort)(data [byteCounter++] << 8);  	doubleByte = (ushort)(doubleByte | data [byteCounter++]);  	int eventID = doubleByte & 0x3FF;  	bool triggerable = (doubleByte & 0x8000) > 0;  	bool option1Exists = (doubleByte & 0x800) > 0;  	bool option2Exists = (doubleByte & 0x400) > 0;  	Event e = new Event (eventName' description' eventID' triggerable);  	e.Option1 = option1Exists;  	e.Option2 = option2Exists;  	contactingNode.AddEvent (e);  	AddEventToDatabase (contactingNode' e);  	break;  case OPTION_BYTE:  	byteCounter = 1;  	int eventId = (ushort)(data [byteCounter++] << 8);  	eventId = (ushort)(eventId | data [byteCounter++]);  	int opDescLen = data [byteCounter++];  	string opDescription = "";  	for (int i = 0; i < opDescLen; i++) {  		if ((char)data [byteCounter] != '\0')  			opDescription += (char)data [byteCounter];  		byteCounter++;  	}  	Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  	currEvent.SetOption1 (opDescription);  	AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	if (currEvent.Option2) {  		opDescLen = data [byteCounter++];  		opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	}  	break;  case THROW_BYTE:  	byteCounter = 1;  	if (!contactingNode.GetRegistered ()) {  		break;  	}  	int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  	Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  	string op1Str = "";  	string op2Str = "";  	if (thisEvent.Option1) {  		int op1len = data [byteCounter++];  		for (int i = 0; i < op1len; i++) {  			op1Str += (char)data [byteCounter++];  		}  	}  	if (thisEvent.Option2) {  		int op2len = data [byteCounter++];  		for (int i = 0; i < op2len; i++) {  			op2Str += (char)data [byteCounter++];  		}  	}  	contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  	ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  	break;  default:  	break;  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: switch (data [0]) {  case VERSION_BYTE:  	int version = data [1];  	XbeeTx64Bit transmit;  	List<byte> d = new List<byte> ();  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "") {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  	}  	else {  		int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  		if (version != databaseVersion) {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  		}  		else {  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			d.Add (MATCH_BYTE);  			string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  			DataSqlConnection.mutex.ReleaseMutex ();  			string[] nodeInfo = node.Split ('|');  			contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  			contactingNode.SetName (nodeInfo [1]);  			contactingNode.SetAlias (nodeInfo [2]);  			contactingNode.SetBrand (nodeInfo [3]);  			contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  			contactingNode.SetHexAddress (nodeInfo [5]);  			contactingNode.SetRegistered (true);  			//nodeInfo[7] is IsForeign which we don't care about  			contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  			DataSqlConnection.mutex.WaitOne ();  			nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  			DataSqlConnection.mutex.ReleaseMutex ();  			foreach (string s in nodeInfo) {  				if (s == "")  					continue;  				string[] eventData = s.Split ('|');  				Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  				DataSqlConnection.mutex.WaitOne ();  				string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (optionsData == "") {  					contactingEvent.Option1 = false;  					contactingEvent.Option2 = false;  				}  				else {  					string[] ops = optionsData.Split ('\n');  					string[] opsVals;  					opsVals = ops [0].Split ('|');  					contactingEvent.Option1 = true;  					contactingEvent.SetOption1 (opsVals [3]);  					contactingEvent.SetOption1Value (opsVals [4]);  					if (ops.Length == 3) {  						opsVals = ops [1].Split ('|');  						contactingEvent.Option2 = true;  						contactingEvent.SetOption2 (opsVals [3]);  						contactingEvent.SetOption2Value (opsVals [4]);  					}  				}  				contactingNode.AddEvent (contactingEvent);  			}  		}  	}  	contactingNode.SetVersion ((byte)version);  	transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  	transmit.Send (_serialPort);  	break;  /* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  	string name = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			name += (char)data [i];  	}  	contactingNode.SetName (name);  	contactingNode.SetRegistered (true);  	break;  /* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  	string brand = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			brand += (char)data [i];  	}  	contactingNode.SetBrand (brand);  	AddNodeToDatabase (contactingNode);  	break;  /* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  	byteCounter = 1;  	int nameLen = data [byteCounter++];  	string eventName = "";  	for (int i = 0; i < nameLen; i++) {  		if ((char)data [byteCounter] != '\0')  			eventName += (char)data [byteCounter];  		byteCounter++;  	}  	int descLen = data [byteCounter++];  	string description = "";  	for (int i = 0; i < descLen; i++) {  		if ((char)data [byteCounter] != '\0')  			description += (char)data [byteCounter];  		byteCounter++;  	}  	ushort doubleByte = (ushort)(data [byteCounter++] << 8);  	doubleByte = (ushort)(doubleByte | data [byteCounter++]);  	int eventID = doubleByte & 0x3FF;  	bool triggerable = (doubleByte & 0x8000) > 0;  	bool option1Exists = (doubleByte & 0x800) > 0;  	bool option2Exists = (doubleByte & 0x400) > 0;  	Event e = new Event (eventName' description' eventID' triggerable);  	e.Option1 = option1Exists;  	e.Option2 = option2Exists;  	contactingNode.AddEvent (e);  	AddEventToDatabase (contactingNode' e);  	break;  case OPTION_BYTE:  	byteCounter = 1;  	int eventId = (ushort)(data [byteCounter++] << 8);  	eventId = (ushort)(eventId | data [byteCounter++]);  	int opDescLen = data [byteCounter++];  	string opDescription = "";  	for (int i = 0; i < opDescLen; i++) {  		if ((char)data [byteCounter] != '\0')  			opDescription += (char)data [byteCounter];  		byteCounter++;  	}  	Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  	currEvent.SetOption1 (opDescription);  	AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	if (currEvent.Option2) {  		opDescLen = data [byteCounter++];  		opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	}  	break;  case THROW_BYTE:  	byteCounter = 1;  	if (!contactingNode.GetRegistered ()) {  		break;  	}  	int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  	Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  	string op1Str = "";  	string op2Str = "";  	if (thisEvent.Option1) {  		int op1len = data [byteCounter++];  		for (int i = 0; i < op1len; i++) {  			op1Str += (char)data [byteCounter++];  		}  	}  	if (thisEvent.Option2) {  		int op2len = data [byteCounter++];  		for (int i = 0; i < op2len; i++) {  			op2Str += (char)data [byteCounter++];  		}  	}  	contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  	ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  	break;  default:  	break;  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: switch (data [0]) {  case VERSION_BYTE:  	int version = data [1];  	XbeeTx64Bit transmit;  	List<byte> d = new List<byte> ();  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "") {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  	}  	else {  		int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  		if (version != databaseVersion) {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  		}  		else {  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			d.Add (MATCH_BYTE);  			string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  			DataSqlConnection.mutex.ReleaseMutex ();  			string[] nodeInfo = node.Split ('|');  			contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  			contactingNode.SetName (nodeInfo [1]);  			contactingNode.SetAlias (nodeInfo [2]);  			contactingNode.SetBrand (nodeInfo [3]);  			contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  			contactingNode.SetHexAddress (nodeInfo [5]);  			contactingNode.SetRegistered (true);  			//nodeInfo[7] is IsForeign which we don't care about  			contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  			DataSqlConnection.mutex.WaitOne ();  			nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  			DataSqlConnection.mutex.ReleaseMutex ();  			foreach (string s in nodeInfo) {  				if (s == "")  					continue;  				string[] eventData = s.Split ('|');  				Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  				DataSqlConnection.mutex.WaitOne ();  				string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (optionsData == "") {  					contactingEvent.Option1 = false;  					contactingEvent.Option2 = false;  				}  				else {  					string[] ops = optionsData.Split ('\n');  					string[] opsVals;  					opsVals = ops [0].Split ('|');  					contactingEvent.Option1 = true;  					contactingEvent.SetOption1 (opsVals [3]);  					contactingEvent.SetOption1Value (opsVals [4]);  					if (ops.Length == 3) {  						opsVals = ops [1].Split ('|');  						contactingEvent.Option2 = true;  						contactingEvent.SetOption2 (opsVals [3]);  						contactingEvent.SetOption2Value (opsVals [4]);  					}  				}  				contactingNode.AddEvent (contactingEvent);  			}  		}  	}  	contactingNode.SetVersion ((byte)version);  	transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  	transmit.Send (_serialPort);  	break;  /* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  	string name = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			name += (char)data [i];  	}  	contactingNode.SetName (name);  	contactingNode.SetRegistered (true);  	break;  /* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  	string brand = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			brand += (char)data [i];  	}  	contactingNode.SetBrand (brand);  	AddNodeToDatabase (contactingNode);  	break;  /* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  	byteCounter = 1;  	int nameLen = data [byteCounter++];  	string eventName = "";  	for (int i = 0; i < nameLen; i++) {  		if ((char)data [byteCounter] != '\0')  			eventName += (char)data [byteCounter];  		byteCounter++;  	}  	int descLen = data [byteCounter++];  	string description = "";  	for (int i = 0; i < descLen; i++) {  		if ((char)data [byteCounter] != '\0')  			description += (char)data [byteCounter];  		byteCounter++;  	}  	ushort doubleByte = (ushort)(data [byteCounter++] << 8);  	doubleByte = (ushort)(doubleByte | data [byteCounter++]);  	int eventID = doubleByte & 0x3FF;  	bool triggerable = (doubleByte & 0x8000) > 0;  	bool option1Exists = (doubleByte & 0x800) > 0;  	bool option2Exists = (doubleByte & 0x400) > 0;  	Event e = new Event (eventName' description' eventID' triggerable);  	e.Option1 = option1Exists;  	e.Option2 = option2Exists;  	contactingNode.AddEvent (e);  	AddEventToDatabase (contactingNode' e);  	break;  case OPTION_BYTE:  	byteCounter = 1;  	int eventId = (ushort)(data [byteCounter++] << 8);  	eventId = (ushort)(eventId | data [byteCounter++]);  	int opDescLen = data [byteCounter++];  	string opDescription = "";  	for (int i = 0; i < opDescLen; i++) {  		if ((char)data [byteCounter] != '\0')  			opDescription += (char)data [byteCounter];  		byteCounter++;  	}  	Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  	currEvent.SetOption1 (opDescription);  	AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	if (currEvent.Option2) {  		opDescLen = data [byteCounter++];  		opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	}  	break;  case THROW_BYTE:  	byteCounter = 1;  	if (!contactingNode.GetRegistered ()) {  		break;  	}  	int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  	Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  	string op1Str = "";  	string op2Str = "";  	if (thisEvent.Option1) {  		int op1len = data [byteCounter++];  		for (int i = 0; i < op1len; i++) {  			op1Str += (char)data [byteCounter++];  		}  	}  	if (thisEvent.Option2) {  		int op2len = data [byteCounter++];  		for (int i = 0; i < op2len; i++) {  			op2Str += (char)data [byteCounter++];  		}  	}  	contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  	ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  	break;  default:  	break;  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: switch (data [0]) {  case VERSION_BYTE:  	int version = data [1];  	XbeeTx64Bit transmit;  	List<byte> d = new List<byte> ();  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "") {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  	}  	else {  		int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  		if (version != databaseVersion) {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  		}  		else {  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			d.Add (MATCH_BYTE);  			string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  			DataSqlConnection.mutex.ReleaseMutex ();  			string[] nodeInfo = node.Split ('|');  			contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  			contactingNode.SetName (nodeInfo [1]);  			contactingNode.SetAlias (nodeInfo [2]);  			contactingNode.SetBrand (nodeInfo [3]);  			contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  			contactingNode.SetHexAddress (nodeInfo [5]);  			contactingNode.SetRegistered (true);  			//nodeInfo[7] is IsForeign which we don't care about  			contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  			DataSqlConnection.mutex.WaitOne ();  			nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  			DataSqlConnection.mutex.ReleaseMutex ();  			foreach (string s in nodeInfo) {  				if (s == "")  					continue;  				string[] eventData = s.Split ('|');  				Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  				DataSqlConnection.mutex.WaitOne ();  				string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (optionsData == "") {  					contactingEvent.Option1 = false;  					contactingEvent.Option2 = false;  				}  				else {  					string[] ops = optionsData.Split ('\n');  					string[] opsVals;  					opsVals = ops [0].Split ('|');  					contactingEvent.Option1 = true;  					contactingEvent.SetOption1 (opsVals [3]);  					contactingEvent.SetOption1Value (opsVals [4]);  					if (ops.Length == 3) {  						opsVals = ops [1].Split ('|');  						contactingEvent.Option2 = true;  						contactingEvent.SetOption2 (opsVals [3]);  						contactingEvent.SetOption2Value (opsVals [4]);  					}  				}  				contactingNode.AddEvent (contactingEvent);  			}  		}  	}  	contactingNode.SetVersion ((byte)version);  	transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  	transmit.Send (_serialPort);  	break;  /* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  	string name = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			name += (char)data [i];  	}  	contactingNode.SetName (name);  	contactingNode.SetRegistered (true);  	break;  /* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  	string brand = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			brand += (char)data [i];  	}  	contactingNode.SetBrand (brand);  	AddNodeToDatabase (contactingNode);  	break;  /* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  	byteCounter = 1;  	int nameLen = data [byteCounter++];  	string eventName = "";  	for (int i = 0; i < nameLen; i++) {  		if ((char)data [byteCounter] != '\0')  			eventName += (char)data [byteCounter];  		byteCounter++;  	}  	int descLen = data [byteCounter++];  	string description = "";  	for (int i = 0; i < descLen; i++) {  		if ((char)data [byteCounter] != '\0')  			description += (char)data [byteCounter];  		byteCounter++;  	}  	ushort doubleByte = (ushort)(data [byteCounter++] << 8);  	doubleByte = (ushort)(doubleByte | data [byteCounter++]);  	int eventID = doubleByte & 0x3FF;  	bool triggerable = (doubleByte & 0x8000) > 0;  	bool option1Exists = (doubleByte & 0x800) > 0;  	bool option2Exists = (doubleByte & 0x400) > 0;  	Event e = new Event (eventName' description' eventID' triggerable);  	e.Option1 = option1Exists;  	e.Option2 = option2Exists;  	contactingNode.AddEvent (e);  	AddEventToDatabase (contactingNode' e);  	break;  case OPTION_BYTE:  	byteCounter = 1;  	int eventId = (ushort)(data [byteCounter++] << 8);  	eventId = (ushort)(eventId | data [byteCounter++]);  	int opDescLen = data [byteCounter++];  	string opDescription = "";  	for (int i = 0; i < opDescLen; i++) {  		if ((char)data [byteCounter] != '\0')  			opDescription += (char)data [byteCounter];  		byteCounter++;  	}  	Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  	currEvent.SetOption1 (opDescription);  	AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	if (currEvent.Option2) {  		opDescLen = data [byteCounter++];  		opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	}  	break;  case THROW_BYTE:  	byteCounter = 1;  	if (!contactingNode.GetRegistered ()) {  		break;  	}  	int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  	Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  	string op1Str = "";  	string op2Str = "";  	if (thisEvent.Option1) {  		int op1len = data [byteCounter++];  		for (int i = 0; i < op1len; i++) {  			op1Str += (char)data [byteCounter++];  		}  	}  	if (thisEvent.Option2) {  		int op2len = data [byteCounter++];  		for (int i = 0; i < op2len; i++) {  			op2Str += (char)data [byteCounter++];  		}  	}  	contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  	ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  	break;  default:  	break;  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: switch (data [0]) {  case VERSION_BYTE:  	int version = data [1];  	XbeeTx64Bit transmit;  	List<byte> d = new List<byte> ();  	DataSqlConnection.mutex.WaitOne ();  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT Version FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (ret == "") {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  	}  	else {  		int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  		if (version != databaseVersion) {  			d.Add (MISMATCH_BYTE);  			contactingNode.ResetNode ();  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  			DataSqlConnection.mutex.ReleaseMutex ();  		}  		else {  			DataSqlConnection.mutex.WaitOne ();  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  			d.Add (MATCH_BYTE);  			string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  			DataSqlConnection.mutex.ReleaseMutex ();  			string[] nodeInfo = node.Split ('|');  			contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  			contactingNode.SetName (nodeInfo [1]);  			contactingNode.SetAlias (nodeInfo [2]);  			contactingNode.SetBrand (nodeInfo [3]);  			contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  			contactingNode.SetHexAddress (nodeInfo [5]);  			contactingNode.SetRegistered (true);  			//nodeInfo[7] is IsForeign which we don't care about  			contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  			DataSqlConnection.mutex.WaitOne ();  			nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  			DataSqlConnection.mutex.ReleaseMutex ();  			foreach (string s in nodeInfo) {  				if (s == "")  					continue;  				string[] eventData = s.Split ('|');  				Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  				DataSqlConnection.mutex.WaitOne ();  				string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  				DataSqlConnection.mutex.ReleaseMutex ();  				if (optionsData == "") {  					contactingEvent.Option1 = false;  					contactingEvent.Option2 = false;  				}  				else {  					string[] ops = optionsData.Split ('\n');  					string[] opsVals;  					opsVals = ops [0].Split ('|');  					contactingEvent.Option1 = true;  					contactingEvent.SetOption1 (opsVals [3]);  					contactingEvent.SetOption1Value (opsVals [4]);  					if (ops.Length == 3) {  						opsVals = ops [1].Split ('|');  						contactingEvent.Option2 = true;  						contactingEvent.SetOption2 (opsVals [3]);  						contactingEvent.SetOption2Value (opsVals [4]);  					}  				}  				contactingNode.AddEvent (contactingEvent);  			}  		}  	}  	contactingNode.SetVersion ((byte)version);  	transmit = new XbeeTx64Bit (d' contactingNode.GetAddress ());  	transmit.Send (_serialPort);  	break;  /* Responding to ping. Rest of message is the name of the unit. */case NAME_BYTE:  	string name = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			name += (char)data [i];  	}  	contactingNode.SetName (name);  	contactingNode.SetRegistered (true);  	break;  /* Responding to ping. Rest of message is the brand of the unit. */case BRAND_BYTE:  	string brand = "";  	for (int i = 1; i < data.Count; i++) {  		if ((char)data [i] != '\0')  			brand += (char)data [i];  	}  	contactingNode.SetBrand (brand);  	AddNodeToDatabase (contactingNode);  	break;  /* Responding to ping. Rest of message is a distinct Event. */case EVENT_BYTE:  	byteCounter = 1;  	int nameLen = data [byteCounter++];  	string eventName = "";  	for (int i = 0; i < nameLen; i++) {  		if ((char)data [byteCounter] != '\0')  			eventName += (char)data [byteCounter];  		byteCounter++;  	}  	int descLen = data [byteCounter++];  	string description = "";  	for (int i = 0; i < descLen; i++) {  		if ((char)data [byteCounter] != '\0')  			description += (char)data [byteCounter];  		byteCounter++;  	}  	ushort doubleByte = (ushort)(data [byteCounter++] << 8);  	doubleByte = (ushort)(doubleByte | data [byteCounter++]);  	int eventID = doubleByte & 0x3FF;  	bool triggerable = (doubleByte & 0x8000) > 0;  	bool option1Exists = (doubleByte & 0x800) > 0;  	bool option2Exists = (doubleByte & 0x400) > 0;  	Event e = new Event (eventName' description' eventID' triggerable);  	e.Option1 = option1Exists;  	e.Option2 = option2Exists;  	contactingNode.AddEvent (e);  	AddEventToDatabase (contactingNode' e);  	break;  case OPTION_BYTE:  	byteCounter = 1;  	int eventId = (ushort)(data [byteCounter++] << 8);  	eventId = (ushort)(eventId | data [byteCounter++]);  	int opDescLen = data [byteCounter++];  	string opDescription = "";  	for (int i = 0; i < opDescLen; i++) {  		if ((char)data [byteCounter] != '\0')  			opDescription += (char)data [byteCounter];  		byteCounter++;  	}  	Event currEvent = contactingNode.GetEvents ().Single<Event> (c => c.ID == eventId);  	currEvent.SetOption1 (opDescription);  	AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	if (currEvent.Option2) {  		opDescLen = data [byteCounter++];  		opDescription = "";  		for (int i = 0; i < opDescLen; i++) {  			if ((char)data [byteCounter] != '\0')  				opDescription += (char)data [byteCounter];  			byteCounter++;  		}  		AddOptionToDatabase (contactingNode' currEvent' 1' opDescription);  	}  	break;  case THROW_BYTE:  	byteCounter = 1;  	if (!contactingNode.GetRegistered ()) {  		break;  	}  	int eventNum = (data [byteCounter++] << 7) | data [byteCounter++];  	Event thisEvent = contactingNode.GetEvents ().Single<Event> (temp => temp.ID == eventNum);  	string op1Str = "";  	string op2Str = "";  	if (thisEvent.Option1) {  		int op1len = data [byteCounter++];  		for (int i = 0; i < op1len; i++) {  			op1Str += (char)data [byteCounter++];  		}  	}  	if (thisEvent.Option2) {  		int op2len = data [byteCounter++];  		for (int i = 0; i < op2len; i++) {  			op2Str += (char)data [byteCounter++];  		}  	}  	contactingNode.ThrowEvent (eventNum' op1Str' op2Str);  	ThrowEvent (contactingNode' thisEvent' op1Str' op2Str);  	break;  default:  	break;  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (ret == "") {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  }  else {  	int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  	if (version != databaseVersion) {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  	}  	else {  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		d.Add (MATCH_BYTE);  		string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  		DataSqlConnection.mutex.ReleaseMutex ();  		string[] nodeInfo = node.Split ('|');  		contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  		contactingNode.SetName (nodeInfo [1]);  		contactingNode.SetAlias (nodeInfo [2]);  		contactingNode.SetBrand (nodeInfo [3]);  		contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  		contactingNode.SetHexAddress (nodeInfo [5]);  		contactingNode.SetRegistered (true);  		//nodeInfo[7] is IsForeign which we don't care about  		contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  		DataSqlConnection.mutex.WaitOne ();  		nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  		DataSqlConnection.mutex.ReleaseMutex ();  		foreach (string s in nodeInfo) {  			if (s == "")  				continue;  			string[] eventData = s.Split ('|');  			Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  			DataSqlConnection.mutex.WaitOne ();  			string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (optionsData == "") {  				contactingEvent.Option1 = false;  				contactingEvent.Option2 = false;  			}  			else {  				string[] ops = optionsData.Split ('\n');  				string[] opsVals;  				opsVals = ops [0].Split ('|');  				contactingEvent.Option1 = true;  				contactingEvent.SetOption1 (opsVals [3]);  				contactingEvent.SetOption1Value (opsVals [4]);  				if (ops.Length == 3) {  					opsVals = ops [1].Split ('|');  					contactingEvent.Option2 = true;  					contactingEvent.SetOption2 (opsVals [3]);  					contactingEvent.SetOption2Value (opsVals [4]);  				}  			}  			contactingNode.AddEvent (contactingEvent);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (ret == "") {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  }  else {  	int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  	if (version != databaseVersion) {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  	}  	else {  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		d.Add (MATCH_BYTE);  		string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  		DataSqlConnection.mutex.ReleaseMutex ();  		string[] nodeInfo = node.Split ('|');  		contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  		contactingNode.SetName (nodeInfo [1]);  		contactingNode.SetAlias (nodeInfo [2]);  		contactingNode.SetBrand (nodeInfo [3]);  		contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  		contactingNode.SetHexAddress (nodeInfo [5]);  		contactingNode.SetRegistered (true);  		//nodeInfo[7] is IsForeign which we don't care about  		contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  		DataSqlConnection.mutex.WaitOne ();  		nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  		DataSqlConnection.mutex.ReleaseMutex ();  		foreach (string s in nodeInfo) {  			if (s == "")  				continue;  			string[] eventData = s.Split ('|');  			Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  			DataSqlConnection.mutex.WaitOne ();  			string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (optionsData == "") {  				contactingEvent.Option1 = false;  				contactingEvent.Option2 = false;  			}  			else {  				string[] ops = optionsData.Split ('\n');  				string[] opsVals;  				opsVals = ops [0].Split ('|');  				contactingEvent.Option1 = true;  				contactingEvent.SetOption1 (opsVals [3]);  				contactingEvent.SetOption1Value (opsVals [4]);  				if (ops.Length == 3) {  					opsVals = ops [1].Split ('|');  					contactingEvent.Option2 = true;  					contactingEvent.SetOption2 (opsVals [3]);  					contactingEvent.SetOption2Value (opsVals [4]);  				}  			}  			contactingNode.AddEvent (contactingEvent);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (ret == "") {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  }  else {  	int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  	if (version != databaseVersion) {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  	}  	else {  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		d.Add (MATCH_BYTE);  		string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  		DataSqlConnection.mutex.ReleaseMutex ();  		string[] nodeInfo = node.Split ('|');  		contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  		contactingNode.SetName (nodeInfo [1]);  		contactingNode.SetAlias (nodeInfo [2]);  		contactingNode.SetBrand (nodeInfo [3]);  		contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  		contactingNode.SetHexAddress (nodeInfo [5]);  		contactingNode.SetRegistered (true);  		//nodeInfo[7] is IsForeign which we don't care about  		contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  		DataSqlConnection.mutex.WaitOne ();  		nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  		DataSqlConnection.mutex.ReleaseMutex ();  		foreach (string s in nodeInfo) {  			if (s == "")  				continue;  			string[] eventData = s.Split ('|');  			Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  			DataSqlConnection.mutex.WaitOne ();  			string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (optionsData == "") {  				contactingEvent.Option1 = false;  				contactingEvent.Option2 = false;  			}  			else {  				string[] ops = optionsData.Split ('\n');  				string[] opsVals;  				opsVals = ops [0].Split ('|');  				contactingEvent.Option1 = true;  				contactingEvent.SetOption1 (opsVals [3]);  				contactingEvent.SetOption1Value (opsVals [4]);  				if (ops.Length == 3) {  					opsVals = ops [1].Split ('|');  					contactingEvent.Option2 = true;  					contactingEvent.SetOption2 (opsVals [3]);  					contactingEvent.SetOption2Value (opsVals [4]);  				}  			}  			contactingNode.AddEvent (contactingEvent);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (ret == "") {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  }  else {  	int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  	if (version != databaseVersion) {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  	}  	else {  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		d.Add (MATCH_BYTE);  		string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  		DataSqlConnection.mutex.ReleaseMutex ();  		string[] nodeInfo = node.Split ('|');  		contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  		contactingNode.SetName (nodeInfo [1]);  		contactingNode.SetAlias (nodeInfo [2]);  		contactingNode.SetBrand (nodeInfo [3]);  		contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  		contactingNode.SetHexAddress (nodeInfo [5]);  		contactingNode.SetRegistered (true);  		//nodeInfo[7] is IsForeign which we don't care about  		contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  		DataSqlConnection.mutex.WaitOne ();  		nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  		DataSqlConnection.mutex.ReleaseMutex ();  		foreach (string s in nodeInfo) {  			if (s == "")  				continue;  			string[] eventData = s.Split ('|');  			Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  			DataSqlConnection.mutex.WaitOne ();  			string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (optionsData == "") {  				contactingEvent.Option1 = false;  				contactingEvent.Option2 = false;  			}  			else {  				string[] ops = optionsData.Split ('\n');  				string[] opsVals;  				opsVals = ops [0].Split ('|');  				contactingEvent.Option1 = true;  				contactingEvent.SetOption1 (opsVals [3]);  				contactingEvent.SetOption1Value (opsVals [4]);  				if (ops.Length == 3) {  					opsVals = ops [1].Split ('|');  					contactingEvent.Option2 = true;  					contactingEvent.SetOption2 (opsVals [3]);  					contactingEvent.SetOption2Value (opsVals [4]);  				}  			}  			contactingNode.AddEvent (contactingEvent);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (ret == "") {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  }  else {  	int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  	if (version != databaseVersion) {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  	}  	else {  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		d.Add (MATCH_BYTE);  		string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  		DataSqlConnection.mutex.ReleaseMutex ();  		string[] nodeInfo = node.Split ('|');  		contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  		contactingNode.SetName (nodeInfo [1]);  		contactingNode.SetAlias (nodeInfo [2]);  		contactingNode.SetBrand (nodeInfo [3]);  		contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  		contactingNode.SetHexAddress (nodeInfo [5]);  		contactingNode.SetRegistered (true);  		//nodeInfo[7] is IsForeign which we don't care about  		contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  		DataSqlConnection.mutex.WaitOne ();  		nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  		DataSqlConnection.mutex.ReleaseMutex ();  		foreach (string s in nodeInfo) {  			if (s == "")  				continue;  			string[] eventData = s.Split ('|');  			Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  			DataSqlConnection.mutex.WaitOne ();  			string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (optionsData == "") {  				contactingEvent.Option1 = false;  				contactingEvent.Option2 = false;  			}  			else {  				string[] ops = optionsData.Split ('\n');  				string[] opsVals;  				opsVals = ops [0].Split ('|');  				contactingEvent.Option1 = true;  				contactingEvent.SetOption1 (opsVals [3]);  				contactingEvent.SetOption1Value (opsVals [4]);  				if (ops.Length == 3) {  					opsVals = ops [1].Split ('|');  					contactingEvent.Option2 = true;  					contactingEvent.SetOption2 (opsVals [3]);  					contactingEvent.SetOption2Value (opsVals [4]);  				}  			}  			contactingNode.AddEvent (contactingEvent);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (ret == "") {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  }  else {  	int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  	if (version != databaseVersion) {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  	}  	else {  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		d.Add (MATCH_BYTE);  		string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  		DataSqlConnection.mutex.ReleaseMutex ();  		string[] nodeInfo = node.Split ('|');  		contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  		contactingNode.SetName (nodeInfo [1]);  		contactingNode.SetAlias (nodeInfo [2]);  		contactingNode.SetBrand (nodeInfo [3]);  		contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  		contactingNode.SetHexAddress (nodeInfo [5]);  		contactingNode.SetRegistered (true);  		//nodeInfo[7] is IsForeign which we don't care about  		contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  		DataSqlConnection.mutex.WaitOne ();  		nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  		DataSqlConnection.mutex.ReleaseMutex ();  		foreach (string s in nodeInfo) {  			if (s == "")  				continue;  			string[] eventData = s.Split ('|');  			Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  			DataSqlConnection.mutex.WaitOne ();  			string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (optionsData == "") {  				contactingEvent.Option1 = false;  				contactingEvent.Option2 = false;  			}  			else {  				string[] ops = optionsData.Split ('\n');  				string[] opsVals;  				opsVals = ops [0].Split ('|');  				contactingEvent.Option1 = true;  				contactingEvent.SetOption1 (opsVals [3]);  				contactingEvent.SetOption1Value (opsVals [4]);  				if (ops.Length == 3) {  					opsVals = ops [1].Split ('|');  					contactingEvent.Option2 = true;  					contactingEvent.SetOption2 (opsVals [3]);  					contactingEvent.SetOption2Value (opsVals [4]);  				}  			}  			contactingNode.AddEvent (contactingEvent);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (ret == "") {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  }  else {  	int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  	if (version != databaseVersion) {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  	}  	else {  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		d.Add (MATCH_BYTE);  		string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  		DataSqlConnection.mutex.ReleaseMutex ();  		string[] nodeInfo = node.Split ('|');  		contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  		contactingNode.SetName (nodeInfo [1]);  		contactingNode.SetAlias (nodeInfo [2]);  		contactingNode.SetBrand (nodeInfo [3]);  		contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  		contactingNode.SetHexAddress (nodeInfo [5]);  		contactingNode.SetRegistered (true);  		//nodeInfo[7] is IsForeign which we don't care about  		contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  		DataSqlConnection.mutex.WaitOne ();  		nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  		DataSqlConnection.mutex.ReleaseMutex ();  		foreach (string s in nodeInfo) {  			if (s == "")  				continue;  			string[] eventData = s.Split ('|');  			Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  			DataSqlConnection.mutex.WaitOne ();  			string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (optionsData == "") {  				contactingEvent.Option1 = false;  				contactingEvent.Option2 = false;  			}  			else {  				string[] ops = optionsData.Split ('\n');  				string[] opsVals;  				opsVals = ops [0].Split ('|');  				contactingEvent.Option1 = true;  				contactingEvent.SetOption1 (opsVals [3]);  				contactingEvent.SetOption1Value (opsVals [4]);  				if (ops.Length == 3) {  					opsVals = ops [1].Split ('|');  					contactingEvent.Option2 = true;  					contactingEvent.SetOption2 (opsVals [3]);  					contactingEvent.SetOption2Value (opsVals [4]);  				}  			}  			contactingNode.AddEvent (contactingEvent);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (ret == "") {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  }  else {  	int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  	if (version != databaseVersion) {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  	}  	else {  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		d.Add (MATCH_BYTE);  		string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  		DataSqlConnection.mutex.ReleaseMutex ();  		string[] nodeInfo = node.Split ('|');  		contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  		contactingNode.SetName (nodeInfo [1]);  		contactingNode.SetAlias (nodeInfo [2]);  		contactingNode.SetBrand (nodeInfo [3]);  		contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  		contactingNode.SetHexAddress (nodeInfo [5]);  		contactingNode.SetRegistered (true);  		//nodeInfo[7] is IsForeign which we don't care about  		contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  		DataSqlConnection.mutex.WaitOne ();  		nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  		DataSqlConnection.mutex.ReleaseMutex ();  		foreach (string s in nodeInfo) {  			if (s == "")  				continue;  			string[] eventData = s.Split ('|');  			Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  			DataSqlConnection.mutex.WaitOne ();  			string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (optionsData == "") {  				contactingEvent.Option1 = false;  				contactingEvent.Option2 = false;  			}  			else {  				string[] ops = optionsData.Split ('\n');  				string[] opsVals;  				opsVals = ops [0].Split ('|');  				contactingEvent.Option1 = true;  				contactingEvent.SetOption1 (opsVals [3]);  				contactingEvent.SetOption1Value (opsVals [4]);  				if (ops.Length == 3) {  					opsVals = ops [1].Split ('|');  					contactingEvent.Option2 = true;  					contactingEvent.SetOption2 (opsVals [3]);  					contactingEvent.SetOption2Value (opsVals [4]);  				}  			}  			contactingNode.AddEvent (contactingEvent);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (ret == "") {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  }  else {  	int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  	if (version != databaseVersion) {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  	}  	else {  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		d.Add (MATCH_BYTE);  		string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  		DataSqlConnection.mutex.ReleaseMutex ();  		string[] nodeInfo = node.Split ('|');  		contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  		contactingNode.SetName (nodeInfo [1]);  		contactingNode.SetAlias (nodeInfo [2]);  		contactingNode.SetBrand (nodeInfo [3]);  		contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  		contactingNode.SetHexAddress (nodeInfo [5]);  		contactingNode.SetRegistered (true);  		//nodeInfo[7] is IsForeign which we don't care about  		contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  		DataSqlConnection.mutex.WaitOne ();  		nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  		DataSqlConnection.mutex.ReleaseMutex ();  		foreach (string s in nodeInfo) {  			if (s == "")  				continue;  			string[] eventData = s.Split ('|');  			Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  			DataSqlConnection.mutex.WaitOne ();  			string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (optionsData == "") {  				contactingEvent.Option1 = false;  				contactingEvent.Option2 = false;  			}  			else {  				string[] ops = optionsData.Split ('\n');  				string[] opsVals;  				opsVals = ops [0].Split ('|');  				contactingEvent.Option1 = true;  				contactingEvent.SetOption1 (opsVals [3]);  				contactingEvent.SetOption1Value (opsVals [4]);  				if (ops.Length == 3) {  					opsVals = ops [1].Split ('|');  					contactingEvent.Option2 = true;  					contactingEvent.SetOption2 (opsVals [3]);  					contactingEvent.SetOption2Value (opsVals [4]);  				}  			}  			contactingNode.AddEvent (contactingEvent);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (ret == "") {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  }  else {  	int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  	if (version != databaseVersion) {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  	}  	else {  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		d.Add (MATCH_BYTE);  		string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  		DataSqlConnection.mutex.ReleaseMutex ();  		string[] nodeInfo = node.Split ('|');  		contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  		contactingNode.SetName (nodeInfo [1]);  		contactingNode.SetAlias (nodeInfo [2]);  		contactingNode.SetBrand (nodeInfo [3]);  		contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  		contactingNode.SetHexAddress (nodeInfo [5]);  		contactingNode.SetRegistered (true);  		//nodeInfo[7] is IsForeign which we don't care about  		contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  		DataSqlConnection.mutex.WaitOne ();  		nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  		DataSqlConnection.mutex.ReleaseMutex ();  		foreach (string s in nodeInfo) {  			if (s == "")  				continue;  			string[] eventData = s.Split ('|');  			Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  			DataSqlConnection.mutex.WaitOne ();  			string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (optionsData == "") {  				contactingEvent.Option1 = false;  				contactingEvent.Option2 = false;  			}  			else {  				string[] ops = optionsData.Split ('\n');  				string[] opsVals;  				opsVals = ops [0].Split ('|');  				contactingEvent.Option1 = true;  				contactingEvent.SetOption1 (opsVals [3]);  				contactingEvent.SetOption1Value (opsVals [4]);  				if (ops.Length == 3) {  					opsVals = ops [1].Split ('|');  					contactingEvent.Option2 = true;  					contactingEvent.SetOption2 (opsVals [3]);  					contactingEvent.SetOption2Value (opsVals [4]);  				}  			}  			contactingNode.AddEvent (contactingEvent);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (ret == "") {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  }  else {  	int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  	if (version != databaseVersion) {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  	}  	else {  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		d.Add (MATCH_BYTE);  		string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  		DataSqlConnection.mutex.ReleaseMutex ();  		string[] nodeInfo = node.Split ('|');  		contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  		contactingNode.SetName (nodeInfo [1]);  		contactingNode.SetAlias (nodeInfo [2]);  		contactingNode.SetBrand (nodeInfo [3]);  		contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  		contactingNode.SetHexAddress (nodeInfo [5]);  		contactingNode.SetRegistered (true);  		//nodeInfo[7] is IsForeign which we don't care about  		contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  		DataSqlConnection.mutex.WaitOne ();  		nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  		DataSqlConnection.mutex.ReleaseMutex ();  		foreach (string s in nodeInfo) {  			if (s == "")  				continue;  			string[] eventData = s.Split ('|');  			Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  			DataSqlConnection.mutex.WaitOne ();  			string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (optionsData == "") {  				contactingEvent.Option1 = false;  				contactingEvent.Option2 = false;  			}  			else {  				string[] ops = optionsData.Split ('\n');  				string[] opsVals;  				opsVals = ops [0].Split ('|');  				contactingEvent.Option1 = true;  				contactingEvent.SetOption1 (opsVals [3]);  				contactingEvent.SetOption1Value (opsVals [4]);  				if (ops.Length == 3) {  					opsVals = ops [1].Split ('|');  					contactingEvent.Option2 = true;  					contactingEvent.SetOption2 (opsVals [3]);  					contactingEvent.SetOption2Value (opsVals [4]);  				}  			}  			contactingNode.AddEvent (contactingEvent);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (ret == "") {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  }  else {  	int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  	if (version != databaseVersion) {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  	}  	else {  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		d.Add (MATCH_BYTE);  		string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  		DataSqlConnection.mutex.ReleaseMutex ();  		string[] nodeInfo = node.Split ('|');  		contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  		contactingNode.SetName (nodeInfo [1]);  		contactingNode.SetAlias (nodeInfo [2]);  		contactingNode.SetBrand (nodeInfo [3]);  		contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  		contactingNode.SetHexAddress (nodeInfo [5]);  		contactingNode.SetRegistered (true);  		//nodeInfo[7] is IsForeign which we don't care about  		contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  		DataSqlConnection.mutex.WaitOne ();  		nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  		DataSqlConnection.mutex.ReleaseMutex ();  		foreach (string s in nodeInfo) {  			if (s == "")  				continue;  			string[] eventData = s.Split ('|');  			Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  			DataSqlConnection.mutex.WaitOne ();  			string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (optionsData == "") {  				contactingEvent.Option1 = false;  				contactingEvent.Option2 = false;  			}  			else {  				string[] ops = optionsData.Split ('\n');  				string[] opsVals;  				opsVals = ops [0].Split ('|');  				contactingEvent.Option1 = true;  				contactingEvent.SetOption1 (opsVals [3]);  				contactingEvent.SetOption1Value (opsVals [4]);  				if (ops.Length == 3) {  					opsVals = ops [1].Split ('|');  					contactingEvent.Option2 = true;  					contactingEvent.SetOption2 (opsVals [3]);  					contactingEvent.SetOption2Value (opsVals [4]);  				}  			}  			contactingNode.AddEvent (contactingEvent);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (ret == "") {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  }  else {  	int databaseVersion = Convert.ToInt32 (ret.Split ('\n') [0].Split ('|') [0]);  	if (version != databaseVersion) {  		d.Add (MISMATCH_BYTE);  		contactingNode.ResetNode ();  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  		DataSqlConnection.mutex.ReleaseMutex ();  	}  	else {  		DataSqlConnection.mutex.WaitOne ();  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  		d.Add (MATCH_BYTE);  		string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  		DataSqlConnection.mutex.ReleaseMutex ();  		string[] nodeInfo = node.Split ('|');  		contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  		contactingNode.SetName (nodeInfo [1]);  		contactingNode.SetAlias (nodeInfo [2]);  		contactingNode.SetBrand (nodeInfo [3]);  		contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  		contactingNode.SetHexAddress (nodeInfo [5]);  		contactingNode.SetRegistered (true);  		//nodeInfo[7] is IsForeign which we don't care about  		contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  		DataSqlConnection.mutex.WaitOne ();  		nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  		DataSqlConnection.mutex.ReleaseMutex ();  		foreach (string s in nodeInfo) {  			if (s == "")  				continue;  			string[] eventData = s.Split ('|');  			Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  			DataSqlConnection.mutex.WaitOne ();  			string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  			DataSqlConnection.mutex.ReleaseMutex ();  			if (optionsData == "") {  				contactingEvent.Option1 = false;  				contactingEvent.Option2 = false;  			}  			else {  				string[] ops = optionsData.Split ('\n');  				string[] opsVals;  				opsVals = ops [0].Split ('|');  				contactingEvent.Option1 = true;  				contactingEvent.SetOption1 (opsVals [3]);  				contactingEvent.SetOption1Value (opsVals [4]);  				if (ops.Length == 3) {  					opsVals = ops [1].Split ('|');  					contactingEvent.Option2 = true;  					contactingEvent.SetOption2 (opsVals [3]);  					contactingEvent.SetOption2Value (opsVals [4]);  				}  			}  			contactingNode.AddEvent (contactingEvent);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (version != databaseVersion) {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  }  else {  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	d.Add (MATCH_BYTE);  	string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  	DataSqlConnection.mutex.ReleaseMutex ();  	string[] nodeInfo = node.Split ('|');  	contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  	contactingNode.SetName (nodeInfo [1]);  	contactingNode.SetAlias (nodeInfo [2]);  	contactingNode.SetBrand (nodeInfo [3]);  	contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  	contactingNode.SetHexAddress (nodeInfo [5]);  	contactingNode.SetRegistered (true);  	//nodeInfo[7] is IsForeign which we don't care about  	contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  	DataSqlConnection.mutex.WaitOne ();  	nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  	DataSqlConnection.mutex.ReleaseMutex ();  	foreach (string s in nodeInfo) {  		if (s == "")  			continue;  		string[] eventData = s.Split ('|');  		Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  		DataSqlConnection.mutex.WaitOne ();  		string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (optionsData == "") {  			contactingEvent.Option1 = false;  			contactingEvent.Option2 = false;  		}  		else {  			string[] ops = optionsData.Split ('\n');  			string[] opsVals;  			opsVals = ops [0].Split ('|');  			contactingEvent.Option1 = true;  			contactingEvent.SetOption1 (opsVals [3]);  			contactingEvent.SetOption1Value (opsVals [4]);  			if (ops.Length == 3) {  				opsVals = ops [1].Split ('|');  				contactingEvent.Option2 = true;  				contactingEvent.SetOption2 (opsVals [3]);  				contactingEvent.SetOption2Value (opsVals [4]);  			}  		}  		contactingNode.AddEvent (contactingEvent);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (version != databaseVersion) {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  }  else {  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	d.Add (MATCH_BYTE);  	string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  	DataSqlConnection.mutex.ReleaseMutex ();  	string[] nodeInfo = node.Split ('|');  	contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  	contactingNode.SetName (nodeInfo [1]);  	contactingNode.SetAlias (nodeInfo [2]);  	contactingNode.SetBrand (nodeInfo [3]);  	contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  	contactingNode.SetHexAddress (nodeInfo [5]);  	contactingNode.SetRegistered (true);  	//nodeInfo[7] is IsForeign which we don't care about  	contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  	DataSqlConnection.mutex.WaitOne ();  	nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  	DataSqlConnection.mutex.ReleaseMutex ();  	foreach (string s in nodeInfo) {  		if (s == "")  			continue;  		string[] eventData = s.Split ('|');  		Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  		DataSqlConnection.mutex.WaitOne ();  		string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (optionsData == "") {  			contactingEvent.Option1 = false;  			contactingEvent.Option2 = false;  		}  		else {  			string[] ops = optionsData.Split ('\n');  			string[] opsVals;  			opsVals = ops [0].Split ('|');  			contactingEvent.Option1 = true;  			contactingEvent.SetOption1 (opsVals [3]);  			contactingEvent.SetOption1Value (opsVals [4]);  			if (ops.Length == 3) {  				opsVals = ops [1].Split ('|');  				contactingEvent.Option2 = true;  				contactingEvent.SetOption2 (opsVals [3]);  				contactingEvent.SetOption2Value (opsVals [4]);  			}  		}  		contactingNode.AddEvent (contactingEvent);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (version != databaseVersion) {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  }  else {  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	d.Add (MATCH_BYTE);  	string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  	DataSqlConnection.mutex.ReleaseMutex ();  	string[] nodeInfo = node.Split ('|');  	contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  	contactingNode.SetName (nodeInfo [1]);  	contactingNode.SetAlias (nodeInfo [2]);  	contactingNode.SetBrand (nodeInfo [3]);  	contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  	contactingNode.SetHexAddress (nodeInfo [5]);  	contactingNode.SetRegistered (true);  	//nodeInfo[7] is IsForeign which we don't care about  	contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  	DataSqlConnection.mutex.WaitOne ();  	nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  	DataSqlConnection.mutex.ReleaseMutex ();  	foreach (string s in nodeInfo) {  		if (s == "")  			continue;  		string[] eventData = s.Split ('|');  		Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  		DataSqlConnection.mutex.WaitOne ();  		string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (optionsData == "") {  			contactingEvent.Option1 = false;  			contactingEvent.Option2 = false;  		}  		else {  			string[] ops = optionsData.Split ('\n');  			string[] opsVals;  			opsVals = ops [0].Split ('|');  			contactingEvent.Option1 = true;  			contactingEvent.SetOption1 (opsVals [3]);  			contactingEvent.SetOption1Value (opsVals [4]);  			if (ops.Length == 3) {  				opsVals = ops [1].Split ('|');  				contactingEvent.Option2 = true;  				contactingEvent.SetOption2 (opsVals [3]);  				contactingEvent.SetOption2Value (opsVals [4]);  			}  		}  		contactingNode.AddEvent (contactingEvent);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (version != databaseVersion) {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  }  else {  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	d.Add (MATCH_BYTE);  	string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  	DataSqlConnection.mutex.ReleaseMutex ();  	string[] nodeInfo = node.Split ('|');  	contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  	contactingNode.SetName (nodeInfo [1]);  	contactingNode.SetAlias (nodeInfo [2]);  	contactingNode.SetBrand (nodeInfo [3]);  	contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  	contactingNode.SetHexAddress (nodeInfo [5]);  	contactingNode.SetRegistered (true);  	//nodeInfo[7] is IsForeign which we don't care about  	contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  	DataSqlConnection.mutex.WaitOne ();  	nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  	DataSqlConnection.mutex.ReleaseMutex ();  	foreach (string s in nodeInfo) {  		if (s == "")  			continue;  		string[] eventData = s.Split ('|');  		Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  		DataSqlConnection.mutex.WaitOne ();  		string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (optionsData == "") {  			contactingEvent.Option1 = false;  			contactingEvent.Option2 = false;  		}  		else {  			string[] ops = optionsData.Split ('\n');  			string[] opsVals;  			opsVals = ops [0].Split ('|');  			contactingEvent.Option1 = true;  			contactingEvent.SetOption1 (opsVals [3]);  			contactingEvent.SetOption1Value (opsVals [4]);  			if (ops.Length == 3) {  				opsVals = ops [1].Split ('|');  				contactingEvent.Option2 = true;  				contactingEvent.SetOption2 (opsVals [3]);  				contactingEvent.SetOption2Value (opsVals [4]);  			}  		}  		contactingNode.AddEvent (contactingEvent);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (version != databaseVersion) {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  }  else {  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	d.Add (MATCH_BYTE);  	string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  	DataSqlConnection.mutex.ReleaseMutex ();  	string[] nodeInfo = node.Split ('|');  	contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  	contactingNode.SetName (nodeInfo [1]);  	contactingNode.SetAlias (nodeInfo [2]);  	contactingNode.SetBrand (nodeInfo [3]);  	contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  	contactingNode.SetHexAddress (nodeInfo [5]);  	contactingNode.SetRegistered (true);  	//nodeInfo[7] is IsForeign which we don't care about  	contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  	DataSqlConnection.mutex.WaitOne ();  	nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  	DataSqlConnection.mutex.ReleaseMutex ();  	foreach (string s in nodeInfo) {  		if (s == "")  			continue;  		string[] eventData = s.Split ('|');  		Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  		DataSqlConnection.mutex.WaitOne ();  		string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (optionsData == "") {  			contactingEvent.Option1 = false;  			contactingEvent.Option2 = false;  		}  		else {  			string[] ops = optionsData.Split ('\n');  			string[] opsVals;  			opsVals = ops [0].Split ('|');  			contactingEvent.Option1 = true;  			contactingEvent.SetOption1 (opsVals [3]);  			contactingEvent.SetOption1Value (opsVals [4]);  			if (ops.Length == 3) {  				opsVals = ops [1].Split ('|');  				contactingEvent.Option2 = true;  				contactingEvent.SetOption2 (opsVals [3]);  				contactingEvent.SetOption2Value (opsVals [4]);  			}  		}  		contactingNode.AddEvent (contactingEvent);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (version != databaseVersion) {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  }  else {  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	d.Add (MATCH_BYTE);  	string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  	DataSqlConnection.mutex.ReleaseMutex ();  	string[] nodeInfo = node.Split ('|');  	contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  	contactingNode.SetName (nodeInfo [1]);  	contactingNode.SetAlias (nodeInfo [2]);  	contactingNode.SetBrand (nodeInfo [3]);  	contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  	contactingNode.SetHexAddress (nodeInfo [5]);  	contactingNode.SetRegistered (true);  	//nodeInfo[7] is IsForeign which we don't care about  	contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  	DataSqlConnection.mutex.WaitOne ();  	nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  	DataSqlConnection.mutex.ReleaseMutex ();  	foreach (string s in nodeInfo) {  		if (s == "")  			continue;  		string[] eventData = s.Split ('|');  		Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  		DataSqlConnection.mutex.WaitOne ();  		string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (optionsData == "") {  			contactingEvent.Option1 = false;  			contactingEvent.Option2 = false;  		}  		else {  			string[] ops = optionsData.Split ('\n');  			string[] opsVals;  			opsVals = ops [0].Split ('|');  			contactingEvent.Option1 = true;  			contactingEvent.SetOption1 (opsVals [3]);  			contactingEvent.SetOption1Value (opsVals [4]);  			if (ops.Length == 3) {  				opsVals = ops [1].Split ('|');  				contactingEvent.Option2 = true;  				contactingEvent.SetOption2 (opsVals [3]);  				contactingEvent.SetOption2Value (opsVals [4]);  			}  		}  		contactingNode.AddEvent (contactingEvent);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (version != databaseVersion) {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  }  else {  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	d.Add (MATCH_BYTE);  	string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  	DataSqlConnection.mutex.ReleaseMutex ();  	string[] nodeInfo = node.Split ('|');  	contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  	contactingNode.SetName (nodeInfo [1]);  	contactingNode.SetAlias (nodeInfo [2]);  	contactingNode.SetBrand (nodeInfo [3]);  	contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  	contactingNode.SetHexAddress (nodeInfo [5]);  	contactingNode.SetRegistered (true);  	//nodeInfo[7] is IsForeign which we don't care about  	contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  	DataSqlConnection.mutex.WaitOne ();  	nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  	DataSqlConnection.mutex.ReleaseMutex ();  	foreach (string s in nodeInfo) {  		if (s == "")  			continue;  		string[] eventData = s.Split ('|');  		Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  		DataSqlConnection.mutex.WaitOne ();  		string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (optionsData == "") {  			contactingEvent.Option1 = false;  			contactingEvent.Option2 = false;  		}  		else {  			string[] ops = optionsData.Split ('\n');  			string[] opsVals;  			opsVals = ops [0].Split ('|');  			contactingEvent.Option1 = true;  			contactingEvent.SetOption1 (opsVals [3]);  			contactingEvent.SetOption1Value (opsVals [4]);  			if (ops.Length == 3) {  				opsVals = ops [1].Split ('|');  				contactingEvent.Option2 = true;  				contactingEvent.SetOption2 (opsVals [3]);  				contactingEvent.SetOption2Value (opsVals [4]);  			}  		}  		contactingNode.AddEvent (contactingEvent);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (version != databaseVersion) {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  }  else {  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	d.Add (MATCH_BYTE);  	string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  	DataSqlConnection.mutex.ReleaseMutex ();  	string[] nodeInfo = node.Split ('|');  	contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  	contactingNode.SetName (nodeInfo [1]);  	contactingNode.SetAlias (nodeInfo [2]);  	contactingNode.SetBrand (nodeInfo [3]);  	contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  	contactingNode.SetHexAddress (nodeInfo [5]);  	contactingNode.SetRegistered (true);  	//nodeInfo[7] is IsForeign which we don't care about  	contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  	DataSqlConnection.mutex.WaitOne ();  	nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  	DataSqlConnection.mutex.ReleaseMutex ();  	foreach (string s in nodeInfo) {  		if (s == "")  			continue;  		string[] eventData = s.Split ('|');  		Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  		DataSqlConnection.mutex.WaitOne ();  		string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (optionsData == "") {  			contactingEvent.Option1 = false;  			contactingEvent.Option2 = false;  		}  		else {  			string[] ops = optionsData.Split ('\n');  			string[] opsVals;  			opsVals = ops [0].Split ('|');  			contactingEvent.Option1 = true;  			contactingEvent.SetOption1 (opsVals [3]);  			contactingEvent.SetOption1Value (opsVals [4]);  			if (ops.Length == 3) {  				opsVals = ops [1].Split ('|');  				contactingEvent.Option2 = true;  				contactingEvent.SetOption2 (opsVals [3]);  				contactingEvent.SetOption2Value (opsVals [4]);  			}  		}  		contactingNode.AddEvent (contactingEvent);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (version != databaseVersion) {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  }  else {  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	d.Add (MATCH_BYTE);  	string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  	DataSqlConnection.mutex.ReleaseMutex ();  	string[] nodeInfo = node.Split ('|');  	contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  	contactingNode.SetName (nodeInfo [1]);  	contactingNode.SetAlias (nodeInfo [2]);  	contactingNode.SetBrand (nodeInfo [3]);  	contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  	contactingNode.SetHexAddress (nodeInfo [5]);  	contactingNode.SetRegistered (true);  	//nodeInfo[7] is IsForeign which we don't care about  	contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  	DataSqlConnection.mutex.WaitOne ();  	nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  	DataSqlConnection.mutex.ReleaseMutex ();  	foreach (string s in nodeInfo) {  		if (s == "")  			continue;  		string[] eventData = s.Split ('|');  		Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  		DataSqlConnection.mutex.WaitOne ();  		string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (optionsData == "") {  			contactingEvent.Option1 = false;  			contactingEvent.Option2 = false;  		}  		else {  			string[] ops = optionsData.Split ('\n');  			string[] opsVals;  			opsVals = ops [0].Split ('|');  			contactingEvent.Option1 = true;  			contactingEvent.SetOption1 (opsVals [3]);  			contactingEvent.SetOption1Value (opsVals [4]);  			if (ops.Length == 3) {  				opsVals = ops [1].Split ('|');  				contactingEvent.Option2 = true;  				contactingEvent.SetOption2 (opsVals [3]);  				contactingEvent.SetOption2Value (opsVals [4]);  			}  		}  		contactingNode.AddEvent (contactingEvent);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (version != databaseVersion) {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  }  else {  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	d.Add (MATCH_BYTE);  	string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  	DataSqlConnection.mutex.ReleaseMutex ();  	string[] nodeInfo = node.Split ('|');  	contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  	contactingNode.SetName (nodeInfo [1]);  	contactingNode.SetAlias (nodeInfo [2]);  	contactingNode.SetBrand (nodeInfo [3]);  	contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  	contactingNode.SetHexAddress (nodeInfo [5]);  	contactingNode.SetRegistered (true);  	//nodeInfo[7] is IsForeign which we don't care about  	contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  	DataSqlConnection.mutex.WaitOne ();  	nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  	DataSqlConnection.mutex.ReleaseMutex ();  	foreach (string s in nodeInfo) {  		if (s == "")  			continue;  		string[] eventData = s.Split ('|');  		Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  		DataSqlConnection.mutex.WaitOne ();  		string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (optionsData == "") {  			contactingEvent.Option1 = false;  			contactingEvent.Option2 = false;  		}  		else {  			string[] ops = optionsData.Split ('\n');  			string[] opsVals;  			opsVals = ops [0].Split ('|');  			contactingEvent.Option1 = true;  			contactingEvent.SetOption1 (opsVals [3]);  			contactingEvent.SetOption1Value (opsVals [4]);  			if (ops.Length == 3) {  				opsVals = ops [1].Split ('|');  				contactingEvent.Option2 = true;  				contactingEvent.SetOption2 (opsVals [3]);  				contactingEvent.SetOption2Value (opsVals [4]);  			}  		}  		contactingNode.AddEvent (contactingEvent);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (version != databaseVersion) {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  }  else {  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	d.Add (MATCH_BYTE);  	string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  	DataSqlConnection.mutex.ReleaseMutex ();  	string[] nodeInfo = node.Split ('|');  	contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  	contactingNode.SetName (nodeInfo [1]);  	contactingNode.SetAlias (nodeInfo [2]);  	contactingNode.SetBrand (nodeInfo [3]);  	contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  	contactingNode.SetHexAddress (nodeInfo [5]);  	contactingNode.SetRegistered (true);  	//nodeInfo[7] is IsForeign which we don't care about  	contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  	DataSqlConnection.mutex.WaitOne ();  	nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  	DataSqlConnection.mutex.ReleaseMutex ();  	foreach (string s in nodeInfo) {  		if (s == "")  			continue;  		string[] eventData = s.Split ('|');  		Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  		DataSqlConnection.mutex.WaitOne ();  		string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (optionsData == "") {  			contactingEvent.Option1 = false;  			contactingEvent.Option2 = false;  		}  		else {  			string[] ops = optionsData.Split ('\n');  			string[] opsVals;  			opsVals = ops [0].Split ('|');  			contactingEvent.Option1 = true;  			contactingEvent.SetOption1 (opsVals [3]);  			contactingEvent.SetOption1Value (opsVals [4]);  			if (ops.Length == 3) {  				opsVals = ops [1].Split ('|');  				contactingEvent.Option2 = true;  				contactingEvent.SetOption2 (opsVals [3]);  				contactingEvent.SetOption2Value (opsVals [4]);  			}  		}  		contactingNode.AddEvent (contactingEvent);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (version != databaseVersion) {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  }  else {  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	d.Add (MATCH_BYTE);  	string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  	DataSqlConnection.mutex.ReleaseMutex ();  	string[] nodeInfo = node.Split ('|');  	contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  	contactingNode.SetName (nodeInfo [1]);  	contactingNode.SetAlias (nodeInfo [2]);  	contactingNode.SetBrand (nodeInfo [3]);  	contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  	contactingNode.SetHexAddress (nodeInfo [5]);  	contactingNode.SetRegistered (true);  	//nodeInfo[7] is IsForeign which we don't care about  	contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  	DataSqlConnection.mutex.WaitOne ();  	nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  	DataSqlConnection.mutex.ReleaseMutex ();  	foreach (string s in nodeInfo) {  		if (s == "")  			continue;  		string[] eventData = s.Split ('|');  		Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  		DataSqlConnection.mutex.WaitOne ();  		string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (optionsData == "") {  			contactingEvent.Option1 = false;  			contactingEvent.Option2 = false;  		}  		else {  			string[] ops = optionsData.Split ('\n');  			string[] opsVals;  			opsVals = ops [0].Split ('|');  			contactingEvent.Option1 = true;  			contactingEvent.SetOption1 (opsVals [3]);  			contactingEvent.SetOption1Value (opsVals [4]);  			if (ops.Length == 3) {  				opsVals = ops [1].Split ('|');  				contactingEvent.Option2 = true;  				contactingEvent.SetOption2 (opsVals [3]);  				contactingEvent.SetOption2Value (opsVals [4]);  			}  		}  		contactingNode.AddEvent (contactingEvent);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (version != databaseVersion) {  	d.Add (MISMATCH_BYTE);  	contactingNode.ResetNode ();  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Version = {0} WHERE ForeignAddress = {1}"' version' contactingNode.GetAddress ()));  	DataSqlConnection.mutex.ReleaseMutex ();  }  else {  	DataSqlConnection.mutex.WaitOne ();  	DataSqlConnection.CommandNonQuery (String.Format ("UPDATE nodes SET Registered = 1 WHERE ForeignAddress = {0}"' contactingNode.GetAddress ()));  	d.Add (MATCH_BYTE);  	string node = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM nodes WHERE ForeignAddress = {0}"' contactingNode.GetAddress ())).Split ('\n') [0];  	DataSqlConnection.mutex.ReleaseMutex ();  	string[] nodeInfo = node.Split ('|');  	contactingNode.SetNodeID (Convert.ToInt32 (nodeInfo [0]));  	contactingNode.SetName (nodeInfo [1]);  	contactingNode.SetAlias (nodeInfo [2]);  	contactingNode.SetBrand (nodeInfo [3]);  	contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  	contactingNode.SetHexAddress (nodeInfo [5]);  	contactingNode.SetRegistered (true);  	//nodeInfo[7] is IsForeign which we don't care about  	contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  	DataSqlConnection.mutex.WaitOne ();  	nodeInfo = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM events WHERE NodeId = {0}"' contactingNode.GetNodeID ())).Split ('\n');  	DataSqlConnection.mutex.ReleaseMutex ();  	foreach (string s in nodeInfo) {  		if (s == "")  			continue;  		string[] eventData = s.Split ('|');  		Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  		DataSqlConnection.mutex.WaitOne ();  		string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  		DataSqlConnection.mutex.ReleaseMutex ();  		if (optionsData == "") {  			contactingEvent.Option1 = false;  			contactingEvent.Option2 = false;  		}  		else {  			string[] ops = optionsData.Split ('\n');  			string[] opsVals;  			opsVals = ops [0].Split ('|');  			contactingEvent.Option1 = true;  			contactingEvent.SetOption1 (opsVals [3]);  			contactingEvent.SetOption1Value (opsVals [4]);  			if (ops.Length == 3) {  				opsVals = ops [1].Split ('|');  				contactingEvent.Option2 = true;  				contactingEvent.SetOption2 (opsVals [3]);  				contactingEvent.SetOption2Value (opsVals [4]);  			}  		}  		contactingNode.AddEvent (contactingEvent);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: contactingNode.SetAlias (nodeInfo [2]);  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: contactingNode.SetBrand (nodeInfo [3]);  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: contactingNode.SetAddress (Convert.ToUInt64 (nodeInfo [4]));  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: contactingNode.SetHexAddress (nodeInfo [5]);  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: contactingNode.SetVersion (Convert.ToByte (nodeInfo [8]));  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: foreach (string s in nodeInfo) {  	if (s == "")  		continue;  	string[] eventData = s.Split ('|');  	Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  	DataSqlConnection.mutex.WaitOne ();  	string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (optionsData == "") {  		contactingEvent.Option1 = false;  		contactingEvent.Option2 = false;  	}  	else {  		string[] ops = optionsData.Split ('\n');  		string[] opsVals;  		opsVals = ops [0].Split ('|');  		contactingEvent.Option1 = true;  		contactingEvent.SetOption1 (opsVals [3]);  		contactingEvent.SetOption1Value (opsVals [4]);  		if (ops.Length == 3) {  			opsVals = ops [1].Split ('|');  			contactingEvent.Option2 = true;  			contactingEvent.SetOption2 (opsVals [3]);  			contactingEvent.SetOption2Value (opsVals [4]);  		}  	}  	contactingNode.AddEvent (contactingEvent);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: foreach (string s in nodeInfo) {  	if (s == "")  		continue;  	string[] eventData = s.Split ('|');  	Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  	DataSqlConnection.mutex.WaitOne ();  	string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (optionsData == "") {  		contactingEvent.Option1 = false;  		contactingEvent.Option2 = false;  	}  	else {  		string[] ops = optionsData.Split ('\n');  		string[] opsVals;  		opsVals = ops [0].Split ('|');  		contactingEvent.Option1 = true;  		contactingEvent.SetOption1 (opsVals [3]);  		contactingEvent.SetOption1Value (opsVals [4]);  		if (ops.Length == 3) {  			opsVals = ops [1].Split ('|');  			contactingEvent.Option2 = true;  			contactingEvent.SetOption2 (opsVals [3]);  			contactingEvent.SetOption2Value (opsVals [4]);  		}  	}  	contactingNode.AddEvent (contactingEvent);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: foreach (string s in nodeInfo) {  	if (s == "")  		continue;  	string[] eventData = s.Split ('|');  	Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  	DataSqlConnection.mutex.WaitOne ();  	string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (optionsData == "") {  		contactingEvent.Option1 = false;  		contactingEvent.Option2 = false;  	}  	else {  		string[] ops = optionsData.Split ('\n');  		string[] opsVals;  		opsVals = ops [0].Split ('|');  		contactingEvent.Option1 = true;  		contactingEvent.SetOption1 (opsVals [3]);  		contactingEvent.SetOption1Value (opsVals [4]);  		if (ops.Length == 3) {  			opsVals = ops [1].Split ('|');  			contactingEvent.Option2 = true;  			contactingEvent.SetOption2 (opsVals [3]);  			contactingEvent.SetOption2Value (opsVals [4]);  		}  	}  	contactingNode.AddEvent (contactingEvent);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: foreach (string s in nodeInfo) {  	if (s == "")  		continue;  	string[] eventData = s.Split ('|');  	Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  	DataSqlConnection.mutex.WaitOne ();  	string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (optionsData == "") {  		contactingEvent.Option1 = false;  		contactingEvent.Option2 = false;  	}  	else {  		string[] ops = optionsData.Split ('\n');  		string[] opsVals;  		opsVals = ops [0].Split ('|');  		contactingEvent.Option1 = true;  		contactingEvent.SetOption1 (opsVals [3]);  		contactingEvent.SetOption1Value (opsVals [4]);  		if (ops.Length == 3) {  			opsVals = ops [1].Split ('|');  			contactingEvent.Option2 = true;  			contactingEvent.SetOption2 (opsVals [3]);  			contactingEvent.SetOption2Value (opsVals [4]);  		}  	}  	contactingNode.AddEvent (contactingEvent);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: foreach (string s in nodeInfo) {  	if (s == "")  		continue;  	string[] eventData = s.Split ('|');  	Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  	DataSqlConnection.mutex.WaitOne ();  	string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (optionsData == "") {  		contactingEvent.Option1 = false;  		contactingEvent.Option2 = false;  	}  	else {  		string[] ops = optionsData.Split ('\n');  		string[] opsVals;  		opsVals = ops [0].Split ('|');  		contactingEvent.Option1 = true;  		contactingEvent.SetOption1 (opsVals [3]);  		contactingEvent.SetOption1Value (opsVals [4]);  		if (ops.Length == 3) {  			opsVals = ops [1].Split ('|');  			contactingEvent.Option2 = true;  			contactingEvent.SetOption2 (opsVals [3]);  			contactingEvent.SetOption2Value (opsVals [4]);  		}  	}  	contactingNode.AddEvent (contactingEvent);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: foreach (string s in nodeInfo) {  	if (s == "")  		continue;  	string[] eventData = s.Split ('|');  	Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  	DataSqlConnection.mutex.WaitOne ();  	string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (optionsData == "") {  		contactingEvent.Option1 = false;  		contactingEvent.Option2 = false;  	}  	else {  		string[] ops = optionsData.Split ('\n');  		string[] opsVals;  		opsVals = ops [0].Split ('|');  		contactingEvent.Option1 = true;  		contactingEvent.SetOption1 (opsVals [3]);  		contactingEvent.SetOption1Value (opsVals [4]);  		if (ops.Length == 3) {  			opsVals = ops [1].Split ('|');  			contactingEvent.Option2 = true;  			contactingEvent.SetOption2 (opsVals [3]);  			contactingEvent.SetOption2Value (opsVals [4]);  		}  	}  	contactingNode.AddEvent (contactingEvent);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: foreach (string s in nodeInfo) {  	if (s == "")  		continue;  	string[] eventData = s.Split ('|');  	Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  	DataSqlConnection.mutex.WaitOne ();  	string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (optionsData == "") {  		contactingEvent.Option1 = false;  		contactingEvent.Option2 = false;  	}  	else {  		string[] ops = optionsData.Split ('\n');  		string[] opsVals;  		opsVals = ops [0].Split ('|');  		contactingEvent.Option1 = true;  		contactingEvent.SetOption1 (opsVals [3]);  		contactingEvent.SetOption1Value (opsVals [4]);  		if (ops.Length == 3) {  			opsVals = ops [1].Split ('|');  			contactingEvent.Option2 = true;  			contactingEvent.SetOption2 (opsVals [3]);  			contactingEvent.SetOption2Value (opsVals [4]);  		}  	}  	contactingNode.AddEvent (contactingEvent);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: foreach (string s in nodeInfo) {  	if (s == "")  		continue;  	string[] eventData = s.Split ('|');  	Event contactingEvent = new Event (eventData [2]' eventData [3]' Convert.ToInt32 (eventData [1])' Convert.ToInt32 (eventData [4]) == 1);  	DataSqlConnection.mutex.WaitOne ();  	string optionsData = DataSqlConnection.CommandReturnLine (String.Format ("SELECT * FROM options WHERE NodeID = {0} AND EventID = {1}"' contactingNode.GetNodeID ()' contactingEvent.ID));  	DataSqlConnection.mutex.ReleaseMutex ();  	if (optionsData == "") {  		contactingEvent.Option1 = false;  		contactingEvent.Option2 = false;  	}  	else {  		string[] ops = optionsData.Split ('\n');  		string[] opsVals;  		opsVals = ops [0].Split ('|');  		contactingEvent.Option1 = true;  		contactingEvent.SetOption1 (opsVals [3]);  		contactingEvent.SetOption1Value (opsVals [4]);  		if (ops.Length == 3) {  			opsVals = ops [1].Split ('|');  			contactingEvent.Option2 = true;  			contactingEvent.SetOption2 (opsVals [3]);  			contactingEvent.SetOption2Value (opsVals [4]);  		}  	}  	contactingNode.AddEvent (contactingEvent);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (optionsData == "") {  	contactingEvent.Option1 = false;  	contactingEvent.Option2 = false;  }  else {  	string[] ops = optionsData.Split ('\n');  	string[] opsVals;  	opsVals = ops [0].Split ('|');  	contactingEvent.Option1 = true;  	contactingEvent.SetOption1 (opsVals [3]);  	contactingEvent.SetOption1Value (opsVals [4]);  	if (ops.Length == 3) {  		opsVals = ops [1].Split ('|');  		contactingEvent.Option2 = true;  		contactingEvent.SetOption2 (opsVals [3]);  		contactingEvent.SetOption2Value (opsVals [4]);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (optionsData == "") {  	contactingEvent.Option1 = false;  	contactingEvent.Option2 = false;  }  else {  	string[] ops = optionsData.Split ('\n');  	string[] opsVals;  	opsVals = ops [0].Split ('|');  	contactingEvent.Option1 = true;  	contactingEvent.SetOption1 (opsVals [3]);  	contactingEvent.SetOption1Value (opsVals [4]);  	if (ops.Length == 3) {  		opsVals = ops [1].Split ('|');  		contactingEvent.Option2 = true;  		contactingEvent.SetOption2 (opsVals [3]);  		contactingEvent.SetOption2Value (opsVals [4]);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (optionsData == "") {  	contactingEvent.Option1 = false;  	contactingEvent.Option2 = false;  }  else {  	string[] ops = optionsData.Split ('\n');  	string[] opsVals;  	opsVals = ops [0].Split ('|');  	contactingEvent.Option1 = true;  	contactingEvent.SetOption1 (opsVals [3]);  	contactingEvent.SetOption1Value (opsVals [4]);  	if (ops.Length == 3) {  		opsVals = ops [1].Split ('|');  		contactingEvent.Option2 = true;  		contactingEvent.SetOption2 (opsVals [3]);  		contactingEvent.SetOption2Value (opsVals [4]);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (optionsData == "") {  	contactingEvent.Option1 = false;  	contactingEvent.Option2 = false;  }  else {  	string[] ops = optionsData.Split ('\n');  	string[] opsVals;  	opsVals = ops [0].Split ('|');  	contactingEvent.Option1 = true;  	contactingEvent.SetOption1 (opsVals [3]);  	contactingEvent.SetOption1Value (opsVals [4]);  	if (ops.Length == 3) {  		opsVals = ops [1].Split ('|');  		contactingEvent.Option2 = true;  		contactingEvent.SetOption2 (opsVals [3]);  		contactingEvent.SetOption2Value (opsVals [4]);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (optionsData == "") {  	contactingEvent.Option1 = false;  	contactingEvent.Option2 = false;  }  else {  	string[] ops = optionsData.Split ('\n');  	string[] opsVals;  	opsVals = ops [0].Split ('|');  	contactingEvent.Option1 = true;  	contactingEvent.SetOption1 (opsVals [3]);  	contactingEvent.SetOption1Value (opsVals [4]);  	if (ops.Length == 3) {  		opsVals = ops [1].Split ('|');  		contactingEvent.Option2 = true;  		contactingEvent.SetOption2 (opsVals [3]);  		contactingEvent.SetOption2Value (opsVals [4]);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: contactingEvent.SetOption1 (opsVals [3]);  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: contactingEvent.SetOption1Value (opsVals [4]);  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (ops.Length == 3) {  	opsVals = ops [1].Split ('|');  	contactingEvent.Option2 = true;  	contactingEvent.SetOption2 (opsVals [3]);  	contactingEvent.SetOption2Value (opsVals [4]);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (ops.Length == 3) {  	opsVals = ops [1].Split ('|');  	contactingEvent.Option2 = true;  	contactingEvent.SetOption2 (opsVals [3]);  	contactingEvent.SetOption2Value (opsVals [4]);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: if (ops.Length == 3) {  	opsVals = ops [1].Split ('|');  	contactingEvent.Option2 = true;  	contactingEvent.SetOption2 (opsVals [3]);  	contactingEvent.SetOption2Value (opsVals [4]);  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: contactingEvent.SetOption2 (opsVals [3]);  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,Read,The following statement contains a magic number: contactingEvent.SetOption2Value (opsVals [4]);  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The following statement contains a magic number: if (chainData != "") {  	string[] chainInfo = chainData.Split ('\n');  	foreach (string thisChain in chainInfo) {  		if (thisChain == "")  			continue;  		string[] chain = thisChain.Split ('|');  		int throwNodeID = Convert.ToInt32 (chain [0]);  		int throwEventID = Convert.ToInt32 (chain [1]);  		string throwOp1 = chain [2];  		string throwOp2 = chain [3];  		int throwRemaining = Convert.ToInt32 (chain [4]);  		if (throwRemaining == 1) {  			DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM event_chains WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID));  		}  		else if (throwRemaining > 1) {  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE event_chains SET ThrowRemaining = ThrowRemaining - 1 WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID));  		}  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' throwNodeID));  		if (ret != "") {  			XbeeTx64Bit transmit;  			string forAddr = ret.Split ('|') [0];  			string reg = ret.Split ('|') [1];  			if (reg != "1")  				continue;  			ulong addr = Convert.ToUInt64 (forAddr);  			List<byte> data = new List<byte> ();  			data.Add (TRIGGER_BYTE);  			byte id1 = (byte)((throwEventID & 0x300) >> 8);  			byte id2 = (byte)(throwEventID & 0xFF);  			data.Add (id1);  			data.Add (id2);  			if (throwOp1 != "") {  				data.Add ((byte)throwOp1.Length);  				foreach (char c in throwOp1) {  					data.Add ((byte)c);  				}  			}  			if (throwOp2 != "") {  				data.Add ((byte)throwOp2.Length);  				foreach (char c in throwOp2) {  					data.Add ((byte)c);  				}  			}  			transmit = new XbeeTx64Bit (data' addr);  			transmit.Send (_serialPort);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The following statement contains a magic number: if (chainData != "") {  	string[] chainInfo = chainData.Split ('\n');  	foreach (string thisChain in chainInfo) {  		if (thisChain == "")  			continue;  		string[] chain = thisChain.Split ('|');  		int throwNodeID = Convert.ToInt32 (chain [0]);  		int throwEventID = Convert.ToInt32 (chain [1]);  		string throwOp1 = chain [2];  		string throwOp2 = chain [3];  		int throwRemaining = Convert.ToInt32 (chain [4]);  		if (throwRemaining == 1) {  			DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM event_chains WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID));  		}  		else if (throwRemaining > 1) {  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE event_chains SET ThrowRemaining = ThrowRemaining - 1 WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID));  		}  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' throwNodeID));  		if (ret != "") {  			XbeeTx64Bit transmit;  			string forAddr = ret.Split ('|') [0];  			string reg = ret.Split ('|') [1];  			if (reg != "1")  				continue;  			ulong addr = Convert.ToUInt64 (forAddr);  			List<byte> data = new List<byte> ();  			data.Add (TRIGGER_BYTE);  			byte id1 = (byte)((throwEventID & 0x300) >> 8);  			byte id2 = (byte)(throwEventID & 0xFF);  			data.Add (id1);  			data.Add (id2);  			if (throwOp1 != "") {  				data.Add ((byte)throwOp1.Length);  				foreach (char c in throwOp1) {  					data.Add ((byte)c);  				}  			}  			if (throwOp2 != "") {  				data.Add ((byte)throwOp2.Length);  				foreach (char c in throwOp2) {  					data.Add ((byte)c);  				}  			}  			transmit = new XbeeTx64Bit (data' addr);  			transmit.Send (_serialPort);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The following statement contains a magic number: if (chainData != "") {  	string[] chainInfo = chainData.Split ('\n');  	foreach (string thisChain in chainInfo) {  		if (thisChain == "")  			continue;  		string[] chain = thisChain.Split ('|');  		int throwNodeID = Convert.ToInt32 (chain [0]);  		int throwEventID = Convert.ToInt32 (chain [1]);  		string throwOp1 = chain [2];  		string throwOp2 = chain [3];  		int throwRemaining = Convert.ToInt32 (chain [4]);  		if (throwRemaining == 1) {  			DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM event_chains WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID));  		}  		else if (throwRemaining > 1) {  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE event_chains SET ThrowRemaining = ThrowRemaining - 1 WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID));  		}  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' throwNodeID));  		if (ret != "") {  			XbeeTx64Bit transmit;  			string forAddr = ret.Split ('|') [0];  			string reg = ret.Split ('|') [1];  			if (reg != "1")  				continue;  			ulong addr = Convert.ToUInt64 (forAddr);  			List<byte> data = new List<byte> ();  			data.Add (TRIGGER_BYTE);  			byte id1 = (byte)((throwEventID & 0x300) >> 8);  			byte id2 = (byte)(throwEventID & 0xFF);  			data.Add (id1);  			data.Add (id2);  			if (throwOp1 != "") {  				data.Add ((byte)throwOp1.Length);  				foreach (char c in throwOp1) {  					data.Add ((byte)c);  				}  			}  			if (throwOp2 != "") {  				data.Add ((byte)throwOp2.Length);  				foreach (char c in throwOp2) {  					data.Add ((byte)c);  				}  			}  			transmit = new XbeeTx64Bit (data' addr);  			transmit.Send (_serialPort);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The following statement contains a magic number: if (chainData != "") {  	string[] chainInfo = chainData.Split ('\n');  	foreach (string thisChain in chainInfo) {  		if (thisChain == "")  			continue;  		string[] chain = thisChain.Split ('|');  		int throwNodeID = Convert.ToInt32 (chain [0]);  		int throwEventID = Convert.ToInt32 (chain [1]);  		string throwOp1 = chain [2];  		string throwOp2 = chain [3];  		int throwRemaining = Convert.ToInt32 (chain [4]);  		if (throwRemaining == 1) {  			DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM event_chains WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID));  		}  		else if (throwRemaining > 1) {  			DataSqlConnection.CommandNonQuery (String.Format ("UPDATE event_chains SET ThrowRemaining = ThrowRemaining - 1 WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID));  		}  		string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' throwNodeID));  		if (ret != "") {  			XbeeTx64Bit transmit;  			string forAddr = ret.Split ('|') [0];  			string reg = ret.Split ('|') [1];  			if (reg != "1")  				continue;  			ulong addr = Convert.ToUInt64 (forAddr);  			List<byte> data = new List<byte> ();  			data.Add (TRIGGER_BYTE);  			byte id1 = (byte)((throwEventID & 0x300) >> 8);  			byte id2 = (byte)(throwEventID & 0xFF);  			data.Add (id1);  			data.Add (id2);  			if (throwOp1 != "") {  				data.Add ((byte)throwOp1.Length);  				foreach (char c in throwOp1) {  					data.Add ((byte)c);  				}  			}  			if (throwOp2 != "") {  				data.Add ((byte)throwOp2.Length);  				foreach (char c in throwOp2) {  					data.Add ((byte)c);  				}  			}  			transmit = new XbeeTx64Bit (data' addr);  			transmit.Send (_serialPort);  		}  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The following statement contains a magic number: foreach (string thisChain in chainInfo) {  	if (thisChain == "")  		continue;  	string[] chain = thisChain.Split ('|');  	int throwNodeID = Convert.ToInt32 (chain [0]);  	int throwEventID = Convert.ToInt32 (chain [1]);  	string throwOp1 = chain [2];  	string throwOp2 = chain [3];  	int throwRemaining = Convert.ToInt32 (chain [4]);  	if (throwRemaining == 1) {  		DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM event_chains WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID));  	}  	else if (throwRemaining > 1) {  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE event_chains SET ThrowRemaining = ThrowRemaining - 1 WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID));  	}  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' throwNodeID));  	if (ret != "") {  		XbeeTx64Bit transmit;  		string forAddr = ret.Split ('|') [0];  		string reg = ret.Split ('|') [1];  		if (reg != "1")  			continue;  		ulong addr = Convert.ToUInt64 (forAddr);  		List<byte> data = new List<byte> ();  		data.Add (TRIGGER_BYTE);  		byte id1 = (byte)((throwEventID & 0x300) >> 8);  		byte id2 = (byte)(throwEventID & 0xFF);  		data.Add (id1);  		data.Add (id2);  		if (throwOp1 != "") {  			data.Add ((byte)throwOp1.Length);  			foreach (char c in throwOp1) {  				data.Add ((byte)c);  			}  		}  		if (throwOp2 != "") {  			data.Add ((byte)throwOp2.Length);  			foreach (char c in throwOp2) {  				data.Add ((byte)c);  			}  		}  		transmit = new XbeeTx64Bit (data' addr);  		transmit.Send (_serialPort);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The following statement contains a magic number: foreach (string thisChain in chainInfo) {  	if (thisChain == "")  		continue;  	string[] chain = thisChain.Split ('|');  	int throwNodeID = Convert.ToInt32 (chain [0]);  	int throwEventID = Convert.ToInt32 (chain [1]);  	string throwOp1 = chain [2];  	string throwOp2 = chain [3];  	int throwRemaining = Convert.ToInt32 (chain [4]);  	if (throwRemaining == 1) {  		DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM event_chains WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID));  	}  	else if (throwRemaining > 1) {  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE event_chains SET ThrowRemaining = ThrowRemaining - 1 WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID));  	}  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' throwNodeID));  	if (ret != "") {  		XbeeTx64Bit transmit;  		string forAddr = ret.Split ('|') [0];  		string reg = ret.Split ('|') [1];  		if (reg != "1")  			continue;  		ulong addr = Convert.ToUInt64 (forAddr);  		List<byte> data = new List<byte> ();  		data.Add (TRIGGER_BYTE);  		byte id1 = (byte)((throwEventID & 0x300) >> 8);  		byte id2 = (byte)(throwEventID & 0xFF);  		data.Add (id1);  		data.Add (id2);  		if (throwOp1 != "") {  			data.Add ((byte)throwOp1.Length);  			foreach (char c in throwOp1) {  				data.Add ((byte)c);  			}  		}  		if (throwOp2 != "") {  			data.Add ((byte)throwOp2.Length);  			foreach (char c in throwOp2) {  				data.Add ((byte)c);  			}  		}  		transmit = new XbeeTx64Bit (data' addr);  		transmit.Send (_serialPort);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The following statement contains a magic number: foreach (string thisChain in chainInfo) {  	if (thisChain == "")  		continue;  	string[] chain = thisChain.Split ('|');  	int throwNodeID = Convert.ToInt32 (chain [0]);  	int throwEventID = Convert.ToInt32 (chain [1]);  	string throwOp1 = chain [2];  	string throwOp2 = chain [3];  	int throwRemaining = Convert.ToInt32 (chain [4]);  	if (throwRemaining == 1) {  		DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM event_chains WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID));  	}  	else if (throwRemaining > 1) {  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE event_chains SET ThrowRemaining = ThrowRemaining - 1 WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID));  	}  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' throwNodeID));  	if (ret != "") {  		XbeeTx64Bit transmit;  		string forAddr = ret.Split ('|') [0];  		string reg = ret.Split ('|') [1];  		if (reg != "1")  			continue;  		ulong addr = Convert.ToUInt64 (forAddr);  		List<byte> data = new List<byte> ();  		data.Add (TRIGGER_BYTE);  		byte id1 = (byte)((throwEventID & 0x300) >> 8);  		byte id2 = (byte)(throwEventID & 0xFF);  		data.Add (id1);  		data.Add (id2);  		if (throwOp1 != "") {  			data.Add ((byte)throwOp1.Length);  			foreach (char c in throwOp1) {  				data.Add ((byte)c);  			}  		}  		if (throwOp2 != "") {  			data.Add ((byte)throwOp2.Length);  			foreach (char c in throwOp2) {  				data.Add ((byte)c);  			}  		}  		transmit = new XbeeTx64Bit (data' addr);  		transmit.Send (_serialPort);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The following statement contains a magic number: foreach (string thisChain in chainInfo) {  	if (thisChain == "")  		continue;  	string[] chain = thisChain.Split ('|');  	int throwNodeID = Convert.ToInt32 (chain [0]);  	int throwEventID = Convert.ToInt32 (chain [1]);  	string throwOp1 = chain [2];  	string throwOp2 = chain [3];  	int throwRemaining = Convert.ToInt32 (chain [4]);  	if (throwRemaining == 1) {  		DataSqlConnection.CommandNonQuery (String.Format ("DELETE FROM event_chains WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID));  	}  	else if (throwRemaining > 1) {  		DataSqlConnection.CommandNonQuery (String.Format ("UPDATE event_chains SET ThrowRemaining = ThrowRemaining - 1 WHERE TriggerNodeID={0} AND TriggerEventID={1} AND ThrowNodeID={2} AND ThrowEventID={3}"' contactingNode.GetNodeID ()' thisEvent.ID' throwNodeID' throwEventID));  	}  	string ret = DataSqlConnection.CommandReturnLine (String.Format ("SELECT ForeignAddress' Registered FROM nodes WHERE ID = {0};"' throwNodeID));  	if (ret != "") {  		XbeeTx64Bit transmit;  		string forAddr = ret.Split ('|') [0];  		string reg = ret.Split ('|') [1];  		if (reg != "1")  			continue;  		ulong addr = Convert.ToUInt64 (forAddr);  		List<byte> data = new List<byte> ();  		data.Add (TRIGGER_BYTE);  		byte id1 = (byte)((throwEventID & 0x300) >> 8);  		byte id2 = (byte)(throwEventID & 0xFF);  		data.Add (id1);  		data.Add (id2);  		if (throwOp1 != "") {  			data.Add ((byte)throwOp1.Length);  			foreach (char c in throwOp1) {  				data.Add ((byte)c);  			}  		}  		if (throwOp2 != "") {  			data.Add ((byte)throwOp2.Length);  			foreach (char c in throwOp2) {  				data.Add ((byte)c);  			}  		}  		transmit = new XbeeTx64Bit (data' addr);  		transmit.Send (_serialPort);  	}  }  
Magic Number,SeniorProjectService,Service,C:\repos\mdpolzin_SeniorProject\SeniorProjectService\SeniorProjectService\SeniorProject.cs,ThrowEvent,The following statement contains a magic number: if (ret != "") {  	XbeeTx64Bit transmit;  	string forAddr = ret.Split ('|') [0];  	string reg = ret.Split ('|') [1];  	if (reg != "1")  		continue;  	ulong addr = Convert.ToUInt64 (forAddr);  	List<byte> data = new List<byte> ();  	data.Add (TRIGGER_BYTE);  	byte id1 = (byte)((throwEventID & 0x300) >> 8);  	byte id2 = (byte)(throwEventID & 0xFF);  	data.Add (id1);  	data.Add (id2);  	if (throwOp1 != "") {  		data.Add ((byte)throwOp1.Length);  		foreach (char c in throwOp1) {  			data.Add ((byte)c);  		}  	}  	if (throwOp2 != "") {  		data.Add ((byte)throwOp2.Length);  		foreach (char c in throwOp2) {  			data.Add ((byte)c);  		}  	}  	transmit = new XbeeTx64Bit (data' addr);  	transmit.Send (_serialPort);  }  
