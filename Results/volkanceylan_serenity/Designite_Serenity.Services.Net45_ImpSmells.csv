Implementation smell,Namespace,Class,File,Method,Description
Long Method,Serenity.Services,UpdatableExtensionBehavior,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\UpdatableExtension\UpdatableExtensionBehavior.cs,ActivateFor,The method has 154 lines of code.
Long Method,Serenity.Services,AuditLogService,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\AuditLog\AuditLogService.cs,List,The method has 209 lines of code.
Long Method,Serenity.Data,DisplayOrderHelper,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\DisplayOrder\DisplayOrderHelper.cs,UpdateOrders,The method has 131 lines of code.
Complex Method,Serenity.Services,LocalizationBehavior,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\Localization\LocalizationBehavior.cs,GetLocalizationMatch,Cyclomatic complexity of the method is 9
Complex Method,Serenity.Services,LocalizationBehavior,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\Localization\LocalizationBehavior.cs,OnAfterSave,Cyclomatic complexity of the method is 10
Complex Method,Serenity.Services,UpdatableExtensionBehavior,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\UpdatableExtension\UpdatableExtensionBehavior.cs,OnAfterSave,Cyclomatic complexity of the method is 9
Complex Method,Serenity.Services,LinkingSetRelationBehavior,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\LinkingSetRelation\LinkingSetRelationBehavior.cs,ActivateFor,Cyclomatic complexity of the method is 12
Complex Method,Serenity.Services,LinkingSetRelationBehavior,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\LinkingSetRelation\LinkingSetRelationBehavior.cs,DetailListSave,Cyclomatic complexity of the method is 16
Complex Method,Serenity.Services,MasterDetailRelationBehavior,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\MasterDetail\MasterDetailRelationBehavior.cs,ActivateFor,Cyclomatic complexity of the method is 12
Complex Method,Serenity.Services,MasterDetailRelationBehavior,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\MasterDetail\MasterDetailRelationBehavior.cs,DetailListSave,Cyclomatic complexity of the method is 19
Complex Method,Serenity.Services,CaptureLogBehavior,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\CaptureLog\CaptureLogBehavior.cs,OnAudit,Cyclomatic complexity of the method is 8
Complex Method,Serenity.Services,ValidateParentAttribute,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\Validation\ValidateParentAttribute.cs,OnValidateRequest,Cyclomatic complexity of the method is 8
Complex Method,Serenity.Services,ServiceHelper,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\Helpers\ServiceHelper.cs,IsUniqueIndexException,Cyclomatic complexity of the method is 12
Complex Method,Serenity.Services,AuditLogService,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\AuditLog\AuditLogService.cs,AuditInsert,Cyclomatic complexity of the method is 10
Complex Method,Serenity.Services,AuditLogService,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\AuditLog\AuditLogService.cs,PrepareAuditUpdate,Cyclomatic complexity of the method is 18
Complex Method,Serenity.Services,ServiceQueryHelper,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\Helpers\ServiceQueryHelper.cs,ApplySort,Cyclomatic complexity of the method is 8
Complex Method,Serenity.Services,ListRequestHandler<TRow;TListRequest;TListResponse>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\List\ListRequestHandler.cs,ShouldSelectField,Cyclomatic complexity of the method is 8
Complex Method,Serenity.Services,RetrieveRequestHandler<TRow;TRetrieveRequest;TRetrieveResponse>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\Retrieve\RetrieveRequestHandler.cs,ShouldSelectField,Cyclomatic complexity of the method is 9
Complex Method,Serenity.Data,DisplayOrderHelper,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\DisplayOrder\DisplayOrderHelper.cs,ReorderValues,Cyclomatic complexity of the method is 9
Complex Method,Serenity.Data,DisplayOrderHelper,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\DisplayOrder\DisplayOrderHelper.cs,UpdateOrders,Cyclomatic complexity of the method is 14
Complex Method,Serenity.Data,LocalizationRowHandler<TRow>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\Localization\LocalizationHandler.cs,Update,Cyclomatic complexity of the method is 10
Complex Method,Serenity.Data,LocalizationRowHandler<TRow>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\Localization\LocalizationHandler.cs,Retrieve,Cyclomatic complexity of the method is 8
Long Parameter List,Serenity.Services,ServiceHelper,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\Helpers\ServiceHelper.cs,IsUniqueIndexException,The method has 6 parameters. Parameters: connection' exception' indexName' oldRow' newRow' indexFields
Long Parameter List,Serenity.Services,ServiceHelper,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\Helpers\ServiceHelper.cs,HandleUniqueKodException,The method has 6 parameters. Parameters: connection' exception' indexName' oldRow' newRow' indexFields
Long Parameter List,Serenity.Services,ListRequestHandler<TRow;TListRequest;TListResponse>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\List\ListRequestHandler.cs,AddFieldContainsCriteria,The method has 7 parameters. Parameters: field' containsText' id' searchType' numericOnly' criteria' orFalse
Long Parameter List,Serenity.Services,ListRequestHandler<TRow;TListRequest;TListResponse>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\List\ListRequestHandler.cs,ApplyFieldContainsText,The method has 5 parameters. Parameters: field' containsText' id' criteria' orFalse
Long Parameter List,Serenity.Data,DisplayOrderHelper,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\DisplayOrder\DisplayOrderHelper.cs,ReorderValues,The method has 9 parameters. Parameters: connection' tableName' keyField' orderField' filter' recordID' newDisplayOrder' descendingKeyOrder' hasUniqueConstraint
Long Parameter List,Serenity.Data,DisplayOrderHelper,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\DisplayOrder\DisplayOrderHelper.cs,UpdateOrders,The method has 6 parameters. Parameters: connection' orderRecords' tableName' keyField' orderField' hasUniqueConstraint
Long Parameter List,Serenity.Data,DisplayOrderHelper,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\DisplayOrder\DisplayOrderHelper.cs,ReorderValues,The method has 7 parameters. Parameters: connection' row' filter' recordID' newDisplayOrder' descendingKeyOrder' hasUniqueConstraint
Long Parameter List,Serenity.Data,LocalizationRowHandler<TRow>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\Localization\LocalizationHandler.cs,Update,The method has 6 parameters. Parameters: uow' row' cultureId' create' update' delete
Long Statement,Serenity.Services,JsonServiceClient,C:\repos\volkanceylan_serenity\Serenity.Services\Json\JsonServiceClient.cs,InternalPost,The length of the statement  "                    var resp = JsonConvert.DeserializeObject<TResponse>(rt' JsonSettings.Tolerant); // fazladan eklenmiş alan varsa önemseme " is 120.
Long Statement,Serenity.Services,UpdatableExtensionBehavior,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\UpdatableExtension\UpdatableExtensionBehavior.cs,OnAfterSave,The length of the statement  "                info.SaveHandlerFactory().Process(handler.UnitOfWork' request' oldID == null ? SaveRequestType.Create : SaveRequestType.Update); " is 128.
Long Statement,Serenity.Services,DisplayOrderFilterHelper,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\DisplayOrder\DisplayOrderFilterHelper.cs,GetDisplayOrderFilterFor,The length of the statement  "                flt = flt & (new Criteria((Field)parentIdRow.ParentIdField) == Convert.ToInt64(((Field)parentIdRow.ParentIdField).AsObject(row))); " is 130.
Long Statement,Serenity.Services,DataValidation,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\Validation\DataValidation.cs,InvalidIdError,The length of the statement  "            return new ValidationError("InvalidId"' fld.Name' Texts.Validation.FieldInvalidValue' fld.Title' ((Field)field).AsObject(row)); " is 127.
Long Statement,Serenity.Services,DataValidation,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\Validation\DataValidation.cs,InvalidDateRangeError,The length of the statement  "            return new ValidationError("InvalidDateRange"' start.Name + "'" + finish.Name' Texts.Validation.FieldInvalidDateRange' start.Title' finish.Title); " is 146.
Long Statement,Serenity.Services,AuditLogService,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\AuditLog\AuditLogService.cs,List,The length of the statement  "                            ud.Old = JsonConvert.DeserializeObject<Dictionary<string' object>>(fld.OldAuditDataField[entity].TrimToNull() ?? "{}"' JsonSettings.Tolerant); " is 142.
Long Statement,Serenity.Services,AuditLogService,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\AuditLog\AuditLogService.cs,List,The length of the statement  "                            ud.New = JsonConvert.DeserializeObject<Dictionary<string' object>>(fld.OldAuditDataField[entity].TrimToNull() ?? "{}"' JsonSettings.Tolerant); " is 142.
Long Statement,Serenity.Services,AuditLogService,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\AuditLog\AuditLogService.cs,AuditFile,The length of the statement  "            //var historyFile = UploadHelper.CopyFileAndRelatedToHistory(UploadHelper.UploadFilePath(fileSubFolder' fileInfo.Filename[row])); " is 129.
Long Statement,Serenity.Services,CaptureLogHandler<TRow>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\CaptureLog\CaptureLogHandler.cs,EnsureInfo,The length of the statement  "                throw new InvalidOperationException(String.Format("{0} row type has no capture log attribute defined!"' typeof(TRow).Name)); " is 124.
Long Statement,Serenity.Services,CaptureLogHandler<TRow>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\CaptureLog\CaptureLogHandler.cs,EnsureInfo,The length of the statement  "            newInfo.rowFieldPrefixLength = PrefixHelper.DeterminePrefixLength(newInfo.rowInstance.EnumerateTableFields()' x => x.Name); " is 123.
Long Statement,Serenity.Services,CaptureLogHandler<TRow>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\CaptureLog\CaptureLogHandler.cs,Log,The length of the statement  "                throw new InvalidOperationException(String.Format("Capture log has more than one active instance for ID {0}?!"' info.mappedIdField.AsObject(logRow))); " is 150.
Long Statement,Serenity.Services,ListRequestHandler<TRow;TListRequest;TListResponse>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\List\ListRequestHandler.cs,ApplyFieldContainsText,The length of the statement  "            var attr = field.CustomAttributes == null ? null : field.CustomAttributes.OfType<QuickSearchAttribute>().FirstOrDefault(); " is 122.
Long Statement,Serenity.Data,DisplayOrderHelper,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\DisplayOrder\DisplayOrderHelper.cs,ReorderValues,The length of the statement  "            return ReorderValues(connection' ((Row)row).Table' (Field)((IIdRow)row).IdField' row.DisplayOrderField' filter' recordID'  " is 121.
Long Statement,Serenity.Data,LocalizationRowHandler<TRow>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\Localization\LocalizationHandler.cs,EnsureInfo,The length of the statement  "                throw new InvalidOperationException(String.Format("{0} row type has no localization row type defined!"' typeof(TRow).Name)); " is 124.
Long Statement,Serenity.Data,LocalizationRowHandler<TRow>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\Localization\LocalizationHandler.cs,EnsureInfo,The length of the statement  "                throw new InvalidOperationException(String.Format("Localization table {0} doesn't implement ILocalizationRow interface!"' " is 121.
Long Statement,Serenity.Data,LocalizationRowHandler<TRow>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\Localization\LocalizationHandler.cs,EnsureInfo,The length of the statement  "            newInfo.rowFieldPrefixLength = PrefixHelper.DeterminePrefixLength(newInfo.rowInstance.EnumerateTableFields()' x => x.Name); " is 123.
Long Statement,Serenity.Data,LocalizationRowHandler<TRow>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\Localization\LocalizationHandler.cs,EnsureInfo,The length of the statement  "            newInfo.localRowFieldPrefixLength = PrefixHelper.DeterminePrefixLength(localInstance.EnumerateTableFields()' x => x.Name); " is 122.
Long Statement,Serenity.Data,LocalizationRowHandler<TRow>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\Localization\LocalizationHandler.cs,EnsureInfo,The length of the statement  "            newInfo.mappedIdField = (IIdField)((Row)localInstance).FindField(localAttr.MappedIdField ?? ((Field)new TRow().IdField).Name); " is 126.
Complex Conditional,Serenity.Services,LinkingSetRelationBehavior,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\LinkingSetRelation\LinkingSetRelationBehavior.cs,OnReturn,The conditional expression  "ReferenceEquals(null' Target) ||                  !handler.AllowSelectField(Target) ||                  !handler.ShouldSelectField(Target) ||                  handler.Response.Entities.IsEmptyOrNull()"  is complex.
Complex Conditional,Serenity.Services,MasterDetailRelationBehavior,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\MasterDetail\MasterDetailRelationBehavior.cs,OnReturn,The conditional expression  "ReferenceEquals(null' Target) ||                  !handler.AllowSelectField(Target) ||                  !handler.ShouldSelectField(Target) ||                  handler.Response.Entities.IsEmptyOrNull()"  is complex.
Complex Conditional,Serenity.Services,DeleteRequestHandler<TRow;TDeleteRequest;TDeleteResponse>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\Delete\DeleteRequestHandler.cs,Process,The conditional expression  "(isDeletedRow != null &&                   isDeletedRow.IsActiveField[Row] < 0) ||                  (deleteLogRow != null &&                   !((Field)deleteLogRow.DeleteUserIdField).IsNull(Row))"  is complex.
Complex Conditional,Serenity.Services,AuditLogService,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\AuditLog\AuditLogService.cs,List,The conditional expression  "((AuditType?)fld.AuditTypeIdField[entity] == AuditType.Insert ||                           (AuditType?)fld.AuditTypeIdField[entity] == AuditType.Update) &&                          (fld.OldAuditDataField[entity] != null || fld.NewAuditDataField[entity] != null)"  is complex.
Complex Conditional,Serenity.Services,AuditLogService,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\AuditLog\AuditLogService.cs,List,The conditional expression  "p.Value != null &&                                          p.Value is Int16 ||                                          p.Value is Int32 ||                                          p.Value is Int64"  is complex.
Complex Conditional,Serenity.Services,CaptureLogHandler<TRow>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\CaptureLog\CaptureLogHandler.cs,EnumerateCapturedFields,The conditional expression  "ReferenceEquals(info.captureLogInstance.ChangingUserIdField' logField) ||                      ReferenceEquals(info.captureLogInstance.ValidFromField' logField) ||                      ReferenceEquals(info.captureLogInstance.ValidUntilField' logField) ||                      ReferenceEquals(info.captureLogInstance.OperationTypeField' logField)"  is complex.
Complex Conditional,Serenity.Services,ListRequestHandler<TRow;TListRequest;TListResponse>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\List\ListRequestHandler.cs,GetQuickSearchFields,The conditional expression  "ReferenceEquals(null' field) ||                  ((field.MinSelectLevel == SelectLevel.Never) &&                       (field.CustomAttributes == null ||                        !field.CustomAttributes.OfType<QuickSearchAttribute>().Any()))"  is complex.
Complex Conditional,Serenity.Services,SaveRequestHandler<TRow;TSaveRequest;TSaveResponse>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\Save\SaveRequestHandler.cs,GetEditableFields,The conditional expression  "(IsCreate && (field.InsertPermission == null || Authorization.HasPermission(field.InsertPermission))) ||                          (IsUpdate && (field.UpdatePermission == null || Authorization.HasPermission(field.UpdatePermission)))"  is complex.
Complex Conditional,Serenity.Services,SaveRequestHandler<TRow;TSaveRequest;TSaveResponse>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\Save\SaveRequestHandler.cs,HandleDisplayOrder,The conditional expression  "afterSave &&                   ((IsCreate && displayOrderFix) ||                    (IsUpdate && displayOrderRow.DisplayOrderField[Old] != displayOrderRow.DisplayOrderField[Row]))"  is complex.
Complex Conditional,Serenity.Services,UndeleteRequestHandler<TRow;TUndeleteResponse>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\Delete\UndeleteRequestHandler.cs,Process,The conditional expression  "(isDeletedRow != null && isDeletedRow.IsActiveField[Row] > 0) ||                  (deleteLogRow != null && ((Field)deleteLogRow.DeleteUserIdField).IsNull(Row))"  is complex.
Complex Conditional,Serenity.Data,LocalizationRowHandler<TRow>,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\Localization\LocalizationHandler.cs,GetLocalizationMatch,The conditional expression  "logging != null && (                  ReferenceEquals(match' logging.InsertUserIdField) ||                  ReferenceEquals(match' logging.UpdateUserIdField) ||                  ReferenceEquals(match' logging.UpdateDateField) ||                  ReferenceEquals(match' logging.InsertDateField))"  is complex.
Empty Catch Block,Serenity.Data,CriteriaFieldExpressionReplacer,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\Helpers\CriteriaFieldExpressionReplacer.cs,VisitBinary,The method has an empty catch block.
Magic Number,Serenity.Services,JsonServiceClient,C:\repos\volkanceylan_serenity\Serenity.Services\Json\JsonServiceClient.cs,InternalPost,The following statement contains a magic number: wr.Timeout = 10 * 60 * 1000;
Magic Number,Serenity.Services,JsonServiceClient,C:\repos\volkanceylan_serenity\Serenity.Services\Json\JsonServiceClient.cs,InternalPost,The following statement contains a magic number: wr.Timeout = 10 * 60 * 1000;
Magic Number,Serenity.Services,JsonServiceClient,C:\repos\volkanceylan_serenity\Serenity.Services\Json\JsonServiceClient.cs,InternalPost,The following statement contains a magic number: wr.Timeout = 10 * 60 * 1000;
Magic Number,Serenity.Services,LinkingSetRelationBehavior,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\LinkingSetRelation\LinkingSetRelationBehavior.cs,OnReturn,The following statement contains a magic number: while (true)              {                  var part = enumerator.Take(1000);                  if (!part.Any())                      break;                    enumerator = enumerator.Skip(1000);                    listRequest.Criteria = thisKeyCriteria.In(                      part.Select(x => idField.AsObject(x))) & filterCriteria;                    IListResponse response = listHandler.Process(                      handler.Connection' listRequest);                    var lookup = response.Entities.Cast<Row>()                      .ToLookup(x => thisKeyField.AsObject(x).ToString());                    foreach (var row in part)                  {                      var list = listFactory();                      var matching = lookup[idField.AsObject(row).ToString()];                      foreach (var x in matching)                          list.Add(itemKeyField.AsObject(x));                        Target.AsObject(row' list);                  }              }
Magic Number,Serenity.Services,LinkingSetRelationBehavior,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\LinkingSetRelation\LinkingSetRelationBehavior.cs,OnReturn,The following statement contains a magic number: while (true)              {                  var part = enumerator.Take(1000);                  if (!part.Any())                      break;                    enumerator = enumerator.Skip(1000);                    listRequest.Criteria = thisKeyCriteria.In(                      part.Select(x => idField.AsObject(x))) & filterCriteria;                    IListResponse response = listHandler.Process(                      handler.Connection' listRequest);                    var lookup = response.Entities.Cast<Row>()                      .ToLookup(x => thisKeyField.AsObject(x).ToString());                    foreach (var row in part)                  {                      var list = listFactory();                      var matching = lookup[idField.AsObject(row).ToString()];                      foreach (var x in matching)                          list.Add(itemKeyField.AsObject(x));                        Target.AsObject(row' list);                  }              }
Magic Number,Serenity.Services,MasterDetailRelationBehavior,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\MasterDetail\MasterDetailRelationBehavior.cs,OnReturn,The following statement contains a magic number: while (true)              {                  var part = enumerator.Take(1000);                  if (!part.Any())                      break;                    enumerator = enumerator.Skip(1000);                    listRequest.Criteria = foreignKeyCriteria.In(                      part.Select(x => idField.AsObject(x))) & filterCriteria;                    IListResponse response = listHandler.Process(                      handler.Connection' listRequest);                    var lookup = response.Entities.Cast<Row>()                      .ToLookup(x => foreignKeyField.AsObject(x).ToString());                    foreach (var row in part)                  {                      var list = rowListFactory();                      var matching = lookup[idField.AsObject(row).ToString()];                      foreach (var x in matching)                          list.Add(x);                        Target.AsObject(row' list);                  }              }
Magic Number,Serenity.Services,MasterDetailRelationBehavior,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\MasterDetail\MasterDetailRelationBehavior.cs,OnReturn,The following statement contains a magic number: while (true)              {                  var part = enumerator.Take(1000);                  if (!part.Any())                      break;                    enumerator = enumerator.Skip(1000);                    listRequest.Criteria = foreignKeyCriteria.In(                      part.Select(x => idField.AsObject(x))) & filterCriteria;                    IListResponse response = listHandler.Process(                      handler.Connection' listRequest);                    var lookup = response.Entities.Cast<Row>()                      .ToLookup(x => foreignKeyField.AsObject(x).ToString());                    foreach (var row in part)                  {                      var list = rowListFactory();                      var matching = lookup[idField.AsObject(row).ToString()];                      foreach (var x in matching)                          list.Add(x);                        Target.AsObject(row' list);                  }              }
Magic Number,Serenity.Services,AuditLogService,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\AuditLog\AuditLogService.cs,List,The following statement contains a magic number: using (var connection = SqlConnections.NewByKey("Default"))              {                  response.Entities = new List<Row>();                    var row = ((Row)fld).CreateNew();                    if (request.Sort == null ||                      request.Sort.Length == 0)                      request.Sort = new SortBy[] { new SortBy(fld.DateField.Name' true) };                    var query = new SqlQuery().From(row)                      .Select(                          (Field)fld.IdField'                          fld.EntityTypeIdField'                          fld.EntityIdField'                          fld.ParentTypeIdField'                          fld.OldParentIdField'                          fld.NewParentIdField'                          fld.DateField'                          (Field)fld.UserIdField'                          fld.AuditTypeIdField'                          fld.OldAuditDataField'                          fld.NewAuditDataField)                      .OrderBy(                          (Field)fld.IdField)                      .ApplySkipTakeAndCount(request.Skip' request.Take' request.ExcludeTotalCount)                      .ApplySort(request.Sort);                    if (request.EntityTypeId != null &&                      request.EntityId != null)                  {                      var pEntityId = query.AddParam(request.EntityId);                      var pEntityTypeId = query.AddParam(request.EntityTypeId);                        query.Where(~(                          ~(                              new Criteria(0' fld.EntityTypeIdField) == pEntityTypeId &                              new Criteria(0' fld.EntityIdField) == pEntityId) |                          ~(                              new Criteria(0' fld.ParentTypeIdField) == pEntityTypeId &                              ~(                                  new Criteria(0' fld.OldParentIdField) == pEntityId |                                  new Criteria(0' fld.NewParentIdField) == pEntityId))));                  }                  else                  {                      if (request.EntityTypeId != null)                          query.WhereEqual(fld.EntityTypeIdField' request.EntityTypeId);//Convert.ToInt32(request.EntityTypeId.Value));                        if (request.EntityId != null)                          query.WhereEqual(fld.EntityIdField' request.EntityId.Value);                  }                    response.TotalCount = query.ForEach(connection' delegate()                  {                      response.Entities.Add(row.Clone());                  });                    response.SetSkipTakeTotal(query);                    response.IdNameLookups = new Dictionary<EntityType' Dictionary<long' string>>();                  response.FieldTitles = new Dictionary<EntityType' Dictionary<string' string>>();                  response.ForeignEntityTypes = new Dictionary<EntityType' Dictionary<string' string>>();                  response.EntityTitles = new Dictionary<EntityType' string>();                    var lookups = response.IdNameLookups;                  var titles = response.FieldTitles;                  var foreigns = response.ForeignEntityTypes;                  var entities = response.EntityTitles;                    Action<EntityType' Int64> addLookup = (entityType' id) => {                        Dictionary<long' string> lookup;                      if (!lookups.TryGetValue(entityType' out lookup))                      {                          lookup = new Dictionary<long' string>();                          lookups[entityType] = lookup;                      }                        if (!lookup.ContainsKey(id))                          lookup[id] = null;                  };                    Action<EntityType' string> addTitle = (entityType' field) =>                  {                        Dictionary<string' string> lookup;                      if (!titles.TryGetValue(entityType' out lookup))                      {                          lookup = new Dictionary<string' string>();                          titles[entityType] = lookup;                      }                        if (!lookup.ContainsKey(field))                          lookup[field] = null;                  };                    Action<EntityType> addEntity = (entityType) =>                  {                      if (!entities.ContainsKey(entityType))                      {                          //Row r;                          String s = null;                          // TODO: FIX!                          //if (schema.TypeToTable.TryGetValue(entityType' out r))                          //    s = LocalText.TryGet(1055' "Db." + r.Table + ".EntitySingular"' false);                           s = s ?? Enum.GetName(typeof(EntityType)' entityType);                          entities[entityType] = s;                      }                  };                    Action<EntityType' string' EntityType> addForeign = (entityType' field' foreignType) =>                  {                      Dictionary<string' string> foreign;                      if (!foreigns.TryGetValue(entityType' out foreign))                      {                          foreign = new Dictionary<string' string>();                          foreigns[entityType] = foreign;                      }                        if (!foreign.ContainsKey(field))                          foreign[field] = Enum.GetName(typeof(EntityType)' foreignType);                  };                    foreach (var entity in response.Entities)                  {                      addEntity(fld.EntityTypeIdField[entity]);                      addLookup(fld.EntityTypeIdField[entity]' fld.EntityIdField[entity].Value);                      if (fld.ParentTypeIdField[entity] != null)                          addEntity(fld.ParentTypeIdField[entity]);                        //if (entity.UserId != null)                      //    addLookup(UserRow.TableName' entity.UserId.Value);                        Row theRow;                      if (((AuditType?)fld.AuditTypeIdField[entity] == AuditType.Insert ||                           (AuditType?)fld.AuditTypeIdField[entity] == AuditType.Update) &&                          (fld.OldAuditDataField[entity] != null || fld.NewAuditDataField[entity] != null))                      {                          theRow = RowRegistry.ByConnectionKey(RowRegistry.DefaultConnectionKey)[fld.EntityTypeIdField[entity]].FirstOrDefault();                          if (theRow == null)                              continue;                            UpdateAuditDataDictionary ud = new UpdateAuditDataDictionary();                          if (fld.OldAuditDataField[entity] != null)                              ud.Old = JsonConvert.DeserializeObject<Dictionary<string' object>>(fld.OldAuditDataField[entity].TrimToNull() ?? "{}"' JsonSettings.Tolerant);                            if (fld.NewAuditDataField[entity] != null)                              ud.New = JsonConvert.DeserializeObject<Dictionary<string' object>>(fld.OldAuditDataField[entity].TrimToNull() ?? "{}"' JsonSettings.Tolerant);                            for (var i = 0; i < 2; i++)                          {                              var d = (i == 0) ? ud.Old : ud.New;                              if (d != null)                                  foreach (var p in d)                                  {                                      addTitle(fld.EntityTypeIdField[entity]' p.Key);                                        if (p.Value != null &&                                          p.Value is Int16 ||                                          p.Value is Int32 ||                                          p.Value is Int64)                                      {                                          var f = theRow.FindField(p.Key);                                          if (!ReferenceEquals(null' f) &&                                              f.ForeignTable != null)                                          {                                              //EntityType foreignType;                                              //if (schema.TableToType.TryGetValue(f.ForeignTable' out foreignType))                                              {                                                  addForeign(fld.EntityTypeIdField[entity]' p.Key' f.ForeignTable);                                                  addLookup(f.ForeignTable' Convert.ToInt64(p.Value));                                              }                                          }                                      }                                  }                          }                      }                  }                    foreach (var pair in response.IdNameLookups)                  {                      Row entity = RowRegistry.ByConnectionKey(RowRegistry.DefaultConnectionKey)[pair.Key].FirstOrDefault();                      if (entity != null)                      {                          var idRow = entity as IIdRow;                          var nameRow = entity as INameRow;                          if (idRow != null &&                              nameRow != null)                          {                              var lookup = pair.Value;                              var idName = GetIdNameDictionary(connection' (IIdRow)entity' ((INameRow)entity).NameField' lookup.Keys);                              foreach (var p in idName)                                  lookup[p.Key] = p.Value;                          }                      }                  }                    foreach (var pair in response.FieldTitles)                  {                      Row entity = RowRegistry.ByConnectionKey(RowRegistry.DefaultConnectionKey)[pair.Key].FirstOrDefault();                      if (entity != null)                      {                          var lookup = pair.Value;                          var keys = new string[lookup.Keys.Count];                          lookup.Keys.CopyTo(keys' 0);                          foreach (var key in keys)                          {                              Field f;                              if (key.EndsWith("Id"))                              {                                  var s = key.Substring(0' key.Length - 2);                                  f = entity.FindField(s);                                  if (!ReferenceEquals(null' f))                                  {                                      lookup[key] = f.Title;                                      continue;                                  }                              }                                f = entity.FindField(key);                              if (!ReferenceEquals(null' f))                                  lookup[key] = f.Title;                          }                      }                  }                      return response;              }
Magic Number,Serenity.Services,AuditLogService,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\AuditLog\AuditLogService.cs,List,The following statement contains a magic number: using (var connection = SqlConnections.NewByKey("Default"))              {                  response.Entities = new List<Row>();                    var row = ((Row)fld).CreateNew();                    if (request.Sort == null ||                      request.Sort.Length == 0)                      request.Sort = new SortBy[] { new SortBy(fld.DateField.Name' true) };                    var query = new SqlQuery().From(row)                      .Select(                          (Field)fld.IdField'                          fld.EntityTypeIdField'                          fld.EntityIdField'                          fld.ParentTypeIdField'                          fld.OldParentIdField'                          fld.NewParentIdField'                          fld.DateField'                          (Field)fld.UserIdField'                          fld.AuditTypeIdField'                          fld.OldAuditDataField'                          fld.NewAuditDataField)                      .OrderBy(                          (Field)fld.IdField)                      .ApplySkipTakeAndCount(request.Skip' request.Take' request.ExcludeTotalCount)                      .ApplySort(request.Sort);                    if (request.EntityTypeId != null &&                      request.EntityId != null)                  {                      var pEntityId = query.AddParam(request.EntityId);                      var pEntityTypeId = query.AddParam(request.EntityTypeId);                        query.Where(~(                          ~(                              new Criteria(0' fld.EntityTypeIdField) == pEntityTypeId &                              new Criteria(0' fld.EntityIdField) == pEntityId) |                          ~(                              new Criteria(0' fld.ParentTypeIdField) == pEntityTypeId &                              ~(                                  new Criteria(0' fld.OldParentIdField) == pEntityId |                                  new Criteria(0' fld.NewParentIdField) == pEntityId))));                  }                  else                  {                      if (request.EntityTypeId != null)                          query.WhereEqual(fld.EntityTypeIdField' request.EntityTypeId);//Convert.ToInt32(request.EntityTypeId.Value));                        if (request.EntityId != null)                          query.WhereEqual(fld.EntityIdField' request.EntityId.Value);                  }                    response.TotalCount = query.ForEach(connection' delegate()                  {                      response.Entities.Add(row.Clone());                  });                    response.SetSkipTakeTotal(query);                    response.IdNameLookups = new Dictionary<EntityType' Dictionary<long' string>>();                  response.FieldTitles = new Dictionary<EntityType' Dictionary<string' string>>();                  response.ForeignEntityTypes = new Dictionary<EntityType' Dictionary<string' string>>();                  response.EntityTitles = new Dictionary<EntityType' string>();                    var lookups = response.IdNameLookups;                  var titles = response.FieldTitles;                  var foreigns = response.ForeignEntityTypes;                  var entities = response.EntityTitles;                    Action<EntityType' Int64> addLookup = (entityType' id) => {                        Dictionary<long' string> lookup;                      if (!lookups.TryGetValue(entityType' out lookup))                      {                          lookup = new Dictionary<long' string>();                          lookups[entityType] = lookup;                      }                        if (!lookup.ContainsKey(id))                          lookup[id] = null;                  };                    Action<EntityType' string> addTitle = (entityType' field) =>                  {                        Dictionary<string' string> lookup;                      if (!titles.TryGetValue(entityType' out lookup))                      {                          lookup = new Dictionary<string' string>();                          titles[entityType] = lookup;                      }                        if (!lookup.ContainsKey(field))                          lookup[field] = null;                  };                    Action<EntityType> addEntity = (entityType) =>                  {                      if (!entities.ContainsKey(entityType))                      {                          //Row r;                          String s = null;                          // TODO: FIX!                          //if (schema.TypeToTable.TryGetValue(entityType' out r))                          //    s = LocalText.TryGet(1055' "Db." + r.Table + ".EntitySingular"' false);                           s = s ?? Enum.GetName(typeof(EntityType)' entityType);                          entities[entityType] = s;                      }                  };                    Action<EntityType' string' EntityType> addForeign = (entityType' field' foreignType) =>                  {                      Dictionary<string' string> foreign;                      if (!foreigns.TryGetValue(entityType' out foreign))                      {                          foreign = new Dictionary<string' string>();                          foreigns[entityType] = foreign;                      }                        if (!foreign.ContainsKey(field))                          foreign[field] = Enum.GetName(typeof(EntityType)' foreignType);                  };                    foreach (var entity in response.Entities)                  {                      addEntity(fld.EntityTypeIdField[entity]);                      addLookup(fld.EntityTypeIdField[entity]' fld.EntityIdField[entity].Value);                      if (fld.ParentTypeIdField[entity] != null)                          addEntity(fld.ParentTypeIdField[entity]);                        //if (entity.UserId != null)                      //    addLookup(UserRow.TableName' entity.UserId.Value);                        Row theRow;                      if (((AuditType?)fld.AuditTypeIdField[entity] == AuditType.Insert ||                           (AuditType?)fld.AuditTypeIdField[entity] == AuditType.Update) &&                          (fld.OldAuditDataField[entity] != null || fld.NewAuditDataField[entity] != null))                      {                          theRow = RowRegistry.ByConnectionKey(RowRegistry.DefaultConnectionKey)[fld.EntityTypeIdField[entity]].FirstOrDefault();                          if (theRow == null)                              continue;                            UpdateAuditDataDictionary ud = new UpdateAuditDataDictionary();                          if (fld.OldAuditDataField[entity] != null)                              ud.Old = JsonConvert.DeserializeObject<Dictionary<string' object>>(fld.OldAuditDataField[entity].TrimToNull() ?? "{}"' JsonSettings.Tolerant);                            if (fld.NewAuditDataField[entity] != null)                              ud.New = JsonConvert.DeserializeObject<Dictionary<string' object>>(fld.OldAuditDataField[entity].TrimToNull() ?? "{}"' JsonSettings.Tolerant);                            for (var i = 0; i < 2; i++)                          {                              var d = (i == 0) ? ud.Old : ud.New;                              if (d != null)                                  foreach (var p in d)                                  {                                      addTitle(fld.EntityTypeIdField[entity]' p.Key);                                        if (p.Value != null &&                                          p.Value is Int16 ||                                          p.Value is Int32 ||                                          p.Value is Int64)                                      {                                          var f = theRow.FindField(p.Key);                                          if (!ReferenceEquals(null' f) &&                                              f.ForeignTable != null)                                          {                                              //EntityType foreignType;                                              //if (schema.TableToType.TryGetValue(f.ForeignTable' out foreignType))                                              {                                                  addForeign(fld.EntityTypeIdField[entity]' p.Key' f.ForeignTable);                                                  addLookup(f.ForeignTable' Convert.ToInt64(p.Value));                                              }                                          }                                      }                                  }                          }                      }                  }                    foreach (var pair in response.IdNameLookups)                  {                      Row entity = RowRegistry.ByConnectionKey(RowRegistry.DefaultConnectionKey)[pair.Key].FirstOrDefault();                      if (entity != null)                      {                          var idRow = entity as IIdRow;                          var nameRow = entity as INameRow;                          if (idRow != null &&                              nameRow != null)                          {                              var lookup = pair.Value;                              var idName = GetIdNameDictionary(connection' (IIdRow)entity' ((INameRow)entity).NameField' lookup.Keys);                              foreach (var p in idName)                                  lookup[p.Key] = p.Value;                          }                      }                  }                    foreach (var pair in response.FieldTitles)                  {                      Row entity = RowRegistry.ByConnectionKey(RowRegistry.DefaultConnectionKey)[pair.Key].FirstOrDefault();                      if (entity != null)                      {                          var lookup = pair.Value;                          var keys = new string[lookup.Keys.Count];                          lookup.Keys.CopyTo(keys' 0);                          foreach (var key in keys)                          {                              Field f;                              if (key.EndsWith("Id"))                              {                                  var s = key.Substring(0' key.Length - 2);                                  f = entity.FindField(s);                                  if (!ReferenceEquals(null' f))                                  {                                      lookup[key] = f.Title;                                      continue;                                  }                              }                                f = entity.FindField(key);                              if (!ReferenceEquals(null' f))                                  lookup[key] = f.Title;                          }                      }                  }                      return response;              }
Magic Number,Serenity.Services,AuditLogService,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\AuditLog\AuditLogService.cs,GetIdNameDictionary,The following statement contains a magic number: const int step = 100;
Magic Number,Serenity.Services,JsonSortByConverter,C:\repos\volkanceylan_serenity\Serenity.Services\Json\JsonSortByConverter.cs,ReadJson,The following statement contains a magic number: if (field.EndsWith(" DESC"' StringComparison.OrdinalIgnoreCase))              {                  sortBy.Field = field.Substring(0' field.Length - 5).TrimToEmpty();                  sortBy.Descending = true;              }              else                  sortBy.Field = field;
Magic Number,Serenity.Data,DisplayOrderHelper,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\DisplayOrder\DisplayOrderHelper.cs,ReorderValues,The following statement contains a magic number: if (changing != null && changing.newOrder != newDisplayOrder)              {                  // let's say record had a display order value of 6and now it will become 10' the records with actual                  // display orders of 7' 8' 9' 10 will become 6' 7' 8' 9 orders.                  //                  // WARNING: notice that array is 0 based' so record with actual display order of 7 is in the                  // 6th index in the array)                  for (int i = changing.newOrder; i < newDisplayOrder; i++)                      orderRecords[i].newOrder = i;                    // if the records display order is to be changed from 9 to 5' the records with actual orders of 5' 6' 7' 8                   // is going to be 6' 7' 8' 9 ordered.                  for (int i = newDisplayOrder - 1; i < changing.newOrder - 1; i++)                      orderRecords[i].newOrder = i + 2;                    // as the records that will be changing are assigned new orders' we may assign new display order                  // directly.                  changing.newOrder = newDisplayOrder;              }
Magic Number,Serenity.Data,DisplayOrderHelper,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\DisplayOrder\DisplayOrderHelper.cs,UpdateOrders,The following statement contains a magic number: if (hasUniqueConstraint)              {                  var byCurrentOrder = new Dictionary<Int64' OrderRecord>();                  foreach (var rec in orderRecords)                      byCurrentOrder[rec.oldOrder] = rec;                    var list = new List<OrderRecord>();                  list.AddRange(orderRecords);                  list.Sort((x' y) => (x.newOrder - y.newOrder));                    foreach (var rec in list)                  {                      if (rec.oldOrder != rec.newOrder)                      {                          byCurrentOrder.Remove(rec.oldOrder);                            OrderRecord congestion;                          if (byCurrentOrder.TryGetValue(rec.newOrder' out congestion))                          {                              var empty = list.Count * 2;                              while (byCurrentOrder.ContainsKey(empty))                                  empty++;                                congestion.oldOrder = empty;                              appendSingleUpdate(congestion.recordID' empty);                              byCurrentOrder[empty] = congestion;                          }                            appendSingleUpdate(rec.recordID' rec.newOrder);                          byCurrentOrder[rec.newOrder] = rec;                      }                  }              }              else              {                  // StringBuilder that will contain IN(...) part of the latest query                  StringBuilder sb = new StringBuilder();                    // scan all display order changing records                  int start = 0;                  while (start < orderRecords.Count)                  {                      OrderRecord rs = orderRecords[start];                        // if this records display order is not changed' skip it                      if (rs.oldOrder == rs.newOrder)                      {                          start++;                          continue;                      }                        // find the difference between old and new display orders                      int difference = rs.oldOrder - rs.newOrder;                        // clear the IN(...) list                      sb.Length = 0;                        // add this records ID to the IN (...) part                      sb.Append(IdToSql(rs.recordID));                        // now we'll find all following records whose display orders are changed same amount                       // (difference between old and new is same)' so we will update them with just one query                      // like UPDATE ORDER = ORDER + 1 WHERE ID IN (X' Y' Z....).                      int finish = start;                        while (finish + 1 < orderRecords.Count)                      {                          // if we found more than 100 records whose display orders changed same amount' to                           // limit IN(...) part to overgrow' break searching and run the query. Collect the                          // rest in another query. If query is too complex' might result in performance                          // degration in SQL server                          if (finish - start >= 100)                              break;                            OrderRecord rf = orderRecords[finish + 1];                            // is this records display order value changed same amount                          if (rf.oldOrder - rf.newOrder != difference)                              break;                            sb.Append(''');                          sb.Append(IdToSql(rf.recordID));                            finish++;                      }                        // if only one record in batch' no need to use IN clause                      if (start == finish)                      {                          queries.AppendLine(String.Format(                              "UPDATE {0} SET {1} = {2} WHERE {3} = {4};"' tableName'                              orderField.Name' rs.newOrder' keyField.Name' IdToSql(rs.recordID)));                          updateCount++;                      }                      else                      {                          // batch update' use IN (...)                          OrderRecord rf = orderRecords[finish];                            queries.AppendLine(String.Format(                              "UPDATE {0} SET {1} = {1} - ({2}) WHERE ({3} IN ({4}));"'                              tableName'                              orderField.Name'                              rs.oldOrder - rs.newOrder'                              keyField.Name'                              sb.ToString()));                          updateCount++;                      }                        start = finish + 1;                  }              }
Magic Number,Serenity.Data,DisplayOrderHelper,C:\repos\volkanceylan_serenity\Serenity.Services\RequestHandlers\IntegratedFeatures\DisplayOrder\DisplayOrderHelper.cs,UpdateOrders,The following statement contains a magic number: if (hasUniqueConstraint)              {                  var byCurrentOrder = new Dictionary<Int64' OrderRecord>();                  foreach (var rec in orderRecords)                      byCurrentOrder[rec.oldOrder] = rec;                    var list = new List<OrderRecord>();                  list.AddRange(orderRecords);                  list.Sort((x' y) => (x.newOrder - y.newOrder));                    foreach (var rec in list)                  {                      if (rec.oldOrder != rec.newOrder)                      {                          byCurrentOrder.Remove(rec.oldOrder);                            OrderRecord congestion;                          if (byCurrentOrder.TryGetValue(rec.newOrder' out congestion))                          {                              var empty = list.Count * 2;                              while (byCurrentOrder.ContainsKey(empty))                                  empty++;                                congestion.oldOrder = empty;                              appendSingleUpdate(congestion.recordID' empty);                              byCurrentOrder[empty] = congestion;                          }                            appendSingleUpdate(rec.recordID' rec.newOrder);                          byCurrentOrder[rec.newOrder] = rec;                      }                  }              }              else              {                  // StringBuilder that will contain IN(...) part of the latest query                  StringBuilder sb = new StringBuilder();                    // scan all display order changing records                  int start = 0;                  while (start < orderRecords.Count)                  {                      OrderRecord rs = orderRecords[start];                        // if this records display order is not changed' skip it                      if (rs.oldOrder == rs.newOrder)                      {                          start++;                          continue;                      }                        // find the difference between old and new display orders                      int difference = rs.oldOrder - rs.newOrder;                        // clear the IN(...) list                      sb.Length = 0;                        // add this records ID to the IN (...) part                      sb.Append(IdToSql(rs.recordID));                        // now we'll find all following records whose display orders are changed same amount                       // (difference between old and new is same)' so we will update them with just one query                      // like UPDATE ORDER = ORDER + 1 WHERE ID IN (X' Y' Z....).                      int finish = start;                        while (finish + 1 < orderRecords.Count)                      {                          // if we found more than 100 records whose display orders changed same amount' to                           // limit IN(...) part to overgrow' break searching and run the query. Collect the                          // rest in another query. If query is too complex' might result in performance                          // degration in SQL server                          if (finish - start >= 100)                              break;                            OrderRecord rf = orderRecords[finish + 1];                            // is this records display order value changed same amount                          if (rf.oldOrder - rf.newOrder != difference)                              break;                            sb.Append(''');                          sb.Append(IdToSql(rf.recordID));                            finish++;                      }                        // if only one record in batch' no need to use IN clause                      if (start == finish)                      {                          queries.AppendLine(String.Format(                              "UPDATE {0} SET {1} = {2} WHERE {3} = {4};"' tableName'                              orderField.Name' rs.newOrder' keyField.Name' IdToSql(rs.recordID)));                          updateCount++;                      }                      else                      {                          // batch update' use IN (...)                          OrderRecord rf = orderRecords[finish];                            queries.AppendLine(String.Format(                              "UPDATE {0} SET {1} = {1} - ({2}) WHERE ({3} IN ({4}));"'                              tableName'                              orderField.Name'                              rs.oldOrder - rs.newOrder'                              keyField.Name'                              sb.ToString()));                          updateCount++;                      }                        start = finish + 1;                  }              }
