Implementation smell,Namespace,Class,File,Method,Description
Long Method,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,GenerateForm,The method has 161 lines of code.
Long Method,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,HandleMemberType,The method has 113 lines of code.
Long Method,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,GenerateRowMetadata,The method has 105 lines of code.
Long Method,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,SSTypeNameToTS,The method has 138 lines of code.
Long Method,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,GenerateTexts,The method has 125 lines of code.
Long Method,Serenity.CodeGenerator,GenerateCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\GenerateCommand.cs,Run,The method has 296 lines of code.
Long Method,Serenity.CodeGenerator,RestoreCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\RestoreCommand.cs,Run,The method has 149 lines of code.
Long Method,Serenity.CodeGenerator,ServerTypingsCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\ServerTypingsCommand.cs,Run,The method has 123 lines of code.
Long Method,Serenity.CodeGenerator,RowGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Generator\RowGenerator.cs,GenerateModel,The method has 217 lines of code.
Complex Method,Serenity.CodeGeneration,CecilImportGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilImportGenerator.cs,GenerateAll,Cyclomatic complexity of the method is 11
Complex Method,Serenity.CodeGeneration,CecilImportGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilImportGenerator.cs,GetAnnotationTypesFor,Cyclomatic complexity of the method is 16
Complex Method,Serenity.CodeGeneration,CecilImportGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilImportGenerator.cs,MakeFriendlyName,Cyclomatic complexity of the method is 9
Complex Method,Serenity.CodeGeneration,CecilImportGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilImportGenerator.cs,MakeFriendlyReference,Cyclomatic complexity of the method is 8
Complex Method,Serenity.CodeGeneration,CecilImportGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilImportGenerator.cs,IsPublicServiceMethod,Cyclomatic complexity of the method is 10
Complex Method,Serenity.CodeGeneration,ServerImportGeneratorBase,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,GenerateAll,Cyclomatic complexity of the method is 8
Complex Method,Serenity.CodeGeneration,ServerImportGeneratorBase,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,MakeFriendlyReference,Cyclomatic complexity of the method is 8
Complex Method,Serenity.CodeGeneration,ServerImportGeneratorBase,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,GetBaseClass,Cyclomatic complexity of the method is 13
Complex Method,Serenity.CodeGeneration,ServerImportGeneratorBase,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,IsPublicServiceMethod,Cyclomatic complexity of the method is 10
Complex Method,Serenity.CodeGeneration,ClientTypesGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,GetOptionTypeName,Cyclomatic complexity of the method is 8
Complex Method,Serenity.CodeGeneration,ClientTypesGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,GenerateOptionMembers,Cyclomatic complexity of the method is 9
Complex Method,Serenity.CodeGeneration,ClientTypesGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,AddOptionMembers,Cyclomatic complexity of the method is 12
Complex Method,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,AutoDetermineEditorType,Cyclomatic complexity of the method is 9
Complex Method,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,HandleMemberType,Cyclomatic complexity of the method is 18
Complex Method,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,AutoLookupKeyFor,Cyclomatic complexity of the method is 9
Complex Method,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,DetermineLookupKey,Cyclomatic complexity of the method is 9
Complex Method,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,SSTypeNameToTS,Cyclomatic complexity of the method is 24
Complex Method,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,FixupSSGenerics,Cyclomatic complexity of the method is 20
Complex Method,Serenity.Reflection,CecilUtils,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilUtils.cs,GetAttrs,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.Decompiler,DotNetCorePathFinder,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\DotNetCorePathFinder.cs,DotNetCorePathFinder,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,ParseTargetFramework,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,FindAssemblyFile,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,FindWindowsMetadataFile,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,ResolveInternal,Cyclomatic complexity of the method is 10
Complex Method,Serenity.CodeGenerator,GenerateCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\GenerateCommand.cs,Run,Cyclomatic complexity of the method is 41
Complex Method,Serenity.CodeGenerator,MvcCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\MvcCommand.cs,Run,Cyclomatic complexity of the method is 11
Complex Method,Serenity.CodeGenerator,RestoreCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\RestoreCommand.cs,Run,Cyclomatic complexity of the method is 28
Complex Method,Serenity.CodeGenerator,ServerTypingsCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\ServerTypingsCommand.cs,Run,Cyclomatic complexity of the method is 22
Complex Method,Serenity.CodeGenerator,EntityCodeGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Generator\EntityCodeGenerator.cs,Run,Cyclomatic complexity of the method is 10
Complex Method,Serenity.CodeGenerator,EntityCodeGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Generator\EntityCodeGenerator.cs,GenerateStyle,Cyclomatic complexity of the method is 9
Complex Method,Serenity.CodeGenerator,RowGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Generator\RowGenerator.cs,GenerateModel,Cyclomatic complexity of the method is 40
Complex Method,Serenity.CodeGenerator,CodeFileHelper,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Helpers\CodeFileHelper.cs,InsertDefinition,Cyclomatic complexity of the method is 11
Complex Method,Serenity.CodeGenerator,CodeFileHelper,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Helpers\CodeFileHelper.cs,MergeChanges,Cyclomatic complexity of the method is 14
Complex Method,Serenity.CodeGenerator,Hinter,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Helpers\Hinter.cs,ReadHintedLine,Cyclomatic complexity of the method is 11
Complex Method,Serenity.CodeGenerator,ProjectFileHelper,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Helpers\ProjectFileHelper.cs,AddFileToProject,Cyclomatic complexity of the method is 15
Complex Method,Serenity.CodeGenerator,Program,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Program.cs,Main,Cyclomatic complexity of the method is 14
Long Parameter List,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,ExtractInterfacePropertyFromRow,The method has 5 parameters. Parameters: rowType' interfaceTypes' propertyType' propertyName' getMethodFullName
Long Parameter List,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,SSDeclarationProperty,The method has 6 parameters. Parameters: type' prop' codeNamespace' isStaticClass' isSerializable' preserveMemberCase
Long Parameter List,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,SSDeclarationField,The method has 6 parameters. Parameters: type' field' codeNamespace' isStaticClass' isSerializable' preserveMemberCase
Long Parameter List,Serenity.CodeGenerator,RowGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Generator\RowGenerator.cs,GenerateModel,The method has 8 parameters. Parameters: connection' tableSchema' table' module' connectionKey' entityClass' permission' config
Long Statement,Serenity.CodeGeneration,CecilImportGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilImportGenerator.cs,GetServiceUrlFromRoute,The length of the statement  "            string url = route == null || route.ConstructorArguments.Count == 0 || !(route.ConstructorArguments[0].Value is string) ?  " is 121.
Long Statement,Serenity.CodeGeneration,CecilImportGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilImportGenerator.cs,GetServiceUrlFromRoute,The length of the statement  "                if (routePrefix != null && routePrefix.ConstructorArguments.Count > 0 && routePrefix.ConstructorArguments[0].Value is string) " is 125.
Long Statement,Serenity.CodeGeneration,ServerImportGeneratorBase,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,GetServiceUrlFromRoute,The length of the statement  "            string url = route == null ? ("Services/HasNoRoute/" + controller.Name) : (route.GetType().GetProperty("Template").GetValue(route) as string ?? ""); " is 148.
Long Statement,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,GenerateForm,The length of the statement  "                    var editorType = GetEditorTypeKeyFrom(item.PropertyType' basedOnField != null ? basedOnField.PropertyType : (TypeReference)null' editorTypeAttr); " is 145.
Long Statement,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,FindWindowsMetadataFile,The length of the statement  "            string basePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86)' "Windows Kits"' "10"' "References"); " is 137.
Long Statement,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,ResolveSilverlight,The length of the statement  "            AddTargetFrameworkSearchPathIfExists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)' "Microsoft Silverlight")); " is 143.
Long Statement,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,ResolveSilverlight,The length of the statement  "            AddTargetFrameworkSearchPathIfExists(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86)' "Microsoft Silverlight")); " is 146.
Long Statement,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,FindClosestVersionDirectory,The length of the statement  "            foreach (var folder in new DirectoryInfo(basePath).GetDirectories().Select(d => DotNetCorePathFinder.ConvertToVersion(d.Name)) " is 126.
Long Statement,Serenity.CodeGenerator,GenerateCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\GenerateCommand.cs,Run,The length of the statement  "            DbProviderFactories.RegisterFactory("FirebirdSql.Data.FirebirdClient"' FirebirdSql.Data.FirebirdClient.FirebirdClientFactory.Instance); " is 135.
Long Statement,Serenity.CodeGenerator,GenerateCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\GenerateCommand.cs,Run,The length of the statement  "                    var xct = confConnection == null ? null : confConnection.Tables.FirstOrDefault(z => string.Compare(z.Tablename' table' StringComparison.OrdinalIgnoreCase) == 0); " is 161.
Long Statement,Serenity.CodeGenerator,GenerateCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\GenerateCommand.cs,Run,The length of the statement  "                        identifier = xct == null || xct.Identifier.IsEmptyOrNull() ? RowGenerator.ClassNameFromTableName(x.Table) : xct.Identifier' " is 123.
Long Statement,Serenity.CodeGenerator,ServerTypingsCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\ServerTypingsCommand.cs,Run,The length of the statement  "                var outputPath1 = Path.Combine(Path.GetDirectoryName(csproj)' "bin/Debug/" + targetFramework + "/" + outputName + outputExtension) " is 130.
Long Statement,Serenity.CodeGenerator,ServerTypingsCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\ServerTypingsCommand.cs,Run,The length of the statement  "                var outputPath2 = Path.Combine(Path.GetDirectoryName(csproj)' "bin/Release/" + targetFramework + "/" + outputName + outputExtension) " is 132.
Long Statement,Serenity.CodeGenerator,ServerTypingsCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\ServerTypingsCommand.cs,Run,The length of the statement  "                    System.Console.Error.WriteLine(String.Format("Couldn't find output file for server typings generation at {0}!" + Environment.NewLine +  " is 134.
Long Statement,Serenity.CodeGenerator,ServerTypingsCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\ServerTypingsCommand.cs,Run,The length of the statement  "                        assemblyFile2 = assemblyFile1.Substring(0' binDebugIdx) + "/bin/Release/" + assemblyFile1.Substring(binDebugIdx + "/bin/Release".Length); " is 137.
Long Statement,Serenity.CodeGenerator,ServerTypingsCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\ServerTypingsCommand.cs,Run,The length of the statement  "                        System.Console.Error.WriteLine(String.Format(String.Format("Assembly file '{0}' specified in sergen.json is not found! " + " is 122.
Long Statement,Serenity.CodeGenerator,RowGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Generator\RowGenerator.cs,GenerateModel,The length of the statement  "                    attrs.Add("ForeignKey(\"" + (string.IsNullOrEmpty(x.PKSchema) ? x.PKTable : ("[" + x.PKSchema + "].[" + x.PKTable + "]")) + "\"' \"" + x.PKColumn + "\")"); " is 155.
Complex Conditional,Serenity.CodeGeneration,CecilImportGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilImportGenerator.cs,GenerateAll,The conditional expression  "CecilUtils.Contains(baseClasses' "Serenity.Services"' "ServiceRequest") ||                              CecilUtils.Contains(baseClasses' "Serenity.Services"' "ServiceResponse") ||                              CecilUtils.Contains(baseClasses' "Serenity.Data"' "Row") ||                              CecilUtils.Contains(baseClasses' "Serenity.Services"' "ServiceEndpoint") ||                              CecilUtils.GetAttr(fromType' "Serenity.ComponentModel"' "ScriptIncludeAttribute"' baseClasses) != null ||                              CecilUtils.GetAttr(fromType' "Serenity.ComponentModel"' "FormScriptAttribute"' baseClasses) != null ||                              CecilUtils.GetAttr(fromType' "Serenity.ComponentModel"' "ColumnsScriptAttribute"' baseClasses) != null ||                              ((CecilUtils.Contains(baseClasses' "Microsoft.AspNetCore.Mvc"' "Controller") ||                                CecilUtils.Contains(baseClasses' "System.Web.Mvc"' "Controller")) && // backwards compability                               fromType.Namespace != null &&                               fromType.Namespace.EndsWith(".Endpoints"))"  is complex.
Complex Conditional,Serenity.CodeGeneration,CecilImportGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilImportGenerator.cs,GetAnnotationTypesFor,The conditional expression  "attr.Properties != null &&                          attr.Properties.Length > 0 &&                          attr.Properties.Any(name => !type.Properties.Any(p =>                               p.Name == name && CecilUtils.IsPublicInstanceProperty(p)))"  is complex.
Complex Conditional,Serenity.CodeGeneration,CecilImportGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilImportGenerator.cs,ShortenNamespace,The conditional expression  "(codeNamespace != null && (ns == codeNamespace)) ||                  (codeNamespace != null && codeNamespace.StartsWith((ns + ".")))"  is complex.
Complex Conditional,Serenity.CodeGeneration,CecilImportGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilImportGenerator.cs,ShortenNamespace,The conditional expression  "(codeNamespace != null && (ns == codeNamespace)) ||                  (codeNamespace != null && codeNamespace.StartsWith((ns + ".")))"  is complex.
Complex Conditional,Serenity.CodeGeneration,CecilImportGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilImportGenerator.cs,GetBaseClass,The conditional expression  "t.Name == "ListRequest" ||                      t.Name == "RetrieveRequest" ||                      t.Name == "DeleteRequest" ||                      t.Name == "DeleteResponse" ||                      t.Name == "UndeleteRequest" ||                      t.Name == "UndeleteResponse" ||                      t.Name == "SaveResponse" ||                      t.Name == "ServiceRequest" ||                      t.Name == "ServiceResponse""  is complex.
Complex Conditional,Serenity.CodeGeneration,ServerImportGeneratorBase,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,GenerateAll,The conditional expression  "fromType.IsSubclassOf(typeof(ServiceRequest)) ||                          fromType.IsSubclassOf(typeof(ServiceResponse)) ||                          fromType.IsSubclassOf(typeof(Row)) ||                          fromType.GetCustomAttribute<ScriptIncludeAttribute>() != null ||                          fromType.GetCustomAttribute<FormScriptAttribute>() != null ||                          fromType.GetCustomAttribute<ColumnsScriptAttribute>() != null ||                          GeneratorUtils.IsSubclassOf(fromType' "Serenity.Services.ServiceEndpoint") ||                          ((GeneratorUtils.IsSubclassOf(fromType' "Microsoft.AspNetCore.Mvc.Controller") ||                            GeneratorUtils.IsSubclassOf(fromType' "System.Web.Mvc.Controller")) && // backwards compability                           fromType.Namespace != null &&                           fromType.Namespace.EndsWith(".Endpoints"))"  is complex.
Complex Conditional,Serenity.CodeGeneration,ServerImportGeneratorBase,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,ShortenNamespace,The conditional expression  "(codeNamespace != null && (ns == codeNamespace)) ||                  (codeNamespace != null && codeNamespace.StartsWith((ns + ".")))"  is complex.
Complex Conditional,Serenity.CodeGeneration,ServerImportGeneratorBase,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,ShortenNamespace,The conditional expression  "(codeNamespace != null && (ns == codeNamespace)) ||                  (codeNamespace != null && codeNamespace.StartsWith((ns + ".")))"  is complex.
Complex Conditional,Serenity.CodeGeneration,ClientTypesGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,AddOptionMembers,The conditional expression  "getMethod == null || setMethod == null || getMethod.IsProtected || setMethod.IsProtected"  is complex.
Complex Conditional,Serenity.CodeGeneration,ClientTypesGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,AddOptionMembers,The conditional expression  "member.Type.StartsWith("System.Func`") ||                      member.Type.StartsWith("System.Action`") ||                      member.Type == "System.Delegate" ||                      member.Type.Contains("System.TypeOption") ||                      member.Type == "Function""  is complex.
Complex Conditional,Serenity.CodeGeneration,ClientTypesGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,AddOptionMembers,The conditional expression  "!isOptions &&                      !member.Attributes.Any(x =>                          x.Type == "System.ComponentModel.DisplayNameAttribute" ||                          x.Type == "Serenity.OptionAttribute" ||                          x.Type == "Serenity.Decorators.option" ||                          x.Type == "Serenity.Decorators.displayName")"  is complex.
Complex Conditional,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,HandleMemberType,The conditional expression  "name == "Int16" ||                      name == "Int32" ||                      name == "Int64" ||                      name == "Double" ||                      name == "Single" ||                      name == "UInt16" ||                      name == "UInt32" ||                      name == "UInt64" ||                      name == "Byte" ||                      name == "SByte""  is complex.
Complex Conditional,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,HandleMemberType,The conditional expression  "isSystem &&                  name == "DateTime" ||                  name == "TimeSpan" ||                  name == "DateTimeOffset" ||                  name == "Guid""  is complex.
Complex Conditional,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,SSDeclarationMethod,The conditional expression  "method.IsConstructor || method.IsOverride || method.IsGetter || method.IsSetter"  is complex.
Complex Conditional,Serenity.Reflection,CecilUtils,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilUtils.cs,FindGenericInstanceType,The conditional expression  "t.BaseType != null &&                  t.BaseType.IsGenericInstance &&                  (t.BaseType as GenericInstanceType).ElementType.Name == name &&                  (t.BaseType as GenericInstanceType).ElementType.Namespace == ns"  is complex.
Complex Conditional,Serenity.Reflection,CecilUtils,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilUtils.cs,FindGenericInstanceType,The conditional expression  "b.BaseType != null &&                      b.BaseType.IsGenericInstance &&                      (b.BaseType as GenericInstanceType).ElementType.Name == name &&                      (b.BaseType as GenericInstanceType).ElementType.Namespace == ns"  is complex.
Complex Conditional,Serenity.Reflection,CecilUtils,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilUtils.cs,IsPublicInstanceProperty,The conditional expression  "(property.GetMethod == null ||                  !property.GetMethod.IsPublic) &&                  (property.SetMethod == null ||                  !property.SetMethod.IsPublic)"  is complex.
Complex Conditional,Serenity.Reflection,GeneratorUtils,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\GeneratorUtils.cs,IsSimpleType,The conditional expression  "type == typeof(String) ||                  type == typeof(Int32) ||                  type == typeof(Int64) ||                  type == typeof(Int16) ||                  type == typeof(Double) ||                  type == typeof(Decimal) ||                  type == typeof(DateTime) ||                  type == typeof(Boolean) ||                  type == typeof(TimeSpan)"  is complex.
Complex Conditional,Serenity.CodeGenerator,MvcCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\MvcCommand.cs,Run,The conditional expression  "name.StartsWith("App_Code/"' StringComparison.OrdinalIgnoreCase) ||                      name.EndsWith("_ViewStart"' StringComparison.OrdinalIgnoreCase) ||                      name.EndsWith("_ViewImports"' StringComparison.OrdinalIgnoreCase) ||                      processed.Contains(name)"  is complex.
Complex Conditional,Serenity.CodeGenerator,RestoreCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\RestoreCommand.cs,Run,The conditional expression  "string.IsNullOrEmpty(target) ||                              String.Compare(target' fw' StringComparison.OrdinalIgnoreCase) == 0 ||                              target.StartsWith(".NETStandard"' StringComparison.OrdinalIgnoreCase) ||                              target.StartsWith("netstandard"' StringComparison.OrdinalIgnoreCase) ||                              target.StartsWith("netcore"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Serenity.CodeGenerator,Program,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Program.cs,Main,The conditional expression  ""transform".StartsWith(command) ||                  "servertypings".StartsWith(command) ||                  "clienttypes".StartsWith(command) ||                  "mvct".StartsWith(command)"  is complex.
Empty Catch Block,ICSharpCode.Decompiler,DotNetCorePathFinder,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\DotNetCorePathFinder.cs,FindDotNetExeDirectory,The method has an empty catch block.
Empty Catch Block,Serenity.CodeGenerator,TSTypeLister,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Helpers\TSTypeLister.cs,List,The method has an empty catch block.
Empty Catch Block,Serenity.CodeGenerator,TSTypeLister,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Helpers\TSTypeLister.cs,List,The method has an empty catch block.
Magic Number,Serenity.CodeGeneration,CecilImportGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilImportGenerator.cs,GetControllerIdentifier,The following statement contains a magic number: className = className.Substring(0' className.Length - 10);
Magic Number,Serenity.CodeGeneration,CecilImportGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilImportGenerator.cs,GetAnnotationTypesFor,The following statement contains a magic number: type.Namespace == ns.Substring(0' ns.Length - 2) ||                                      type.Namespace.StartsWith(ns.Substring(0' ns.Length - 1)' StringComparison.OrdinalIgnoreCase)
Magic Number,Serenity.CodeGeneration,CecilImportGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilImportGenerator.cs,GetAnnotationTypesFor,The following statement contains a magic number: ns.Length > 2 &&                                  ns.EndsWith(".*"' StringComparison.OrdinalIgnoreCase) &&                                  type.Namespace != null
Magic Number,Serenity.CodeGeneration,CodeGeneratorBase,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CodeGeneratorBase.cs,Reset,The following statement contains a magic number: sb = new StringBuilder(4096);
Magic Number,Serenity.CodeGeneration,CodeGeneratorBase,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CodeGeneratorBase.cs,Reset,The following statement contains a magic number: cw = new CodeWriter(sb' 4);
Magic Number,Serenity.CodeGeneration,ImportGeneratorBase,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ImportGeneratorBase.cs,HasBaseType,The following statement contains a magic number: loop++ > 100
Magic Number,Serenity.CodeGeneration,ImportGeneratorBase,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ImportGeneratorBase.cs,GetAttribute,The following statement contains a magic number: loop++ > 100
Magic Number,Serenity.CodeGeneration,ServerImportGeneratorBase,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,GetControllerIdentifier,The following statement contains a magic number: className = className.Substring(0' className.Length - 10);
Magic Number,Serenity.CodeGeneration,ClientTypesGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,GetOptionTypeName,The following statement contains a magic number: typeName = typeName.Substring(nullablePrefix.Length + 1'                      typeName.Length - nullablePrefix.Length - 2);
Magic Number,Serenity.CodeGeneration,ClientTypesGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,GetOptionTypeName,The following statement contains a magic number: return typeName.Substring(7);
Magic Number,Serenity.CodeGeneration,ClientTypesGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,GetOptionMembers,The following statement contains a magic number: var constructor = type.Methods.FirstOrDefault(x => x.IsConstructor &&                   x.Arguments.Count == (isWidget ? 2 : 1));
Magic Number,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,DetermineModuleIdentifier,The following statement contains a magic number: ns = ns.Substring(0' ns.Length - 9);
Magic Number,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,DetermineRowIdentifier,The following statement contains a magic number: name = name.Substring(0' name.Length - 3);
Magic Number,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,AutoLookupKeyFor,The following statement contains a magic number: name = name.Substring(0' name.Length - 3);
Magic Number,Serenity.CodeGeneration,ServerTypingsGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,GenerateTexts,The following statement contains a magic number: cw.InBrace(delegate              {                  Regex filter = null;                  if (LocalTextFilters.Count > 0)                  {                      var fb = new StringBuilder("^(");                      bool append = false;                      foreach (string item in LocalTextFilters)                      {                          if (append)                              fb.Append('|');                          if (!string.IsNullOrEmpty(item))                          {                              if (item[0] == '^' && item[item.Length - 1] == '$')                                  fb.Append(item.Substring(1' item.Length - 2));                              else fb.Append(item.Replace("."' "\\.") + ".*");                              append = true;                          }                      }                      fb.Append(")$");                      filter = new Regex(fb.ToString()' RegexOptions.Compiled | RegexOptions.IgnoreCase);                  }                    var list = localTextKeys.Where(x =>                           !string.IsNullOrWhiteSpace(x) &&                          (filter == null || filter.IsMatch(x)) &&                          x.Split('.').All(p => SqlSyntax.IsValidIdentifier(p)))                      .ToList();                    list.Sort((i1' i2) => String.CompareOrdinal(i1' i2));                    var jwBuilder = new StringBuilder();                  var jw = new JsonTextWriter(new StringWriter(jwBuilder));                  jw.QuoteName = false;                  jw.WriteStartObject();                  List<string> stack = new List<string>();                  int stackCount = 0;                  for (int i = 0; i < list.Count; i++)                  {                      var key = list[i];                      var parts = key.Split('.');                        int same = 0;                        if (stackCount > 0)                      {                          while (same < stackCount && same < parts.Length && stack[same] == parts[same])                              same++;                            for (int level = same; level < stackCount; level++)                          {                              jw.WriteEndObject();                              cw.EndBrace();                          }                            stackCount = same;                      }                        for (int level = same; level < parts.Length - 1; level++)                      {                          string part = parts[level];                          if (stack.Count > level)                              stack[level] = part;                          else                              stack.Add(part);                          jw.WritePropertyName(part);                          jw.WriteStartObject();                          sb.AppendLine();                          if (level == 0)                              cw.Indented("declare namespace ");                          else                              cw.Indented("namespace ");                          sb.Append(part);                          cw.StartBrace();                      }                      stackCount = parts.Length - 1;                        if (same != parts.Length)                      {                          string part = parts[parts.Length - 1];                            bool nextStartsWithThis = false;                          if (i + 1 < list.Count)                          {                              var next = list[i + 1];                              if (next.StartsWith(key) &&                                  next.Length > key.Length &&                                  next[key.Length] == '.')                                  nextStartsWithThis = true;                          }                            if (nextStartsWithThis)                          {                              stackCount = parts.Length;                              if (stack.Count > stackCount - 1)                                  stack[stackCount - 1] = part;                              else                                  stack.Add(part);                              jw.WritePropertyName(part);                              jw.WriteStartObject();                              cw.Indented("namespace ");                              sb.Append(part);                              cw.StartBrace();                              jw.WritePropertyName("export const __");                              jw.WriteValue(1);                              cw.IndentedLine("__: string;");                          }                          else                          {                              jw.WritePropertyName(part);                              jw.WriteValue(1);                              cw.Indented("export const ");                              sb.Append(part);                              sb.AppendLine(": string;");                          }                      }                  }                  for (int i = 0; i < stackCount; i++)                  {                      jw.WriteEndObject();                      cw.EndBrace();                      sb.AppendLine();                  }                  jw.WriteEndObject();                    cw.Indented(ns);                  sb.Append(@"['Texts'] = Q.proxyTexts(Texts' ''' ");                  jw.Flush();                  sb.Append(jwBuilder.ToString());                  sb.AppendLine(");");              });
Magic Number,Serenity.Reflection,CecilUtils,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilUtils.cs,ToDefinitions,The following statement contains a magic number: assemblyLocations = assemblyLocations.Select(x =>              {                  if (!File.Exists(x))                      return x;                    var path = Path.GetDirectoryName(x);                  var asmInfo = Path.Combine(path' "__AssemblyInfo__.ini");                  if (!File.Exists(asmInfo))                      return x;                    var content = File.ReadAllText(asmInfo' System.Text.Encoding.Unicode);                  var idx = content.LastIndexOf("\0file:///");                  if (idx < 0)                      return x;                    var end = content.IndexOf('\0'' idx + 9);                  if (end < 0)                      return x;                    var location = content.Substring(idx + 9' end - idx - 9).Replace('/'' '\\');                  if (File.Exists(location))                      return location;                    return x;              }).ToList();
Magic Number,Serenity.Reflection,CecilUtils,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilUtils.cs,ToDefinitions,The following statement contains a magic number: assemblyLocations = assemblyLocations.Select(x =>              {                  if (!File.Exists(x))                      return x;                    var path = Path.GetDirectoryName(x);                  var asmInfo = Path.Combine(path' "__AssemblyInfo__.ini");                  if (!File.Exists(asmInfo))                      return x;                    var content = File.ReadAllText(asmInfo' System.Text.Encoding.Unicode);                  var idx = content.LastIndexOf("\0file:///");                  if (idx < 0)                      return x;                    var end = content.IndexOf('\0'' idx + 9);                  if (end < 0)                      return x;                    var location = content.Substring(idx + 9' end - idx - 9).Replace('/'' '\\');                  if (File.Exists(location))                      return location;                    return x;              }).ToList();
Magic Number,Serenity.Reflection,CecilUtils,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CecilUtils.cs,ToDefinitions,The following statement contains a magic number: assemblyLocations = assemblyLocations.Select(x =>              {                  if (!File.Exists(x))                      return x;                    var path = Path.GetDirectoryName(x);                  var asmInfo = Path.Combine(path' "__AssemblyInfo__.ini");                  if (!File.Exists(asmInfo))                      return x;                    var content = File.ReadAllText(asmInfo' System.Text.Encoding.Unicode);                  var idx = content.LastIndexOf("\0file:///");                  if (idx < 0)                      return x;                    var end = content.IndexOf('\0'' idx + 9);                  if (end < 0)                      return x;                    var location = content.Substring(idx + 9' end - idx - 9).Replace('/'' '\\');                  if (File.Exists(location))                      return location;                    return x;              }).ToList();
Magic Number,ICSharpCode.Decompiler,DotNetCorePathFinder,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\DotNetCorePathFinder.cs,DetectTargetFrameworkId,The following statement contains a magic number: return ReadSerString(buffer' 2);
Magic Number,ICSharpCode.Decompiler,DotNetCorePathFinder,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\DotNetCorePathFinder.cs,DetectTargetFrameworkId,The following statement contains a magic number: buffer.Length > 2 &&                      buffer[0] == 1 &&                      buffer[1] == 0
Magic Number,ICSharpCode.Decompiler,DotNetCorePathFinder,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\DotNetCorePathFinder.cs,ReadCompressedUInt32,The following statement contains a magic number: return ((uint)(first & ~0x80) << 8)                          | buffer[position++];
Magic Number,ICSharpCode.Decompiler,DotNetCorePathFinder,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\DotNetCorePathFinder.cs,ReadCompressedUInt32,The following statement contains a magic number: return ((uint)(first & ~0xc0) << 24)                      | (uint)buffer[position++] << 16                      | (uint)buffer[position++] << 8                      | buffer[position++];
Magic Number,ICSharpCode.Decompiler,DotNetCorePathFinder,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\DotNetCorePathFinder.cs,ReadCompressedUInt32,The following statement contains a magic number: return ((uint)(first & ~0xc0) << 24)                      | (uint)buffer[position++] << 16                      | (uint)buffer[position++] << 8                      | buffer[position++];
Magic Number,ICSharpCode.Decompiler,DotNetCorePathFinder,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\DotNetCorePathFinder.cs,ReadCompressedUInt32,The following statement contains a magic number: return ((uint)(first & ~0xc0) << 24)                      | (uint)buffer[position++] << 16                      | (uint)buffer[position++] << 8                      | buffer[position++];
Magic Number,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,ParseTargetFramework,The following statement contains a magic number: pair.Length != 2
Magic Number,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,ParseTargetFramework,The following statement contains a magic number: switch (pair[0].Trim().ToUpperInvariant())                  {                      case "VERSION":                          var versionString = pair[1].TrimStart('v');                          if (identifier == TargetFrameworkIdentifier.NETCoreApp ||                              identifier == TargetFrameworkIdentifier.NETStandard)                          {                              if (versionString.Length == 3)                                  versionString += ".0";                          }                          if (!Version.TryParse(versionString' out version))                              version = null;                          break;                  }
Magic Number,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,IsZeroOrAllOnes,The following statement contains a magic number: return version == null                  || (version.Major == 0 && version.Minor == 0 && version.Build == 0 && version.Revision == 0)                  || (version.Major == 65535 && version.Minor == 65535 && version.Build == 65535 && version.Revision == 65535);
Magic Number,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,IsZeroOrAllOnes,The following statement contains a magic number: return version == null                  || (version.Major == 0 && version.Minor == 0 && version.Build == 0 && version.Revision == 0)                  || (version.Major == 65535 && version.Minor == 65535 && version.Build == 65535 && version.Revision == 65535);
Magic Number,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,IsZeroOrAllOnes,The following statement contains a magic number: return version == null                  || (version.Major == 0 && version.Minor == 0 && version.Build == 0 && version.Revision == 0)                  || (version.Major == 65535 && version.Minor == 65535 && version.Build == 65535 && version.Revision == 65535);
Magic Number,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,IsZeroOrAllOnes,The following statement contains a magic number: return version == null                  || (version.Major == 0 && version.Minor == 0 && version.Build == 0 && version.Revision == 0)                  || (version.Major == 65535 && version.Minor == 65535 && version.Build == 65535 && version.Revision == 65535);
Magic Number,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,GetMscorlibBasePath,The following statement contains a magic number: switch (version.Major)                  {                      case 1:                          if (version.MajorRevision == 3300)                              return "v1.0.3705";                          return "v1.1.4322";                      case 2:                          return "v2.0.50727";                      case 4:                          return "v4.0.30319";                      default:                          if (throwOnError)                              throw new NotSupportedException("Version not supported: " + version);                          return null;                  }
Magic Number,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,GetMscorlibBasePath,The following statement contains a magic number: switch (version.Major)                  {                      case 1:                          if (version.MajorRevision == 3300)                              return "v1.0.3705";                          return "v1.1.4322";                      case 2:                          return "v2.0.50727";                      case 4:                          return "v4.0.30319";                      default:                          if (throwOnError)                              throw new NotSupportedException("Version not supported: " + version);                          return null;                  }
Magic Number,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,GetMscorlibBasePath,The following statement contains a magic number: switch (version.Major)                  {                      case 1:                          if (version.MajorRevision == 3300)                              return "v1.0.3705";                          return "v1.1.4322";                      case 2:                          return "v2.0.50727";                      case 4:                          return "v4.0.30319";                      default:                          if (throwOnError)                              throw new NotSupportedException("Version not supported: " + version);                          return null;                  }
Magic Number,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,GetGacPaths,The following statement contains a magic number: var paths = new List<string>(2);
Magic Number,Serenity.CodeGenerator,GenerateCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\GenerateCommand.cs,GetOption,The following statement contains a magic number: return val.Substring(1' val.Length - 2);
Magic Number,Serenity.CodeGenerator,MvcCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\MvcCommand.cs,Run,The following statement contains a magic number: var close = (new String(' '' (i * 4)) + "}");
Magic Number,Serenity.CodeGenerator,MvcCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\MvcCommand.cs,Run,The following statement contains a magic number: var x = Math.Min(last.Length' parts.Length) - 2;
Magic Number,Serenity.CodeGenerator,MvcCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\MvcCommand.cs,Run,The following statement contains a magic number: var close = (new String(' '' ((x + 2) * 4)) + "}");
Magic Number,Serenity.CodeGenerator,MvcCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\MvcCommand.cs,Run,The following statement contains a magic number: var close = (new String(' '' ((x + 2) * 4)) + "}");
Magic Number,Serenity.CodeGenerator,MvcCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\MvcCommand.cs,Run,The following statement contains a magic number: var indent = new String(' '' (i + 2) * 4);
Magic Number,Serenity.CodeGenerator,MvcCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\MvcCommand.cs,Run,The following statement contains a magic number: var indent = new String(' '' (i + 2) * 4);
Magic Number,Serenity.CodeGenerator,MvcCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\MvcCommand.cs,Run,The following statement contains a magic number: parts.Length - 1 > 0 && parts[parts.Length - 2] == n
Magic Number,Serenity.CodeGenerator,MvcCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\MvcCommand.cs,Run,The following statement contains a magic number: sb.Append(new String(' '' (parts.Length + 1) * 4));
Magic Number,Serenity.CodeGenerator,MvcCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\MvcCommand.cs,Run,The following statement contains a magic number: sb.AppendLine(new String(' '' ((i + 1) * 4)) + "}" + Environment.NewLine);
Magic Number,Serenity.CodeGenerator,RestoreCommand,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Commands\RestoreCommand.cs,Run,The following statement contains a magic number: ver = ver.Substring(0' ver.Length - 2);
Magic Number,Serenity.CodeGenerator,GeneratorConfig,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Generator\GeneratorConfig.cs,SaveToJson,The following statement contains a magic number: return JSON.StringifyIndented(this' 2);
Magic Number,Serenity.CodeGenerator,RowGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Generator\RowGenerator.cs,GenerateModel,The following statement contains a magic number: f.Title = f.Title.SafeSubstring(0' f.Title.Length - 3);
Magic Number,Serenity.CodeGenerator,RowGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Generator\RowGenerator.cs,GenerateModel,The following statement contains a magic number: f.Title.EndsWith(" Id") && f.Title.Length > 3
Magic Number,Serenity.CodeGenerator,RowGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Generator\RowGenerator.cs,GenerateModel,The following statement contains a magic number: j.Name = j.Name.Substring(0' j.Name.Length - 2);
Magic Number,Serenity.CodeGenerator,RowGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Generator\RowGenerator.cs,ClassNameFromTableName,The following statement contains a magic number: tableName = tableName.Substring(3);
Magic Number,Serenity.CodeGenerator,Templates,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Generator\Templates.cs,Render,The following statement contains a magic number: context.LoopLimit = 100000;
Magic Number,Serenity.CodeGenerator,Templates,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Generator\Templates.cs,Render,The following statement contains a magic number: context.RecursiveLimit = 1000;
Magic Number,Serenity.CodeGenerator,CodeFileHelper,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Helpers\CodeFileHelper.cs,ExecuteTSC,The following statement contains a magic number: Process.Start(psi).WaitForExit(10000);
Magic Number,Serenity.CodeGenerator,SchemaHelper,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Helpers\SchemaHelper.cs,SqlTypeNameToFieldType,The following statement contains a magic number: size == 0 || size > 256
Magic Number,Serenity.CodeGenerator,TSTypeLister,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Helpers\TSTypeLister.cs,List,The following statement contains a magic number: Action<string> writeCache = (json) =>              {                  try                  {                      Directory.CreateDirectory(cacheDir);                      TemporaryFileHelper.PurgeDirectory(cacheDir' TimeSpan.Zero' 99' null);                      File.WriteAllText(cacheFile' json);                  }                  catch                  {                  }              };
Magic Number,Serenity.CodeGenerator,TSTypeLister,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Helpers\TSTypeLister.cs,List,The following statement contains a magic number: process.WaitForExit(60000);
Magic Number,Inflector,Inflector,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Helpers\StringInflector.cs,Ordanize,The following statement contains a magic number: int nMod100 = number % 100;
Magic Number,Inflector,Inflector,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Helpers\StringInflector.cs,Ordanize,The following statement contains a magic number: nMod100 >= 11 && nMod100 <= 13
Magic Number,Inflector,Inflector,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Helpers\StringInflector.cs,Ordanize,The following statement contains a magic number: nMod100 >= 11 && nMod100 <= 13
Magic Number,Inflector,Inflector,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Helpers\StringInflector.cs,Ordanize,The following statement contains a magic number: switch (number % 10)              {                  case 1:                      return numberString + "st";                  case 2:                      return numberString + "nd";                  case 3:                      return numberString + "rd";                  default:                      return numberString + "th";              }
Magic Number,Inflector,Inflector,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Helpers\StringInflector.cs,Ordanize,The following statement contains a magic number: switch (number % 10)              {                  case 1:                      return numberString + "st";                  case 2:                      return numberString + "nd";                  case 3:                      return numberString + "rd";                  default:                      return numberString + "th";              }
Magic Number,Inflector,Inflector,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Helpers\StringInflector.cs,Ordanize,The following statement contains a magic number: switch (number % 10)              {                  case 1:                      return numberString + "st";                  case 2:                      return numberString + "nd";                  case 3:                      return numberString + "rd";                  default:                      return numberString + "th";              }
Missing Default,Serenity.CodeGeneration,ClientTypesGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,GetOptionTypeName,The following switch statement is missing a default case: switch (typeName)              {                  case "number": return "Double";                  case "string": return "String";                  case "Date": return "DateTime";                  case "boolean": return "Boolean";              }
Missing Default,ICSharpCode.Decompiler,UniversalAssemblyResolver,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\UniversalAssemblyResolver.cs,ParseTargetFramework,The following switch statement is missing a default case: switch (pair[0].Trim().ToUpperInvariant())                  {                      case "VERSION":                          var versionString = pair[1].TrimStart('v');                          if (identifier == TargetFrameworkIdentifier.NETCoreApp ||                              identifier == TargetFrameworkIdentifier.NETStandard)                          {                              if (versionString.Length == 3)                                  versionString += ".0";                          }                          if (!Version.TryParse(versionString' out version))                              version = null;                          break;                  }
Missing Default,Serenity.CodeGenerator,RowGenerator,D:\research\architectureSmells\repos\volkanceylan_serenity\Serenity.CodeGenerator\Generator\RowGenerator.cs,FieldTypeToTS,The following switch statement is missing a default case: switch (ft)              {                  case "Boolean":                      return "boolean";                  case "String":                  case "DateTime":                  case "TimeSpan":                  case "Guid":                      return "string";                  case "Int32":                  case "Int16":                  case "Int64":                  case "Single":                  case "Double":                  case "Decimal":                      return "number";                  case "Stream":                  case "ByteArray":                      return "number[]";              }
