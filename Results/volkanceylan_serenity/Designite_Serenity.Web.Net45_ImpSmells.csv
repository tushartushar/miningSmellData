Implementation smell,Namespace,Class,File,Method,Description
Long Method,Serenity.CodeGeneration,ServerTypingsGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,GenerateRowMetadata,The method has 101 lines of code.
Long Method,Serenity.CodeGeneration,ServerTypingsGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,SSTypeNameToTS,The method has 138 lines of code.
Long Method,Serenity.CodeGeneration,TypeScriptParser,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ManualTsParser.cs,ParseTypeMember,The method has 131 lines of code.
Long Method,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetToken,The method has 204 lines of code.
Long Method,Serenity.CodeGeneration,ScriptDtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptDtoGenerator.cs,GenerateCode,The method has 138 lines of code.
Long Method,Serenity.CodeGeneration,ScriptEndpointGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptEndpointGenerator.cs,GenerateCode,The method has 166 lines of code.
Long Method,Serenity.CodeGeneration,ScriptFormGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptFormGenerator.cs,GenerateCode,The method has 119 lines of code.
Long Method,Serenity.Services,JsonFilter,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\JsonFilter.cs,OnActionExecuting,The method has 118 lines of code.
Long Method,Serenity.Services,ImageUploadBehavior,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ImageUploadBehavior.cs,CheckUploadedImageAndCreateThumbs,The method has 122 lines of code.
Long Method,Serenity.Web,CssBundleManager,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\CssBundleManager.cs,Initialize,The method has 186 lines of code.
Long Method,Serenity.Web,DynamicScriptRegistration,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\DynamicScriptRegistration.cs,Initialize,The method has 109 lines of code.
Long Method,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The method has 122 lines of code.
Long Method,Serenity.Web,ThumbnailGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ThumbnailGenerator.cs,Generate,The method has 116 lines of code.
Long Method,Serenity.Web,ScriptBundleManager,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\ScriptBundleManager.cs,Initialize,The method has 177 lines of code.
Long Method,Serenity.Reporting,HtmlToPdfConverter,C:\repos\volkanceylan_serenity\Serenity.Web\Reporting\Tools\HtmlToPdfConverter.cs,Execute,The method has 126 lines of code.
Complex Method,Serenity.CodeGeneration,ServerImportGeneratorBase,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,GenerateAll,Cyclomatic complexity of the method is 8
Complex Method,Serenity.CodeGeneration,ServerImportGeneratorBase,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,MakeFriendlyReference,Cyclomatic complexity of the method is 8
Complex Method,Serenity.CodeGeneration,ServerImportGeneratorBase,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,IsPublicServiceMethod,Cyclomatic complexity of the method is 8
Complex Method,Serenity.CodeGeneration,ServerImportGeneratorBase,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,GetServiceUrlFromRoute,Cyclomatic complexity of the method is 9
Complex Method,Serenity.CodeGeneration,ClientTypesGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,AddOptionMembers,Cyclomatic complexity of the method is 11
Complex Method,Serenity.CodeGeneration,ServerTypingsGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,HandleMemberType,Cyclomatic complexity of the method is 12
Complex Method,Serenity.CodeGeneration,TypeScriptParser,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ManualTsParser.cs,ParseType,Cyclomatic complexity of the method is 12
Complex Method,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetToken,Cyclomatic complexity of the method is 12
Complex Method,Serenity.CodeGeneration,LexerSettings,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,Clone,Cyclomatic complexity of the method is 14
Complex Method,Serenity.CodeGeneration,DtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\DtoGenerator.cs,HandleMemberType,Cyclomatic complexity of the method is 11
Complex Method,Serenity.CodeGeneration,ScriptDtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptDtoGenerator.cs,GenerateCode,Cyclomatic complexity of the method is 14
Complex Method,Serenity.CodeGeneration,ScriptDtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptDtoGenerator.cs,HandleMemberType,Cyclomatic complexity of the method is 12
Complex Method,Serenity.CodeGeneration,ScriptDtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptDtoGenerator.cs,MakeFriendlyName,Cyclomatic complexity of the method is 8
Complex Method,Serenity.CodeGeneration,ScriptDtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptDtoGenerator.cs,GenerateRowMembers,Cyclomatic complexity of the method is 11
Complex Method,Serenity.CodeGeneration,ScriptEndpointGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptEndpointGenerator.cs,GenerateCode,Cyclomatic complexity of the method is 10
Complex Method,Serenity.CodeGeneration,ScriptEndpointGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptEndpointGenerator.cs,GetServiceUrlFromRoute,Cyclomatic complexity of the method is 9
Complex Method,Serenity.CodeGeneration,ScriptFormGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptFormGenerator.cs,GenerateCode,Cyclomatic complexity of the method is 8
Complex Method,Serenity.CodeGeneration,ServerImportsGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\ServerImports\ServerImportsGenerator.MemberType.cs,HandleMemberType,Cyclomatic complexity of the method is 13
Complex Method,Serenity.CodeGeneration,ServerImportsGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\ServerImports\ServerImportsGenerator.MemberType.cs,GenerateRowMembers,Cyclomatic complexity of the method is 11
Complex Method,Serenity.Services,JsonFilter,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\JsonFilter.cs,OnActionExecuting,Cyclomatic complexity of the method is 8
Complex Method,Serenity.Services,TokenAuthorizeAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\TokenAuthorizeFilter.cs,AuthorizeCore,Cyclomatic complexity of the method is 8
Complex Method,Serenity.Services,ImageUploadBehavior,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ImageUploadBehavior.cs,ActivateFor,Cyclomatic complexity of the method is 9
Complex Method,Serenity.Services,ImageUploadBehavior,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ImageUploadBehavior.cs,ProcessReplaceFields,Cyclomatic complexity of the method is 9
Complex Method,Serenity.Services,ImageUploadBehavior,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ImageUploadBehavior.cs,OnBeforeSave,Cyclomatic complexity of the method is 8
Complex Method,Serenity.Services,EmbeddedMultiFileUploadBehaviourAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\EmbeddedMultiFileUploadBehaviourAttribute.cs,OnBeforeSave,Cyclomatic complexity of the method is 9
Complex Method,Serenity.Services,EmbeddedFileUploadBehaviourAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\EmbeddedFileUploadBehaviourAttribute.cs,OnBeforeSave,Cyclomatic complexity of the method is 9
Complex Method,Serenity.Web,DistinctValuesRegistration,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\DistinctValuesRegistration.cs,RegisterDistinctValueScripts,Cyclomatic complexity of the method is 12
Complex Method,Serenity.Web,CssBundleManager,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\CssBundleManager.cs,Initialize,Cyclomatic complexity of the method is 10
Complex Method,Serenity.Web,DynamicScriptRegistration,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\DynamicScriptRegistration.cs,Initialize,Cyclomatic complexity of the method is 13
Complex Method,Serenity.Web,LookupScriptRegistration,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\LookupScriptRegistration.cs,RegisterLookupScripts,Cyclomatic complexity of the method is 8
Complex Method,Serenity.Web,ImageChecker,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ImageChecker.cs,CheckSizeConstraints,Cyclomatic complexity of the method is 9
Complex Method,Serenity.Web,HtmlScriptExtensions,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\HtmlScriptExtensions.cs,StyleBundle,Cyclomatic complexity of the method is 8
Complex Method,Serenity.Web,HtmlScriptExtensions,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\HtmlScriptExtensions.cs,ScriptBundle,Cyclomatic complexity of the method is 8
Complex Method,Serenity.Web,ContentHashCache,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\ContentHashCache.cs,ResolveWithHash,Cyclomatic complexity of the method is 8
Complex Method,Serenity.Web,LocalTextScript,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\DynamicScriptTypes\LocalTextScript.cs,GetLocalTextPackageScript,Cyclomatic complexity of the method is 21
Complex Method,Serenity.Web,DbLookupScript<TItem>,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\DynamicScriptTypes\DbLookupScript.cs,DbLookupScript,Cyclomatic complexity of the method is 11
Complex Method,Serenity.Web,ScriptBundleManager,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\ScriptBundleManager.cs,Initialize,Cyclomatic complexity of the method is 10
Complex Method,Serenity.Navigation,NavigationItemAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Navigation\NavigationItemAttribute.cs,GetUrlFromController,Cyclomatic complexity of the method is 14
Complex Method,Serenity.Reporting,HtmlToPdfConverter,C:\repos\volkanceylan_serenity\Serenity.Web\Reporting\Tools\HtmlToPdfConverter.cs,Execute,Cyclomatic complexity of the method is 25
Complex Method,Serenity.Reporting,ReportColumnConverter,C:\repos\volkanceylan_serenity\Serenity.Web\Reporting\Worksheet\ReportColumnConverter.cs,FromMember,Cyclomatic complexity of the method is 8
Complex Method,Serenity.Reporting,ReportColumnConverter,C:\repos\volkanceylan_serenity\Serenity.Web\Reporting\Worksheet\ReportColumnConverter.cs,ObjectTypeToList,Cyclomatic complexity of the method is 8
Complex Method,Serenity.ComponentModel,PhoneEditorAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\PhoneEditorAttribute.cs,IsValidPhoneTurkey,Cyclomatic complexity of the method is 9
Long Parameter List,Serenity.CodeGeneration,ServerTypingsGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,SSDeclarationProperty,The method has 6 parameters. Parameters: type' prop' codeNamespace' isStaticClass' isSerializable' preserveMemberCase
Long Parameter List,Serenity.CodeGeneration,ServerTypingsGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,SSDeclarationField,The method has 6 parameters. Parameters: type' field' codeNamespace' isStaticClass' isSerializable' preserveMemberCase
Long Parameter List,Serenity.CodeGeneration,Token,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,Token,The method has 10 parameters. Parameters: type' value' text' id' startPosition' endPosition' lineBegin' lineNumber' endLineBegin' endLineNumber
Long Parameter List,Serenity.CodeGeneration,ScriptDtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptDtoGenerator.cs,HandleMemberType,The method has 5 parameters. Parameters: code' memberType' codeNamespace' usingNamespaces' enqueueType
Long Parameter List,Serenity.Services,EmbeddedMultiFileUploadBehaviourAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\EmbeddedMultiFileUploadBehaviourAttribute.cs,EmbeddedMultiFileUploadBehaviourAttribute,The method has 5 parameters. Parameters: filesField' fileNameFormat' copyFilesToHistory' subFolder' storeSubFolderInDB
Long Parameter List,Serenity.Services,EmbeddedFileUploadBehaviourAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\EmbeddedFileUploadBehaviourAttribute.cs,EmbeddedFileUploadBehaviourAttribute,The method has 5 parameters. Parameters: fileNameField' fileNameFormat' copyFileToHistory' subFolder' storeSubFolderInDB
Long Parameter List,Serenity.Web,ThumbnailGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ThumbnailGenerator.cs,Generate,The method has 7 parameters. Parameters: image' thumbWidth' thumbHeight' mode' backgroundColor' xDPI' yDPI
Long Parameter List,Serenity.Web,DbLookupScript<TItem>,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\DynamicScriptTypes\DbLookupScript.cs,DbLookupScript,The method has 6 parameters. Parameters: name' connectionKey' authorize' right' nonCached' getItems
Long Parameter List,Serenity.Navigation,NavigationLinkAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Navigation\NavigationLinkAttribute.cs,NavigationLinkAttribute,The method has 5 parameters. Parameters: order' path' url' permission' icon
Long Parameter List,Serenity.Navigation,NavigationLinkAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Navigation\NavigationLinkAttribute.cs,NavigationLinkAttribute,The method has 5 parameters. Parameters: order' path' controller' icon' action
Long Parameter List,Serenity.Navigation,NavigationItemAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Navigation\NavigationItemAttribute.cs,NavigationItemAttribute,The method has 5 parameters. Parameters: order' path' url' permission' icon
Long Parameter List,Serenity.Navigation,NavigationItemAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Navigation\NavigationItemAttribute.cs,NavigationItemAttribute,The method has 5 parameters. Parameters: order' path' controller' icon' action
Long Parameter List,Serenity.ComponentModel,PhoneEditorAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\PhoneEditorAttribute.cs,Validate,The method has 6 parameters. Parameters: phone' isMultiple' isInternal' isMobile' allowInternational' allowExtension
Long Parameter List,Serenity.Web.MvcFakes,FakeControllerContext,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\Fakes\FakeControllerContext.cs,FakeControllerContext,The method has 7 parameters. Parameters: controller' userName' roles' formParams' queryStringParams' cookies' sessionItems
Long Parameter List,Serenity.Web.MvcFakes,FakeHttpContext,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\Fakes\FakeHttpContext.cs,FakeHttpContext,The method has 5 parameters. Parameters: principal' formParams' queryStringParams' cookies' sessionItems
Long Statement,Serenity.CodeGeneration,ServerImportGeneratorBase,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,GetServiceUrlFromRoute,The length of the statement  "            string url = route == null ? ("Services/HasNoRoute/" + controller.Name) : (route.GetType().GetProperty("Template").GetValue(route) as string ?? ""); " is 148.
Long Statement,Serenity.CodeGeneration,ServerTypingsGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,GenerateForm,The length of the statement  "            initializer.Append(".prototype' <string>x[0]' { get: function () { return this.w(x[0]' (x[1] as any)()); }' enumerable: true' configurable: true }));"); " is 152.
Long Statement,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetToken,The length of the statement  "                                return new Token(TokenType.EndOfLine' ""' GetTokenText()' 0' start' position' lineBegin' lineNumber' endLineBegin' endLineNumber); " is 130.
Long Statement,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetToken,The length of the statement  "                        return new Token(TokenType.WhiteSpace' ""' GetTokenText()' 0' start' position' lineBegin' lineNumber' endLineBegin' endLineNumber); " is 131.
Long Statement,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetToken,The length of the statement  "                                return new Token(TokenType.Comment' ""' GetTokenText()' 0' start' position' lineBegin' lineNumber' lineBegin' lineNumber); " is 122.
Long Statement,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetToken,The length of the statement  "                        return new Token(TokenType.Comment' ""' GetTokenText()' 0' start' position' lineBegin' lineNumber' endLineBegin' endLineNumber); " is 128.
Long Statement,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetToken,The length of the statement  "            if (quote || currentChar == settings.IdentPrefix && (isIdentQuote = (nextChar = PeekChar(1)) == settings.IdentQuote || nextChar == settings.IdentQuoteBegin)) " is 157.
Long Statement,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetToken,The length of the statement  "                        return new Token(TokenType.Symbol' symbol' symbolText' (int)symbolId' start' position' lineBegin' lineNumber' lineBegin' lineNumber); " is 133.
Long Statement,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetToken,The length of the statement  "            return new Token(TokenType.Char' currentChar' charText' 0' start' position' lineBegin' lineNumber' lineBegin' lineNumber); " is 122.
Long Statement,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetQuotedIdentifierToken,The length of the statement  "            return new Token(TokenType.Identifier' val' GetTokenText()' 0' start' position' lineBegin' lineNumber' endLineBegin' endLineNumber); " is 132.
Long Statement,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetQuotedStringToken,The length of the statement  "            return new Token(TokenType.QuotedString' val' GetTokenText()' 0' start' position' lineBegin' lineNumber' endLineBegin' endLineNumber); " is 134.
Long Statement,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetKeywordOrIdentifierToken,The length of the statement  "            return new Token(tokenType' val' GetTokenText()' (int)id' start' position' lineBegin' lineNumber' lineBegin' lineNumber); " is 121.
Long Statement,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetNumberToken,The length of the statement  "                } while ((currentChar >= '0' && currentChar <= '9') || currentChar == '-' || currentChar == '+' || Char.IsLetter(currentChar)); " is 127.
Long Statement,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetNumberToken,The length of the statement  "                return new Token(TokenType.Number' val' GetTokenText()' 0' start' position' lineBegin' lineNumber' lineBegin' lineNumber); " is 122.
Long Statement,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetNumberToken,The length of the statement  "                    return new Token(TokenType.Decimal' decimalVal' GetTokenText()' 0' start' position' lineBegin' lineNumber' lineBegin' lineNumber); " is 130.
Long Statement,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetNumberToken,The length of the statement  "                    return new Token(TokenType.Number' val' GetTokenText()' 0' start' position' lineBegin' lineNumber' lineBegin' lineNumber); " is 122.
Long Statement,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetPrefixedIdentifierToken,The length of the statement  "            return new Token(TokenType.Identifier' val' GetTokenText()' 0' start' position' lineBegin' lineNumber' lineBegin' lineNumber); " is 126.
Long Statement,Serenity.CodeGeneration,LexerSettings,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,Clone,The length of the statement  "                settings.Keywords = new Dictionary<string' int>(settings.Keywords' StringComparer.Create(settings.CultureInfo' ignoreCase)); " is 124.
Long Statement,Serenity.CodeGeneration,ScriptDtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptDtoGenerator.cs,HandleMemberType,The length of the statement  "            if (memberType == typeof(DateTime?) || memberType == typeof(DateTime) || memberType == typeof(TimeSpan) || memberType == typeof(TimeSpan?)) " is 139.
Long Statement,Serenity.CodeGeneration,ScriptDtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptDtoGenerator.cs,HandleMemberType,The length of the statement  "                (memberType.GetGenericTypeDefinition() == typeof(List<>) || memberType.GetGenericTypeDefinition() == typeof(HashSet<>))) " is 120.
Long Statement,Serenity.Services,JsonFilter,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\JsonFilter.cs,OnActionExecuting,The length of the statement  "                            ((ControllerActionDescriptor)filterContext.ActionDescriptor).ActionName' filterContext.ActionDescriptor.Parameters.Count)); " is 123.
Long Statement,Serenity.Services,JsonFilter,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\JsonFilter.cs,OnActionExecuting,The length of the statement  "                        System.Text.Encoding.GetEncoding((string)filterContext.HttpContext.Request.Headers["Content-Encoding"] ?? "utf-8")' true' 4096' true)) " is 134.
Long Statement,Serenity.Services,ServiceEndpointActionInvoker,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\ServiceEndpoint.cs,InvokeExceptionFilters,The length of the statement  "                var result = base.InvokeExceptionFilters(controllerContext' filters.Where(x => !(x is HandleErrorAttribute)).ToList()' exception); " is 130.
Long Statement,Serenity.Services,MultipleImageUploadBehavior,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\MultipleImageUploadBehavior.cs,ActivateFor,The length of the statement  "            this.uploadHelper = new UploadHelper((attr.SubFolder.IsEmptyOrNull() ? "" : (attr.SubFolder + "/")) + (this.fileNameFormat)); " is 125.
Long Statement,Serenity.Services,MultipleImageUploadBehavior,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\MultipleImageUploadBehavior.cs,DeleteOldFile,The length of the statement  "                        UploadHelper.CopyFileAndRelated(UploadHelper.DbFilePath(oldFilePath)' UploadHelper.DbFilePath(historyFile)' overwrite: true); " is 125.
Long Statement,Serenity.Services,ImageUploadBehavior,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ImageUploadBehavior.cs,ActivateFor,The length of the statement  "            this.uploadHelper = new UploadHelper((attr.SubFolder.IsEmptyOrNull() ? "" : (attr.SubFolder + "/")) + (this.fileNameFormat)); " is 125.
Long Statement,Serenity.Services,ImageUploadBehavior,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ImageUploadBehavior.cs,DeleteOldFile,The length of the statement  "                        UploadHelper.CopyFileAndRelated(UploadHelper.DbFilePath(oldFilePath)' UploadHelper.DbFilePath(historyFile)' overwrite: true); " is 125.
Long Statement,Serenity.Services,EmbeddedMultiFileUploadBehaviourAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\EmbeddedMultiFileUploadBehaviourAttribute.cs,OnBeforeSave,The length of the statement  "                        UploadHelper.CopyFileAndRelated(UploadHelper.DbFilePath(oldFilePath)' UploadHelper.DbFilePath(historyFile)' overwrite: true); " is 125.
Long Statement,Serenity.Services,EmbeddedFileUploadBehaviourAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\EmbeddedFileUploadBehaviourAttribute.cs,OnBeforeSave,The length of the statement  "            var filename = (StringField)(handler.Row.FindField(this.fileNameField) ?? handler.Row.FindFieldByPropertyName(fileNameField)); " is 126.
Long Statement,Serenity.Services,EmbeddedFileUploadBehaviourAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\EmbeddedFileUploadBehaviourAttribute.cs,OnBeforeSave,The length of the statement  "                        UploadHelper.CopyFileAndRelated(UploadHelper.DbFilePath(oldFilePath)' UploadHelper.DbFilePath(historyFile)' overwrite: true); " is 125.
Long Statement,Serenity.Services,EmbeddedFileUploadBehaviourAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\EmbeddedFileUploadBehaviourAttribute.cs,CopyTemporaryFile,The length of the statement  "            var filename = (StringField)(handler.Row.FindField(this.fileNameField) ?? handler.Row.FindFieldByPropertyName(fileNameField)); " is 126.
Long Statement,Serenity.Services,EmbeddedFileUploadBehaviourAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\EmbeddedFileUploadBehaviourAttribute.cs,OnAfterSave,The length of the statement  "            var filename = (StringField)(handler.Row.FindField(this.fileNameField) ?? handler.Row.FindFieldByPropertyName(fileNameField)); " is 126.
Long Statement,Serenity.Web,DbLookupScript<TItem>,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\DynamicScriptTypes\DbLookupScript.cs,CheckRights,The length of the statement  "                throw new UnauthorizedAccessException(String.Format("{0} script can only be accessed by authorized users!"' ScriptName)); " is 121.
Long Statement,Serenity,WebSecurityHelper,C:\repos\volkanceylan_serenity\Serenity.Web\Security\WebSecurityHelper.cs,LogOut,The length of the statement  "            // bu path /site olmalı' /site/ olduğunda eğer http://sunucu/site yazılırsa path cookie bu yola uygulanmıyor' sürekli login gerekiyor! " is 134.
Long Statement,Serenity.Web.HttpHandlers,DynamicScriptHandler,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\DynamicScript\DynamicScriptHandler.cs,ProcessScriptRequest,The length of the statement  "            var supportsGzip = script.CompressedBytes != null && enc.IndexOf("gzip") != -1 || request.Headers["---------------"] != null; " is 125.
Long Statement,Serenity.Navigation,NavigationItemAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Navigation\NavigationItemAttribute.cs,GetUrlFromController,The length of the statement  "            var actionMethod = controller.GetMethod(action' System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance); " is 129.
Long Statement,Serenity.Navigation,NavigationItemAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Navigation\NavigationItemAttribute.cs,GetPermissionFromController,The length of the statement  "            var actionMethod = controller.GetMethod(action' System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance); " is 129.
Long Statement,Serenity.Navigation,NavigationItemAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Navigation\NavigationItemAttribute.cs,GetPermissionFromController,The length of the statement  "            var pageAuthorize = actionMethod.GetCustomAttribute<PageAuthorizeAttribute>() ?? controller.GetCustomAttribute<PageAuthorizeAttribute>(); " is 137.
Long Statement,Serenity.Reporting,HtmlToPdfConverter,C:\repos\volkanceylan_serenity\Serenity.Web\Reporting\Tools\HtmlToPdfConverter.cs,Execute,The length of the statement  "            var exePath = UtilityExePath ?? Path.Combine(HostingEnvironment.MapPath("~/")' "../App_Data/Reporting/wkhtmltopdf.exe".Replace('/'' Path.DirectorySeparatorChar)); " is 162.
Long Statement,Serenity.Reporting,HtmlToPdfConverter,C:\repos\volkanceylan_serenity\Serenity.Web\Reporting\Tools\HtmlToPdfConverter.cs,Execute,The length of the statement  "                throw new InvalidOperationException(String.Format("Can't find wkhtmltopdf.exe which is required for PDF generation.\n" + " is 120.
Long Statement,Serenity.IO,CommandLineTools,C:\repos\volkanceylan_serenity\Serenity.Web\Reporting\Tools\CommandLineTools.cs,EscapeArguments,The length of the statement  "                    arguments.Append(escapeQuote.Replace(args[i]' m => m.Groups[1].Value + m.Groups[1].Value + (m.Groups[2].Value == "\"" ? "\\\"" : ""))); " is 135.
Complex Conditional,Serenity.CodeGeneration,ServerImportGeneratorBase,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,GenerateAll,The conditional expression  "fromType.IsSubclassOf(typeof(ServiceRequest)) ||                          fromType.IsSubclassOf(typeof(ServiceResponse)) ||                          fromType.IsSubclassOf(typeof(Row)) ||                          fromType.GetCustomAttribute<ScriptIncludeAttribute>() != null ||                          fromType.GetCustomAttribute<FormScriptAttribute>() != null ||                          fromType.GetCustomAttribute<ColumnsScriptAttribute>() != null ||                          GeneratorUtils.IsSubclassOf(fromType' "Serenity.Services.ServiceEndpoint") ||                          ((GeneratorUtils.IsSubclassOf(fromType' "Microsoft.AspNetCore.Mvc.Controller") ||                            GeneratorUtils.IsSubclassOf(fromType' "System.Web.Mvc.Controller")) && // backwards compability                           fromType.Namespace != null &&                           fromType.Namespace.EndsWith(".Endpoints"))"  is complex.
Complex Conditional,Serenity.CodeGeneration,ServerImportGeneratorBase,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,ShortenNamespace,The conditional expression  "(codeNamespace != null && (ns == codeNamespace)) ||                  (codeNamespace != null && codeNamespace.StartsWith((ns + ".")))"  is complex.
Complex Conditional,Serenity.CodeGeneration,ServerImportGeneratorBase,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,ShortenNamespace,The conditional expression  "(codeNamespace != null && (ns == codeNamespace)) ||                  (codeNamespace != null && codeNamespace.StartsWith((ns + ".")))"  is complex.
Complex Conditional,Serenity.CodeGeneration,ClientTypesGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,AddOptionMembers,The conditional expression  "getMethod == null || setMethod == null || getMethod.IsProtected || setMethod.IsProtected"  is complex.
Complex Conditional,Serenity.CodeGeneration,ClientTypesGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,AddOptionMembers,The conditional expression  "member.Type.StartsWith("System.Func`") ||                      member.Type.StartsWith("System.Action`") ||                      member.Type == "System.Delegate" ||                      member.Type.Contains("System.TypeOption") ||                      member.Type == "Function""  is complex.
Complex Conditional,Serenity.CodeGeneration,ClientTypesGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,AddOptionMembers,The conditional expression  "!isOptions &&                      !member.Attributes.Any(x =>                          x.Type == "System.ComponentModel.DisplayNameAttribute" ||                          x.Type == "Serenity.OptionAttribute" ||                          x.Type == "Serenity.Decorators.option" ||                          x.Type == "Serenity.Decorators.displayName")"  is complex.
Complex Conditional,Serenity.CodeGeneration,ServerTypingsGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,HandleMemberType,The conditional expression  "memberType == typeof(Int16) ||                  memberType == typeof(Int32) ||                  memberType == typeof(Int64) ||                  memberType == typeof(UInt16) ||                  memberType == typeof(UInt32) ||                  memberType == typeof(UInt64) ||                  memberType == typeof(Single) ||                  memberType == typeof(Double) ||                  memberType == typeof(Decimal) ||                  memberType == typeof(Byte) ||                  memberType == typeof(SByte)"  is complex.
Complex Conditional,Serenity.CodeGeneration,ServerTypingsGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,HandleMemberType,The conditional expression  "memberType == typeof(DateTime) ||                  memberType == typeof(TimeSpan) ||                  memberType == typeof(DateTimeOffset) ||                  memberType == typeof(Guid)"  is complex.
Complex Conditional,Serenity.CodeGeneration,ServerTypingsGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ServerTypings\ServerTypingsGenerator.cs,SSDeclarationMethod,The conditional expression  "method.IsConstructor || method.IsOverride || method.IsGetter || method.IsSetter"  is complex.
Complex Conditional,Serenity.CodeGeneration,TypeScriptParser,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ManualTsParser.cs,ParseExpression,The conditional expression  "string.IsNullOrEmpty(text) ||                          !namespaceStack.Peek().Imports.TryGetValue(text' out import) ||                          prior == null ||                           (prior.Type == TokenType.Char &&                            prior.Text == ".")"  is complex.
Complex Conditional,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetToken,The conditional expression  "currentChar == stringQuoteChar || i == 0 && currentChar == settings.StringPrefix && PeekChar(1) == stringQuoteChar"  is complex.
Complex Conditional,Serenity.CodeGeneration,Lexer,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\Lexer.cs,GetToken,The conditional expression  "quote || currentChar == settings.IdentPrefix && (isIdentQuote = (nextChar = PeekChar(1)) == settings.IdentQuote || nextChar == settings.IdentQuoteBegin)"  is complex.
Complex Conditional,Serenity.CodeGeneration,ScriptDtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptDtoGenerator.cs,GenerateCode,The conditional expression  "fromType.IsSubclassOf(typeof(ServiceRequest)) ||                      fromType.IsSubclassOf(typeof(ServiceResponse)) ||                      fromType.IsSubclassOf(typeof(Row)) ||                      fromType.GetCustomAttribute<ScriptIncludeAttribute>() != null"  is complex.
Complex Conditional,Serenity.CodeGeneration,ScriptDtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptDtoGenerator.cs,HandleMemberType,The conditional expression  "memberType == typeof(DateTime?) || memberType == typeof(DateTime) || memberType == typeof(TimeSpan) || memberType == typeof(TimeSpan?)"  is complex.
Complex Conditional,Serenity.CodeGeneration,ScriptDtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptDtoGenerator.cs,MakeFriendlyName,The conditional expression  "ns == "Serenity" ||                  ns.StartsWith("Serenity.") ||                  (usingNamespaces != null && usingNamespaces.Contains(ns)) ||                  (codeNamespace != null && (ns == codeNamespace)) ||                  (codeNamespace != null && codeNamespace.StartsWith((ns + ".")))"  is complex.
Complex Conditional,Serenity.Reflection,GeneratorUtils,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\GeneratorUtils.cs,IsSimpleType,The conditional expression  "type == typeof(String) ||                  type == typeof(Int32) ||                  type == typeof(Int64) ||                  type == typeof(Int16) ||                  type == typeof(Double) ||                  type == typeof(Decimal) ||                  type == typeof(DateTime) ||                  type == typeof(Boolean) ||                  type == typeof(TimeSpan)"  is complex.
Complex Conditional,Serenity.Services,AutoValidateAntiforgeryTokenAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\AutoValidateAntiforgeryTokenAttribute.cs,OnAuthorization,The conditional expression  "string.Equals("GET"' method' StringComparison.OrdinalIgnoreCase) ||                  string.Equals("HEAD"' method' StringComparison.OrdinalIgnoreCase) ||                  string.Equals("TRACE"' method' StringComparison.OrdinalIgnoreCase) ||                  string.Equals("OPTIONS"' method' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Serenity.Services,TokenAuthorizeAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\TokenAuthorizeFilter.cs,AuthorizeCore,The conditional expression  "!ActionArgument.IsNullOrEmpty() &&                          (method.Equals("POST"' StringComparison.InvariantCultureIgnoreCase) ||                           method.Equals("PUT"' StringComparison.InvariantCultureIgnoreCase)) &&                           (request.ContentType ?? string.Empty).Contains("application/json")"  is complex.
Complex Conditional,Serenity.Services,ImageUploadBehavior,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ImageUploadBehavior.cs,CheckUploadedImageAndCreateThumbs,The conditional expression  "(attr.ScaleWidth > 0 || attr.ScaleHeight > 0) &&                          ((attr.ScaleWidth > 0 && (attr.ScaleSmaller || checker.Width > attr.ScaleWidth)) ||                              (attr.ScaleHeight > 0 && (attr.ScaleSmaller || checker.Height > attr.ScaleHeight)))"  is complex.
Complex Conditional,Serenity.Services,ImageUploadBehavior,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ImageUploadBehavior.cs,CheckUploadedImageAndCreateThumbs,The conditional expression  "dims.Length != 2 ||                              !Int32.TryParse(dims[0]' out w) ||                              !Int32.TryParse(dims[1]' out h) ||                              w < 0 ||                              h < 0 ||                              (w == 0 && h == 0)"  is complex.
Complex Conditional,Serenity.Web,DistinctValuesRegistration,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\DistinctValuesRegistration.cs,RegisterDistinctValueScripts,The conditional expression  "basedOnRowAttr == null || basedOnRowAttr.RowType == null ||                                      basedOnRowAttr.RowType.IsAbstract ||                                      !basedOnRowAttr.RowType.IsSubclassOf(typeof(Row))"  is complex.
Complex Conditional,Serenity.Web,DynamicScriptRegistration,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\DynamicScriptRegistration.cs,Initialize,The conditional expression  "type.IsAbstract ||                           type.IsInterface ||                           type.IsGenericTypeDefinition ||                          !type.IsPublic ||                          !type.IsSubclassOf(typeof(Controller))"  is complex.
Complex Conditional,Serenity.Web,ThumbnailGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ThumbnailGenerator.cs,Generate,The conditional expression  "imageWidth <= 0 || imageHeight <= 0 || (thumbWidth <= 0 && thumbHeight <= 0)"  is complex.
Complex Conditional,Serenity.Web,ThumbnailGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ThumbnailGenerator.cs,Generate,The conditional expression  "mode == ImageScaleMode.CropSourceImage &&                   Math.Abs(horizontalScale - verticalScale) >= 0.0001 &&                  horizontalScale != 0 &&                  verticalScale != 0"  is complex.
Complex Conditional,Serenity.Web,ThumbnailGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ThumbnailGenerator.cs,Generate,The conditional expression  "(xDPI != 0 && (thumb.HorizontalResolution != xDPI)) ||                      (yDPI != 0 && (thumb.VerticalResolution != yDPI))"  is complex.
Complex Conditional,Serenity.Web,UploadHelper,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\UploadHelper.cs,CheckFileNameSecurity,The conditional expression  "fileName == null ||                  fileName.Length == 0 ||                  fileName.IndexOf("..") >= 0 ||                  fileName.StartsWith("/") ||                  fileName.StartsWith("\\") ||                  fileName.EndsWith("/") ||                  fileName.EndsWith("\\")"  is complex.
Complex Conditional,Serenity.Web,ContentHashCache,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\ContentHashCache.cs,ResolveWithHash,The conditional expression  "contentUrl[0] != '/' &&                  (contentUrl[0] != '~' || contentUrl.Length < 2 || contentUrl[1] != '/')"  is complex.
Complex Conditional,Serenity.Web.HttpHandlers,DynamicScriptHandler,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\DynamicScript\DynamicScriptHandler.cs,WriteWithIfModifiedSinceControl,The conditional expression  "date.Year == lastWriteTime.Year &&                          date.Month == lastWriteTime.Month &&                          date.Day == lastWriteTime.Day &&                          date.Hour == lastWriteTime.Hour &&                          date.Minute == lastWriteTime.Minute &&                          date.Second == lastWriteTime.Second"  is complex.
Empty Catch Block,Serenity.Reporting,EnumDecorator,C:\repos\volkanceylan_serenity\Serenity.Web\Reporting\Worksheet\EnumDecorator.cs,Decorate,The method has an empty catch block.
Magic Number,Serenity.CodeGeneration,CodeGeneratorBase,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CodeGeneratorBase.cs,Reset,The following statement contains a magic number: sb = new StringBuilder(4096);
Magic Number,Serenity.CodeGeneration,CodeGeneratorBase,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\CodeGeneratorBase.cs,Reset,The following statement contains a magic number: cw = new CodeWriter(sb' 4);
Magic Number,Serenity.CodeGeneration,ImportGeneratorBase,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ImportGeneratorBase.cs,HasBaseType,The following statement contains a magic number: while (type != null)              {                  if (loop++ > 100)                      break;                    var baseTypeName = GetBaseTypeName(type);                  if (baseTypeName == typeName)                      return true;                    type = GetScriptType(baseTypeName);              }
Magic Number,Serenity.CodeGeneration,ImportGeneratorBase,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ImportGeneratorBase.cs,GetAttribute,The following statement contains a magic number: while ((type = GetBaseType(type)) != null)              {                  attr = type.Attributes.FirstOrDefault(x => x.Type == attributeName);                  if (attr != null)                      return attr;                    if (loop++ > 100)                      return null;              }
Magic Number,Serenity.CodeGeneration,ServerImportGeneratorBase,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\Base\ServerImportGeneratorBase.cs,GetControllerIdentifier,The following statement contains a magic number: if (className.EndsWith("Controller"))                  className = className.Substring(0' className.Length - 10);
Magic Number,Serenity.CodeGeneration,ClientTypesGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,GetOptionTypeName,The following statement contains a magic number: if (nullable)                  typeName = typeName.Substring(nullablePrefix.Length + 1'                      typeName.Length - nullablePrefix.Length - 2);
Magic Number,Serenity.CodeGeneration,ClientTypesGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,GetOptionTypeName,The following statement contains a magic number: if (typeName.StartsWith("System."))                  return typeName.Substring(7);
Magic Number,Serenity.CodeGeneration,ClientTypesGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,GenerateOptionMembers,The following statement contains a magic number: foreach (var option in options.Values)              {                  if (skip != null &&                      skip.Contains(option.Name))                      continue;                    var typeName = GetOptionTypeName(option.Type);                    sb.AppendLine();                  cw.Indented("public ");                  sb.Append(typeName);                  sb.Append(" ");                    string jsName = option.Name;                  string optionName = option.Name;                  var prop = option as ExternalProperty;                  if (prop != null)                      jsName = GetPropertyScriptName(prop' preserveMemberCase);                  else if (type.Origin == ExternalTypeOrigin.TS)                  {                      var emo = option as ExternalMethod;                      if (emo != null && emo.Arguments.Count == 1)                      {                          if (jsName.StartsWith("set_"))                          {                              jsName = jsName.Substring(4);                              optionName = optionName.Substring(4);                          }                            typeName = GetOptionTypeName(emo.Arguments[0].Type);                      }                  }                    if (Char.IsLower(optionName[0]))                  {                      if (optionName == "id")                          optionName = "ID";                      else                          optionName = Char.ToUpperInvariant(optionName[0]) +                              optionName.Substring(1);                  }                    sb.AppendLine(optionName);                    cw.InBrace(() =>                  {                      cw.Indented("get { return GetOption<");                      sb.Append(typeName);                      sb.Append(">(\"");                      sb.Append(jsName);                      sb.AppendLine("\"); }");                      cw.Indented("set { SetOption(\"");                      sb.Append(jsName);                      sb.AppendLine("\"' value); }");                  });              }
Magic Number,Serenity.CodeGeneration,ClientTypesGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,GenerateOptionMembers,The following statement contains a magic number: foreach (var option in options.Values)              {                  if (skip != null &&                      skip.Contains(option.Name))                      continue;                    var typeName = GetOptionTypeName(option.Type);                    sb.AppendLine();                  cw.Indented("public ");                  sb.Append(typeName);                  sb.Append(" ");                    string jsName = option.Name;                  string optionName = option.Name;                  var prop = option as ExternalProperty;                  if (prop != null)                      jsName = GetPropertyScriptName(prop' preserveMemberCase);                  else if (type.Origin == ExternalTypeOrigin.TS)                  {                      var emo = option as ExternalMethod;                      if (emo != null && emo.Arguments.Count == 1)                      {                          if (jsName.StartsWith("set_"))                          {                              jsName = jsName.Substring(4);                              optionName = optionName.Substring(4);                          }                            typeName = GetOptionTypeName(emo.Arguments[0].Type);                      }                  }                    if (Char.IsLower(optionName[0]))                  {                      if (optionName == "id")                          optionName = "ID";                      else                          optionName = Char.ToUpperInvariant(optionName[0]) +                              optionName.Substring(1);                  }                    sb.AppendLine(optionName);                    cw.InBrace(() =>                  {                      cw.Indented("get { return GetOption<");                      sb.Append(typeName);                      sb.Append(">(\"");                      sb.Append(jsName);                      sb.AppendLine("\"); }");                      cw.Indented("set { SetOption(\"");                      sb.Append(jsName);                      sb.AppendLine("\"' value); }");                  });              }
Magic Number,Serenity.CodeGeneration,ClientTypesGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,GetOptionMembers,The following statement contains a magic number: var constructor = type.Methods.FirstOrDefault(x => x.IsConstructor &&                   x.Arguments.Count == (isWidget ? 2 : 1));
Magic Number,Serenity.CodeGeneration,ClientTypesGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,GetOptionMembers,The following statement contains a magic number: do              {                  if (type.Namespace.StartsWith("System"))                      break;                    AddOptionMembers(result' type' isOptions: false);              }              while ((type = GetBaseType(type)) != null && loop++ < 100);
Magic Number,Serenity.CodeGeneration,DtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\DtoGenerator.cs,GenerateCode,The following statement contains a magic number: this.sb = new StringBuilder(4096);
Magic Number,Serenity.CodeGeneration,DtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\DtoGenerator.cs,GenerateCode,The following statement contains a magic number: this.cw = new CodeWriter(sb' 4);
Magic Number,Serenity.CodeGeneration,DtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\DtoGenerator.cs,MakeFriendlyName,The following statement contains a magic number: if (type.IsGenericType)              {                  StringBuilder sb = new StringBuilder();                  foreach (var argument in type.GetGenericArguments())                  {                      var arg = MakeFriendlyName(argument);                      if (arg.EndsWith("Row"))                          arg = arg.Substring(0' arg.Length - 3);                      sb.Append(arg);                  }                    var name = type.GetGenericTypeDefinition().Name;                  var idx = name.IndexOf('`');                  if (idx >= 0)                      name = name.Substring(0' idx);                    sb.Append(name);                    return sb.ToString();              }
Magic Number,Serenity.CodeGeneration,FormatterTypeGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\FormatterTypeGenerator.cs,GetOptionTypeName,The following statement contains a magic number: if (nullable)                  typeName = typeName.Substring(nullablePrefix.Length + 1'                       typeName.Length - nullablePrefix.Length - 2);
Magic Number,Serenity.CodeGeneration,FormatterTypeGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\FormatterTypeGenerator.cs,GetOptionTypeName,The following statement contains a magic number: if (typeName.StartsWith("System."))                  return typeName.Substring(7);
Magic Number,Serenity.CodeGeneration,FormatterTypeGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\FormatterTypeGenerator.cs,GenerateCode,The following statement contains a magic number: var cw = new Serenity.Reflection.CodeWriter(sb' 4);
Magic Number,Serenity.CodeGeneration,EditorTypeGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\EditorTypeGenerator.cs,GenerateCode,The following statement contains a magic number: var cw = new Serenity.Reflection.CodeWriter(sb' 4);
Magic Number,Serenity.CodeGeneration,ScriptDtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptDtoGenerator.cs,GenerateCode,The following statement contains a magic number: this.sb = new StringBuilder(4096);
Magic Number,Serenity.CodeGeneration,ScriptDtoGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptDtoGenerator.cs,GenerateCode,The following statement contains a magic number: this.cw = new CodeWriter(sb' 4);
Magic Number,Serenity.CodeGeneration,ScriptEndpointGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptEndpointGenerator.cs,GenerateCode,The following statement contains a magic number: var cw = new CodeWriter(sb' 4);
Magic Number,Serenity.CodeGeneration,ScriptEndpointGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptEndpointGenerator.cs,GenerateCode,The following statement contains a magic number: Func<Type' string> getClassName = (t) =>              {                  string className = t.Name;                  if (className.EndsWith("Controller"))                      className = className.Substring(0' className.Length - 10);                  return className;              };
Magic Number,Serenity.CodeGeneration,ScriptFormGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ScriptFormGenerator.cs,GenerateCode,The following statement contains a magic number: var cw = new Serenity.Reflection.CodeWriter(sb' 4);
Magic Number,Serenity.Services,DtoActionResult,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\DtoActionResult.cs,ExecuteResult,The following statement contains a magic number: var cw = new CodeWriter(sb' 4);
Magic Number,Serenity.Services,DtoActionResult,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\DtoActionResult.cs,ExecuteResult,The following statement contains a magic number: cw.InBrace(delegate              {                  foreach (var ns in                      new string[] {                          "System"'                          "System.Collections.Generic"                      })                  {                      cw.Indented("using ");                      sb.Append(ns);                      sb.AppendLine(";");                  }                    sb.AppendLine();                    cw.Indented("public interface I");                  var className = context.Controller.GetType().Name;                  if (className.EndsWith("Controller"))                      className = className.Substring(0' className.Length - 10);                  sb.Append(className);                  sb.AppendLine("Service");                    cw.InBrace(delegate                  {                      foreach (var method in context.Controller.GetType().GetMethods(BindingFlags.Instance | BindingFlags.Public))                      {                          if (method.GetCustomAttribute<NonActionAttribute>() != null)                              continue;                            if (typeof(Controller).IsSubclassOf(method.DeclaringType))                              continue;                            if (method.IsSpecialName && (method.Name.StartsWith("set_") || method.Name.StartsWith("get_")))                              continue;                            // belki burada daha sonra metod listesini de verebiliriz (ayrı bir namespace de?)                          var parameters = method.GetParameters();                          if (parameters.Length != 1)                          {                              // tek parametreli olmalı                              continue;                          }                            var returnType = method.ReturnType;                          if (returnType.IsAssignableFrom(typeof(DtoActionResult)))                              continue;                            var paramType = parameters[0].ParameterType;                          if (paramType.IsPrimitive || !DtoGenerator.CanHandleType(paramType))                              continue;                            types.Add(parameters[0].ParameterType);                            Type responseType = returnType;                          if (returnType != null &&                              returnType.IsGenericType &&                              returnType.GetGenericTypeDefinition() == typeof(Result<>))                          {                              responseType = returnType.GenericTypeArguments[0];                              types.Add(responseType);                          }                            cw.Indent();                          DtoGenerator.HandleMemberType(sb' responseType' enqueueType: null);                          sb.Append(' ');                          sb.Append(method.Name);                                                    sb.Append("(");                          DtoGenerator.HandleMemberType(sb' paramType' enqueueType: null);                          sb.Append(' ');                          sb.Append(parameters[0].Name);                          sb.AppendLine(");");                      }                  });              });
Magic Number,Serenity.Services,AntiforgeryCookieResultFilter,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\AntiforgeryCookieResultFilter.cs,OnResultExecuting,The following statement contains a magic number: if (context.Result is ViewResult)              {                  var html = AntiForgery.GetHtml().ToString();                  var start = html.IndexOf("value=\"");                  var end = html.IndexOf('"'' start + 7);                  var token = html.Substring(start + 7' end - start - 7).Trim();                  context.HttpContext.Response.Cookies.Add(new HttpCookie("CSRF-TOKEN"' token));              }
Magic Number,Serenity.Services,AntiforgeryCookieResultFilter,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\AntiforgeryCookieResultFilter.cs,OnResultExecuting,The following statement contains a magic number: if (context.Result is ViewResult)              {                  var html = AntiForgery.GetHtml().ToString();                  var start = html.IndexOf("value=\"");                  var end = html.IndexOf('"'' start + 7);                  var token = html.Substring(start + 7' end - start - 7).Trim();                  context.HttpContext.Response.Cookies.Add(new HttpCookie("CSRF-TOKEN"' token));              }
Magic Number,Serenity.Services,AntiforgeryCookieResultFilter,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\AntiforgeryCookieResultFilter.cs,OnResultExecuting,The following statement contains a magic number: if (context.Result is ViewResult)              {                  var html = AntiForgery.GetHtml().ToString();                  var start = html.IndexOf("value=\"");                  var end = html.IndexOf('"'' start + 7);                  var token = html.Substring(start + 7' end - start - 7).Trim();                  context.HttpContext.Response.Cookies.Add(new HttpCookie("CSRF-TOKEN"' token));              }
Magic Number,Serenity.Services,EndpointExtensions,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\EndpointExtensions.cs,ExecuteMethod,The following statement contains a magic number: try              {                  response = handler();              }              catch (Exception exception)              {                  response = exception.ConvertToResponse<TResponse>();                  controller.HttpContext.Response.Clear();                  controller.HttpContext.Response.StatusCode = exception is ValidationError ? 400 : 500;  #if !ASPNETCORE                  controller.HttpContext.Response.TrySkipIisCustomErrors = true;  #endif              }
Magic Number,Serenity.Services,EndpointExtensions,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\EndpointExtensions.cs,ExecuteMethod,The following statement contains a magic number: try              {                  response = handler();              }              catch (Exception exception)              {                  response = exception.ConvertToResponse<TResponse>();                  controller.HttpContext.Response.Clear();                  controller.HttpContext.Response.StatusCode = exception is ValidationError ? 400 : 500;  #if !ASPNETCORE                  controller.HttpContext.Response.TrySkipIisCustomErrors = true;  #endif              }
Magic Number,Serenity.Services,EndpointExtensions,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\EndpointExtensions.cs,UseConnection,The following statement contains a magic number: try              {                  using (var connection = SqlConnections.NewByKey(connectionKey))                      response = handler(connection);              }              catch (Exception exception)              {                  response = exception.ConvertToResponse<TResponse>();                  controller.HttpContext.Response.Clear();                  controller.HttpContext.Response.StatusCode = exception is ValidationError ? 400 : 500;  #if !ASPNETCORE                  controller.HttpContext.Response.TrySkipIisCustomErrors = true;  #endif              }
Magic Number,Serenity.Services,EndpointExtensions,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\EndpointExtensions.cs,UseConnection,The following statement contains a magic number: try              {                  using (var connection = SqlConnections.NewByKey(connectionKey))                      response = handler(connection);              }              catch (Exception exception)              {                  response = exception.ConvertToResponse<TResponse>();                  controller.HttpContext.Response.Clear();                  controller.HttpContext.Response.StatusCode = exception is ValidationError ? 400 : 500;  #if !ASPNETCORE                  controller.HttpContext.Response.TrySkipIisCustomErrors = true;  #endif              }
Magic Number,Serenity.Services,EndpointExtensions,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\EndpointExtensions.cs,InTransaction,The following statement contains a magic number: try              {                  using (var connection = SqlConnections.NewByKey(connectionKey))                  using (var uow = new UnitOfWork(connection))                  {                      response = handler(uow);                      uow.Commit();                  }              }              catch (Exception exception)              {                  response = exception.ConvertToResponse<TResponse>();                  controller.HttpContext.Response.Clear();                  controller.HttpContext.Response.StatusCode = exception is ValidationError ? 400 : 500;  #if !ASPNETCORE                  controller.HttpContext.Response.TrySkipIisCustomErrors = true;  #endif                }
Magic Number,Serenity.Services,EndpointExtensions,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\EndpointExtensions.cs,InTransaction,The following statement contains a magic number: try              {                  using (var connection = SqlConnections.NewByKey(connectionKey))                  using (var uow = new UnitOfWork(connection))                  {                      response = handler(uow);                      uow.Commit();                  }              }              catch (Exception exception)              {                  response = exception.ConvertToResponse<TResponse>();                  controller.HttpContext.Response.Clear();                  controller.HttpContext.Response.StatusCode = exception is ValidationError ? 400 : 500;  #if !ASPNETCORE                  controller.HttpContext.Response.TrySkipIisCustomErrors = true;  #endif                }
Magic Number,Serenity.Services,JsonFilter,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\JsonFilter.cs,OnActionExecuting,The following statement contains a magic number: if (method.Equals("POST"' StringComparison.InvariantCultureIgnoreCase) ||                  method.Equals("PUT"' StringComparison.InvariantCultureIgnoreCase))  #endif              {                  if ((request.ContentType ?? string.Empty)                      .Contains("application/json"))                  {                                         if (request.ContentLength == 0 &&  #if ASPNETCORE                          !((string)request.Headers["HTTP_VIA"]).IsTrimmedEmpty())  #else                          !request.Headers["HTTP_VIA"].IsTrimmedEmpty())  #endif                          throw new InvalidDataException("Sunucuya gelen isteğin gövdesi boş! " +                              "Sisteme bir vekil sunucu (proxy) üzerinden bağlandınız. Sorun bundan kaynaklanıyor olabilir. " +                              "Lütfen sunucu adresini tarayıcınızın istisna listesine ekleyiniz.");    #if ASPNETCORE                      if (filterContext.HttpContext.Request.Body.CanSeek)                          filterContext.HttpContext.Request.Body.Seek(0' SeekOrigin.Begin);                        using (var sr = new StreamReader(filterContext.HttpContext.Request.Body'                          System.Text.Encoding.GetEncoding((string)filterContext.HttpContext.Request.Headers["Content-Encoding"] ?? "utf-8")' true' 4096' true))  #else                      if (filterContext.HttpContext.Request.InputStream.CanSeek)                          filterContext.HttpContext.Request.InputStream.Seek(0' SeekOrigin.Begin);                        using (var sr = new StreamReader(filterContext.HttpContext.Request.InputStream'                          filterContext.HttpContext.Request.ContentEncoding' true' 4096' true))  #endif                        {                          var js = JsonSerializer.Create(JsonSettings.Strict);                          using (var jr = new JsonTextReader(sr))                          {                              var obj = js.Deserialize(jr' prm.ParameterType);  #if ASPNETCORE                              filterContext.ActionArguments[prm.Name] = obj;  #else                              filterContext.ActionParameters[prm.ParameterName] = obj;  #endif                          }                      }                  }                  else                  {  #if ASPNETCORE                      string req = (string)request.Form[prm.Name] ?? (string)request.Query[prm.Name] ??                              (string)request.Form["request"] ?? request.Query["request"];  #else                      string req = request.Form[prm.ParameterName] ?? request.QueryString[prm.ParameterName] ??                              request.Form["request"] ?? request.QueryString["request"];  #endif                      if (req != null)                      {                          var obj = JsonConvert.DeserializeObject(req' prm.ParameterType' JsonSettings.Strict);  #if ASPNETCORE                          filterContext.ActionArguments[prm.Name] = obj;  #else                          filterContext.ActionParameters[prm.ParameterName] = obj;  #endif                      }                  }              }              else              {  #if ASPNETCORE                  string req = (string)request.Form[prm.Name] ?? (string)request.Query[prm.Name] ??                          (string)request.Form["request"] ?? request.Query["request"];  #else                  string req = request.Form[prm.ParameterName] ?? request.QueryString[prm.ParameterName] ??                          request.Form["request"] ?? request.QueryString["request"];  #endif                    if (req != null)                  {                      var obj = JsonConvert.DeserializeObject(req' prm.ParameterType' JsonSettings.Strict);  #if ASPNETCORE                      filterContext.ActionArguments[prm.Name] = obj;  #else                      filterContext.ActionParameters[prm.ParameterName] = obj;  #endif                  }              }
Magic Number,Serenity.Services,ServiceEndpointActionInvoker,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\ServiceEndpoint.cs,InvokeExceptionFilters,The following statement contains a magic number: if (result.IsChildAction ||                      result.ExceptionHandled ||                      new HttpException(null' result.Exception).GetHttpCode() != 500)                  {                      return result;                  }
Magic Number,Serenity.Services,ServiceEndpointActionInvoker,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\ServiceEndpoint.cs,InvokeExceptionFilters,The following statement contains a magic number: result.HttpContext.Response.StatusCode = exception is ValidationError ? 400 : 500;
Magic Number,Serenity.Services,ServiceEndpointActionInvoker,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\ServiceEndpoint.cs,InvokeExceptionFilters,The following statement contains a magic number: result.HttpContext.Response.StatusCode = exception is ValidationError ? 400 : 500;
Magic Number,Serenity.Services,ServiceAuthorizeAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\ServiceAuthorizeAttribute.cs,HandleUnauthorizedRequest,The following statement contains a magic number: filterContext.HttpContext.Response.StatusCode = 400;
Magic Number,Serenity.Services,TokenAuthorizeAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\TokenAuthorizeFilter.cs,AuthorizeCore,The following statement contains a magic number: if (!isAuthenticated)              {                  var request = httpContext.Request;                    string token = null;                    if (!FormKey.IsNullOrEmpty())                      token = httpContext.Request[FormKey].TrimToNull();                    if (token == null)                  {                      string method = request.HttpMethod ?? "";                        if (!ActionArgument.IsNullOrEmpty() &&                          (method.Equals("POST"' StringComparison.InvariantCultureIgnoreCase) ||                           method.Equals("PUT"' StringComparison.InvariantCultureIgnoreCase)) &&                           (request.ContentType ?? string.Empty).Contains("application/json"))                      {                          if (httpContext.Request.InputStream.CanSeek)                              httpContext.Request.InputStream.Seek(0' SeekOrigin.Begin);                            using (var sr = new StreamReader(httpContext.Request.InputStream'                              httpContext.Request.ContentEncoding' true' 4096' true))                          {                              var js = JsonSerializer.Create(JsonSettings.Tolerant);                              using (var jr = new JsonTextReader(sr))                              {                                  var obj = js.Deserialize<RequestWithToken>(jr);                                  token = obj.AuthenticationToken.TrimToNull();                              }                          }                      }                  }                    if (token != null)                  {                      var ticket = FormsAuthentication.Decrypt(token);                      if (!ticket.Expired)                      {                          var principal = new GenericPrincipal(new GenericIdentity(ticket.Name)' new string[] { });                          httpContext.User = principal;                          isAuthenticated = true;                      }                  }              }
Magic Number,Serenity.Services,MultipleImageUploadBehavior,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\MultipleImageUploadBehavior.cs,ActivateFor,The following statement contains a magic number: if (format == null)              {                  format = row.GetType().Name;                  if (format.EndsWith("Row"))                      format = format.Substring(0' format.Length - 3);                  format += "/~";              }
Magic Number,Serenity.Services,ImageUploadBehavior,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ImageUploadBehavior.cs,ActivateFor,The following statement contains a magic number: if (format == null)              {                  format = row.GetType().Name;                  if (format.EndsWith("Row"))                      format = format.Substring(0' format.Length - 3);                  format += "/~";              }
Magic Number,Serenity.Services,ImageUploadBehavior,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ImageUploadBehavior.cs,ProcessReplaceFields,The following statement contains a magic number: foreach (var p in replaceFields)              {                  var val = p.Value.AsObject(row);                  string str;                    var colon = p.Key.IndexOf(":");                  if (colon >= 0)                      str = String.Format("{0:" + p.Key.Substring(colon + 1' p.Key.Length - colon - 2) + "}"' val);                  else                      str = Convert.ToString(val ?? ""' CultureInfo.InvariantCulture);                    str = StringHelper.SanitizeFilename(str).Replace('\\'' '_').Replace(".."' "_");                  if (string.IsNullOrWhiteSpace(str))                      str = "_";                    while (str.EndsWith("."))                      str = str.Substring(0' str.Length - 1) + "_";                    s = s.Replace(p.Key' str);              }
Magic Number,Serenity.Services,ImageUploadBehavior,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ImageUploadBehavior.cs,CheckUploadedImageAndCreateThumbs,The following statement contains a magic number: try              {                  var temporaryPath = UploadHelper.DbFilePath(temporaryFile);                  using (var fs = new FileStream(temporaryPath' FileMode.Open))                  {                      if (attr.MinSize != 0 && fs.Length < attr.MinSize)                          throw new ValidationError(String.Format(Texts.Controls.ImageUpload.UploadFileTooSmall'                              UploadHelper.FileSizeDisplay(attr.MinSize)));                        if (attr.MaxSize != 0 && fs.Length > attr.MaxSize)                          throw new ValidationError(String.Format(Texts.Controls.ImageUpload.UploadFileTooBig'                              UploadHelper.FileSizeDisplay(attr.MaxSize)));                        ImageCheckResult result;                      if (Path.GetExtension(temporaryFile).ToLowerInvariant() == ".swf")                      {                          result = ImageCheckResult.FlashMovie;                          // validate swf file somehow!                      }                      else                      {  #if COREFX                          switch ((Path.GetExtension(temporaryFile) ?? "").ToLowerInvariant())                          {                              case ".jpg":                              case ".jpeg":                                  result = ImageCheckResult.JPEGImage;                                  break;                              case ".png":                                  result = ImageCheckResult.PNGImage;                                  break;                              case ".gif":                                  result = ImageCheckResult.GIFImage;                                  break;                              default:                                  result = ImageCheckResult.InvalidImage;                                  break;                          }  #else                          result = checker.CheckStream(fs' true' out image);  #endif                      }                        if (result == ImageCheckResult.InvalidImage &&                          attr.AllowNonImage)                      {                          return;                      }    #if !COREFX                      if (result > ImageCheckResult.UnsupportedFormat ||                           (supportedFormats != null && Array.IndexOf(supportedFormats' result) < 0))                      {                          string error = checker.FormatErrorMessage(result);                          throw new ValidationError(error);                      }  #endif                        if (result >= ImageCheckResult.FlashMovie)                          return;                        string basePath = UploadHelper.TemporaryPath;                      string baseFile = Path.GetFileNameWithoutExtension(Path.GetFileName(temporaryPath));                        TemporaryFileHelper.PurgeDirectoryDefault(basePath);    #if !COREFX                      if ((attr.ScaleWidth > 0 || attr.ScaleHeight > 0) &&                          ((attr.ScaleWidth > 0 && (attr.ScaleSmaller || checker.Width > attr.ScaleWidth)) ||                              (attr.ScaleHeight > 0 && (attr.ScaleSmaller || checker.Height > attr.ScaleHeight))))                      {                          using (Image scaledImage = ThumbnailGenerator.Generate(                              image' attr.ScaleWidth' attr.ScaleHeight' attr.ScaleMode' Color.Empty))                          {                              temporaryFile = baseFile + ".jpg";                              fs.Close();                              scaledImage.Save(Path.Combine(basePath' temporaryFile)' System.Drawing.Imaging.ImageFormat.Jpeg);                              temporaryFile = "temporary/" + temporaryFile;                          }                      }                        var thumbSizes = attr.ThumbSizes.TrimToNull();                      if (thumbSizes == null)                          return;                        foreach (var sizeStr in thumbSizes.Replace(";"' "'").Split(new char[] { ''' }))                      {                          var dims = sizeStr.ToLowerInvariant().Split(new char[] { 'x' });                          int w' h;                          if (dims.Length != 2 ||                              !Int32.TryParse(dims[0]' out w) ||                              !Int32.TryParse(dims[1]' out h) ||                              w < 0 ||                              h < 0 ||                              (w == 0 && h == 0))                              throw new ArgumentOutOfRangeException("thumbSizes");                            using (Image thumbImage = ThumbnailGenerator.Generate(image' w' h' attr.ThumbMode' Color.Empty))                          {                              string thumbFile = Path.Combine(basePath'                                  baseFile + "_t" + w.ToInvariant() + "x" + h.ToInvariant() + ".jpg");                                thumbImage.Save(thumbFile);                          }                      }  #endif                  }              }              finally              {  #if !COREFX                  if (image != null)                      image.Dispose();  #endif              }
Magic Number,Serenity.Web,CssBundleManager,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\CssBundleManager.cs,Initialize,The following statement contains a magic number: try              {                  var settings = Config.Get<CssBundlingSettings>();                    var bundles = CssBundles;                  if (bundles == null ||                      bundles.Count == 0)                  {                      return;                  }                    bundleIncludes = BundleUtils.ExpandBundleIncludes(bundles' "dynamic://CssBundle."' "css");                    if (settings.Enabled != true)                      return;                    var bundleKeyBySourceUrlNew = new Dictionary<string' string>(StringComparer.OrdinalIgnoreCase);                  var bundleKeysBySourceUrlNew = new Dictionary<string' HashSet<string>>(StringComparer.OrdinalIgnoreCase);                  var bundleByKeyNew = new Dictionary<string' ConcatenatedScript>(StringComparer.OrdinalIgnoreCase);                    bool minimize = settings.Minimize == true;                    foreach (var pair in bundles)                  {                      var sourceFiles = pair.Value;                      if (sourceFiles == null ||                          sourceFiles.Length == 0)                          continue;                        var bundleKey = pair.Key;                      var bundleName = "CssBundle." + bundleKey;                      var bundleParts = new List<Func<string>>();                      var scriptNames = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                        Action<string> registerInBundle = delegate (string sourceFile)                      {                          if (bundleKey.IndexOf('/') < 0 && !bundleKeyBySourceUrlNew.ContainsKey(sourceFile))                              bundleKeyBySourceUrlNew[sourceFile] = bundleKey;                            HashSet<string> bundleKeys;                          if (!bundleKeysBySourceUrlNew.TryGetValue(sourceFile' out bundleKeys))                          {                              bundleKeys = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                              bundleKeysBySourceUrlNew[sourceFile] = new HashSet<string>();                          }                            bundleKeys.Add(bundleKey);                      };                        foreach (var sourceFile in sourceFiles)                      {                          if (sourceFile.IsNullOrEmpty())                              continue;                            if (sourceFile.StartsWith("dynamic://"' StringComparison.OrdinalIgnoreCase))                          {                              registerInBundle(sourceFile);                                var scriptName = sourceFile.Substring(10);                              scriptNames.Add(scriptName);                              bundleParts.Add(() =>                              {                                  if (recursionCheck != null)                                  {                                      if (recursionCheck.Contains(scriptName) || recursionCheck.Count > 100)                                          return String.Format(errorLines'                                              String.Format("Caught infinite recursion with dynamic scripts '{0}'!"'                                                  String.Join("' "' recursionCheck)));                                  }                                  else                                      recursionCheck = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                                    recursionCheck.Add(scriptName);                                  try                                  {                                      var code = DynamicScriptManager.GetScriptText(scriptName);                                      if (code == null)                                          return String.Format(errorLines'                                              String.Format("Dynamic script with name '{0}' is not found!"' scriptName));                                        if (!scriptName.StartsWith("CssBundle."' StringComparison.OrdinalIgnoreCase))                                      {                                          if (minimize)                                          {                                              try                                              {                                                  var result = NUglify.Uglify.Css(code);                                                  if (!result.HasErrors)                                                      code = result.Code;                                              }                                              catch (Exception ex)                                              {                                                  ex.Log();                                              }                                          }                                            var scriptUrl = VirtualPathUtility.ToAbsolute("~/DynJS.axd/" + scriptName);                                          code = RewriteUrlsToAbsolute(scriptUrl' code);                                      }                                        return code;                                  }                                  finally                                  {                                      recursionCheck.Remove(scriptName);                                  }                              });                                continue;                          }                            string sourceUrl = BundleUtils.ExpandVersionVariable(sourceFile);                          sourceUrl = VirtualPathUtility.ToAbsolute(sourceUrl);                            if (sourceUrl.IsNullOrEmpty())                              continue;                            registerInBundle(sourceUrl);                            bundleParts.Add(() =>                          {                              var sourcePath = HostingEnvironment.MapPath(sourceUrl);                              if (!File.Exists(sourcePath))                                  return String.Format(errorLines' String.Format("File {0} is not found!"' sourcePath));                                string code = null;                                if (minimize)                              {                                  if (settings.UseMinCSS == true)                                  {                                      var minPath = Path.ChangeExtension(sourcePath' ".min.css");                                      if (File.Exists(minPath))                                      {                                          using (StreamReader sr = new StreamReader(File.OpenRead(minPath)))                                              code = sr.ReadToEnd();                                      }                                  }                                    if (code == null)                                  {                                      using (StreamReader sr = new StreamReader(File.OpenRead(sourcePath)))                                          code = sr.ReadToEnd();                                  }                                    try                                  {                                      var result = NUglify.Uglify.Css(code);                                      if (!result.HasErrors)                                          code = result.Code;                                  }                                  catch (Exception ex)                                  {                                      ex.Log();                                  }                              }                                if (code == null)                              {                                  using (StreamReader sr = new StreamReader(File.OpenRead(sourcePath)))                                      code = sr.ReadToEnd();                              }                                code = RewriteUrlsToAbsolute(sourceUrl' code);                              return code;                          });                      }                        var bundle = new ConcatenatedScript(bundleParts' "\n\n"' checkRights: () =>                      {                          foreach (var scriptName in scriptNames)                          {                              if (recursionCheck != null)                              {                                  if (recursionCheck.Contains(scriptName) || recursionCheck.Count > 100)                                      throw new InvalidOperationException(String.Format(                                          "Caught infinite recursion with dynamic scripts '{0}'!"'                                              String.Join("' "' recursionCheck)));                              }                              else                                  recursionCheck = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                                recursionCheck.Add(scriptName);                              try                              {                                  DynamicScriptManager.CheckScriptRights(scriptName);                              }                              finally                              {                                  recursionCheck.Remove(scriptName);                              }                          }                      });                        DynamicScriptManager.Register(bundleName' bundle);                      bundleByKeyNew[bundleKey] = bundle;                  }                    bundleKeyBySourceUrl = bundleKeyBySourceUrlNew;                  bundleKeysBySourceUrl = bundleKeysBySourceUrlNew;                  bundleByKey = bundleByKeyNew;                  isEnabled = true;              }              catch (Exception)              {                  isInitialized = false;                  throw;              }
Magic Number,Serenity.Web,CssBundleManager,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\CssBundleManager.cs,Initialize,The following statement contains a magic number: try              {                  var settings = Config.Get<CssBundlingSettings>();                    var bundles = CssBundles;                  if (bundles == null ||                      bundles.Count == 0)                  {                      return;                  }                    bundleIncludes = BundleUtils.ExpandBundleIncludes(bundles' "dynamic://CssBundle."' "css");                    if (settings.Enabled != true)                      return;                    var bundleKeyBySourceUrlNew = new Dictionary<string' string>(StringComparer.OrdinalIgnoreCase);                  var bundleKeysBySourceUrlNew = new Dictionary<string' HashSet<string>>(StringComparer.OrdinalIgnoreCase);                  var bundleByKeyNew = new Dictionary<string' ConcatenatedScript>(StringComparer.OrdinalIgnoreCase);                    bool minimize = settings.Minimize == true;                    foreach (var pair in bundles)                  {                      var sourceFiles = pair.Value;                      if (sourceFiles == null ||                          sourceFiles.Length == 0)                          continue;                        var bundleKey = pair.Key;                      var bundleName = "CssBundle." + bundleKey;                      var bundleParts = new List<Func<string>>();                      var scriptNames = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                        Action<string> registerInBundle = delegate (string sourceFile)                      {                          if (bundleKey.IndexOf('/') < 0 && !bundleKeyBySourceUrlNew.ContainsKey(sourceFile))                              bundleKeyBySourceUrlNew[sourceFile] = bundleKey;                            HashSet<string> bundleKeys;                          if (!bundleKeysBySourceUrlNew.TryGetValue(sourceFile' out bundleKeys))                          {                              bundleKeys = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                              bundleKeysBySourceUrlNew[sourceFile] = new HashSet<string>();                          }                            bundleKeys.Add(bundleKey);                      };                        foreach (var sourceFile in sourceFiles)                      {                          if (sourceFile.IsNullOrEmpty())                              continue;                            if (sourceFile.StartsWith("dynamic://"' StringComparison.OrdinalIgnoreCase))                          {                              registerInBundle(sourceFile);                                var scriptName = sourceFile.Substring(10);                              scriptNames.Add(scriptName);                              bundleParts.Add(() =>                              {                                  if (recursionCheck != null)                                  {                                      if (recursionCheck.Contains(scriptName) || recursionCheck.Count > 100)                                          return String.Format(errorLines'                                              String.Format("Caught infinite recursion with dynamic scripts '{0}'!"'                                                  String.Join("' "' recursionCheck)));                                  }                                  else                                      recursionCheck = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                                    recursionCheck.Add(scriptName);                                  try                                  {                                      var code = DynamicScriptManager.GetScriptText(scriptName);                                      if (code == null)                                          return String.Format(errorLines'                                              String.Format("Dynamic script with name '{0}' is not found!"' scriptName));                                        if (!scriptName.StartsWith("CssBundle."' StringComparison.OrdinalIgnoreCase))                                      {                                          if (minimize)                                          {                                              try                                              {                                                  var result = NUglify.Uglify.Css(code);                                                  if (!result.HasErrors)                                                      code = result.Code;                                              }                                              catch (Exception ex)                                              {                                                  ex.Log();                                              }                                          }                                            var scriptUrl = VirtualPathUtility.ToAbsolute("~/DynJS.axd/" + scriptName);                                          code = RewriteUrlsToAbsolute(scriptUrl' code);                                      }                                        return code;                                  }                                  finally                                  {                                      recursionCheck.Remove(scriptName);                                  }                              });                                continue;                          }                            string sourceUrl = BundleUtils.ExpandVersionVariable(sourceFile);                          sourceUrl = VirtualPathUtility.ToAbsolute(sourceUrl);                            if (sourceUrl.IsNullOrEmpty())                              continue;                            registerInBundle(sourceUrl);                            bundleParts.Add(() =>                          {                              var sourcePath = HostingEnvironment.MapPath(sourceUrl);                              if (!File.Exists(sourcePath))                                  return String.Format(errorLines' String.Format("File {0} is not found!"' sourcePath));                                string code = null;                                if (minimize)                              {                                  if (settings.UseMinCSS == true)                                  {                                      var minPath = Path.ChangeExtension(sourcePath' ".min.css");                                      if (File.Exists(minPath))                                      {                                          using (StreamReader sr = new StreamReader(File.OpenRead(minPath)))                                              code = sr.ReadToEnd();                                      }                                  }                                    if (code == null)                                  {                                      using (StreamReader sr = new StreamReader(File.OpenRead(sourcePath)))                                          code = sr.ReadToEnd();                                  }                                    try                                  {                                      var result = NUglify.Uglify.Css(code);                                      if (!result.HasErrors)                                          code = result.Code;                                  }                                  catch (Exception ex)                                  {                                      ex.Log();                                  }                              }                                if (code == null)                              {                                  using (StreamReader sr = new StreamReader(File.OpenRead(sourcePath)))                                      code = sr.ReadToEnd();                              }                                code = RewriteUrlsToAbsolute(sourceUrl' code);                              return code;                          });                      }                        var bundle = new ConcatenatedScript(bundleParts' "\n\n"' checkRights: () =>                      {                          foreach (var scriptName in scriptNames)                          {                              if (recursionCheck != null)                              {                                  if (recursionCheck.Contains(scriptName) || recursionCheck.Count > 100)                                      throw new InvalidOperationException(String.Format(                                          "Caught infinite recursion with dynamic scripts '{0}'!"'                                              String.Join("' "' recursionCheck)));                              }                              else                                  recursionCheck = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                                recursionCheck.Add(scriptName);                              try                              {                                  DynamicScriptManager.CheckScriptRights(scriptName);                              }                              finally                              {                                  recursionCheck.Remove(scriptName);                              }                          }                      });                        DynamicScriptManager.Register(bundleName' bundle);                      bundleByKeyNew[bundleKey] = bundle;                  }                    bundleKeyBySourceUrl = bundleKeyBySourceUrlNew;                  bundleKeysBySourceUrl = bundleKeysBySourceUrlNew;                  bundleByKey = bundleByKeyNew;                  isEnabled = true;              }              catch (Exception)              {                  isInitialized = false;                  throw;              }
Magic Number,Serenity.Web,CssBundleManager,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\CssBundleManager.cs,Initialize,The following statement contains a magic number: try              {                  var settings = Config.Get<CssBundlingSettings>();                    var bundles = CssBundles;                  if (bundles == null ||                      bundles.Count == 0)                  {                      return;                  }                    bundleIncludes = BundleUtils.ExpandBundleIncludes(bundles' "dynamic://CssBundle."' "css");                    if (settings.Enabled != true)                      return;                    var bundleKeyBySourceUrlNew = new Dictionary<string' string>(StringComparer.OrdinalIgnoreCase);                  var bundleKeysBySourceUrlNew = new Dictionary<string' HashSet<string>>(StringComparer.OrdinalIgnoreCase);                  var bundleByKeyNew = new Dictionary<string' ConcatenatedScript>(StringComparer.OrdinalIgnoreCase);                    bool minimize = settings.Minimize == true;                    foreach (var pair in bundles)                  {                      var sourceFiles = pair.Value;                      if (sourceFiles == null ||                          sourceFiles.Length == 0)                          continue;                        var bundleKey = pair.Key;                      var bundleName = "CssBundle." + bundleKey;                      var bundleParts = new List<Func<string>>();                      var scriptNames = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                        Action<string> registerInBundle = delegate (string sourceFile)                      {                          if (bundleKey.IndexOf('/') < 0 && !bundleKeyBySourceUrlNew.ContainsKey(sourceFile))                              bundleKeyBySourceUrlNew[sourceFile] = bundleKey;                            HashSet<string> bundleKeys;                          if (!bundleKeysBySourceUrlNew.TryGetValue(sourceFile' out bundleKeys))                          {                              bundleKeys = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                              bundleKeysBySourceUrlNew[sourceFile] = new HashSet<string>();                          }                            bundleKeys.Add(bundleKey);                      };                        foreach (var sourceFile in sourceFiles)                      {                          if (sourceFile.IsNullOrEmpty())                              continue;                            if (sourceFile.StartsWith("dynamic://"' StringComparison.OrdinalIgnoreCase))                          {                              registerInBundle(sourceFile);                                var scriptName = sourceFile.Substring(10);                              scriptNames.Add(scriptName);                              bundleParts.Add(() =>                              {                                  if (recursionCheck != null)                                  {                                      if (recursionCheck.Contains(scriptName) || recursionCheck.Count > 100)                                          return String.Format(errorLines'                                              String.Format("Caught infinite recursion with dynamic scripts '{0}'!"'                                                  String.Join("' "' recursionCheck)));                                  }                                  else                                      recursionCheck = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                                    recursionCheck.Add(scriptName);                                  try                                  {                                      var code = DynamicScriptManager.GetScriptText(scriptName);                                      if (code == null)                                          return String.Format(errorLines'                                              String.Format("Dynamic script with name '{0}' is not found!"' scriptName));                                        if (!scriptName.StartsWith("CssBundle."' StringComparison.OrdinalIgnoreCase))                                      {                                          if (minimize)                                          {                                              try                                              {                                                  var result = NUglify.Uglify.Css(code);                                                  if (!result.HasErrors)                                                      code = result.Code;                                              }                                              catch (Exception ex)                                              {                                                  ex.Log();                                              }                                          }                                            var scriptUrl = VirtualPathUtility.ToAbsolute("~/DynJS.axd/" + scriptName);                                          code = RewriteUrlsToAbsolute(scriptUrl' code);                                      }                                        return code;                                  }                                  finally                                  {                                      recursionCheck.Remove(scriptName);                                  }                              });                                continue;                          }                            string sourceUrl = BundleUtils.ExpandVersionVariable(sourceFile);                          sourceUrl = VirtualPathUtility.ToAbsolute(sourceUrl);                            if (sourceUrl.IsNullOrEmpty())                              continue;                            registerInBundle(sourceUrl);                            bundleParts.Add(() =>                          {                              var sourcePath = HostingEnvironment.MapPath(sourceUrl);                              if (!File.Exists(sourcePath))                                  return String.Format(errorLines' String.Format("File {0} is not found!"' sourcePath));                                string code = null;                                if (minimize)                              {                                  if (settings.UseMinCSS == true)                                  {                                      var minPath = Path.ChangeExtension(sourcePath' ".min.css");                                      if (File.Exists(minPath))                                      {                                          using (StreamReader sr = new StreamReader(File.OpenRead(minPath)))                                              code = sr.ReadToEnd();                                      }                                  }                                    if (code == null)                                  {                                      using (StreamReader sr = new StreamReader(File.OpenRead(sourcePath)))                                          code = sr.ReadToEnd();                                  }                                    try                                  {                                      var result = NUglify.Uglify.Css(code);                                      if (!result.HasErrors)                                          code = result.Code;                                  }                                  catch (Exception ex)                                  {                                      ex.Log();                                  }                              }                                if (code == null)                              {                                  using (StreamReader sr = new StreamReader(File.OpenRead(sourcePath)))                                      code = sr.ReadToEnd();                              }                                code = RewriteUrlsToAbsolute(sourceUrl' code);                              return code;                          });                      }                        var bundle = new ConcatenatedScript(bundleParts' "\n\n"' checkRights: () =>                      {                          foreach (var scriptName in scriptNames)                          {                              if (recursionCheck != null)                              {                                  if (recursionCheck.Contains(scriptName) || recursionCheck.Count > 100)                                      throw new InvalidOperationException(String.Format(                                          "Caught infinite recursion with dynamic scripts '{0}'!"'                                              String.Join("' "' recursionCheck)));                              }                              else                                  recursionCheck = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                                recursionCheck.Add(scriptName);                              try                              {                                  DynamicScriptManager.CheckScriptRights(scriptName);                              }                              finally                              {                                  recursionCheck.Remove(scriptName);                              }                          }                      });                        DynamicScriptManager.Register(bundleName' bundle);                      bundleByKeyNew[bundleKey] = bundle;                  }                    bundleKeyBySourceUrl = bundleKeyBySourceUrlNew;                  bundleKeysBySourceUrl = bundleKeysBySourceUrlNew;                  bundleByKey = bundleByKeyNew;                  isEnabled = true;              }              catch (Exception)              {                  isInitialized = false;                  throw;              }
Magic Number,Serenity.Web,CssBundleManager,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\CssBundleManager.cs,UrlToAbsolute,The following statement contains a magic number: if (question >= 0)              {                  return new Uri("x:" + absolutePath + url.Substring(0' question)).AbsolutePath.Substring(2)                      + url.Substring(question);              }
Magic Number,Serenity.Web,CssBundleManager,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\CssBundleManager.cs,UrlToAbsolute,The following statement contains a magic number: return new Uri("x:" + absolutePath + url).AbsolutePath.Substring(2);
Magic Number,Serenity.Web,CssBundleManager,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\CssBundleManager.cs,GetCssBundle,The following statement contains a magic number: if (cssUrl != null && cssUrl.StartsWith("dynamic://"'                  StringComparison.OrdinalIgnoreCase))              {                  var scriptName = cssUrl.Substring(10);                  if (!isEnabled || !bundleKeyBySourceUrl.TryGetValue(cssUrl' out bundleKey))                  {                      cssUrl = DynamicScriptManager.GetScriptInclude(scriptName' ".css");                      return VirtualPathUtility.ToAbsolute("~/DynJS.axd/" + cssUrl);                  }              }              else              {                  cssUrl = BundleUtils.ExpandVersionVariable(cssUrl);                  cssUrl = VirtualPathUtility.ToAbsolute(cssUrl);                    if (!isEnabled ||                      bundleKeyBySourceUrl == null ||                      !bundleKeyBySourceUrl.TryGetValue(cssUrl' out bundleKey))                      return cssUrl;              }
Magic Number,Serenity.Web,BundleUtils,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\BundleUtils.cs,ExpandBundleIncludes,The following statement contains a magic number: listBundleIncludes = (string bundleKey) =>              {                  var includes = new List<string>();                    string[] sourceFiles;                  if (!bundles.TryGetValue(bundleKey' out sourceFiles) ||                      sourceFiles == null ||                      sourceFiles.Length == 0)                      return includes;                    foreach (var sourceFile in sourceFiles)                  {                      if (sourceFile.IsNullOrEmpty())                          continue;                        if (sourceFile.StartsWith(bundlePrefix' StringComparison.OrdinalIgnoreCase))                      {                          var subBundleKey = sourceFile.Substring(17);                          if (recursionCheck != null)                          {                              if (recursionCheck.Contains(subBundleKey) || recursionCheck.Count > 100)                                  throw new InvalidOperationException(String.Format(                                      "Caught infinite recursion with {1} bundles '{0}'!"'                                          String.Join("' "' recursionCheck' bundleType)));                          }                          else                              recursionCheck = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                            recursionCheck.Add(subBundleKey);                          try                          {                              includes.AddRange(listBundleIncludes(subBundleKey));                          }                          finally                          {                              recursionCheck.Remove(subBundleKey);                          }                      }                      else                          includes.Add(sourceFile);                  }                    return includes;              };
Magic Number,Serenity.Web,BundleUtils,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\BundleUtils.cs,ExpandBundleIncludes,The following statement contains a magic number: listBundleIncludes = (string bundleKey) =>              {                  var includes = new List<string>();                    string[] sourceFiles;                  if (!bundles.TryGetValue(bundleKey' out sourceFiles) ||                      sourceFiles == null ||                      sourceFiles.Length == 0)                      return includes;                    foreach (var sourceFile in sourceFiles)                  {                      if (sourceFile.IsNullOrEmpty())                          continue;                        if (sourceFile.StartsWith(bundlePrefix' StringComparison.OrdinalIgnoreCase))                      {                          var subBundleKey = sourceFile.Substring(17);                          if (recursionCheck != null)                          {                              if (recursionCheck.Contains(subBundleKey) || recursionCheck.Count > 100)                                  throw new InvalidOperationException(String.Format(                                      "Caught infinite recursion with {1} bundles '{0}'!"'                                          String.Join("' "' recursionCheck' bundleType)));                          }                          else                              recursionCheck = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                            recursionCheck.Add(subBundleKey);                          try                          {                              includes.AddRange(listBundleIncludes(subBundleKey));                          }                          finally                          {                              recursionCheck.Remove(subBundleKey);                          }                      }                      else                          includes.Add(sourceFile);                  }                    return includes;              };
Magic Number,Serenity.Web,DynamicScriptRegistration,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\DynamicScriptRegistration.cs,Initialize,The following statement contains a magic number: foreach (var assembly in assemblies)              {                  foreach (var type in assembly.GetTypes())                  {                      if (type.IsAbstract ||                           type.IsInterface ||                           type.IsGenericTypeDefinition ||                          !type.IsPublic ||                          !type.IsSubclassOf(typeof(Controller)))                          continue;                        foreach (var method in type.GetMethods(BindingFlags.Instance | BindingFlags.Public))                      {                          var attr = method.GetCustomAttribute<DynamicScriptAttribute>();                          if (attr == null)                              continue;                            if (string.IsNullOrEmpty(attr.Key))                              throw new ArgumentNullException("scripKey"' String.Format(                                  "DynamicScript attribute on method {1} of type {0} has empty key!"'                                  type.Name' method.Name));                            var parameters = method.GetParameters();                          if (parameters.Length > 2 ||                              parameters.Any(x => x.ParameterType != typeof(ServiceRequest) &&                                  x.ParameterType != typeof(IDbConnection)))                          {                              throw new ArgumentOutOfRangeException("parameters"' String.Format(                                  "DynamicScript actions shouldn't have any parameters other " +                                   "than an a base ServiceRequest and optional IDbConnection. Method {0} of type {1} has {2} arguments"'                                  type.Name' method.Name));                          }                            string connectionKey = null;                                                    if (parameters.Any(x => x.ParameterType == typeof(IDbConnection)))                          {                              var connectionKeyAttr = type.GetCustomAttribute<ConnectionKeyAttribute>();                              if (connectionKeyAttr == null || connectionKeyAttr.Value.IsEmptyOrNull())                                  throw new ArgumentOutOfRangeException("connectionKey"' String.Format(                                      "Cannot determine connection key for DynamicScript defined on type {1}' method {2}"'                                      type.Name' method.Name));                                connectionKey = connectionKeyAttr.Value;                          }                            var returnType = method.ReturnType;                            if (returnType == typeof(void))                              throw new ArgumentOutOfRangeException("returnType"' String.Format(                                  "DynamicScript defined on method {2} of type {1} has void return type"'                                  type.Name' method.Name));                            var isResult = returnType.IsGenericType &&                               returnType.GetGenericTypeDefinition() == typeof(Result<>);                          if (!isResult && typeof(ActionResult).IsAssignableFrom(returnType))                              throw new ArgumentOutOfRangeException("returnType"' String.Format(                                  "DynamicScript defined on method {2} of type {1} has ActionResult descendant return type. " +                                  "It must be Result<T> or a regular class!"'                                  type.Name' method.Name));                            var dataScript = new DataScript(attr.Key' delegate()                          {                              var controller = Activator.CreateInstance(type);                                object result;                                object[] prm;                              if (parameters.Length == 0)                                  prm = null;                              else                                  prm = new object[parameters.Length];                                IDbConnection connection = null;                              try                              {                                  for (var i = 0; i < parameters.Length; i++)                                  {                                      if (parameters[i].ParameterType == typeof(ServiceRequest))                                      {                                          prm[i] = new ServiceRequest();                                      }                                      else                                      {                                          if (connection == null)                                              connection = SqlConnections.NewByKey(connectionKey);                                            prm[i] = connection;                                      }                                  }                                    result = method.Invoke(controller' prm);                              }                              finally                              {                                  if (connection != null)                                      connection.Dispose();                              }                                if (isResult)                                  result = ((dynamic)result).Data;                                return result;                          });                            dataScript.Expiration = TimeSpan.FromSeconds(attr.CacheDuration);                          dataScript.GroupKey = attr.CacheGroupKey;                                                    var serviceAuthorize = method.GetCustomAttribute<ServiceAuthorizeAttribute>() ??                              type.GetCustomAttribute<ServiceAuthorizeAttribute>();                            if (serviceAuthorize != null)                              dataScript.Permission = serviceAuthorize.Permission ?? "?";                          else                          {                              var authorize = method.GetCustomAttribute<AuthorizeAttribute>() ??                                  type.GetCustomAttribute<AuthorizeAttribute>();                                if (authorize != null)                                  dataScript.Permission = "?";                          }                            DynamicScriptManager.Register(dataScript.ScriptName' dataScript);                      }                  }              }
Magic Number,Serenity.Web,TemplateHelper,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\TemplateHelper.cs,RenderViewToString,The following statement contains a magic number: if (controlPath != null && controlPath.EndsWith(".cshtml"' System.StringComparison.InvariantCultureIgnoreCase))              {                  data = data ?? new ViewDataDictionary(new Dictionary<string' object>());                  var httpBase = new HttpContextWrapper(HttpContext.Current);                    var controller = new FakeController();                  var route = new RouteData();                  route.Values.Add("controller"' "something");                  var controllerContext = new ControllerContext(httpBase' route' controller);                    var actualPath = controlPath;                  if (actualPath.StartsWith("~/"))                  {                      actualPath = Path.Combine(HostingEnvironment.ApplicationPhysicalPath'                          actualPath.Substring(2).Replace("/"' "\\"));                  }                    if (!File.Exists(actualPath))                      throw new ArgumentOutOfRangeException("controlPath"' String.Format("controlPath: {0}"' actualPath));                    var view = new RazorView(controllerContext' controlPath' null' false' null' null);                  using (StringWriter sw = new StringWriter(sb))                  {                      var viewContext = new ViewContext(controllerContext' view' data' new TempDataDictionary()' sw);                      view.Render(viewContext' sw);                  }              }              else              {                  ViewPage vp = new ViewPage { ViewData = data };                  Control control = vp.LoadControl(controlPath);                  vp.Controls.Add(control);                  using (StringWriter sw = new StringWriter(sb))                  using (HtmlTextWriter tw = new HtmlTextWriter(sw))                  {                      vp.RenderControl(tw);                  }              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader(stream))              {                  // Read MAGIC FIELD                  magicBytes = new String(reader.ReadChars(3));                    if (magicBytes != "FWS" && magicBytes != "CWS")                      throw new Exception(" is not a valid/supported SWF file.");                    // Compression                  isCompressed = magicBytes.StartsWith("C") ? true : false;                    // Version                  version = Convert.ToInt16(reader.ReadByte());                    // Size                  size = 0;                    // 4 LSB-MSB                  for (int i = 0; i < 4; i++)                  {                      byte t = reader.ReadByte();                      size += t << (8 * i);                  }                    // RECT... we will "simulate" a stream from now on... read remaining file                  byte[] buffer = reader.ReadBytes((int)size);                    // First decompress GZ stream                  if (isCompressed)                  {                      // Let's set GZip magic bytes which GZipStream can process                      Array.Resize(ref buffer' buffer.Length + 8);                      for (int i = buffer.Length - 1; i > 9; i--)                      {                          buffer[i] = buffer[i - 8];                      }                      ((Array)(new byte[] { 31' 139' 8' 0' 0' 0' 0' 0' 4' 0 })).                          CopyTo(buffer' 0);                        MemoryStream ms = new MemoryStream(buffer);                        GZipStream gzip = new GZipStream(ms' CompressionMode.Decompress);                        byte[] decompressedBuffer = new byte[buffer.Length + 1000000];                        int gzipLength = ReadAllBytesFromStream(gzip' decompressedBuffer);                        gzip.Dispose();                      ms.Dispose();                        Array.Resize(ref buffer' gzipLength);                      Array.Resize(ref decompressedBuffer' gzipLength);                      decompressedBuffer.CopyTo(buffer' 0);                        Array.Clear(decompressedBuffer' 0' decompressedBuffer.Length);                  }                    byte cbyte = buffer[0];                  int bits = (int)cbyte >> 3;                    Array.Reverse(buffer);                  Array.Resize(ref buffer' buffer.Length - 1);                  Array.Reverse(buffer);                    BitArray cval = new BitArray(bits' false);                    // Current byte                  cbyte &= 7;                  cbyte <<= 5;                    // Current bit (first byte starts off already shifted)                  int cbit = 2;                    // Must get all 4 values in the RECT                  for (int i = 0; i < 4; i++)                  {  #if COREFX                      for (int j = 0; j < cval.Length; j++)  #else                      for (int j = 0; j < cval.Count; j++)  #endif                      {                          if ((cbyte & 128) > 0)                          {                              cval[j] = true;                          }                            cbyte <<= 1;                          cbyte &= 255;                          cbit--;                            // We will be needing a new byte if we run out of bits                          if (cbit < 0)                          {                              cbyte = buffer[0];                                Array.Reverse(buffer);                              Array.Resize(ref buffer' buffer.Length - 1);                              Array.Reverse(buffer);                                cbit = 7;                          }                      }                        // O.k. full value stored... calculate                      int c = 1;                      int val = 0;    #if COREFX                      for (int j = cval.Length - 1; j >= 0; j--)  #else                      for (int j = cval.Count - 1; j >= 0; j--)  #endif                      {                          if (cval[j])                          {                              val += c;                          }                          c *= 2;                      }                        val /= 20;                        switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }                        cval.SetAll(false);                  }                    // Frame rate                  frameRate += buffer[1];                  frameRate += Convert.ToSingle(buffer[0] / 100);                    // Frames                  frameCount += BitConverter.ToInt16(buffer' 2);              }
Magic Number,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,ReadAllBytesFromStream,The following statement contains a magic number: while (true)              {                  int bytesRead = stream.Read(buffer' offset' 100);                  if (bytesRead == 0)                      break;                  offset += bytesRead;                  totalCount += bytesRead;              }
Magic Number,Serenity.Web,ThumbnailGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ThumbnailGenerator.cs,Generate,The following statement contains a magic number: if (mode == ImageScaleMode.CropSourceImage &&                   Math.Abs(horizontalScale - verticalScale) >= 0.0001 &&                  horizontalScale != 0 &&                  verticalScale != 0)              {                  int cropSize;                    // if thubmnails scale to source image horizontally' is bigger than vertical scale'                  // we take all of the source image vertically' and central part of it horizontally                  // otherwise take all of the source image horizontally' and central part of it vertically                  if (horizontalScale <= verticalScale)                  {                      cropSize = Convert.ToInt32((double)thumbWidth / verticalScale);                      imageRect.X = (imageRect.Width - cropSize) / 2;                      imageRect.Width = cropSize;                  }                  else                  {                      cropSize = Convert.ToInt32((double)thumbHeight / horizontalScale);                      imageRect.Y = (imageRect.Height - cropSize) / 2;                      imageRect.Height = cropSize;                  }              }              else if (                  mode == ImageScaleMode.PreserveRatioWithFill ||                  mode == ImageScaleMode.PreserveRatioNoFill)              {                  // In PreserveRatioWithFill ve PreserveRatioNoFill modes'                  // scaling is performed without changing aspect ratio.                   // As there will be horizontal or vertical spaces' in WithFill mode'                  // they are filled with a solid color' while in NoFill mode                  // thumbWidth' thumbHeight are decreased as size of the space                  if (horizontalScale <= verticalScale)                  {                      thumbRect.Height = Convert.ToInt32(horizontalScale * imageHeight);                      if (mode == ImageScaleMode.PreserveRatioWithFill)                          thumbRect.Y = (thumbHeight - thumbRect.Height) / 2;                      else                          thumbHeight = thumbRect.Height;                  }                  else                  {                      thumbRect.Width = Convert.ToInt32(verticalScale * imageWidth);                      if (mode == ImageScaleMode.PreserveRatioWithFill)                          thumbRect.X = (thumbWidth - thumbRect.Width) / 2;                      else                          thumbWidth = thumbRect.Width;                  }              }
Magic Number,Serenity.Web,ThumbnailGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ThumbnailGenerator.cs,Generate,The following statement contains a magic number: if (mode == ImageScaleMode.CropSourceImage &&                   Math.Abs(horizontalScale - verticalScale) >= 0.0001 &&                  horizontalScale != 0 &&                  verticalScale != 0)              {                  int cropSize;                    // if thubmnails scale to source image horizontally' is bigger than vertical scale'                  // we take all of the source image vertically' and central part of it horizontally                  // otherwise take all of the source image horizontally' and central part of it vertically                  if (horizontalScale <= verticalScale)                  {                      cropSize = Convert.ToInt32((double)thumbWidth / verticalScale);                      imageRect.X = (imageRect.Width - cropSize) / 2;                      imageRect.Width = cropSize;                  }                  else                  {                      cropSize = Convert.ToInt32((double)thumbHeight / horizontalScale);                      imageRect.Y = (imageRect.Height - cropSize) / 2;                      imageRect.Height = cropSize;                  }              }              else if (                  mode == ImageScaleMode.PreserveRatioWithFill ||                  mode == ImageScaleMode.PreserveRatioNoFill)              {                  // In PreserveRatioWithFill ve PreserveRatioNoFill modes'                  // scaling is performed without changing aspect ratio.                   // As there will be horizontal or vertical spaces' in WithFill mode'                  // they are filled with a solid color' while in NoFill mode                  // thumbWidth' thumbHeight are decreased as size of the space                  if (horizontalScale <= verticalScale)                  {                      thumbRect.Height = Convert.ToInt32(horizontalScale * imageHeight);                      if (mode == ImageScaleMode.PreserveRatioWithFill)                          thumbRect.Y = (thumbHeight - thumbRect.Height) / 2;                      else                          thumbHeight = thumbRect.Height;                  }                  else                  {                      thumbRect.Width = Convert.ToInt32(verticalScale * imageWidth);                      if (mode == ImageScaleMode.PreserveRatioWithFill)                          thumbRect.X = (thumbWidth - thumbRect.Width) / 2;                      else                          thumbWidth = thumbRect.Width;                  }              }
Magic Number,Serenity.Web,ThumbnailGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ThumbnailGenerator.cs,Generate,The following statement contains a magic number: if (mode == ImageScaleMode.CropSourceImage &&                   Math.Abs(horizontalScale - verticalScale) >= 0.0001 &&                  horizontalScale != 0 &&                  verticalScale != 0)              {                  int cropSize;                    // if thubmnails scale to source image horizontally' is bigger than vertical scale'                  // we take all of the source image vertically' and central part of it horizontally                  // otherwise take all of the source image horizontally' and central part of it vertically                  if (horizontalScale <= verticalScale)                  {                      cropSize = Convert.ToInt32((double)thumbWidth / verticalScale);                      imageRect.X = (imageRect.Width - cropSize) / 2;                      imageRect.Width = cropSize;                  }                  else                  {                      cropSize = Convert.ToInt32((double)thumbHeight / horizontalScale);                      imageRect.Y = (imageRect.Height - cropSize) / 2;                      imageRect.Height = cropSize;                  }              }              else if (                  mode == ImageScaleMode.PreserveRatioWithFill ||                  mode == ImageScaleMode.PreserveRatioNoFill)              {                  // In PreserveRatioWithFill ve PreserveRatioNoFill modes'                  // scaling is performed without changing aspect ratio.                   // As there will be horizontal or vertical spaces' in WithFill mode'                  // they are filled with a solid color' while in NoFill mode                  // thumbWidth' thumbHeight are decreased as size of the space                  if (horizontalScale <= verticalScale)                  {                      thumbRect.Height = Convert.ToInt32(horizontalScale * imageHeight);                      if (mode == ImageScaleMode.PreserveRatioWithFill)                          thumbRect.Y = (thumbHeight - thumbRect.Height) / 2;                      else                          thumbHeight = thumbRect.Height;                  }                  else                  {                      thumbRect.Width = Convert.ToInt32(verticalScale * imageWidth);                      if (mode == ImageScaleMode.PreserveRatioWithFill)                          thumbRect.X = (thumbWidth - thumbRect.Width) / 2;                      else                          thumbWidth = thumbRect.Width;                  }              }
Magic Number,Serenity.Web,ThumbnailGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ThumbnailGenerator.cs,Generate,The following statement contains a magic number: if (mode == ImageScaleMode.CropSourceImage &&                   Math.Abs(horizontalScale - verticalScale) >= 0.0001 &&                  horizontalScale != 0 &&                  verticalScale != 0)              {                  int cropSize;                    // if thubmnails scale to source image horizontally' is bigger than vertical scale'                  // we take all of the source image vertically' and central part of it horizontally                  // otherwise take all of the source image horizontally' and central part of it vertically                  if (horizontalScale <= verticalScale)                  {                      cropSize = Convert.ToInt32((double)thumbWidth / verticalScale);                      imageRect.X = (imageRect.Width - cropSize) / 2;                      imageRect.Width = cropSize;                  }                  else                  {                      cropSize = Convert.ToInt32((double)thumbHeight / horizontalScale);                      imageRect.Y = (imageRect.Height - cropSize) / 2;                      imageRect.Height = cropSize;                  }              }              else if (                  mode == ImageScaleMode.PreserveRatioWithFill ||                  mode == ImageScaleMode.PreserveRatioNoFill)              {                  // In PreserveRatioWithFill ve PreserveRatioNoFill modes'                  // scaling is performed without changing aspect ratio.                   // As there will be horizontal or vertical spaces' in WithFill mode'                  // they are filled with a solid color' while in NoFill mode                  // thumbWidth' thumbHeight are decreased as size of the space                  if (horizontalScale <= verticalScale)                  {                      thumbRect.Height = Convert.ToInt32(horizontalScale * imageHeight);                      if (mode == ImageScaleMode.PreserveRatioWithFill)                          thumbRect.Y = (thumbHeight - thumbRect.Height) / 2;                      else                          thumbHeight = thumbRect.Height;                  }                  else                  {                      thumbRect.Width = Convert.ToInt32(verticalScale * imageWidth);                      if (mode == ImageScaleMode.PreserveRatioWithFill)                          thumbRect.X = (thumbWidth - thumbRect.Width) / 2;                      else                          thumbWidth = thumbRect.Width;                  }              }
Magic Number,Serenity.Web,ThumbnailGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\ThumbnailGenerator.cs,Generate,The following statement contains a magic number: if (mode == ImageScaleMode.CropSourceImage &&                   Math.Abs(horizontalScale - verticalScale) >= 0.0001 &&                  horizontalScale != 0 &&                  verticalScale != 0)              {                  int cropSize;                    // if thubmnails scale to source image horizontally' is bigger than vertical scale'                  // we take all of the source image vertically' and central part of it horizontally                  // otherwise take all of the source image horizontally' and central part of it vertically                  if (horizontalScale <= verticalScale)                  {                      cropSize = Convert.ToInt32((double)thumbWidth / verticalScale);                      imageRect.X = (imageRect.Width - cropSize) / 2;                      imageRect.Width = cropSize;                  }                  else                  {                      cropSize = Convert.ToInt32((double)thumbHeight / horizontalScale);                      imageRect.Y = (imageRect.Height - cropSize) / 2;                      imageRect.Height = cropSize;                  }              }              else if (                  mode == ImageScaleMode.PreserveRatioWithFill ||                  mode == ImageScaleMode.PreserveRatioNoFill)              {                  // In PreserveRatioWithFill ve PreserveRatioNoFill modes'                  // scaling is performed without changing aspect ratio.                   // As there will be horizontal or vertical spaces' in WithFill mode'                  // they are filled with a solid color' while in NoFill mode                  // thumbWidth' thumbHeight are decreased as size of the space                  if (horizontalScale <= verticalScale)                  {                      thumbRect.Height = Convert.ToInt32(horizontalScale * imageHeight);                      if (mode == ImageScaleMode.PreserveRatioWithFill)                          thumbRect.Y = (thumbHeight - thumbRect.Height) / 2;                      else                          thumbHeight = thumbRect.Height;                  }                  else                  {                      thumbRect.Width = Convert.ToInt32(verticalScale * imageWidth);                      if (mode == ImageScaleMode.PreserveRatioWithFill)                          thumbRect.X = (thumbWidth - thumbRect.Width) / 2;                      else                          thumbWidth = thumbRect.Width;                  }              }
Magic Number,Serenity.Web,UploadHelper,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\UploadHelper.cs,CopyTemporaryFile,The following statement contains a magic number: while (File.Exists(filePath) && ++tries < 10000)              {                  if (basePath == null)                      basePath = Path.ChangeExtension(filePath' null);                                    filePath = basePath + " (" + tries + ")" + (extension ?? "");              }
Magic Number,Serenity.Web,UploadHelper,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\UploadHelper.cs,FormatDbFileName,The following statement contains a magic number: if (identity == null)                  groupKey = "_";              else if (identity is Guid)              {                  s = ((Guid)identity).ToString("N");                  identity = s;                  groupKey = s.Substring(0' 2);              }              else              {                  s = identity.ToString();                  if (long.TryParse(s' out l))                      groupKey = l / 1000;                  else if (s.Length == 0)                      groupKey = "_";                  else                      groupKey = s.SafeSubstring(0' 2);              }
Magic Number,Serenity.Web,UploadHelper,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\UploadHelper.cs,FormatDbFileName,The following statement contains a magic number: if (identity == null)                  groupKey = "_";              else if (identity is Guid)              {                  s = ((Guid)identity).ToString("N");                  identity = s;                  groupKey = s.Substring(0' 2);              }              else              {                  s = identity.ToString();                  if (long.TryParse(s' out l))                      groupKey = l / 1000;                  else if (s.Length == 0)                      groupKey = "_";                  else                      groupKey = s.SafeSubstring(0' 2);              }
Magic Number,Serenity.Web,UploadHelper,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\UploadHelper.cs,FormatDbFileName,The following statement contains a magic number: if (identity == null)                  groupKey = "_";              else if (identity is Guid)              {                  s = ((Guid)identity).ToString("N");                  identity = s;                  groupKey = s.Substring(0' 2);              }              else              {                  s = identity.ToString();                  if (long.TryParse(s' out l))                      groupKey = l / 1000;                  else if (s.Length == 0)                      groupKey = "_";                  else                      groupKey = s.SafeSubstring(0' 2);              }
Magic Number,Serenity.Web,UploadHelper,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\UploadHelper.cs,FileSizeDisplay,The following statement contains a magic number: if (byteSize > 1000)              {                  byteSize = (Math.Round((Decimal)byteSize * 0.001m * 100m) * 0.01m);                  suffix = "MB";              }
Magic Number,Serenity.Web,UploadHelper,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\UploadHelper.cs,FileSizeDisplay,The following statement contains a magic number: if (sizeParts.Length > 1)              {                  value = sizeParts[0] + "." + sizeParts[1].Substring(0' 2);              }              else              {                  value = sizeParts[0];              }
Magic Number,Serenity.Web,Item,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\DynamicScript\DynamicScriptManager.Item.cs,GenerateContent,The following statement contains a magic number: using (var ms = new MemoryStream(scriptText.Length))                  {                      using (var sw = new StreamWriter(ms' new UTF8Encoding(true)))                      {                          sw.Write(scriptText);                          sw.Flush();                            ub = ms.ToArray();                          ms.Seek(0' SeekOrigin.Begin);                            if (ms.Length > 4096)                          {                              using (var cs = new MemoryStream((int)ms.Length))                              {                                  using (var gz = new GZipStream(cs' CompressionMode.Compress))                                  {                                      ms.CopyTo(gz);                                      gz.Flush();                                  }                                    cb = cs.ToArray();                              }                          }                      }                        var script = new Script                      {                          Hash = GetMD5HashString(ub)'                          Time = DateTime.UtcNow'                          ScriptText = scriptText'                          CompressedBytes = cb'                          UncompressedBytes = ub'                          Expiration = Generator.Expiration == TimeSpan.Zero ? DateTime.MaxValue :                              DateTime.Now.Add(Generator.Expiration)                      };                        this.content = script;                        if (Generator.GroupKey == null)                          return script;                        TwoLevelCache.GetLocalStoreOnly("DynamicScriptCheck:" + this.Name' Generator.Expiration'                          Generator.GroupKey' () =>                          {                              return new object();                          });                        return script;                  }
Magic Number,Serenity.Web,HtmlScriptExtensions,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\HtmlScriptExtensions.cs,StyleBundle,The following statement contains a magic number: if (!CssBundleManager.IsEnabled)              {                  StringBuilder sb = new StringBuilder();                  foreach (var include in CssBundleManager.GetBundleIncludes(bundleKey))                  {                      var cssUrl = include;                      if (string.IsNullOrEmpty(cssUrl))                          continue;                        if (cssUrl != null && cssUrl.StartsWith("dynamic://"' StringComparison.OrdinalIgnoreCase))                      {                          var scriptName = cssUrl.Substring(10);                          cssUrl = DynamicScriptManager.GetScriptInclude(scriptName' ".css");                          cssUrl = VirtualPathUtility.ToAbsolute("~/DynJS.axd/" + cssUrl);                      }                      else                      {                          cssUrl = BundleUtils.ExpandVersionVariable(cssUrl);                          cssUrl = VirtualPathUtility.ToAbsolute(cssUrl);                      }                        var cssList = GetIncludedCssList(context);                        if (!cssList.Contains(cssUrl))                      {                          cssList.Add(cssUrl);                          sb.AppendLine(String.Format("    <link href=\"{0}\" rel=\"stylesheet\" type=\"text/css\"/>\n"'  #if ASPNETCORE                              WebUtility.HtmlEncode(ContentHashCache.ResolveWithHash(cssUrl))));  #else                              HttpUtility.HtmlAttributeEncode(ContentHashCache.ResolveWithHash(cssUrl))));  #endif                      }                  }                    return new HtmlString(sb.ToString());              }
Magic Number,Serenity.Web,HtmlScriptExtensions,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\HtmlScriptExtensions.cs,ScriptBundle,The following statement contains a magic number: if (!ScriptBundleManager.IsEnabled)              {                  StringBuilder sb = new StringBuilder();                  foreach (var include in ScriptBundleManager.GetBundleIncludes(bundleKey))                  {                      var scriptUrl = include;                      if (string.IsNullOrEmpty(scriptUrl))                          continue;                        if (scriptUrl != null && scriptUrl.StartsWith("dynamic://"' StringComparison.OrdinalIgnoreCase))                      {                          var scriptName = scriptUrl.Substring(10);                          scriptUrl = DynamicScriptManager.GetScriptInclude(scriptName);                          scriptUrl = VirtualPathUtility.ToAbsolute("~/DynJS.axd/" + scriptUrl);                      }                      else                      {                          scriptUrl = BundleUtils.ExpandVersionVariable(scriptUrl);                          scriptUrl = VirtualPathUtility.ToAbsolute(scriptUrl);                      }                        var scripts = GetIncludedScripts(context);                        if (!scripts.Contains(scriptUrl))                      {                          scripts.Add(scriptUrl);                          sb.AppendLine(String.Format("    <script src=\"{0}\" type=\"text/javascript\"></script>\n"'  #if ASPNETCORE                              WebUtility.HtmlEncode(ContentHashCache.ResolveWithHash(scriptUrl))));  #else                              HttpUtility.HtmlAttributeEncode(ContentHashCache.ResolveWithHash(scriptUrl))));  #endif                      }                  }                    return new HtmlString(sb.ToString());              }
Magic Number,Serenity.Web,ContentHashCache,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\ContentHashCache.cs,GetFileSHA1,The following statement contains a magic number: using (FileStream fs = new FileStream(filePath' FileMode.Open' FileAccess.Read' FileShare.Read' 120000))              {   #if ASPNETCORE                  var md5 = MD5.Create();                  byte[] hash = md5.ComputeHash(fs);                  return WebEncoders.Base64UrlEncode(hash);  #else                  using (MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider())                  {                      byte[] hash = md5.ComputeHash(fs);                      return HttpServerUtility.UrlTokenEncode(hash);                  }  #endif              }
Magic Number,Serenity.Web,ContentHashCache,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\ContentHashCache.cs,ResolveWithHash,The following statement contains a magic number: if (contentUrl[0] != '/' &&                  (contentUrl[0] != '~' || contentUrl.Length < 2 || contentUrl[1] != '/'))                  return contentUrl;
Magic Number,Serenity.Web,ContentHashCache,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\ContentHashCache.cs,ResolveWithHash,The following statement contains a magic number: if (cdnMatch[0] == '/')              {                  var root = VirtualPathUtility.ToAbsolute("~/");                  if (cdnMatch.StartsWith(root' StringComparison.OrdinalIgnoreCase))                      cdnMatch = cdnMatch.Substring(root.Length);              }              else                  cdnMatch = cdnMatch.Substring(2);
Magic Number,Serenity.Web,LocalTextScript,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\DynamicScriptTypes\LocalTextScript.cs,GetLocalTextPackageScript,The following statement contains a magic number: foreach (object obj in packageItems)              {                  if (append)                      sb.Append('|');                  string item = Convert.ToString(obj);                  if (item.Length > 0)                  {                      if (item[0] == '^' && item[item.Length - 1] == '$')                          sb.Append(item.Substring(1' item.Length - 2));                      else sb.Append(item.Replace("."' "\\.") + ".*");                      append = true;                  }              }
Magic Number,Serenity.Web,ScriptBundleManager,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\ScriptBundleManager.cs,Initialize,The following statement contains a magic number: try              {                  var settings = Config.Get<ScriptBundlingSettings>();                    var bundles = ScriptBundles;                  if (bundles == null ||                      bundles.Count == 0)                  {                      return;                  }                    bundleIncludes = BundleUtils.ExpandBundleIncludes(bundles' "dynamic://Bundle."' "script");                    if (settings.Enabled != true)                      return;                    var bundleKeyBySourceUrlNew = new Dictionary<string' string>(StringComparer.OrdinalIgnoreCase);                  var bundleKeysBySourceUrlNew = new Dictionary<string' HashSet<string>>(StringComparer.OrdinalIgnoreCase);                  var bundleByKeyNew = new Dictionary<string' ConcatenatedScript>(StringComparer.OrdinalIgnoreCase);                    bool minimize = settings.Minimize == true;                    foreach (var pair in bundles)                  {                      var sourceFiles = pair.Value;                      if (sourceFiles == null ||                          sourceFiles.Length == 0)                          continue;                        var bundleKey = pair.Key;                      var bundleName = "Bundle." + bundleKey;                      var bundleParts = new List<Func<string>>();                      var scriptNames = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                        Action<string> registerInBundle = delegate (string sourceFile)                      {                          if (bundleKey.IndexOf('/') < 0 && !bundleKeyBySourceUrlNew.ContainsKey(sourceFile))                              bundleKeyBySourceUrlNew[sourceFile] = bundleKey;                            HashSet<string> bundleKeys;                          if (!bundleKeysBySourceUrlNew.TryGetValue(sourceFile' out bundleKeys))                          {                              bundleKeys = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                              bundleKeysBySourceUrlNew[sourceFile] = new HashSet<string>();                          }                            bundleKeys.Add(bundleKey);                      };                        foreach (var sourceFile in sourceFiles)                      {                          if (sourceFile.IsNullOrEmpty())                              continue;                            if (sourceFile.StartsWith("dynamic://"' StringComparison.OrdinalIgnoreCase))                          {                              registerInBundle(sourceFile);                                var scriptName = sourceFile.Substring(10);                              scriptNames.Add(scriptName);                              bundleParts.Add(() =>                              {                                  if (recursionCheck != null)                                  {                                      if (recursionCheck.Contains(scriptName) || recursionCheck.Count > 100)                                          return String.Format(errorLines'                                              String.Format("Caught infinite recursion with dynamic scripts '{0}'!"'                                                  String.Join("' "' recursionCheck)));                                  }                                  else                                      recursionCheck = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                                    recursionCheck.Add(scriptName);                                  try                                  {                                      var code = DynamicScriptManager.GetScriptText(scriptName);                                      if (code == null)                                          return String.Format(errorLines'                                              String.Format("Dynamic script with name '{0}' is not found!"' scriptName));                                        if (minimize && !scriptName.StartsWith("Bundle."'                                          StringComparison.OrdinalIgnoreCase))                                      {                                          try                                          {                                              var result = NUglify.Uglify.Js(code);                                              if (!result.HasErrors)                                                  code = result.Code;                                          }                                          catch (Exception ex)                                          {                                              ex.Log();                                          }                                      }                                        return code;                                  }                                  finally                                  {                                      recursionCheck.Remove(scriptName);                                  }                              });                                continue;                          }                            string sourceUrl = BundleUtils.ExpandVersionVariable(sourceFile);                          sourceUrl = VirtualPathUtility.ToAbsolute(sourceUrl);                            if (sourceUrl.IsNullOrEmpty())                              continue;                            registerInBundle(sourceUrl);                            bundleParts.Add(() =>                          {                              var sourcePath = HostingEnvironment.MapPath(sourceUrl);                              if (!File.Exists(sourcePath))                                  return String.Format(errorLines' String.Format("File {0} is not found!"' sourcePath));                                if (minimize)                              {                                  if (settings.UseMinJS == true)                                  {                                      var minPath = Path.ChangeExtension(sourcePath' ".min.js");                                      if (File.Exists(minPath))                                      {                                          sourcePath = minPath;                                          using (StreamReader sr = new StreamReader(File.OpenRead(sourcePath)))                                              return sr.ReadToEnd();                                      }                                  }                                    string code;                                  using (StreamReader sr = new StreamReader(File.OpenRead(sourcePath)))                                      code = sr.ReadToEnd();                                    try                                  {                                      var result = NUglify.Uglify.Js(code);                                      if (result.HasErrors)                                          return code;                                      return result.Code;                                  }                                  catch (Exception ex)                                  {                                      ex.Log();                                      return code;                                  }                              }                                using (StreamReader sr = new StreamReader(File.OpenRead(sourcePath)))                                  return sr.ReadToEnd();                          });                      }                        var bundle = new ConcatenatedScript(bundleParts' checkRights: () =>                      {                          foreach (var scriptName in scriptNames)                          {                              if (recursionCheck != null)                              {                                  if (recursionCheck.Contains(scriptName) || recursionCheck.Count > 100)                                      throw new InvalidOperationException(String.Format(                                          "Caught infinite recursion with dynamic scripts '{0}'!"'                                              String.Join("' "' recursionCheck)));                              }                              else                                  recursionCheck = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                                recursionCheck.Add(scriptName);                              try                              {                                  DynamicScriptManager.CheckScriptRights(scriptName);                              }                              finally                              {                                  recursionCheck.Remove(scriptName);                              }                          }                      });                        DynamicScriptManager.Register(bundleName' bundle);                      bundleByKeyNew[bundleKey] = bundle;                  }                    bundleKeyBySourceUrl = bundleKeyBySourceUrlNew;                  bundleKeysBySourceUrl = bundleKeysBySourceUrlNew;                  bundleByKey = bundleByKeyNew;                  isEnabled = true;              }              catch (Exception)              {                  isInitialized = false;                  throw;              }
Magic Number,Serenity.Web,ScriptBundleManager,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\ScriptBundleManager.cs,Initialize,The following statement contains a magic number: try              {                  var settings = Config.Get<ScriptBundlingSettings>();                    var bundles = ScriptBundles;                  if (bundles == null ||                      bundles.Count == 0)                  {                      return;                  }                    bundleIncludes = BundleUtils.ExpandBundleIncludes(bundles' "dynamic://Bundle."' "script");                    if (settings.Enabled != true)                      return;                    var bundleKeyBySourceUrlNew = new Dictionary<string' string>(StringComparer.OrdinalIgnoreCase);                  var bundleKeysBySourceUrlNew = new Dictionary<string' HashSet<string>>(StringComparer.OrdinalIgnoreCase);                  var bundleByKeyNew = new Dictionary<string' ConcatenatedScript>(StringComparer.OrdinalIgnoreCase);                    bool minimize = settings.Minimize == true;                    foreach (var pair in bundles)                  {                      var sourceFiles = pair.Value;                      if (sourceFiles == null ||                          sourceFiles.Length == 0)                          continue;                        var bundleKey = pair.Key;                      var bundleName = "Bundle." + bundleKey;                      var bundleParts = new List<Func<string>>();                      var scriptNames = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                        Action<string> registerInBundle = delegate (string sourceFile)                      {                          if (bundleKey.IndexOf('/') < 0 && !bundleKeyBySourceUrlNew.ContainsKey(sourceFile))                              bundleKeyBySourceUrlNew[sourceFile] = bundleKey;                            HashSet<string> bundleKeys;                          if (!bundleKeysBySourceUrlNew.TryGetValue(sourceFile' out bundleKeys))                          {                              bundleKeys = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                              bundleKeysBySourceUrlNew[sourceFile] = new HashSet<string>();                          }                            bundleKeys.Add(bundleKey);                      };                        foreach (var sourceFile in sourceFiles)                      {                          if (sourceFile.IsNullOrEmpty())                              continue;                            if (sourceFile.StartsWith("dynamic://"' StringComparison.OrdinalIgnoreCase))                          {                              registerInBundle(sourceFile);                                var scriptName = sourceFile.Substring(10);                              scriptNames.Add(scriptName);                              bundleParts.Add(() =>                              {                                  if (recursionCheck != null)                                  {                                      if (recursionCheck.Contains(scriptName) || recursionCheck.Count > 100)                                          return String.Format(errorLines'                                              String.Format("Caught infinite recursion with dynamic scripts '{0}'!"'                                                  String.Join("' "' recursionCheck)));                                  }                                  else                                      recursionCheck = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                                    recursionCheck.Add(scriptName);                                  try                                  {                                      var code = DynamicScriptManager.GetScriptText(scriptName);                                      if (code == null)                                          return String.Format(errorLines'                                              String.Format("Dynamic script with name '{0}' is not found!"' scriptName));                                        if (minimize && !scriptName.StartsWith("Bundle."'                                          StringComparison.OrdinalIgnoreCase))                                      {                                          try                                          {                                              var result = NUglify.Uglify.Js(code);                                              if (!result.HasErrors)                                                  code = result.Code;                                          }                                          catch (Exception ex)                                          {                                              ex.Log();                                          }                                      }                                        return code;                                  }                                  finally                                  {                                      recursionCheck.Remove(scriptName);                                  }                              });                                continue;                          }                            string sourceUrl = BundleUtils.ExpandVersionVariable(sourceFile);                          sourceUrl = VirtualPathUtility.ToAbsolute(sourceUrl);                            if (sourceUrl.IsNullOrEmpty())                              continue;                            registerInBundle(sourceUrl);                            bundleParts.Add(() =>                          {                              var sourcePath = HostingEnvironment.MapPath(sourceUrl);                              if (!File.Exists(sourcePath))                                  return String.Format(errorLines' String.Format("File {0} is not found!"' sourcePath));                                if (minimize)                              {                                  if (settings.UseMinJS == true)                                  {                                      var minPath = Path.ChangeExtension(sourcePath' ".min.js");                                      if (File.Exists(minPath))                                      {                                          sourcePath = minPath;                                          using (StreamReader sr = new StreamReader(File.OpenRead(sourcePath)))                                              return sr.ReadToEnd();                                      }                                  }                                    string code;                                  using (StreamReader sr = new StreamReader(File.OpenRead(sourcePath)))                                      code = sr.ReadToEnd();                                    try                                  {                                      var result = NUglify.Uglify.Js(code);                                      if (result.HasErrors)                                          return code;                                      return result.Code;                                  }                                  catch (Exception ex)                                  {                                      ex.Log();                                      return code;                                  }                              }                                using (StreamReader sr = new StreamReader(File.OpenRead(sourcePath)))                                  return sr.ReadToEnd();                          });                      }                        var bundle = new ConcatenatedScript(bundleParts' checkRights: () =>                      {                          foreach (var scriptName in scriptNames)                          {                              if (recursionCheck != null)                              {                                  if (recursionCheck.Contains(scriptName) || recursionCheck.Count > 100)                                      throw new InvalidOperationException(String.Format(                                          "Caught infinite recursion with dynamic scripts '{0}'!"'                                              String.Join("' "' recursionCheck)));                              }                              else                                  recursionCheck = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                                recursionCheck.Add(scriptName);                              try                              {                                  DynamicScriptManager.CheckScriptRights(scriptName);                              }                              finally                              {                                  recursionCheck.Remove(scriptName);                              }                          }                      });                        DynamicScriptManager.Register(bundleName' bundle);                      bundleByKeyNew[bundleKey] = bundle;                  }                    bundleKeyBySourceUrl = bundleKeyBySourceUrlNew;                  bundleKeysBySourceUrl = bundleKeysBySourceUrlNew;                  bundleByKey = bundleByKeyNew;                  isEnabled = true;              }              catch (Exception)              {                  isInitialized = false;                  throw;              }
Magic Number,Serenity.Web,ScriptBundleManager,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\ScriptBundleManager.cs,Initialize,The following statement contains a magic number: try              {                  var settings = Config.Get<ScriptBundlingSettings>();                    var bundles = ScriptBundles;                  if (bundles == null ||                      bundles.Count == 0)                  {                      return;                  }                    bundleIncludes = BundleUtils.ExpandBundleIncludes(bundles' "dynamic://Bundle."' "script");                    if (settings.Enabled != true)                      return;                    var bundleKeyBySourceUrlNew = new Dictionary<string' string>(StringComparer.OrdinalIgnoreCase);                  var bundleKeysBySourceUrlNew = new Dictionary<string' HashSet<string>>(StringComparer.OrdinalIgnoreCase);                  var bundleByKeyNew = new Dictionary<string' ConcatenatedScript>(StringComparer.OrdinalIgnoreCase);                    bool minimize = settings.Minimize == true;                    foreach (var pair in bundles)                  {                      var sourceFiles = pair.Value;                      if (sourceFiles == null ||                          sourceFiles.Length == 0)                          continue;                        var bundleKey = pair.Key;                      var bundleName = "Bundle." + bundleKey;                      var bundleParts = new List<Func<string>>();                      var scriptNames = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                        Action<string> registerInBundle = delegate (string sourceFile)                      {                          if (bundleKey.IndexOf('/') < 0 && !bundleKeyBySourceUrlNew.ContainsKey(sourceFile))                              bundleKeyBySourceUrlNew[sourceFile] = bundleKey;                            HashSet<string> bundleKeys;                          if (!bundleKeysBySourceUrlNew.TryGetValue(sourceFile' out bundleKeys))                          {                              bundleKeys = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                              bundleKeysBySourceUrlNew[sourceFile] = new HashSet<string>();                          }                            bundleKeys.Add(bundleKey);                      };                        foreach (var sourceFile in sourceFiles)                      {                          if (sourceFile.IsNullOrEmpty())                              continue;                            if (sourceFile.StartsWith("dynamic://"' StringComparison.OrdinalIgnoreCase))                          {                              registerInBundle(sourceFile);                                var scriptName = sourceFile.Substring(10);                              scriptNames.Add(scriptName);                              bundleParts.Add(() =>                              {                                  if (recursionCheck != null)                                  {                                      if (recursionCheck.Contains(scriptName) || recursionCheck.Count > 100)                                          return String.Format(errorLines'                                              String.Format("Caught infinite recursion with dynamic scripts '{0}'!"'                                                  String.Join("' "' recursionCheck)));                                  }                                  else                                      recursionCheck = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                                    recursionCheck.Add(scriptName);                                  try                                  {                                      var code = DynamicScriptManager.GetScriptText(scriptName);                                      if (code == null)                                          return String.Format(errorLines'                                              String.Format("Dynamic script with name '{0}' is not found!"' scriptName));                                        if (minimize && !scriptName.StartsWith("Bundle."'                                          StringComparison.OrdinalIgnoreCase))                                      {                                          try                                          {                                              var result = NUglify.Uglify.Js(code);                                              if (!result.HasErrors)                                                  code = result.Code;                                          }                                          catch (Exception ex)                                          {                                              ex.Log();                                          }                                      }                                        return code;                                  }                                  finally                                  {                                      recursionCheck.Remove(scriptName);                                  }                              });                                continue;                          }                            string sourceUrl = BundleUtils.ExpandVersionVariable(sourceFile);                          sourceUrl = VirtualPathUtility.ToAbsolute(sourceUrl);                            if (sourceUrl.IsNullOrEmpty())                              continue;                            registerInBundle(sourceUrl);                            bundleParts.Add(() =>                          {                              var sourcePath = HostingEnvironment.MapPath(sourceUrl);                              if (!File.Exists(sourcePath))                                  return String.Format(errorLines' String.Format("File {0} is not found!"' sourcePath));                                if (minimize)                              {                                  if (settings.UseMinJS == true)                                  {                                      var minPath = Path.ChangeExtension(sourcePath' ".min.js");                                      if (File.Exists(minPath))                                      {                                          sourcePath = minPath;                                          using (StreamReader sr = new StreamReader(File.OpenRead(sourcePath)))                                              return sr.ReadToEnd();                                      }                                  }                                    string code;                                  using (StreamReader sr = new StreamReader(File.OpenRead(sourcePath)))                                      code = sr.ReadToEnd();                                    try                                  {                                      var result = NUglify.Uglify.Js(code);                                      if (result.HasErrors)                                          return code;                                      return result.Code;                                  }                                  catch (Exception ex)                                  {                                      ex.Log();                                      return code;                                  }                              }                                using (StreamReader sr = new StreamReader(File.OpenRead(sourcePath)))                                  return sr.ReadToEnd();                          });                      }                        var bundle = new ConcatenatedScript(bundleParts' checkRights: () =>                      {                          foreach (var scriptName in scriptNames)                          {                              if (recursionCheck != null)                              {                                  if (recursionCheck.Contains(scriptName) || recursionCheck.Count > 100)                                      throw new InvalidOperationException(String.Format(                                          "Caught infinite recursion with dynamic scripts '{0}'!"'                                              String.Join("' "' recursionCheck)));                              }                              else                                  recursionCheck = new HashSet<string>(StringComparer.OrdinalIgnoreCase);                                recursionCheck.Add(scriptName);                              try                              {                                  DynamicScriptManager.CheckScriptRights(scriptName);                              }                              finally                              {                                  recursionCheck.Remove(scriptName);                              }                          }                      });                        DynamicScriptManager.Register(bundleName' bundle);                      bundleByKeyNew[bundleKey] = bundle;                  }                    bundleKeyBySourceUrl = bundleKeyBySourceUrlNew;                  bundleKeysBySourceUrl = bundleKeysBySourceUrlNew;                  bundleByKey = bundleByKeyNew;                  isEnabled = true;              }              catch (Exception)              {                  isInitialized = false;                  throw;              }
Magic Number,Serenity.Web,ScriptBundleManager,C:\repos\volkanceylan_serenity\Serenity.Web\Mvc\ScriptBundleManager.cs,GetScriptBundle,The following statement contains a magic number: if (scriptUrl != null && scriptUrl.StartsWith("dynamic://"'                  StringComparison.OrdinalIgnoreCase))              {                  var scriptName = scriptUrl.Substring(10);                  if (!isEnabled || !bundleKeyBySourceUrl.TryGetValue(scriptUrl' out bundleKey))                  {                      scriptUrl = DynamicScriptManager.GetScriptInclude(scriptName);                      return VirtualPathUtility.ToAbsolute("~/DynJS.axd/" + scriptUrl);                  }              }              else              {                  scriptUrl = BundleUtils.ExpandVersionVariable(scriptUrl);                  scriptUrl = VirtualPathUtility.ToAbsolute(scriptUrl);                    if (!isEnabled ||                       bundleKeyBySourceUrl == null ||                      !bundleKeyBySourceUrl.TryGetValue(scriptUrl' out bundleKey))                      return scriptUrl;              }
Magic Number,Serenity,WebSecurityHelper,C:\repos\volkanceylan_serenity\Serenity.Web\Security\WebSecurityHelper.cs,LogOut,The following statement contains a magic number: authCookie.Expires = DateTime.Now.AddYears(-30);
Magic Number,Serenity.Web.HttpHandlers,DynamicScriptHandler,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\DynamicScript\DynamicScriptHandler.cs,ProcessScriptRequest,The following statement contains a magic number: if (script == null)                  throw new HttpException(404' "File not found!");
Magic Number,Serenity.Web.HttpHandlers,DynamicScriptHandler,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\DynamicScript\DynamicScriptHandler.cs,ProcessScriptRequest,The following statement contains a magic number: int expiresOffset = 365;
Magic Number,Serenity.Web.HttpHandlers,DynamicScriptHandler,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\DynamicScript\DynamicScriptHandler.cs,ProcessRequest,The following statement contains a magic number: if (path.EndsWith(".js"' StringComparison.OrdinalIgnoreCase))                  path = path.Substring(0' path.Length - 3);              else if (path.EndsWith(".css"' StringComparison.OrdinalIgnoreCase))              {                  contentType = "text/css";                  path = path.Substring(0' path.Length - 4);              }
Magic Number,Serenity.Web.HttpHandlers,DynamicScriptHandler,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\DynamicScript\DynamicScriptHandler.cs,ProcessRequest,The following statement contains a magic number: if (path.EndsWith(".js"' StringComparison.OrdinalIgnoreCase))                  path = path.Substring(0' path.Length - 3);              else if (path.EndsWith(".css"' StringComparison.OrdinalIgnoreCase))              {                  contentType = "text/css";                  path = path.Substring(0' path.Length - 4);              }
Magic Number,Serenity.Web.HttpHandlers,DynamicScriptHandler,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\DynamicScript\DynamicScriptHandler.cs,WriteWithIfModifiedSinceControl,The following statement contains a magic number: if (ifModifiedSince != null && ifModifiedSince.Length > 0)              {                  DateTime date;                  if (DateTime.TryParseExact(ifModifiedSince' "R"' Invariants.DateTimeFormat' DateTimeStyles.None'                      out date))                  {                      if (date.Year == lastWriteTime.Year &&                          date.Month == lastWriteTime.Month &&                          date.Day == lastWriteTime.Day &&                          date.Hour == lastWriteTime.Hour &&                          date.Minute == lastWriteTime.Minute &&                          date.Second == lastWriteTime.Second)                      {                          context.Response.StatusCode = 304;                          context.Response.StatusDescription = "Not Modified";                          return;                      }                  }              }
Magic Number,Serenity.Navigation,NavigationItemAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\Navigation\NavigationItemAttribute.cs,GetUrlFromController,The following statement contains a magic number: if (act1 >= 0)              {                  var act2 = url.IndexOf("}"' act1 + 1);                  if (act2 >= 0)                  {                      var defaultAction = url.Substring(act1 + act.Length' act2 - act1 - act.Length);                      bool isDefaultAction = String.Compare(defaultAction' action' StringComparison.OrdinalIgnoreCase) == 0;                      bool startsWithSlash = act1 > 0 && url[act1 - 1] == '/';                      url = url.Substring(0' act1) +                            (startsWithSlash ? "" : "/") +                           (isDefaultAction ? "" : action) +                           url.Substring(act2 + 1);                        if (url.Length > 2 && url.EndsWith("/"))                          url = url.Substring(0' url.Length - 1);                  }              }
Magic Number,Serenity.Reporting,HtmlToPdfConverter,C:\repos\volkanceylan_serenity\Serenity.Web\Reporting\Tools\HtmlToPdfConverter.cs,HtmlToPdfConverter,The following statement contains a magic number: TimeoutSeconds = 300;
Magic Number,Serenity.Reporting,HtmlToPdfConverter,C:\repos\volkanceylan_serenity\Serenity.Web\Reporting\Tools\HtmlToPdfConverter.cs,Execute,The following statement contains a magic number: try              {                  args.Add(tempFile);                    var process = new Process                   {                       StartInfo = new ProcessStartInfo(exePath' CommandLineTools.EscapeArguments(args.ToArray()))                      {                          UseShellExecute = false'                          CreateNoWindow = true                      }                  };                    if (!process.Start())                      throw new InvalidOperationException("An error occured while starting PDF generator!");                    if (!process.WaitForExit(TimeoutSeconds * 1000)) // max 300 seconds                      throw new InvalidOperationException("Timeout while PDF generation!");                    if (process.ExitCode != 0 && process.ExitCode != 1)                      throw new InvalidOperationException(String.Format("PDF generator returned error code {0}!"' process.ExitCode));                    if (!File.Exists(tempFile))                      throw new InvalidOperationException("Can't find generatored PDF file!");                    var bytes = File.ReadAllBytes(tempFile);                  if (bytes.Length == 0)                      throw new InvalidOperationException("Generated PDF file is empty!");                    return bytes;              }              finally              {                  TemporaryFileHelper.TryDelete(tempFile);              }
Magic Number,Serenity.IO,CommandLineTools,C:\repos\volkanceylan_serenity\Serenity.Web\Reporting\Tools\CommandLineTools.cs,EscapeArguments,The following statement contains a magic number: for (int i = 0; i < args.Length; i++)              {                  if (args[i] == null)                       throw new ArgumentNullException("args[" + i + "]");                     if (invalidChar.IsMatch(args[i]))                       throw new ArgumentOutOfRangeException("args[" + i + "]");                    if (i > 0)                      arguments.Append(' ');                    if (args[i] == String.Empty)                  {                      arguments.Append("\"\"");                  }                  else if (!needsQuotes.IsMatch(args[i]))                  {                      arguments.Append(args[i]);                      continue;                  }                  else                  {                      arguments.Append('"');                      arguments.Append(escapeQuote.Replace(args[i]' m => m.Groups[1].Value + m.Groups[1].Value + (m.Groups[2].Value == "\"" ? "\\\"" : "")));                      arguments.Append('"');                  }              }
Magic Number,Serenity.ComponentModel,PhoneEditorAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\PhoneEditorAttribute.cs,Validate,The following statement contains a magic number: Func<string' bool> myValidateFunc = s =>              {                  if (!validateFunc(s))                  {                      if (isInternal)                          return false;                        s = (s ?? "").Trim();                        if (s.StartsWith("+"))                      {                          if (allowInternational &&                              s.Length > 7)                          {                              return true;                          }                            return false;                      }                        if (allowExtension &&                          s.IndexOf('/') > 0)                      {                          var p = s.Split(new char[] { '/' });                          if (p.Length != 2)                              return false;                            if (p[0].Length < 5 || !validateFunc(p[0]))                              return false;                            int x;                          if (!int.TryParse(p[1].Trim()' out x))                              return false;                            return true;                      }                        return false;                  }                    return true;              };
Magic Number,Serenity.ComponentModel,PhoneEditorAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\PhoneEditorAttribute.cs,Validate,The following statement contains a magic number: Func<string' bool> myValidateFunc = s =>              {                  if (!validateFunc(s))                  {                      if (isInternal)                          return false;                        s = (s ?? "").Trim();                        if (s.StartsWith("+"))                      {                          if (allowInternational &&                              s.Length > 7)                          {                              return true;                          }                            return false;                      }                        if (allowExtension &&                          s.IndexOf('/') > 0)                      {                          var p = s.Split(new char[] { '/' });                          if (p.Length != 2)                              return false;                            if (p[0].Length < 5 || !validateFunc(p[0]))                              return false;                            int x;                          if (!int.TryParse(p[1].Trim()' out x))                              return false;                            return true;                      }                        return false;                  }                    return true;              };
Magic Number,Serenity.ComponentModel,PhoneEditorAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\PhoneEditorAttribute.cs,Validate,The following statement contains a magic number: Func<string' bool> myValidateFunc = s =>              {                  if (!validateFunc(s))                  {                      if (isInternal)                          return false;                        s = (s ?? "").Trim();                        if (s.StartsWith("+"))                      {                          if (allowInternational &&                              s.Length > 7)                          {                              return true;                          }                            return false;                      }                        if (allowExtension &&                          s.IndexOf('/') > 0)                      {                          var p = s.Split(new char[] { '/' });                          if (p.Length != 2)                              return false;                            if (p[0].Length < 5 || !validateFunc(p[0]))                              return false;                            int x;                          if (!int.TryParse(p[1].Trim()' out x))                              return false;                            return true;                      }                        return false;                  }                    return true;              };
Magic Number,Serenity.ComponentModel,PhoneEditorAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\PhoneEditorAttribute.cs,IsValidPhoneTurkey,The following statement contains a magic number: if (phone.Length < 10)                  return false;
Magic Number,Serenity.ComponentModel,PhoneEditorAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\PhoneEditorAttribute.cs,IsValidPhoneTurkey,The following statement contains a magic number: if (phone.StartsWith("(") &&                  phone[4] == ')')              {                  phone = phone.Substring(1' 3) + phone.Substring(5);              }
Magic Number,Serenity.ComponentModel,PhoneEditorAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\PhoneEditorAttribute.cs,IsValidPhoneTurkey,The following statement contains a magic number: if (phone.StartsWith("(") &&                  phone[4] == ')')              {                  phone = phone.Substring(1' 3) + phone.Substring(5);              }
Magic Number,Serenity.ComponentModel,PhoneEditorAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\PhoneEditorAttribute.cs,IsValidPhoneTurkey,The following statement contains a magic number: if (phone.StartsWith("(") &&                  phone[4] == ')')              {                  phone = phone.Substring(1' 3) + phone.Substring(5);              }
Magic Number,Serenity.ComponentModel,PhoneEditorAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\PhoneEditorAttribute.cs,IsValidPhoneTurkey,The following statement contains a magic number: if (phone.Length != 10)                  return false;
Magic Number,Serenity.ComponentModel,PhoneEditorAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\PhoneEditorAttribute.cs,IsValidPhoneInternal,The following statement contains a magic number: if (phone.Length < 2 || phone.Length > 5)                  return false;
Magic Number,Serenity.ComponentModel,PhoneEditorAttribute,C:\repos\volkanceylan_serenity\Serenity.Web\DynamicScript\PropertyEditor\PhoneEditorAttribute.cs,IsValidPhoneInternal,The following statement contains a magic number: if (phone.Length < 2 || phone.Length > 5)                  return false;
Magic Number,Serenity.Web.Providers,SiteMembershipProvider,C:\repos\volkanceylan_serenity\Serenity.Web\Security\SiteMembershipProvider.cs,ComputeSHA512,The following statement contains a magic number: return System.Convert.ToBase64String(buffer).Substring(0' 86);
Missing Default,Serenity.CodeGeneration,ClientTypesGenerator,C:\repos\volkanceylan_serenity\Serenity.CodeGenerator\CodeGeneration\ClientTypes\ClientTypesGenerator.cs,GetOptionTypeName,The following switch statement is missing a default case: switch (typeName)              {                  case "number": return "Double";                  case "string": return "String";                  case "Date": return "DateTime";                  case "boolean": return "Boolean";              }
Missing Default,Serenity.CodeGeneration,TypeScriptParser,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ManualTsParser.cs,Parse,The following switch statement is missing a default case: switch (type)              {                  case TokenType.Identifier:                      if (!ParseIdentifier())                          return false;                        break;                    case TokenType.Char:                      if (!ParseChar())                          return false;                      break;              }
Missing Default,Serenity.CodeGeneration,TypeScriptParser,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\ManualTsParser.cs,ParseChar,The following switch statement is missing a default case: switch (text)              {                  case "}":                      if (braceStack.Count == 0 ||                          !braceStack.Peek().StartsWith("{"))                      {                          return false;                      }                        s = braceStack.Pop();                      if (s == "{namespace")                      {                          if (namespaceStack.Count <= 1)                              return false;                            namespaceStack.Pop();                      }                      else if (s == "{type")                      {                          if (typeStack.Count == 0)                              return false;                            var type = typeStack.Pop();                          ReportType(type);                      }                        modifiers.Clear();                        return true;                    case ")":                      if (braceStack.Count == 0 ||                          !braceStack.Peek().StartsWith("("))                      {                          return false;                      }                        s = braceStack.Pop();                      return true;                    case "]":                      if (braceStack.Count == 0 ||                          !braceStack.Peek().StartsWith("["))                      {                          return false;                      }                        s = braceStack.Pop();                      return true;                    case "{":                      braceStack.Push("{");                      modifiers.Clear();                      return true;                    case "(":                      braceStack.Push("(");                      return true;                    case "[":                      braceStack.Push("[");                      return true;                    case ";":                      modifiers.Clear();                      return true;              }
Missing Default,Serenity.CodeGeneration,FormatterTypeGenerator,C:\repos\volkanceylan_serenity\Serenity.Web\CodeGeneration\Legacy\FormatterTypeGenerator.cs,GetOptionTypeName,The following switch statement is missing a default case: switch (typeName) {                  case "number": return "Double";                  case "string": return "String";                  case "Date": return "DateTime";                  case "boolean": return "Boolean";              }
Missing Default,Serenity.Web,SwfInfo,C:\repos\volkanceylan_serenity\Serenity.Web\Upload\SwfInfo.cs,LoadSwf,The following switch statement is missing a default case: switch (i)                      {                          case 0:                              // tmp value                              width = val;                              break;                          case 1:                              width = val - width;                              break;                          case 2:                              // tmp value                              height = val;                              break;                          case 3:                              height = val - height;                              break;                      }
