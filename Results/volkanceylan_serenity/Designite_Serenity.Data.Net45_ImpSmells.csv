Implementation smell,Namespace,Class,File,Method,Description
Long Method,Serenity.Data,SqlQuery,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlQuery.cs,ToString,The method has 297 lines of code.
Long Method,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,The method has 163 lines of code.
Long Method,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetTypeDeserializer,The method has 288 lines of code.
Complex Method,Serenity.Data,JsonCriteriaConverter,C:\repos\volkanceylan_serenity\Serenity.Data\Criteria\JsonCriteriaConverter.cs,ToJson,Cyclomatic complexity of the method is 8
Complex Method,Serenity.Data,JsonCriteriaConverter,C:\repos\volkanceylan_serenity\Serenity.Data\Criteria\JsonCriteriaConverter.cs,Parse,Cyclomatic complexity of the method is 19
Complex Method,Serenity.Data,SqlQuery,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlQuery.cs,FullTextSearchJoin,Cyclomatic complexity of the method is 8
Complex Method,Serenity.Data,SqlQuery,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlQuery.cs,ToString,Cyclomatic complexity of the method is 33
Complex Method,Serenity.Data,SqlQuery,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlQuery.cs,AppendFromWhereOrderByGroupByHaving,Cyclomatic complexity of the method is 11
Complex Method,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,Cyclomatic complexity of the method is 21
Complex Method,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetTypeDeserializer,Cyclomatic complexity of the method is 17
Complex Method,Serenity.Data,DefaultTypeMap,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,FindConstructor,Cyclomatic complexity of the method is 9
Complex Method,Serenity.Data,SqlInsert,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlInsert.cs,Format,Cyclomatic complexity of the method is 8
Complex Method,Serenity.Data,SqlCommandDumper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlCommandDumper.cs,GetCommandText,Cyclomatic complexity of the method is 15
Complex Method,Serenity.Data,SqlDebugDumper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlDebugDumper.cs,DumpParameterValue,Cyclomatic complexity of the method is 13
Complex Method,Serenity.Data,DeltaLister<TItem>,C:\repos\volkanceylan_serenity\Serenity.Data\Utility\DeltaLister.cs,DeltaLister,Cyclomatic complexity of the method is 13
Long Parameter List,Serenity.Data,SqlQuery,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlQuery.cs,FullTextSearchJoin,The method has 6 parameters. Parameters: searchTable' searchFields' searchQuery' searchTableAlias' searchTableKey' containsAlias
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Execute,The method has 6 parameters. Parameters: cnn' sql' param' transaction' commandTimeout' commandType
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The method has 7 parameters. Parameters: cnn' sql' param' transaction' buffered' commandTimeout' commandType
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The method has 6 parameters. Parameters: cnn' sql' transaction' buffered' commandTimeout' commandType
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The method has 6 parameters. Parameters: cnn' sql' transaction' buffered' commandTimeout' commandType
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The method has 7 parameters. Parameters: cnn' sql' param' transaction' buffered' commandTimeout' commandType
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,QueryMultiple,The method has 6 parameters. Parameters: cnn' sql' param' transaction' commandTimeout' commandType
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,QueryInternal,The method has 6 parameters. Parameters: cnn' sql' param' transaction' commandTimeout' commandType
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,MultiMap,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,MultiMapImpl,The method has 10 parameters. Parameters: cnn' sql' map' param' transaction' splitOn' commandTimeout' commandType' reader' identity
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetDeserializer,The method has 5 parameters. Parameters: type' reader' startBound' length' returnNullIfFirstMissing
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,SetupCommand,The method has 7 parameters. Parameters: cnn' transaction' sql' paramReader' obj' commandTimeout' commandType
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,ExecuteCommand,The method has 7 parameters. Parameters: cnn' transaction' sql' paramReader' obj' commandTimeout' commandType
Long Parameter List,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetTypeDeserializer,The method has 5 parameters. Parameters: type' reader' startBound' length' returnNullIfFirstMissing
Long Parameter List,Serenity.Data,Identity,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Identity,The method has 6 parameters. Parameters: sql' commandType' connection' type' parametersType' otherTypes
Long Parameter List,Serenity.Data,Identity,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Identity,The method has 7 parameters. Parameters: sql' commandType' connectionString' type' parametersType' otherTypes' gridIndex
Long Parameter List,Serenity.Data,DynamicParameters,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Add,The method has 5 parameters. Parameters: name' value' dbType' direction' size
Long Parameter List,Serenity,MethodChainingExtensions,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\MethodChainingExtensions.cs,With,The method has 5 parameters. Parameters: chain' param1' param2' param3' action
Long Parameter List,Serenity,MethodChainingExtensions,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\MethodChainingExtensions.cs,With,The method has 6 parameters. Parameters: chain' param1' param2' param3' param4' action
Long Parameter List,Serenity,MethodChainingExtensions,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\MethodChainingExtensions.cs,With,The method has 7 parameters. Parameters: chain' param1' param2' param3' param4' param5' action
Long Parameter List,Serenity,MethodChainingExtensions,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\MethodChainingExtensions.cs,With,The method has 8 parameters. Parameters: chain' param1' param2' param3' param4' param5' param6' action
Long Parameter List,Serenity,MethodChainingExtensions,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\MethodChainingExtensions.cs,With,The method has 9 parameters. Parameters: chain' param1' param2' param3' param4' param5' param6' param7' action
Long Parameter List,Serenity,MethodChainingExtensions,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\MethodChainingExtensions.cs,With,The method has 10 parameters. Parameters: chain' param1' param2' param3' param4' param5' param6' param7' param8' action
Long Parameter List,Serenity,MethodChainingExtensions,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\MethodChainingExtensions.cs,With,The method has 11 parameters. Parameters: chain' param1' param2' param3' param4' param5' param6' param7' param8' param9' action
Long Statement,Serenity.Data.Schema,FirebirdSchemaProvider,C:\repos\volkanceylan_serenity\Serenity.Data\Schema\Providers\FirebirdSchemaProvider.cs,GetFieldInfos,The length of the statement  "                var numericPrecision = src.NUMERIC_PRECISION == null ? 0 : Convert.ToInt32(src.NUMERIC_PRECISION' CultureInfo.InvariantCulture); " is 128.
Long Statement,Serenity.Data.Schema,PostgresSchemaProvider,C:\repos\volkanceylan_serenity\Serenity.Data\Schema\Providers\PostgresSchemaProvider.cs,GetForeignKeys,The length of the statement  "                    (SELECT a.attname FROM pg_attribute a WHERE a.attrelid = m.oid AND a.attnum = o.conkey[1] AND a.attisdropped = false) AS FKColumn' " is 130.
Long Statement,Serenity.Data.Schema,PostgresSchemaProvider,C:\repos\volkanceylan_serenity\Serenity.Data\Schema\Providers\PostgresSchemaProvider.cs,GetForeignKeys,The length of the statement  "                    (SELECT a.attname FROM pg_attribute a WHERE a.attrelid = f.oid AND a.attnum = o.confkey[1] AND a.attisdropped = false) AS PKColumn " is 130.
Long Statement,Serenity.Data.Schema,SqlServerSchemaProvider,C:\repos\volkanceylan_serenity\Serenity.Data\Schema\Providers\SqlServerSchemaProvider.cs,GetFieldInfos,The length of the statement  "                    COALESCE(CHARACTER_MAXIMUM_LENGTH' CASE WHEN DATA_TYPE in ('decimal'' 'money'' 'numeric') THEN NUMERIC_PRECISION ELSE 0 END) [Size]' " is 132.
Long Statement,Serenity.Data,SqlConnections,C:\repos\volkanceylan_serenity\Serenity.Data\Connections\SqlConnections.cs,GetConnectionString,The length of the statement  "                throw new InvalidOperationException(String.Format("No connection string with key {0} in configuration file!"' connectionKey)); " is 126.
Long Statement,Serenity.Data,JsonCriteriaConverter,C:\repos\volkanceylan_serenity\Serenity.Data\Criteria\JsonCriteriaConverter.cs,ToJson,The length of the statement  "            throw new JsonSerializationException(String.Format("Can't serialize criteria of type {0}"' criteria.GetType().FullName)); " is 121.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetBindByName,The length of the statement  "                var method = new DynamicMethod(commandType.Name + "_BindByName"' null' new Type[] { typeof(IDbCommand)' typeof(bool) }); " is 120.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,LookupDbType,The length of the statement  "            throw new NotSupportedException(string.Format("The member {0} of type {1} cannot be used as a parameter value"' name' type)); " is 125.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Execute,The length of the statement  "            return ExecuteCommand(cnn' transaction' sql' (object)param == null ? null : info.ParamReader' (object)param' commandTimeout' commandType); " is 138.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The length of the statement  "            return Query<DapperRow>(cnn' sql.ToString()' sql.Params == null ? null : new DynamicParameters(sql.Params)' null' buffered' commandTimeout' commandType); " is 153.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The length of the statement  "            return Query<T>(cnn' sql.ToString()' sql.Params == null ? null : new DynamicParameters(sql.Params)' transaction' buffered' commandTimeout' commandType); " is 152.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,QueryMultiple,The length of the statement  "            Identity identity = new Identity(sql' commandType' cnn' typeof(GridReader)' (object)param == null ? null : ((object)param).GetType()' null); " is 140.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The length of the statement  "            return MultiMap<TFirst' TSecond' DontMap' DontMap' DontMap' DontMap' DontMap' TReturn>(cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 180.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The length of the statement  "            return MultiMap<TFirst' TSecond' TThird' DontMap' DontMap' DontMap' DontMap' TReturn>(cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 179.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The length of the statement  "            return MultiMap<TFirst' TSecond' TThird' TFourth' DontMap' DontMap' DontMap' TReturn>(cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 179.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The length of the statement  "            return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' DontMap' DontMap' TReturn>(cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 178.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The length of the statement  "            return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' DontMap' TReturn>(cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 177.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Query,The length of the statement  "            return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>(cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 178.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,MultiMap,The length of the statement  "            var results = MultiMapImpl<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>(cnn' sql' map' param' transaction' splitOn' commandTimeout' commandType' null' null); " is 181.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,MultiMapImpl,The length of the statement  "            identity = identity ?? new Identity(sql' commandType' cnn' typeof(TFirst)' (object)param == null ? null : ((object)param).GetType()' new[] { typeof(TFirst)' typeof(TSecond)' typeof(TThird)' typeof(TFourth)' typeof(TFifth)' typeof(TSixth)' typeof(TSeventh) }); " is 259.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,MultiMapImpl,The length of the statement  "                if ((deserializer = cinfo.Deserializer).Func == null || (otherDeserializers = cinfo.OtherDeserializers) == null || hash != deserializer.Hash) " is 141.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,MultiMapImpl,The length of the statement  "                    var deserializers = GenerateDeserializers(new Type[] { typeof(TFirst)' typeof(TSecond)' typeof(TThird)' typeof(TFourth)' typeof(TFifth)' typeof(TSixth)' typeof(TSeventh) }' splitOn' reader); " is 190.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,MultiMapImpl,The length of the statement  "                Func<IDataReader' TReturn> mapIt = GenerateMapper<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>(deserializer.Func' otherDeserializers' map); " is 163.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The length of the statement  "                    return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)); " is 152.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The length of the statement  "                    return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)); " is 196.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The length of the statement  "                    return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)); " is 238.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The length of the statement  "                    return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)); " is 280.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The length of the statement  "                    return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r)); " is 326.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetCacheInfo,The length of the statement  "                    else if (typeof(IEnumerable<KeyValuePair<string' object>>).IsAssignableFrom(identity.parametersType) && typeof(System.Dynamic.IDynamicMetaObjectProvider).IsAssignableFrom(identity.parametersType)) " is 196.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,PackListParameters,The length of the statement  "                        command.CommandText = Regex.Replace(command.CommandText' @"[?@:]" + Regex.Escape(namePrefix)' "(SELECT NULL WHERE 1 = 0)"); " is 123.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,FilterParameters,The length of the statement  "            return parameters.Where(p => Regex.IsMatch(sql' @"[?@:]" + p.Name + "([^a-zA-Z0-9_]+|$)"' RegexOptions.IgnoreCase | RegexOptions.Multiline)); " is 141.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "            var dm = new DynamicMethod(string.Format("ParamInfo{0}"' Guid.NewGuid())' null' new[] { typeof(IDbCommand)' typeof(object) }' type' true); " is 138.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "            il.EmitCall(OpCodes.Callvirt' typeof(IDbCommand).GetProperty("Parameters").GetGetMethod()' null); // stack is now [parameters] " is 126.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "            IEnumerable<PropertyInfo> props = type.GetProperties().Where(p => p.GetIndexParameters().Length == 0).OrderBy(p => p.Name); " is 123.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.EmitCall(OpCodes.Call' typeof(SqlMapper).GetMethod("FindOrAddParameter")' null); // stack is [parameters] [parameter] " is 120.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.EmitCall(OpCodes.Callvirt' typeof(IDbCommand).GetMethod("CreateParameter")' null);// stack is now [parameters] [parameters] [parameter] " is 138.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("ParameterName").GetSetMethod()' null);// stack is now [parameters] [parameters] [parameter] " is 157.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                if (dbType != DbType.Time) // https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time " is 195.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("DbType").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter] " is 152.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("Direction").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter] " is 155.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                il.Emit(OpCodes.Callvirt' prop.GetGetMethod()); // stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value] " is 125.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                        il.EmitCall(OpCodes.Callvirt' prop.PropertyType.GetMethod("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null); " is 121.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("Value").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter] " is 151.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.EmitCall(OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty("Size").GetSetMethod()' null); // stack is now [parameters] [[parameters]] [parameter] " is 153.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetStructDeserializer,The length of the statement  "            // no point using special per-type handling here; it boils down to the same' plus not all are supported anyway (see: SqlDataReader.GetChar - not supported!) " is 156.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetTypeDeserializer,The length of the statement  "            var dm = new DynamicMethod(string.Format("Deserialize{0}"' Guid.NewGuid())' typeof(object)' new[] { typeof(IDataReader) }' true); " is 129.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetTypeDeserializer,The length of the statement  "                        throw new InvalidOperationException(String.Format("A parameterless default constructor or one matching signature {0} is required for {1} materialization"' proposedTypes' type.FullName)); " is 186.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetTypeDeserializer,The length of the statement  "                            memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null); // stack is now [target][target][typed-value] " is 158.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetTypeDeserializer,The length of the statement  "                            il.EmitCall(OpCodes.Call' typeof(Type).GetMethod("GetTypeFromHandle")' null);// stack is now [target][target][enum-type] " is 120.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetTypeDeserializer,The length of the statement  "                                il.Emit(OpCodes.Newobj' memberType.GetConstructor(new[] { nullUnderlyingType })); // stack is now [target][target][enum-value] " is 126.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetTypeDeserializer,The length of the statement  "                            il.Emit(OpCodes.Newobj' memberType.GetConstructor(new Type[] { typeof(byte[]) }));// stack is now [target][target][binary] " is 122.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetTypeDeserializer,The length of the statement  "                                        il.EmitCall(OpCodes.Call' typeof(Type).GetMethod("GetTypeFromHandle")' null); // stack is now [target][target][value][member-type] " is 130.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetTypeDeserializer,The length of the statement  "                                        il.EmitCall(OpCodes.Call' typeof(Convert).GetMethod("ChangeType"' new Type[] { typeof(object)' typeof(Type) })' null); // stack is now [target][target][boxed-member-type-value] " is 176.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetTypeDeserializer,The length of the statement  "                                    il.Emit(OpCodes.Newobj' unboxType.GetConstructor(new[] { nullUnderlyingType })); // stack is now [target][target][typed-value] " is 126.
Long Statement,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetOperator,The length of the statement  "            return ResolveOperator(fromMethods = from.GetMethods(BindingFlags.Static | BindingFlags.Public)' from' to' "op_Implicit") " is 121.
Long Statement,Serenity.Data,GridReader,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Read,The length of the statement  "                if (reader == null) throw new ObjectDisposedException(GetType().FullName' "The reader has been disposed; this can happen after all data has been consumed"); " is 156.
Long Statement,Serenity.Data,GridReader,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Read,The length of the statement  "                if (consumed) throw new InvalidOperationException("Query results must be consumed in the correct order' and each result can only be consumed once"); " is 148.
Long Statement,Serenity.Data,GridReader,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,MultiReadInternal,The length of the statement  "                    foreach (var r in SqlMapper.MultiMapImpl<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>(null' null' func' null' null' splitOn' null' null' reader' identity)) " is 179.
Long Statement,Serenity.Data,DynamicParameters,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Add,The length of the statement  "            parameters[Clean(name)] = new ParamInfo() { Name = name' Value = value' ParameterDirection = direction ?? ParameterDirection.Input' DbType = dbType' Size = size }; " is 163.
Long Statement,Serenity.Data,DbString,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,AddParameter,The length of the statement  "            param.DbType = IsAnsi ? (IsFixedLength ? DbType.AnsiStringFixedLength : DbType.AnsiString) : (IsFixedLength ? DbType.StringFixedLength : DbType.String); " is 152.
Long Statement,Serenity.Data,DefaultTypeMap,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetPropertySetter,The length of the statement  "                propertyInfo.DeclaringType.GetProperty(propertyInfo.Name' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).GetSetMethod(true); " is 147.
Long Statement,Serenity.Data,DefaultTypeMap,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,FindConstructor,The length of the statement  "            foreach (ConstructorInfo ctor in constructors.OrderBy(c => c.IsPublic ? 0 : (c.IsPrivate ? 2 : 1)).ThenBy(c => c.GetParameters().Length)) " is 137.
Long Statement,Serenity.Data,DefaultTypeMap,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetConstructorParameter,The length of the statement  "            return new SimpleMemberMap(columnName' parameters.FirstOrDefault(p => string.Equals(p.Name' columnName' StringComparison.OrdinalIgnoreCase))); " is 142.
Complex Conditional,Serenity.Data,SqlQuery,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlQuery.cs,ToString,The conditional expression  "skip > 0 && orderBy == null && !dialect.CanUseSkipKeyword && !dialect.UseRowNum"  is complex.
Complex Conditional,Serenity.Data,SqlQuery,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlQuery.cs,ToString,The conditional expression  "take != 0 && (!useOffset) && (!useRowNum) && (useRowNumber || !dialect.UseTakeAtEnd)"  is complex.
Complex Conditional,Serenity.Data,SqlQuery,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlQuery.cs,ToString,The conditional expression  "take != 0 && (!useRowNum) && (!useOffset) && !useRowNumber && dialect.UseTakeAtEnd"  is complex.
Complex Conditional,Serenity.Data,BracketLocator,C:\repos\volkanceylan_serenity\Serenity.Data\Join\BracketLocator.cs,ReplaceBracketContents,The conditional expression  "c == '_' || c == validChar1 || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')"  is complex.
Complex Conditional,Serenity.Data,BracketLocator,C:\repos\volkanceylan_serenity\Serenity.Data\Join\BracketLocator.cs,ReplaceBrackets,The conditional expression  "sub.Length == 0 ||                          sub.IndexOf('\'') >= 0 ||                          sub.IndexOf('[') >= 0 ||                          Int64.TryParse(sub' out l)"  is complex.
Complex Conditional,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetBindByName,The conditional expression  "prop != null && prop.CanWrite && prop.PropertyType == typeof(bool)                  && ((indexers = prop.GetIndexParameters()) == null || indexers.Length == 0)                  && (setter = prop.GetSetMethod()) != null"  is complex.
Complex Conditional,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetDeserializer,The conditional expression  "!(typeMap.ContainsKey(type) || type.IsEnum || type.FullName == LinqBinary ||                  (type.IsValueType && (underlyingType = Nullable.GetUnderlyingType(type)) != null && underlyingType.IsEnum))"  is complex.
Complex Conditional,Serenity.Data,DefaultTypeMap,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,FindConstructor,The conditional expression  "unboxedType != types[i]                          && !(unboxedType.IsEnum && Enum.GetUnderlyingType(unboxedType) == types[i])                          && !(unboxedType == typeof(char) && types[i] == typeof(string))"  is complex.
Complex Conditional,Serenity.Data,SqlCommandDumper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlCommandDumper.cs,logQuotedParameterValue,The conditional expression  "value is sbyte                          || value is byte                          || value is short                          || value is ushort                          || value is int                          || value is uint                          || value is long                          || value is ulong                          || value is float                          || value is double                          || value is decimal"  is complex.
Complex Conditional,Serenity.Data,T0ReferenceRemover,C:\repos\volkanceylan_serenity\Serenity.Data\Join\T0ReferenceRemover.cs,RemoveT0Aliases,The conditional expression  "c == '_' || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')"  is complex.
Complex Conditional,Serenity.Data,T0ReferenceRemover,C:\repos\volkanceylan_serenity\Serenity.Data\Join\T0ReferenceRemover.cs,RemoveT0Aliases,The conditional expression  "startIdent >= 0 &&                               startIdent < index &&                              index - startIdent == 2 &&                              expression[startIdent + 1] == '0' &&                              Char.ToLowerInvariant(expression[startIdent]) == 't'"  is complex.
Complex Conditional,Serenity.Data,JoinAliasLocator,C:\repos\volkanceylan_serenity\Serenity.Data\Join\JoinAliasLocator.cs,LocateOptimized,The conditional expression  "aliases == null && (alias == null || (aliases == null && alias == s))"  is complex.
Complex Conditional,Serenity.Data,JoinAliasLocator,C:\repos\volkanceylan_serenity\Serenity.Data\Join\JoinAliasLocator.cs,EnumerateAliases,The conditional expression  "c == '_' || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')"  is complex.
Complex Conditional,Serenity.Data,JoinAliasLocator,C:\repos\volkanceylan_serenity\Serenity.Data\Join\JoinAliasLocator.cs,ReplaceAliases,The conditional expression  "c == '_' || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')"  is complex.
Complex Conditional,Serenity.Data,SqlSyntax,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlSyntax.cs,IsQuoted,The conditional expression  "(s[0] == '[' &&                   s[s.Length - 1] == ']') ||                  (s[0] == '"' &&                   s[s.Length - 1] == '"') ||                  (s[0] == '`' &&                   s[s.Length - 1] == '`')"  is complex.
Empty Catch Block,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,QueryMultiple,The method has an empty catch block.
Empty Catch Block,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,QueryInternal,The method has an empty catch block.
Magic Number,Serenity.Data.Schema,FirebirdSchemaProvider,C:\repos\volkanceylan_serenity\Serenity.Data\Schema\Providers\FirebirdSchemaProvider.cs,GetSqlTypeFromBlrType,The following statement contains a magic number: switch (type)              {                  case BLRCodes.blr_varying:                  case BLRCodes.blr_varying2:                      return "varchar";                    case BLRCodes.blr_text:                  case BLRCodes.blr_text2:                  case BLRCodes.blr_cstring:                  case BLRCodes.blr_cstring2:                      if (size == 16)                          return "guid";                        return "char";                    case BLRCodes.blr_short:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "smallint";                    case BLRCodes.blr_long:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "integer";                    case BLRCodes.blr_quad:                  case BLRCodes.blr_int64:                  case BLRCodes.blr_blob_id:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "bigint";                    case BLRCodes.blr_float:                      return "float";                    case BLRCodes.blr_double:                  case BLRCodes.blr_d_float:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "double";                    case BLRCodes.blr_blob:                      if (subType == 1)                          return "text";                        return "varbinary";                    case BLRCodes.blr_timestamp:                      return "datetime";                    case BLRCodes.blr_sql_time:                      return "time";                    case BLRCodes.blr_sql_date:                      return "date";                    case BLRCodes.blr_bool:                      return "boolean";                    default:                      return "unknown";              }
Magic Number,Serenity.Data.Schema,FirebirdSchemaProvider,C:\repos\volkanceylan_serenity\Serenity.Data\Schema\Providers\FirebirdSchemaProvider.cs,GetSqlTypeFromBlrType,The following statement contains a magic number: switch (type)              {                  case BLRCodes.blr_varying:                  case BLRCodes.blr_varying2:                      return "varchar";                    case BLRCodes.blr_text:                  case BLRCodes.blr_text2:                  case BLRCodes.blr_cstring:                  case BLRCodes.blr_cstring2:                      if (size == 16)                          return "guid";                        return "char";                    case BLRCodes.blr_short:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "smallint";                    case BLRCodes.blr_long:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "integer";                    case BLRCodes.blr_quad:                  case BLRCodes.blr_int64:                  case BLRCodes.blr_blob_id:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "bigint";                    case BLRCodes.blr_float:                      return "float";                    case BLRCodes.blr_double:                  case BLRCodes.blr_d_float:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "double";                    case BLRCodes.blr_blob:                      if (subType == 1)                          return "text";                        return "varbinary";                    case BLRCodes.blr_timestamp:                      return "datetime";                    case BLRCodes.blr_sql_time:                      return "time";                    case BLRCodes.blr_sql_date:                      return "date";                    case BLRCodes.blr_bool:                      return "boolean";                    default:                      return "unknown";              }
Magic Number,Serenity.Data.Schema,FirebirdSchemaProvider,C:\repos\volkanceylan_serenity\Serenity.Data\Schema\Providers\FirebirdSchemaProvider.cs,GetSqlTypeFromBlrType,The following statement contains a magic number: switch (type)              {                  case BLRCodes.blr_varying:                  case BLRCodes.blr_varying2:                      return "varchar";                    case BLRCodes.blr_text:                  case BLRCodes.blr_text2:                  case BLRCodes.blr_cstring:                  case BLRCodes.blr_cstring2:                      if (size == 16)                          return "guid";                        return "char";                    case BLRCodes.blr_short:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "smallint";                    case BLRCodes.blr_long:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "integer";                    case BLRCodes.blr_quad:                  case BLRCodes.blr_int64:                  case BLRCodes.blr_blob_id:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "bigint";                    case BLRCodes.blr_float:                      return "float";                    case BLRCodes.blr_double:                  case BLRCodes.blr_d_float:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "double";                    case BLRCodes.blr_blob:                      if (subType == 1)                          return "text";                        return "varbinary";                    case BLRCodes.blr_timestamp:                      return "datetime";                    case BLRCodes.blr_sql_time:                      return "time";                    case BLRCodes.blr_sql_date:                      return "date";                    case BLRCodes.blr_bool:                      return "boolean";                    default:                      return "unknown";              }
Magic Number,Serenity.Data.Schema,FirebirdSchemaProvider,C:\repos\volkanceylan_serenity\Serenity.Data\Schema\Providers\FirebirdSchemaProvider.cs,GetSqlTypeFromBlrType,The following statement contains a magic number: switch (type)              {                  case BLRCodes.blr_varying:                  case BLRCodes.blr_varying2:                      return "varchar";                    case BLRCodes.blr_text:                  case BLRCodes.blr_text2:                  case BLRCodes.blr_cstring:                  case BLRCodes.blr_cstring2:                      if (size == 16)                          return "guid";                        return "char";                    case BLRCodes.blr_short:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "smallint";                    case BLRCodes.blr_long:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "integer";                    case BLRCodes.blr_quad:                  case BLRCodes.blr_int64:                  case BLRCodes.blr_blob_id:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "bigint";                    case BLRCodes.blr_float:                      return "float";                    case BLRCodes.blr_double:                  case BLRCodes.blr_d_float:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "double";                    case BLRCodes.blr_blob:                      if (subType == 1)                          return "text";                        return "varbinary";                    case BLRCodes.blr_timestamp:                      return "datetime";                    case BLRCodes.blr_sql_time:                      return "time";                    case BLRCodes.blr_sql_date:                      return "date";                    case BLRCodes.blr_bool:                      return "boolean";                    default:                      return "unknown";              }
Magic Number,Serenity.Data.Schema,FirebirdSchemaProvider,C:\repos\volkanceylan_serenity\Serenity.Data\Schema\Providers\FirebirdSchemaProvider.cs,GetSqlTypeFromBlrType,The following statement contains a magic number: switch (type)              {                  case BLRCodes.blr_varying:                  case BLRCodes.blr_varying2:                      return "varchar";                    case BLRCodes.blr_text:                  case BLRCodes.blr_text2:                  case BLRCodes.blr_cstring:                  case BLRCodes.blr_cstring2:                      if (size == 16)                          return "guid";                        return "char";                    case BLRCodes.blr_short:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "smallint";                    case BLRCodes.blr_long:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "integer";                    case BLRCodes.blr_quad:                  case BLRCodes.blr_int64:                  case BLRCodes.blr_blob_id:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "bigint";                    case BLRCodes.blr_float:                      return "float";                    case BLRCodes.blr_double:                  case BLRCodes.blr_d_float:                      if (subType == 2)                          return "decimal";                        if (subType == 1)                          return "numeric";                        if (scale < 0)                          return "decimal";                        return "double";                    case BLRCodes.blr_blob:                      if (subType == 1)                          return "text";                        return "varbinary";                    case BLRCodes.blr_timestamp:                      return "datetime";                    case BLRCodes.blr_sql_time:                      return "time";                    case BLRCodes.blr_sql_date:                      return "date";                    case BLRCodes.blr_bool:                      return "boolean";                    default:                      return "unknown";              }
Magic Number,Serenity.Data,BaseCriteria,C:\repos\volkanceylan_serenity\Serenity.Data\Criteria\BaseCriteria.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(256);
Magic Number,Serenity.Data,JsonCriteriaConverter,C:\repos\volkanceylan_serenity\Serenity.Data\Criteria\JsonCriteriaConverter.cs,Parse,The following statement contains a magic number: if (array.Count == 2)              {                  if (!(array[0] is JValue) ||                      !(((JValue)array[0]).Value is string))                  {                      throw new JsonSerializationException(String.Format("Couldn't deserialize unary criteria: {0}"' array.ToString()));                  }                    var opStr = (string)((JValue)array[0]).Value;                    CriteriaOperator op;                  if (!KeyToOperator.TryGetValue(opStr' out op))                      throw new JsonSerializationException(String.Format("Unknown Criteria operator: {0}"' opStr));                    if (op < CriteriaOperator.Paren || op > CriteriaOperator.Exists)                  {                      throw new JsonSerializationException(String.Format("Invalid Unary Criteria format: {0}"' array.ToString()));                  }                    return new UnaryCriteria(op' ParseValue(array[1]));              }
Magic Number,Serenity.Data,JsonCriteriaConverter,C:\repos\volkanceylan_serenity\Serenity.Data\Criteria\JsonCriteriaConverter.cs,Parse,The following statement contains a magic number: if (array.Count == 3)              {                  if (!(array[1] is JValue) ||                      !(((JValue)array[1]).Value is string))                  {                      throw new JsonSerializationException(String.Format("Couldn't deserialize unary criteria: {0}"' array.ToString()));                  }                    var opStr = (string)((JValue)array[1]).Value;                    CriteriaOperator op;                  if (!KeyToOperator.TryGetValue(opStr' out op))                      throw new JsonSerializationException(String.Format("Unknown Criteria operator: {0}"' opStr));                    if (op < CriteriaOperator.AND || op > CriteriaOperator.NotLike)                      throw new JsonSerializationException(String.Format("Invalid Criteria format: {0}"' array.ToString()));                    return new BinaryCriteria(ParseValue(array[0])' op' ParseValue(array[2]));              }
Magic Number,Serenity.Data,JsonCriteriaConverter,C:\repos\volkanceylan_serenity\Serenity.Data\Criteria\JsonCriteriaConverter.cs,Parse,The following statement contains a magic number: if (array.Count == 3)              {                  if (!(array[1] is JValue) ||                      !(((JValue)array[1]).Value is string))                  {                      throw new JsonSerializationException(String.Format("Couldn't deserialize unary criteria: {0}"' array.ToString()));                  }                    var opStr = (string)((JValue)array[1]).Value;                    CriteriaOperator op;                  if (!KeyToOperator.TryGetValue(opStr' out op))                      throw new JsonSerializationException(String.Format("Unknown Criteria operator: {0}"' opStr));                    if (op < CriteriaOperator.AND || op > CriteriaOperator.NotLike)                      throw new JsonSerializationException(String.Format("Invalid Criteria format: {0}"' array.ToString()));                    return new BinaryCriteria(ParseValue(array[0])' op' ParseValue(array[2]));              }
Magic Number,Serenity.Data,ValueCriteria,C:\repos\volkanceylan_serenity\Serenity.Data\Criteria\ValueCriteria.cs,ToString,The following statement contains a magic number: if (enumerable != null && !(value is string))              {                  var c = 0;                  foreach (var k in enumerable)                      c++;                    int i = 0;                  sb.Append('(');                  foreach (var k in enumerable)                  {                      if (i++ > 0)                          sb.Append(''');                        if (c > 10)                      {                          if (IsIntegerType(k))                          {                              sb.Append(k.ToString());                              continue;                          }                          else if (k is Enum)                          {                              sb.Append(Convert.ToInt64(k).ToString());                              continue;                          }                      }                      sb.Append(AddParam(query' k).Name);                  }                  sb.Append(')');              }              else              {                  sb.Append(AddParam(query' this.value).Name);              }
Magic Number,Serenity.Data,SqlQuery,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlQuery.cs,OrderByFirst,The following statement contains a magic number: if (search.EndsWith(" DESC"' StringComparison.OrdinalIgnoreCase))                  search = search.Substring(0' search.Length - 5).Trim();              else                  search += " DESC";
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GetColumnHash,The following statement contains a magic number: unchecked              {                  int colCount = reader.FieldCount' hash = colCount;                  for (int i = 0; i < colCount; i++)                  {   // binding code is only interested in names - not types                      object tmp = reader.GetName(i);                      hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode());                  }                  return hash;              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,PackListParameters,The following statement contains a magic number: if (list != null)              {                  if (FeatureSupport.Get(command.Connection).Arrays)                  {                      var arrayParm = command.CreateParameter();                      arrayParm.Value = list;                      arrayParm.ParameterName = namePrefix;                      command.Parameters.Add(arrayParm);                  }                  else                  {                      bool isString = value is IEnumerable<string>;                      bool isDbString = value is IEnumerable<DbString>;                      foreach (var item in list)                      {                          count++;                          var listParam = command.CreateParameter();                          listParam.ParameterName = namePrefix + count;                          listParam.Value = item ?? DBNull.Value;                          if (isString)                          {                              listParam.Size = 4000;                              if (item != null && ((string)item).Length > 4000)                              {                                  listParam.Size = -1;                              }                          }                          if (isDbString && item as DbString != null)                          {                              var str = item as DbString;                              str.AddParameter(command' listParam.ParameterName);                          }                          else                          {                              command.Parameters.Add(listParam);                          }                      }                        if (count == 0)                      {                          command.CommandText = Regex.Replace(command.CommandText' @"[?@:]" + Regex.Escape(namePrefix)' "(SELECT NULL WHERE 1 = 0)");                      }                      else                      {                          command.CommandText = Regex.Replace(command.CommandText' @"[?@:]" + Regex.Escape(namePrefix)' match =>                          {                              var grp = match.Value;                              var sb = new StringBuilder("(").Append(grp).Append(1);                              for (int i = 2; i <= count; i++)                              {                                  sb.Append(''').Append(grp).Append(i);                              }                              return sb.Append(')').ToString();                          });                      }                  }              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,PackListParameters,The following statement contains a magic number: if (list != null)              {                  if (FeatureSupport.Get(command.Connection).Arrays)                  {                      var arrayParm = command.CreateParameter();                      arrayParm.Value = list;                      arrayParm.ParameterName = namePrefix;                      command.Parameters.Add(arrayParm);                  }                  else                  {                      bool isString = value is IEnumerable<string>;                      bool isDbString = value is IEnumerable<DbString>;                      foreach (var item in list)                      {                          count++;                          var listParam = command.CreateParameter();                          listParam.ParameterName = namePrefix + count;                          listParam.Value = item ?? DBNull.Value;                          if (isString)                          {                              listParam.Size = 4000;                              if (item != null && ((string)item).Length > 4000)                              {                                  listParam.Size = -1;                              }                          }                          if (isDbString && item as DbString != null)                          {                              var str = item as DbString;                              str.AddParameter(command' listParam.ParameterName);                          }                          else                          {                              command.Parameters.Add(listParam);                          }                      }                        if (count == 0)                      {                          command.CommandText = Regex.Replace(command.CommandText' @"[?@:]" + Regex.Escape(namePrefix)' "(SELECT NULL WHERE 1 = 0)");                      }                      else                      {                          command.CommandText = Regex.Replace(command.CommandText' @"[?@:]" + Regex.Escape(namePrefix)' match =>                          {                              var grp = match.Value;                              var sb = new StringBuilder("(").Append(grp).Append(1);                              for (int i = 2; i <= count; i++)                              {                                  sb.Append(''').Append(grp).Append(i);                              }                              return sb.Append(')').ToString();                          });                      }                  }              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,PackListParameters,The following statement contains a magic number: if (list != null)              {                  if (FeatureSupport.Get(command.Connection).Arrays)                  {                      var arrayParm = command.CreateParameter();                      arrayParm.Value = list;                      arrayParm.ParameterName = namePrefix;                      command.Parameters.Add(arrayParm);                  }                  else                  {                      bool isString = value is IEnumerable<string>;                      bool isDbString = value is IEnumerable<DbString>;                      foreach (var item in list)                      {                          count++;                          var listParam = command.CreateParameter();                          listParam.ParameterName = namePrefix + count;                          listParam.Value = item ?? DBNull.Value;                          if (isString)                          {                              listParam.Size = 4000;                              if (item != null && ((string)item).Length > 4000)                              {                                  listParam.Size = -1;                              }                          }                          if (isDbString && item as DbString != null)                          {                              var str = item as DbString;                              str.AddParameter(command' listParam.ParameterName);                          }                          else                          {                              command.Parameters.Add(listParam);                          }                      }                        if (count == 0)                      {                          command.CommandText = Regex.Replace(command.CommandText' @"[?@:]" + Regex.Escape(namePrefix)' "(SELECT NULL WHERE 1 = 0)");                      }                      else                      {                          command.CommandText = Regex.Replace(command.CommandText' @"[?@:]" + Regex.Escape(namePrefix)' match =>                          {                              var grp = match.Value;                              var sb = new StringBuilder("(").Append(grp).Append(1);                              for (int i = 2; i <= count; i++)                              {                                  sb.Append(''').Append(grp).Append(i);                              }                              return sb.Append(')').ToString();                          });                      }                  }              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props)              {                  if (filterParams)                  {                      if (identity.sql.IndexOf("@" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0                          && identity.sql.IndexOf(":" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0                          && identity.sql.IndexOf("?" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0)                      { // can't see the parameter in the text (even in a comment' etc) - burn it with fire                          continue;                      }                  }                  if (typeof(ICustomQueryParameter).IsAssignableFrom(prop.PropertyType))                  {                      il.Emit(OpCodes.Ldloc_0); // stack is now [parameters] [typed-param]                      il.Emit(OpCodes.Callvirt' prop.GetGetMethod()); // stack is [parameters] [dbstring]                      il.Emit(OpCodes.Ldarg_0); // stack is now [parameters] [dbstring] [command]                      il.Emit(OpCodes.Ldstr' prop.Name); // stack is now [parameters] [dbstring] [command] [name]                      il.EmitCall(OpCodes.Callvirt' prop.PropertyType.GetMethod("AddParameter")' null); // stack is now [parameters]                      continue;                  }                  DbType dbType = LookupDbType(prop.PropertyType' prop.Name);                  if (dbType == DynamicParameters.EnumerableMultiParameter)                  {                      // this actually represents special handling for list types;                      il.Emit(OpCodes.Ldarg_0); // stack is now [parameters] [command]                      il.Emit(OpCodes.Ldstr' prop.Name); // stack is now [parameters] [command] [name]                      il.Emit(OpCodes.Ldloc_0); // stack is now [parameters] [command] [name] [typed-param]                      il.Emit(OpCodes.Callvirt' prop.GetGetMethod()); // stack is [parameters] [command] [name] [typed-value]                      if (prop.PropertyType.IsValueType)                      {                          il.Emit(OpCodes.Box' prop.PropertyType); // stack is [parameters] [command] [name] [boxed-value]                      }                      il.EmitCall(OpCodes.Call' typeof(SqlMapper).GetMethod("PackListParameters")' null); // stack is [parameters]                      continue;                  }                  il.Emit(OpCodes.Dup); // stack is now [parameters] [parameters]                    il.Emit(OpCodes.Ldarg_0); // stack is now [parameters] [parameters] [command]                    if (checkForDuplicates)                  {                      // need to be a little careful about adding; use a utility method                      il.Emit(OpCodes.Ldstr' prop.Name); // stack is now [parameters] [parameters] [command] [name]                      il.EmitCall(OpCodes.Call' typeof(SqlMapper).GetMethod("FindOrAddParameter")' null); // stack is [parameters] [parameter]                  }                  else                  {                      // no risk of duplicates; just blindly add                      il.EmitCall(OpCodes.Callvirt' typeof(IDbCommand).GetMethod("CreateParameter")' null);// stack is now [parameters] [parameters] [parameter]                        il.Emit(OpCodes.Dup);// stack is now [parameters] [parameters] [parameter] [parameter]                      il.Emit(OpCodes.Ldstr' prop.Name); // stack is now [parameters] [parameters] [parameter] [parameter] [name]                      il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("ParameterName").GetSetMethod()' null);// stack is now [parameters] [parameters] [parameter]                  }                  if (dbType != DbType.Time) // https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time                  {                      il.Emit(OpCodes.Dup);// stack is now [parameters] [[parameters]] [parameter] [parameter]                      EmitInt32(il' (int)dbType);// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]                        il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("DbType").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter]                  }                    il.Emit(OpCodes.Dup);// stack is now [parameters] [[parameters]] [parameter] [parameter]                  EmitInt32(il' (int)ParameterDirection.Input);// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]                  il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("Direction").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter]                    il.Emit(OpCodes.Dup);// stack is now [parameters] [[parameters]] [parameter] [parameter]                  il.Emit(OpCodes.Ldloc_0); // stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]                  il.Emit(OpCodes.Callvirt' prop.GetGetMethod()); // stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]                  bool checkForNull = true;                  if (prop.PropertyType.IsValueType)                  {                      il.Emit(OpCodes.Box' prop.PropertyType); // stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]                      if (Nullable.GetUnderlyingType(prop.PropertyType) == null)                      {   // struct but not Nullable<T>; boxed value cannot be null                          checkForNull = false;                      }                  }                  if (checkForNull)                  {                      if (dbType == DbType.String && !haveInt32Arg1)                      {                          il.DeclareLocal(typeof(int));                          haveInt32Arg1 = true;                      }                      // relative stack: [boxed value]                      il.Emit(OpCodes.Dup);// relative stack: [boxed value] [boxed value]                      Label notNull = il.DefineLabel();                      Label? allDone = dbType == DbType.String ? il.DefineLabel() : (Label?)null;                      il.Emit(OpCodes.Brtrue_S' notNull);                      // relative stack [boxed value = null]                      il.Emit(OpCodes.Pop); // relative stack empty                      il.Emit(OpCodes.Ldsfld' typeof(DBNull).GetField("Value")); // relative stack [DBNull]                      if (dbType == DbType.String)                      {                          EmitInt32(il' 0);                          il.Emit(OpCodes.Stloc_1);                      }                      if (allDone != null) il.Emit(OpCodes.Br_S' allDone.Value);                      il.MarkLabel(notNull);                      if (prop.PropertyType == typeof(string))                      {                          il.Emit(OpCodes.Dup); // [string] [string]                          il.EmitCall(OpCodes.Callvirt' typeof(string).GetProperty("Length").GetGetMethod()' null); // [string] [length]                          EmitInt32(il' 4000); // [string] [length] [4000]                          il.Emit(OpCodes.Cgt); // [string] [0 or 1]                          Label isLong = il.DefineLabel()' lenDone = il.DefineLabel();                          il.Emit(OpCodes.Brtrue_S' isLong);                          EmitInt32(il' 4000); // [string] [4000]                          il.Emit(OpCodes.Br_S' lenDone);                          il.MarkLabel(isLong);                          EmitInt32(il' -1); // [string] [-1]                          il.MarkLabel(lenDone);                          il.Emit(OpCodes.Stloc_1); // [string]                       }                      if (prop.PropertyType.FullName == LinqBinary)                      {                          il.EmitCall(OpCodes.Callvirt' prop.PropertyType.GetMethod("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);                      }                      if (allDone != null) il.MarkLabel(allDone.Value);                      // relative stack [boxed value or DBNull]                  }                  il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("Value").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter]                    if (prop.PropertyType == typeof(string))                  {                      var endOfSize = il.DefineLabel();                      // don't set if 0                      il.Emit(OpCodes.Ldloc_1); // [parameters] [[parameters]] [parameter] [size]                      il.Emit(OpCodes.Brfalse_S' endOfSize); // [parameters] [[parameters]] [parameter]                        il.Emit(OpCodes.Dup);// stack is now [parameters] [[parameters]] [parameter] [parameter]                      il.Emit(OpCodes.Ldloc_1); // stack is now [parameters] [[parameters]] [parameter] [parameter] [size]                      il.EmitCall(OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty("Size").GetSetMethod()' null); // stack is now [parameters] [[parameters]] [parameter]                        il.MarkLabel(endOfSize);                  }                  if (checkForDuplicates)                  {                      // stack is now [parameters] [parameter]                      il.Emit(OpCodes.Pop); // don't need parameter any more                  }                  else                  {                      // stack is now [parameters] [parameters] [parameter]                      // blindly add                      il.EmitCall(OpCodes.Callvirt' typeof(IList).GetMethod("Add")' null); // stack is now [parameters]                      il.Emit(OpCodes.Pop); // IList.Add returns the new index (int); we don't care                  }              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props)              {                  if (filterParams)                  {                      if (identity.sql.IndexOf("@" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0                          && identity.sql.IndexOf(":" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0                          && identity.sql.IndexOf("?" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0)                      { // can't see the parameter in the text (even in a comment' etc) - burn it with fire                          continue;                      }                  }                  if (typeof(ICustomQueryParameter).IsAssignableFrom(prop.PropertyType))                  {                      il.Emit(OpCodes.Ldloc_0); // stack is now [parameters] [typed-param]                      il.Emit(OpCodes.Callvirt' prop.GetGetMethod()); // stack is [parameters] [dbstring]                      il.Emit(OpCodes.Ldarg_0); // stack is now [parameters] [dbstring] [command]                      il.Emit(OpCodes.Ldstr' prop.Name); // stack is now [parameters] [dbstring] [command] [name]                      il.EmitCall(OpCodes.Callvirt' prop.PropertyType.GetMethod("AddParameter")' null); // stack is now [parameters]                      continue;                  }                  DbType dbType = LookupDbType(prop.PropertyType' prop.Name);                  if (dbType == DynamicParameters.EnumerableMultiParameter)                  {                      // this actually represents special handling for list types;                      il.Emit(OpCodes.Ldarg_0); // stack is now [parameters] [command]                      il.Emit(OpCodes.Ldstr' prop.Name); // stack is now [parameters] [command] [name]                      il.Emit(OpCodes.Ldloc_0); // stack is now [parameters] [command] [name] [typed-param]                      il.Emit(OpCodes.Callvirt' prop.GetGetMethod()); // stack is [parameters] [command] [name] [typed-value]                      if (prop.PropertyType.IsValueType)                      {                          il.Emit(OpCodes.Box' prop.PropertyType); // stack is [parameters] [command] [name] [boxed-value]                      }                      il.EmitCall(OpCodes.Call' typeof(SqlMapper).GetMethod("PackListParameters")' null); // stack is [parameters]                      continue;                  }                  il.Emit(OpCodes.Dup); // stack is now [parameters] [parameters]                    il.Emit(OpCodes.Ldarg_0); // stack is now [parameters] [parameters] [command]                    if (checkForDuplicates)                  {                      // need to be a little careful about adding; use a utility method                      il.Emit(OpCodes.Ldstr' prop.Name); // stack is now [parameters] [parameters] [command] [name]                      il.EmitCall(OpCodes.Call' typeof(SqlMapper).GetMethod("FindOrAddParameter")' null); // stack is [parameters] [parameter]                  }                  else                  {                      // no risk of duplicates; just blindly add                      il.EmitCall(OpCodes.Callvirt' typeof(IDbCommand).GetMethod("CreateParameter")' null);// stack is now [parameters] [parameters] [parameter]                        il.Emit(OpCodes.Dup);// stack is now [parameters] [parameters] [parameter] [parameter]                      il.Emit(OpCodes.Ldstr' prop.Name); // stack is now [parameters] [parameters] [parameter] [parameter] [name]                      il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("ParameterName").GetSetMethod()' null);// stack is now [parameters] [parameters] [parameter]                  }                  if (dbType != DbType.Time) // https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time                  {                      il.Emit(OpCodes.Dup);// stack is now [parameters] [[parameters]] [parameter] [parameter]                      EmitInt32(il' (int)dbType);// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]                        il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("DbType").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter]                  }                    il.Emit(OpCodes.Dup);// stack is now [parameters] [[parameters]] [parameter] [parameter]                  EmitInt32(il' (int)ParameterDirection.Input);// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]                  il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("Direction").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter]                    il.Emit(OpCodes.Dup);// stack is now [parameters] [[parameters]] [parameter] [parameter]                  il.Emit(OpCodes.Ldloc_0); // stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]                  il.Emit(OpCodes.Callvirt' prop.GetGetMethod()); // stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]                  bool checkForNull = true;                  if (prop.PropertyType.IsValueType)                  {                      il.Emit(OpCodes.Box' prop.PropertyType); // stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]                      if (Nullable.GetUnderlyingType(prop.PropertyType) == null)                      {   // struct but not Nullable<T>; boxed value cannot be null                          checkForNull = false;                      }                  }                  if (checkForNull)                  {                      if (dbType == DbType.String && !haveInt32Arg1)                      {                          il.DeclareLocal(typeof(int));                          haveInt32Arg1 = true;                      }                      // relative stack: [boxed value]                      il.Emit(OpCodes.Dup);// relative stack: [boxed value] [boxed value]                      Label notNull = il.DefineLabel();                      Label? allDone = dbType == DbType.String ? il.DefineLabel() : (Label?)null;                      il.Emit(OpCodes.Brtrue_S' notNull);                      // relative stack [boxed value = null]                      il.Emit(OpCodes.Pop); // relative stack empty                      il.Emit(OpCodes.Ldsfld' typeof(DBNull).GetField("Value")); // relative stack [DBNull]                      if (dbType == DbType.String)                      {                          EmitInt32(il' 0);                          il.Emit(OpCodes.Stloc_1);                      }                      if (allDone != null) il.Emit(OpCodes.Br_S' allDone.Value);                      il.MarkLabel(notNull);                      if (prop.PropertyType == typeof(string))                      {                          il.Emit(OpCodes.Dup); // [string] [string]                          il.EmitCall(OpCodes.Callvirt' typeof(string).GetProperty("Length").GetGetMethod()' null); // [string] [length]                          EmitInt32(il' 4000); // [string] [length] [4000]                          il.Emit(OpCodes.Cgt); // [string] [0 or 1]                          Label isLong = il.DefineLabel()' lenDone = il.DefineLabel();                          il.Emit(OpCodes.Brtrue_S' isLong);                          EmitInt32(il' 4000); // [string] [4000]                          il.Emit(OpCodes.Br_S' lenDone);                          il.MarkLabel(isLong);                          EmitInt32(il' -1); // [string] [-1]                          il.MarkLabel(lenDone);                          il.Emit(OpCodes.Stloc_1); // [string]                       }                      if (prop.PropertyType.FullName == LinqBinary)                      {                          il.EmitCall(OpCodes.Callvirt' prop.PropertyType.GetMethod("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);                      }                      if (allDone != null) il.MarkLabel(allDone.Value);                      // relative stack [boxed value or DBNull]                  }                  il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("Value").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter]                    if (prop.PropertyType == typeof(string))                  {                      var endOfSize = il.DefineLabel();                      // don't set if 0                      il.Emit(OpCodes.Ldloc_1); // [parameters] [[parameters]] [parameter] [size]                      il.Emit(OpCodes.Brfalse_S' endOfSize); // [parameters] [[parameters]] [parameter]                        il.Emit(OpCodes.Dup);// stack is now [parameters] [[parameters]] [parameter] [parameter]                      il.Emit(OpCodes.Ldloc_1); // stack is now [parameters] [[parameters]] [parameter] [parameter] [size]                      il.EmitCall(OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty("Size").GetSetMethod()' null); // stack is now [parameters] [[parameters]] [parameter]                        il.MarkLabel(endOfSize);                  }                  if (checkForDuplicates)                  {                      // stack is now [parameters] [parameter]                      il.Emit(OpCodes.Pop); // don't need parameter any more                  }                  else                  {                      // stack is now [parameters] [parameters] [parameter]                      // blindly add                      il.EmitCall(OpCodes.Callvirt' typeof(IList).GetMethod("Add")' null); // stack is now [parameters]                      il.Emit(OpCodes.Pop); // IList.Add returns the new index (int); we don't care                  }              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,LoadLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Ldloc_0); break;                  case 1: il.Emit(OpCodes.Ldloc_1); break;                  case 2: il.Emit(OpCodes.Ldloc_2); break;                  case 3: il.Emit(OpCodes.Ldloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Ldloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Ldloc' (short)index);                      }                      break;              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,LoadLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Ldloc_0); break;                  case 1: il.Emit(OpCodes.Ldloc_1); break;                  case 2: il.Emit(OpCodes.Ldloc_2); break;                  case 3: il.Emit(OpCodes.Ldloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Ldloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Ldloc' (short)index);                      }                      break;              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,LoadLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Ldloc_0); break;                  case 1: il.Emit(OpCodes.Ldloc_1); break;                  case 2: il.Emit(OpCodes.Ldloc_2); break;                  case 3: il.Emit(OpCodes.Ldloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Ldloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Ldloc' (short)index);                      }                      break;              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,StoreLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Stloc_0); break;                  case 1: il.Emit(OpCodes.Stloc_1); break;                  case 2: il.Emit(OpCodes.Stloc_2); break;                  case 3: il.Emit(OpCodes.Stloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Stloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Stloc' (short)index);                      }                      break;              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,StoreLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Stloc_0); break;                  case 1: il.Emit(OpCodes.Stloc_1); break;                  case 2: il.Emit(OpCodes.Stloc_2); break;                  case 3: il.Emit(OpCodes.Stloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Stloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Stloc' (short)index);                      }                      break;              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,StoreLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Stloc_0); break;                  case 1: il.Emit(OpCodes.Stloc_1); break;                  case 2: il.Emit(OpCodes.Stloc_2); break;                  case 3: il.Emit(OpCodes.Stloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Stloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Stloc' (short)index);                      }                      break;              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,LoadLocalAddress,The following statement contains a magic number: if (index <= 255)              {                  il.Emit(OpCodes.Ldloca_S' (byte)index);              }              else              {                  il.Emit(OpCodes.Ldloca' (short)index);              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Serenity.Data,SqlMapper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Serenity.Data,Identity,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : SqlMapper.connectionStringComparer.GetHashCode(connectionString));                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,Serenity.Data,Identity,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : SqlMapper.connectionStringComparer.GetHashCode(connectionString));                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,Serenity.Data,Identity,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : SqlMapper.connectionStringComparer.GetHashCode(connectionString));                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,Serenity.Data,Identity,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : SqlMapper.connectionStringComparer.GetHashCode(connectionString));                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,Serenity.Data,Identity,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : SqlMapper.connectionStringComparer.GetHashCode(connectionString));                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,Serenity.Data,Identity,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : SqlMapper.connectionStringComparer.GetHashCode(connectionString));                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,Serenity.Data,Identity,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : SqlMapper.connectionStringComparer.GetHashCode(connectionString));                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,Serenity.Data,Identity,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : SqlMapper.connectionStringComparer.GetHashCode(connectionString));                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,Serenity.Data,DynamicParameters,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values)              {                  var dbType = param.DbType;                  var val = param.Value;                  string name = Clean(param.Name);                    if (dbType == null && val != null) dbType = SqlMapper.LookupDbType(val.GetType()' name);                    if (dbType == DynamicParameters.EnumerableMultiParameter)                  {  #pragma warning disable 612' 618                      SqlMapper.PackListParameters(command' name' val);  #pragma warning restore 612' 618                  }                  else                  {                        bool add = !command.Parameters.Contains(name);                      IDbDataParameter p;                      if (add)                      {                          p = command.CreateParameter();                          p.ParameterName = name;                      }                      else                      {                          p = (IDbDataParameter)command.Parameters[name];                      }                        p.Value = val ?? DBNull.Value;                      p.Direction = param.ParameterDirection;                      var s = val as string;                      if (s != null)                      {                          if (s.Length <= 4000)                          {                              p.Size = 4000;                          }                      }                      if (param.Size != null)                      {                          p.Size = param.Size.Value;                      }                      if (dbType != null)                      {                          p.DbType = dbType.Value;                      }                      if (add)                      {                          command.Parameters.Add(p);                      }                      param.AttachedParam = p;                  }                }
Magic Number,Serenity.Data,DynamicParameters,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values)              {                  var dbType = param.DbType;                  var val = param.Value;                  string name = Clean(param.Name);                    if (dbType == null && val != null) dbType = SqlMapper.LookupDbType(val.GetType()' name);                    if (dbType == DynamicParameters.EnumerableMultiParameter)                  {  #pragma warning disable 612' 618                      SqlMapper.PackListParameters(command' name' val);  #pragma warning restore 612' 618                  }                  else                  {                        bool add = !command.Parameters.Contains(name);                      IDbDataParameter p;                      if (add)                      {                          p = command.CreateParameter();                          p.ParameterName = name;                      }                      else                      {                          p = (IDbDataParameter)command.Parameters[name];                      }                        p.Value = val ?? DBNull.Value;                      p.Direction = param.ParameterDirection;                      var s = val as string;                      if (s != null)                      {                          if (s.Length <= 4000)                          {                              p.Size = 4000;                          }                      }                      if (param.Size != null)                      {                          p.Size = param.Size.Value;                      }                      if (dbType != null)                      {                          p.DbType = dbType.Value;                      }                      if (add)                      {                          command.Parameters.Add(p);                      }                      param.AttachedParam = p;                  }                }
Magic Number,Serenity.Data,DbString,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,AddParameter,The following statement contains a magic number: if (Length == -1 && Value != null && Value.Length <= 4000)              {                  param.Size = 4000;              }              else              {                  param.Size = Length;              }
Magic Number,Serenity.Data,DbString,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,AddParameter,The following statement contains a magic number: if (Length == -1 && Value != null && Value.Length <= 4000)              {                  param.Size = 4000;              }              else              {                  param.Size = Length;              }
Magic Number,Serenity.Data,DefaultTypeMap,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,FindConstructor,The following statement contains a magic number: foreach (ConstructorInfo ctor in constructors.OrderBy(c => c.IsPublic ? 0 : (c.IsPrivate ? 2 : 1)).ThenBy(c => c.GetParameters().Length))              {                  ParameterInfo[] ctorParameters = ctor.GetParameters();                  if (ctorParameters.Length == 0)                      return ctor;                    if (ctorParameters.Length != types.Length)                      continue;                    int i = 0;                  for (; i < ctorParameters.Length; i++)                  {                      if (!String.Equals(ctorParameters[i].Name' names[i]' StringComparison.OrdinalIgnoreCase))                          break;                      if (types[i] == typeof(byte[]) && ctorParameters[i].ParameterType.FullName == SqlMapper.LinqBinary)                          continue;                      var unboxedType = Nullable.GetUnderlyingType(ctorParameters[i].ParameterType) ?? ctorParameters[i].ParameterType;                      if (unboxedType != types[i]                          && !(unboxedType.IsEnum && Enum.GetUnderlyingType(unboxedType) == types[i])                          && !(unboxedType == typeof(char) && types[i] == typeof(string)))                          break;                  }                    if (i == ctorParameters.Length)                      return ctor;              }
Magic Number,Serenity.Data,Sql,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Sql.cs,Case,The following statement contains a magic number: if (whenThenPairs.Length == 0 ||                  whenThenPairs.Length % 2 == 1)                  throw new ArgumentOutOfRangeException("whenThenPairs");
Magic Number,Serenity.Data,Sql,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Sql.cs,Case,The following statement contains a magic number: for (var i = 0; i < whenThenPairs.Length; i += 2)              {                  sb.Append(" WHEN ");                  sb.Append(whenThenPairs[i]);                  sb.Append(" THEN ");                  sb.Append(whenThenPairs[i + 1]);              }
Magic Number,Serenity.Data,SqlDelete,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlDelete.cs,Format,The following statement contains a magic number: StringBuilder sb = new StringBuilder("DELETE FROM "' 24 + where.Length);
Magic Number,Serenity.Data,SqlInsert,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlInsert.cs,Format,The following statement contains a magic number: if (nameValuePairs.Count % 2 != 0)                  throw new ArgumentOutOfRangeException("nameValuePairs");
Magic Number,Serenity.Data,SqlInsert,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlInsert.cs,Format,The following statement contains a magic number: StringBuilder sb = new StringBuilder("INSERT INTO "' 64 + nameValuePairs.Count * 16);
Magic Number,Serenity.Data,SqlInsert,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlInsert.cs,Format,The following statement contains a magic number: StringBuilder sb = new StringBuilder("INSERT INTO "' 64 + nameValuePairs.Count * 16);
Magic Number,Serenity.Data,SqlInsert,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlInsert.cs,Format,The following statement contains a magic number: for (int i = 0; i < nameValuePairs.Count; i += 2)              {                  if (i > 0)                      sb.Append("' ");                  sb.Append(SqlSyntax.AutoBracket(nameValuePairs[i]));              }
Magic Number,Serenity.Data,SqlInsert,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlInsert.cs,Format,The following statement contains a magic number: for (int i = 1; i < nameValuePairs.Count; i += 2)              {                  if (i > 1)                      sb.Append("' ");                  sb.Append(nameValuePairs[i]);              }
Magic Number,Serenity.Data,SqlUpdate,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlUpdate.cs,RemoveT0Reference,The following statement contains a magic number: if (index == 0)              {                  string rest = expression.Substring(3);                  if (SqlSyntax.IsValidQuotedIdentifier(rest))                      return rest;              }
Magic Number,Serenity.Data,SqlUpdate,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlUpdate.cs,Format,The following statement contains a magic number: if (nameValuePairs.Count % 2 != 0)                  throw new ArgumentOutOfRangeException("nameValuePairs");
Magic Number,Serenity.Data,SqlUpdate,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlUpdate.cs,Format,The following statement contains a magic number: StringBuilder sb = new StringBuilder("UPDATE "' 64 + where.Length +                  nameValuePairs.Count * 16);
Magic Number,Serenity.Data,SqlUpdate,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlUpdate.cs,Format,The following statement contains a magic number: StringBuilder sb = new StringBuilder("UPDATE "' 64 + where.Length +                  nameValuePairs.Count * 16);
Magic Number,Serenity.Data,SqlUpdate,C:\repos\volkanceylan_serenity\Serenity.Data\FluentSql\SqlUpdate.cs,Format,The following statement contains a magic number: for (int i = 0; i < nameValuePairs.Count - 1; i += 2)              {                  if (i > 0)                      sb.Append("' ");                  sb.Append(SqlSyntax.AutoBracket(nameValuePairs[i]));                  sb.Append(" = ");                  sb.Append(nameValuePairs[i + 1]);              }
Magic Number,Serenity.Data,T0ReferenceRemover,C:\repos\volkanceylan_serenity\Serenity.Data\Join\T0ReferenceRemover.cs,RemoveT0Aliases,The following statement contains a magic number: for (var index = 0; index < expression.Length; index++)              {                  var c = expression[index];                  sb.Append(c);                    if (inQuote)                  {                      if (c == '\'')                      {                          inQuote = false;                      }                  }                  else                  {                      if (c == '\'')                      {                          inQuote = true;                          startIdent = -1;                      }                      else if (c == '_' || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))                      {                          if (startIdent < 0)                              startIdent = index;                      }                      else if (c >= '0' && c <= '9')                      {                      }                      else if (c == '.')                      {                          if (startIdent >= 0 &&                               startIdent < index &&                              index - startIdent == 2 &&                              expression[startIdent + 1] == '0' &&                              Char.ToLowerInvariant(expression[startIdent]) == 't')                          {                              sb.Length -= 3;                          }                            startIdent = -1;                      }                      else                          startIdent = -1;                  }              }
Magic Number,Serenity.Data,T0ReferenceRemover,C:\repos\volkanceylan_serenity\Serenity.Data\Join\T0ReferenceRemover.cs,RemoveT0Aliases,The following statement contains a magic number: for (var index = 0; index < expression.Length; index++)              {                  var c = expression[index];                  sb.Append(c);                    if (inQuote)                  {                      if (c == '\'')                      {                          inQuote = false;                      }                  }                  else                  {                      if (c == '\'')                      {                          inQuote = true;                          startIdent = -1;                      }                      else if (c == '_' || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))                      {                          if (startIdent < 0)                              startIdent = index;                      }                      else if (c >= '0' && c <= '9')                      {                      }                      else if (c == '.')                      {                          if (startIdent >= 0 &&                               startIdent < index &&                              index - startIdent == 2 &&                              expression[startIdent + 1] == '0' &&                              Char.ToLowerInvariant(expression[startIdent]) == 't')                          {                              sb.Length -= 3;                          }                            startIdent = -1;                      }                      else                          startIdent = -1;                  }              }
Magic Number,Serenity.Data,SqlHelper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlHelper.cs,AddParamWithValue,The following statement contains a magic number: if (value is Boolean && dialect.NeedsBoolWorkaround)              {                  // otherwise argument out of range exception!                  param.Value = (Boolean)value ? 1 : 0;              }              else              {                  param.Value = value;                    if (value != null && value != DBNull.Value)                  {  #if COREFX  #pragma warning disable CS0618                      var mappedType = Dapper.SqlMapper.GetDbType(value);  #pragma warning restore CS0618  #else                      var mappedType = SqlMapper.LookupDbType(value.GetType()' name);  #endif                        if (mappedType != param.DbType)                          param.DbType = mappedType;                        if (param.DbType == DbType.DateTime &&                          (dialect ?? SqlSettings.DefaultDialect).UseDateTime2)                          param.DbType = DbType.DateTime2;                  }                    var str = value as string;                  if (str != null && str.Length < 4000)                      param.Size = 4000;              }
Magic Number,Serenity.Data,SqlHelper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlHelper.cs,AddParamWithValue,The following statement contains a magic number: if (value is Boolean && dialect.NeedsBoolWorkaround)              {                  // otherwise argument out of range exception!                  param.Value = (Boolean)value ? 1 : 0;              }              else              {                  param.Value = value;                    if (value != null && value != DBNull.Value)                  {  #if COREFX  #pragma warning disable CS0618                      var mappedType = Dapper.SqlMapper.GetDbType(value);  #pragma warning restore CS0618  #else                      var mappedType = SqlMapper.LookupDbType(value.GetType()' name);  #endif                        if (mappedType != param.DbType)                          param.DbType = mappedType;                        if (param.DbType == DbType.DateTime &&                          (dialect ?? SqlSettings.DefaultDialect).UseDateTime2)                          param.DbType = DbType.DateTime2;                  }                    var str = value as string;                  if (str != null && str.Length < 4000)                      param.Size = 4000;              }
Magic Number,Serenity.Data,SqlHelper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlHelper.cs,CheckConnectionPoolException,The following statement contains a magic number: if (ex != null && ex.Number == 10054)              {                  var wrapped = connection as WrappedConnection;                  if (wrapped != null &&                      (wrapped.OpenedOnce || wrapped.CurrentTransaction != null))                      return false;                    System.Data.SqlClient.SqlConnection.ClearAllPools();                  connection.Close();                  connection.Open();                  return true;              }              else                  return false;
Magic Number,Serenity.Data,SqlHelper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlHelper.cs,LogCommand,The following statement contains a magic number: try              {                  var sqlCmd = command as SqlCommand;                  if (sqlCmd != null)                  {                      Log.Debug(type + "\r\n" + SqlCommandDumper.GetCommandText(sqlCmd));                      return;                  }                    StringBuilder sb = new StringBuilder((command.CommandText ?? "").Length + 1000);                  sb.Append(type);                  sb.Append("\r\n");                  sb.Append(command.CommandText);                  if (command.Parameters != null && command.Parameters.Count > 0)                  {                      sb.Append(" --- PARAMS --- ");                      foreach (DbParameter p in command.Parameters)                      {                          sb.Append(p.ParameterName);                          sb.Append("=");                          if (p.Value == null || p.Value == DBNull.Value)                              sb.Append("<NULL>");                          else                              sb.Append(p.Value.ToString());                          sb.Append(" ");                      }                  }                    Log.Debug(sb.ToString());              }              catch (Exception ex)              {                  Log.Debug("Error logging command: " + ex.ToString());              }
Magic Number,Serenity.Data,SqlHelper,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlHelper.cs,GetReaderCacheKey,The following statement contains a magic number: StringBuilder sb = new StringBuilder(queryCacheKey'                  commandText.Length + connectionString.Length + queryCacheKey.Length + 50);
Magic Number,Serenity.Data,SqlSyntax,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlSyntax.cs,IndexParam,The following statement contains a magic number: if (_indexParam == null)              {                  var indexParam = new string[1000];                  for (int index = 0; index < indexParam.Length; index++)                      indexParam[index] = "@p" + index;                  _indexParam = indexParam;              }
Magic Number,Serenity.Data,SqlSyntax,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlSyntax.cs,TableAlias,The following statement contains a magic number: if (_tableAlias == null)              {                  var tableAlias = new string[100];                  for (int i = 0; i < tableAlias.Length; i++)                      tableAlias[i] = "T" + i.ToString(_invariant);                  _tableAlias = tableAlias;              }
Magic Number,Serenity.Data,SqlSyntax,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlSyntax.cs,TableAliasDot,The following statement contains a magic number: if (_tableAliasDot == null)              {                  var tableAliasDot = new string[100];                  for (int i = 0; i < tableAliasDot.Length; i++)                      tableAliasDot[i] = "T" + i.ToString(_invariant) + ".";                  _tableAliasDot = tableAliasDot;              }
Magic Number,Serenity.Data,SqlSyntax,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlSyntax.cs,IsValidQuotedIdentifier,The following statement contains a magic number: if (s[1] == ' ' || s[s.Length - 2] == ' ')                  return false;
Magic Number,Serenity.Data,SqlSyntax,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlSyntax.cs,IsValidQuotedIdentifier,The following statement contains a magic number: for (var i = 2; i <= s.Length - 2; i++)              {                  c = s[i];                  if (c != ' ' &&                      c != '_' &&                      !Char.IsLetterOrDigit(c))                      return false;              }
Magic Number,Serenity.Data,SqlSyntax,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlSyntax.cs,IsValidQuotedIdentifier,The following statement contains a magic number: for (var i = 2; i <= s.Length - 2; i++)              {                  c = s[i];                  if (c != ' ' &&                      c != '_' &&                      !Char.IsLetterOrDigit(c))                      return false;              }
Magic Number,Serenity.Data,SqlSyntax,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlSyntax.cs,IsQuoted,The following statement contains a magic number: if (string.IsNullOrEmpty(s) || s.Length < 3)                  return false;
Magic Number,Serenity.Data,SqlSyntax,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\SqlSyntax.cs,Unquote,The following statement contains a magic number: return s.Substring(1' s.Length - 2);
Missing Default,Serenity.Data,UnaryCriteria,C:\repos\volkanceylan_serenity\Serenity.Data\Criteria\UnaryCriteria.cs,ToString,The following switch statement is missing a default case: switch (this.op)              {                  case CriteriaOperator.Paren:                      sb.Append('(');                      this.operand.ToString(sb' query);                      sb.Append(')');                      break;                    case CriteriaOperator.Not:                      sb.Append("NOT (");                      this.operand.ToString(sb' query);                      sb.Append(')');                      break;                    case CriteriaOperator.IsNull:                      this.operand.ToString(sb' query);                      sb.Append(" IS NULL");                      break;                    case CriteriaOperator.IsNotNull:                      this.operand.ToString(sb' query);                      sb.Append(" IS NOT NULL");                      break;                    case CriteriaOperator.Exists:                      sb.Append("EXISTS (");                      this.operand.ToString(sb' query);                      sb.Append(')');                      break;              }
Missing Default,Serenity.Data,DynamicParameters,C:\repos\volkanceylan_serenity\Serenity.Data\SqlHelpers\Dapper.cs,Clean,The following switch statement is missing a default case: switch (name[0])                  {                      case '@':                      case ':':                      case '?':                          return name.Substring(1);                  }
