Implementation smell,Namespace,Class,File,Method,Description
Long Method,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,SetEditing,The method has 101 lines of code.
Long Method,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,SetFiltering,The method has 164 lines of code.
Long Method,Serenity.Data,RowFieldsBase,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\RowFieldsBase.cs,Initialize,The method has 242 lines of code.
Complex Method,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,SetEditing,Cyclomatic complexity of the method is 11
Complex Method,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,SetFiltering,Cyclomatic complexity of the method is 20
Complex Method,Serenity.PropertyGrid,PropertyItemHelper,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\PropertyItemHelper.cs,GetCustomFieldPropertyItem,Cyclomatic complexity of the method is 12
Complex Method,Serenity.Data,OriginPropertyDictionary,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\OriginPropertyDictionary.cs,OriginPropertyDictionary,Cyclomatic complexity of the method is 8
Complex Method,Serenity.Data,AliasedFields,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Extensions\AliasedFields.cs,As,Cyclomatic complexity of the method is 9
Complex Method,Serenity.Data,Row,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\Row.cs,CloneInto,Cyclomatic complexity of the method is 10
Complex Method,Serenity.Data,RowFieldsBase,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\RowFieldsBase.cs,InferTextualFields,Cyclomatic complexity of the method is 8
Long Parameter List,Serenity.Data,OriginPropertyDictionary,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\OriginPropertyDictionary.cs,OriginExpression,The method has 5 parameters. Parameters: property' origin' expressionSelector' aliasPrefix' extraJoins
Long Parameter List,Serenity.Data,ReplacedJoin,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Extensions\AliasedFields.cs,ReplacedJoin,The method has 5 parameters. Parameters: joins' toTable' alias' onCriteria' keyword
Long Parameter List,Serenity.Data,DateTimeOffsetField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\DateTimeOffsetField.cs,DateTimeOffsetField,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,DateTimeOffsetField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\DateTimeOffsetField.cs,Factory,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,ListField<TItem>,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\ListField.cs,ListField,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,RowField<TForeign>,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\RowField.cs,RowField,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,ByteArrayField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\ByteArrayField.cs,ByteArrayField,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,ByteArrayField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\ByteArrayField.cs,Factory,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,TimeSpanField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\TimeSpanField.cs,TimeSpanField,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,TimeSpanField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\TimeSpanField.cs,Factory,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,SingleField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\SingleField.cs,SingleField,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,SingleField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\SingleField.cs,Factory,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,Field,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\Field.CriteriaOperators.cs,Field,The method has 6 parameters. Parameters: fields' type' name' caption' size' flags
Long Parameter List,Serenity.Data,BooleanField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\BooleanField.cs,BooleanField,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,BooleanField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\BooleanField.cs,Factory,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,CustomClassField<TValue>,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\CustomClassField.cs,CustomClassField,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,DateTimeField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\DateTimeField.cs,DateTimeField,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,DateTimeField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\DateTimeField.cs,Factory,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,DecimalField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\DecimalField.cs,DecimalField,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,DecimalField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\DecimalField.cs,Factory,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,DoubleField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\DoubleField.cs,DoubleField,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,DoubleField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\DoubleField.cs,Factory,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,RowListField<TForeign>,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\RowListField.cs,RowListField,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,GenericClassField<TValue>,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\GenericClassField.cs,GenericClassField,The method has 8 parameters. Parameters: collection' type' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,GenericField<TValue>,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\GenericField.cs,GenericField,The method has 8 parameters. Parameters: collection' type' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,GenericValueField<TValue>,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\GenericValueField.cs,GenericValueField,The method has 8 parameters. Parameters: collection' type' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,GuidField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\GuidField.cs,GuidField,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,GuidField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\GuidField.cs,Factory,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,Int16Field,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\Int16Field.cs,Int16Field,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,Int16Field,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\Int16Field.cs,Factory,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,Int32Field,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\Int32Field.cs,Int32Field,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,Int32Field,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\Int32Field.cs,Factory,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,Int64Field,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\Int64Field.cs,Int64Field,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,Int64Field,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\Int64Field.cs,Factory,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,StreamField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\StreamField.cs,StreamField,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,StreamField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\StreamField.cs,Factory,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,StringField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\StringField.cs,StringField,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Parameter List,Serenity.Data,StringField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\StringField.cs,Factory,The method has 7 parameters. Parameters: collection' name' caption' size' flags' getValue' setValue
Long Statement,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,SetWidth,The length of the statement  "            item.Width = widthAttr == null ? (!ReferenceEquals(null' basedOnField) ? AutoWidth(basedOnField) : 80) : widthAttr.Value; " is 121.
Long Statement,Serenity.PropertyGrid,PropertyItemHelper,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\PropertyItemHelper.cs,GetCustomFieldPropertyItem,The length of the statement  "            pi.Insertable = ReferenceEquals(null' basedOnField) || ((basedOnField.Flags & FieldFlags.Insertable) == FieldFlags.Insertable); " is 127.
Long Statement,Serenity.PropertyGrid,PropertyItemHelper,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\PropertyItemHelper.cs,GetCustomFieldPropertyItem,The length of the statement  "            pi.Updatable = ReferenceEquals(null' basedOnField) || ((basedOnField.Flags & FieldFlags.Updatable) == FieldFlags.Updatable); " is 124.
Long Statement,Serenity.PropertyGrid,PropertyItemHelper,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\PropertyItemHelper.cs,GetCustomFieldPropertyItem,The length of the statement  "                var editorOptions = JsonConvert.DeserializeObject<Dictionary<string' object>>(editorOptionsJson' JsonSettings.Tolerant); " is 120.
Long Statement,Serenity.Data,CustomFieldCache,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\CustomFields\CustomFieldCache.cs,EnsureItems,The length of the statement  "            var newBySchemaTableAndGroup = new Dictionary<string' Dictionary<TableAndGroup' CacheItem>>(bySchemaTableAndGroup' StringComparer.OrdinalIgnoreCase); " is 149.
Long Statement,Serenity.Data,EntityConnectionExtensions,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Extensions\EntityConnectionExtensions.cs,ById,The length of the statement  "                throw new ValidationError("RecordNotFound"' String.Format("Can't locate '{0}' record with ID {1}!"' new TRow().Table' id)); " is 123.
Long Statement,Serenity.Data,EntityConnectionExtensions,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Extensions\EntityConnectionExtensions.cs,ById,The length of the statement  "                throw new ValidationError("RecordNotFound"' String.Format("Can't locate '{0}' record with ID {1}!"' new TRow().Table' id)); " is 123.
Long Statement,Serenity.Data,Field,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\Field.CriteriaOperators.cs,CheckUnassignedRead,The length of the statement  "                "{0} field on {1} is read before assigned a value! Make sure this field is selected in your SqlQuery. Extensions like connection.List only loads table fields by default' view / expression fields are not loaded unless explicitly selected."'  " is 239.
Long Statement,Serenity.Data,Int16Field,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\Int16Field.cs,ValueToJson,The length of the statement  "            else //if (EnumType == null) şimdilik enum tipi belirtilse de string e çevrilerek yazma işlemi iptal' flag ile daha sonra ekleyelim " is 131.
Long Statement,Serenity.Data,JsonRowConverter,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\JsonRowConverter.cs,ReadJson,The length of the statement  "                            throw new JsonSerializationException(String.Format("Could not find field '{0}' on row of type '{1}'"' fieldName' objectType.Name)); " is 131.
Long Statement,Serenity.Data,RowRegistry,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\RowRegistry.cs,Initialize,The length of the statement  "                .ToDictionary(x => x.Key' x => x.ToLookup(z => z.Table' StringComparer.OrdinalIgnoreCase)' StringComparer.OrdinalIgnoreCase); " is 125.
Complex Conditional,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,SetEditing,The conditional expression  "item.EditorType == "Decimal" &&                      (source.BasedOnField is DoubleField ||                       source.BasedOnField is DecimalField) &&                      source.BasedOnField.Size > 0 &&                      source.BasedOnField.Scale < source.BasedOnField.Size &&                      !item.EditorParams.ContainsKey("minValue") &&                      !item.EditorParams.ContainsKey("maxValue")"  is complex.
Complex Conditional,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,SetFormatting,The conditional expression  "valueType == typeof(Decimal) ||                      valueType == typeof(Double) ||                      valueType == typeof(Single) ||                      valueType == typeof(Int32)"  is complex.
Complex Conditional,Serenity.Data,OriginPropertyDictionary,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\OriginPropertyDictionary.cs,GetOriginProperty,The conditional expression  "prefix != null &&                      prefix.Length > 0 &&                      property.Name.StartsWith(prefix) &&                      property.Name.Length > prefix.Length &&                      originDictionary.propertyByName.TryGetValue(                          property.Name.Substring(prefix.Length)' out originProperty)"  is complex.
Complex Conditional,Serenity.Data,AliasedFields,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Extensions\AliasedFields.cs,As,The conditional expression  "(alias == "t0" || alias == "T0") &&                  (fields.alias == "t0" || fields.alias == "T0")"  is complex.
Complex Conditional,Serenity.Data,EntitySqlQueryExtensions,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Extensions\EntitySqlQueryExtensions.cs,From,The conditional expression  "alias != null && (alias.Name == "t0" || alias.Name == "T0") && alias.Table == entity.Table"  is complex.
Complex Conditional,Serenity.Data,RowFieldsBase,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\RowFieldsBase.cs,InferTextualFields,The conditional expression  "String.Compare(field.ForeignTable' join.Table) == 0 &&                              (join is LeftJoin || join is InnerJoin) &&                              !Object.ReferenceEquals(null' join.OnCriteria) &&                              join.OnCriteria.ToStringIgnoreParams().IndexOf(field.Expression' StringComparison.OrdinalIgnoreCase) >= 0"  is complex.
Magic Number,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,SetWidth,The following statement contains a magic number: item.Width = widthAttr == null ? (!ReferenceEquals(null' basedOnField) ? AutoWidth(basedOnField) : 80) : widthAttr.Value;
Magic Number,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,AutoWidth,The following statement contains a magic number: switch (field.Type)              {                  case FieldType.String:                      if (field.Size != 0 && field.Size <= 25)                          return Math.Max(field.Size * 6' 150);                      else if (field.Size == 0)                          return 250;                      else                          return 150;                  case FieldType.Boolean:                      return 40;                  case FieldType.DateTime:                      return 85;                  case FieldType.Time:                      return 70;                  case FieldType.Int16:                      return 55;                  case FieldType.Int32:                      return 65;                  case FieldType.Single:                  case FieldType.Double:                  case FieldType.Decimal:                      return 85;                  default:                      return 80;              }
Magic Number,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,AutoWidth,The following statement contains a magic number: switch (field.Type)              {                  case FieldType.String:                      if (field.Size != 0 && field.Size <= 25)                          return Math.Max(field.Size * 6' 150);                      else if (field.Size == 0)                          return 250;                      else                          return 150;                  case FieldType.Boolean:                      return 40;                  case FieldType.DateTime:                      return 85;                  case FieldType.Time:                      return 70;                  case FieldType.Int16:                      return 55;                  case FieldType.Int32:                      return 65;                  case FieldType.Single:                  case FieldType.Double:                  case FieldType.Decimal:                      return 85;                  default:                      return 80;              }
Magic Number,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,AutoWidth,The following statement contains a magic number: switch (field.Type)              {                  case FieldType.String:                      if (field.Size != 0 && field.Size <= 25)                          return Math.Max(field.Size * 6' 150);                      else if (field.Size == 0)                          return 250;                      else                          return 150;                  case FieldType.Boolean:                      return 40;                  case FieldType.DateTime:                      return 85;                  case FieldType.Time:                      return 70;                  case FieldType.Int16:                      return 55;                  case FieldType.Int32:                      return 65;                  case FieldType.Single:                  case FieldType.Double:                  case FieldType.Decimal:                      return 85;                  default:                      return 80;              }
Magic Number,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,AutoWidth,The following statement contains a magic number: switch (field.Type)              {                  case FieldType.String:                      if (field.Size != 0 && field.Size <= 25)                          return Math.Max(field.Size * 6' 150);                      else if (field.Size == 0)                          return 250;                      else                          return 150;                  case FieldType.Boolean:                      return 40;                  case FieldType.DateTime:                      return 85;                  case FieldType.Time:                      return 70;                  case FieldType.Int16:                      return 55;                  case FieldType.Int32:                      return 65;                  case FieldType.Single:                  case FieldType.Double:                  case FieldType.Decimal:                      return 85;                  default:                      return 80;              }
Magic Number,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,AutoWidth,The following statement contains a magic number: switch (field.Type)              {                  case FieldType.String:                      if (field.Size != 0 && field.Size <= 25)                          return Math.Max(field.Size * 6' 150);                      else if (field.Size == 0)                          return 250;                      else                          return 150;                  case FieldType.Boolean:                      return 40;                  case FieldType.DateTime:                      return 85;                  case FieldType.Time:                      return 70;                  case FieldType.Int16:                      return 55;                  case FieldType.Int32:                      return 65;                  case FieldType.Single:                  case FieldType.Double:                  case FieldType.Decimal:                      return 85;                  default:                      return 80;              }
Magic Number,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,AutoWidth,The following statement contains a magic number: switch (field.Type)              {                  case FieldType.String:                      if (field.Size != 0 && field.Size <= 25)                          return Math.Max(field.Size * 6' 150);                      else if (field.Size == 0)                          return 250;                      else                          return 150;                  case FieldType.Boolean:                      return 40;                  case FieldType.DateTime:                      return 85;                  case FieldType.Time:                      return 70;                  case FieldType.Int16:                      return 55;                  case FieldType.Int32:                      return 65;                  case FieldType.Single:                  case FieldType.Double:                  case FieldType.Decimal:                      return 85;                  default:                      return 80;              }
Magic Number,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,AutoWidth,The following statement contains a magic number: switch (field.Type)              {                  case FieldType.String:                      if (field.Size != 0 && field.Size <= 25)                          return Math.Max(field.Size * 6' 150);                      else if (field.Size == 0)                          return 250;                      else                          return 150;                  case FieldType.Boolean:                      return 40;                  case FieldType.DateTime:                      return 85;                  case FieldType.Time:                      return 70;                  case FieldType.Int16:                      return 55;                  case FieldType.Int32:                      return 65;                  case FieldType.Single:                  case FieldType.Double:                  case FieldType.Decimal:                      return 85;                  default:                      return 80;              }
Magic Number,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,AutoWidth,The following statement contains a magic number: switch (field.Type)              {                  case FieldType.String:                      if (field.Size != 0 && field.Size <= 25)                          return Math.Max(field.Size * 6' 150);                      else if (field.Size == 0)                          return 250;                      else                          return 150;                  case FieldType.Boolean:                      return 40;                  case FieldType.DateTime:                      return 85;                  case FieldType.Time:                      return 70;                  case FieldType.Int16:                      return 55;                  case FieldType.Int32:                      return 65;                  case FieldType.Single:                  case FieldType.Double:                  case FieldType.Decimal:                      return 85;                  default:                      return 80;              }
Magic Number,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,AutoWidth,The following statement contains a magic number: switch (field.Type)              {                  case FieldType.String:                      if (field.Size != 0 && field.Size <= 25)                          return Math.Max(field.Size * 6' 150);                      else if (field.Size == 0)                          return 250;                      else                          return 150;                  case FieldType.Boolean:                      return 40;                  case FieldType.DateTime:                      return 85;                  case FieldType.Time:                      return 70;                  case FieldType.Int16:                      return 55;                  case FieldType.Int32:                      return 65;                  case FieldType.Single:                  case FieldType.Double:                  case FieldType.Decimal:                      return 85;                  default:                      return 80;              }
Magic Number,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,AutoWidth,The following statement contains a magic number: switch (field.Type)              {                  case FieldType.String:                      if (field.Size != 0 && field.Size <= 25)                          return Math.Max(field.Size * 6' 150);                      else if (field.Size == 0)                          return 250;                      else                          return 150;                  case FieldType.Boolean:                      return 40;                  case FieldType.DateTime:                      return 85;                  case FieldType.Time:                      return 70;                  case FieldType.Int16:                      return 55;                  case FieldType.Int32:                      return 65;                  case FieldType.Single:                  case FieldType.Double:                  case FieldType.Decimal:                      return 85;                  default:                      return 80;              }
Magic Number,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,AutoWidth,The following statement contains a magic number: switch (field.Type)              {                  case FieldType.String:                      if (field.Size != 0 && field.Size <= 25)                          return Math.Max(field.Size * 6' 150);                      else if (field.Size == 0)                          return 250;                      else                          return 150;                  case FieldType.Boolean:                      return 40;                  case FieldType.DateTime:                      return 85;                  case FieldType.Time:                      return 70;                  case FieldType.Int16:                      return 55;                  case FieldType.Int32:                      return 65;                  case FieldType.Single:                  case FieldType.Double:                  case FieldType.Decimal:                      return 85;                  default:                      return 80;              }
Magic Number,Serenity.PropertyGrid,BasicPropertyProcessor,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\PropertyGrid\BasicPropertyProcessor\BasicPropertyProcessor.FormCssClass.cs,AutoWidth,The following statement contains a magic number: switch (field.Type)              {                  case FieldType.String:                      if (field.Size != 0 && field.Size <= 25)                          return Math.Max(field.Size * 6' 150);                      else if (field.Size == 0)                          return 250;                      else                          return 150;                  case FieldType.Boolean:                      return 40;                  case FieldType.DateTime:                      return 85;                  case FieldType.Time:                      return 70;                  case FieldType.Int16:                      return 55;                  case FieldType.Int32:                      return 65;                  case FieldType.Single:                  case FieldType.Double:                  case FieldType.Decimal:                      return 85;                  default:                      return 80;              }
Magic Number,Serenity.Data,OriginPropertyDictionary,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\OriginPropertyDictionary.cs,OriginPropertyDictionary,The following statement contains a magic number: prefixByAlias = originByAlias.ToDictionary(x => x.Key' x =>              {                  Tuple<string' ForeignKeyAttribute' ISqlJoin> joinProperty;                  if (joinPropertyByAlias.TryGetValue(x.Key' out joinProperty))                  {                      if (joinProperty.Item3.PropertyPrefix != null)                          return joinProperty.Item3.PropertyPrefix;                        if (joinProperty.Item1.EndsWith("ID") ||                          joinProperty.Item1.EndsWith("Id"))                          return joinProperty.Item1.Substring(0' joinProperty.Item1.Length - 2);                  }                    ISqlJoin join;                  if (rowJoinByAlias.TryGetValue(x.Key' out join))                  {                      if (join.PropertyPrefix != null)                          return join.PropertyPrefix;                  }                    return DeterminePrefix(x.Select(z => z.Key));              });
Magic Number,Serenity.Data,OriginPropertyDictionary,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\OriginPropertyDictionary.cs,DeterminePrefix,The following statement contains a magic number: if (items.Count() < 2)                  return "";
Magic Number,Serenity.Data,OriginPropertyDictionary,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\OriginPropertyDictionary.cs,OriginExpression,The following statement contains a magic number: if (aliasPrefix.Length >= 1000)                  throw new DivideByZeroException("Infinite origin recursion detected!");
Magic Number,Serenity.Data,OriginPropertyDictionary,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\OriginPropertyDictionary.cs,OriginAttribute,The following statement contains a magic number: if (recursion++ > 1000)                  throw new DivideByZeroException("Infinite origin recursion detected!");
Magic Number,Serenity.Data,OriginPropertyDictionary,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\OriginPropertyDictionary.cs,OriginDisplayName,The following statement contains a magic number: if (recursion++ > 1000)                  throw new DivideByZeroException("Infinite origin recursion detected!");
Magic Number,Serenity.Data,Field,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\Field.CriteriaOperators.cs,ForeignJoin,The following statement contains a magic number: if (foreignIndex == null)              {                  foreignJoin = Name;                  if (foreignJoin.EndsWith("Id"' StringComparison.Ordinal))                      foreignJoin = foreignJoin.Substring(0' foreignJoin.Length - 2);                  else if (foreignJoin.EndsWith("_ID"' StringComparison.OrdinalIgnoreCase))                      foreignJoin = foreignJoin.Substring(0' foreignJoin.Length - 3);                    foreignJoin = "j" + foreignJoin;              }              else              {                  foreignJoin = foreignIndex.Value.TableAlias();              }
Magic Number,Serenity.Data,Field,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\Field.CriteriaOperators.cs,ForeignJoin,The following statement contains a magic number: if (foreignIndex == null)              {                  foreignJoin = Name;                  if (foreignJoin.EndsWith("Id"' StringComparison.Ordinal))                      foreignJoin = foreignJoin.Substring(0' foreignJoin.Length - 2);                  else if (foreignJoin.EndsWith("_ID"' StringComparison.OrdinalIgnoreCase))                      foreignJoin = foreignJoin.Substring(0' foreignJoin.Length - 3);                    foreignJoin = "j" + foreignJoin;              }              else              {                  foreignJoin = foreignIndex.Value.TableAlias();              }
Magic Number,Serenity.Data,StreamField,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\FieldTypes\StreamField.cs,CopyStream,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,Serenity.Data,RowFieldsBase,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\RowFieldsBase.cs,DetermineTableName,The following statement contains a magic number: if (name.EndsWith("Row"))                  name = name.Substring(0' name.Length - 3);
Magic Number,Serenity.Data,RowFieldsBase,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\RowFieldsBase.cs,Initialize,The following statement contains a magic number: lock (this.initializeLock)              {                  Dictionary<string' FieldInfo> rowFields;                  Dictionary<string' PropertyInfo> rowProperties;                  GetRowFieldsAndProperties(out rowFields' out rowProperties);                    var expressionSelector = new DialectExpressionSelector(connectionKey);                  var rowCustomAttributes = this.rowType.GetCustomAttributes().ToList();                    foreach (var fieldInfo in this.GetType().GetFields(BindingFlags.Instance | BindingFlags.Public))                  {                      if (fieldInfo.FieldType.IsSubclassOf(typeof(Field)))                      {                          var field = (Field)fieldInfo.GetValue(this);                            PropertyInfo property;                          if (!rowProperties.TryGetValue(fieldInfo.Name' out property))                              property = null;                            ColumnAttribute column = null;                          DisplayNameAttribute display = null;                          SizeAttribute size = null;                          ExpressionAttribute expression = null;                          ScaleAttribute scale = null;                          MinSelectLevelAttribute selectLevel = null;                          ForeignKeyAttribute foreignKey = null;                          LeftJoinAttribute leftJoin = null;                          InnerJoinAttribute innerJoin = null;                          DefaultValueAttribute defaultValue = null;                          TextualFieldAttribute textualField = null;                          DateTimeKindAttribute dateTimeKind = null;                          PermissionAttributeBase readPermission = null;                          PermissionAttributeBase insertPermission = null;                          PermissionAttributeBase updatePermission = null;                            FieldFlags addFlags = (FieldFlags)0;                          FieldFlags removeFlags = (FieldFlags)0;                            OriginPropertyDictionary propertyDictionary = null;                            if (property != null)                          {                              var origin = property.GetCustomAttribute<OriginAttribute>();                                  column = property.GetCustomAttribute<ColumnAttribute>(false);                              display = property.GetCustomAttribute<DisplayNameAttribute>(false);                              size = property.GetCustomAttribute<SizeAttribute>(false);                                var expressions = property.GetCustomAttributes<ExpressionAttribute>(false);                              if (expressions.Any())                                  expression = expressionSelector.GetBestMatch(expressions' x => x.Dialect);                                scale = property.GetCustomAttribute<ScaleAttribute>(false);                              selectLevel = property.GetCustomAttribute<MinSelectLevelAttribute>(false);                              foreignKey = property.GetCustomAttribute<ForeignKeyAttribute>(false);                              leftJoin = property.GetCustomAttributes<LeftJoinAttribute>(false)                                  .FirstOrDefault(x => x.ToTable == null && x.OnCriteria == null);                              innerJoin = property.GetCustomAttributes<InnerJoinAttribute>(false)                                  .FirstOrDefault(x => x.ToTable == null && x.OnCriteria == null);                              defaultValue = property.GetCustomAttribute<DefaultValueAttribute>(false);                              textualField = property.GetCustomAttribute<TextualFieldAttribute>(false);                              dateTimeKind = property.GetCustomAttribute<DateTimeKindAttribute>(false);                              readPermission = property.GetCustomAttribute<ReadPermissionAttribute>(false);                              insertPermission = property.GetCustomAttribute<InsertPermissionAttribute>(false) ??                                  property.GetCustomAttribute<ModifyPermissionAttribute>(false) ?? readPermission;                              updatePermission = property.GetCustomAttribute<UpdatePermissionAttribute>(false) ??                                  property.GetCustomAttribute<ModifyPermissionAttribute>(false) ?? readPermission;                                if (origin != null)                              {                                  propertyDictionary = propertyDictionary ?? OriginPropertyDictionary.GetPropertyDictionary(this.rowType);                                  try                                  {                                      if (!expressions.Any() && expression == null)                                          expression = new ExpressionAttribute(propertyDictionary.OriginExpression(                                              property' origin' expressionSelector' ""' rowCustomAttributes));                                        if (display == null)                                          display = new DisplayNameAttribute(propertyDictionary.OriginDisplayName(property' origin));                                        if (size == null)                                          size = propertyDictionary.OriginAttribute<SizeAttribute>(property' origin);                                        if (scale == null)                                          scale = propertyDictionary.OriginAttribute<ScaleAttribute>(property' origin);                                  }                                  catch (DivideByZeroException)                                  {                                      throw new Exception(String.Format(                                          "Infinite recursion detected while determining origins " +                                          "for property '{0}' on row type '{1}'"'                                          property.Name' rowType.FullName));                                  }                              }                                var insertable = property.GetCustomAttribute<InsertableAttribute>(false);                              var updatable = property.GetCustomAttribute<UpdatableAttribute>(false);                                if (insertable != null && !insertable.Value)                                  removeFlags |= FieldFlags.Insertable;                                if (updatable != null && !updatable.Value)                                  removeFlags |= FieldFlags.Updatable;                                foreach (var attr in property.GetCustomAttributes<SetFieldFlagsAttribute>(false))                              {                                  addFlags |= attr.Add;                                  removeFlags |= attr.Remove;                              }                          }                            if (ReferenceEquals(null' field))                          {                              if (property == null)                              {                                  throw new InvalidProgramException(String.Format(                                      "Field {0} in type {1} is null and has no corresponding property in entity!"'                                          fieldInfo.Name' rowType.Name));                              }                                object[] prm = new object[7];                              prm[0] = this; // owner                              prm[1] = column == null ? property.Name : (column.Name.TrimToNull() ?? property.Name);                              prm[2] = display != null ? new LocalText(display.DisplayName) : null;                              prm[3] = size != null ? size.Value : 0;                                var defaultFlags = FieldFlags.Default;                              if (fieldInfo.FieldType.GetCustomAttribute<NotMappedAttribute>() != null)                                  defaultFlags |= FieldFlags.NotMapped;                                prm[4] = (defaultFlags ^ removeFlags) | addFlags;                              prm[5] = null;                              prm[6] = null;                                FieldInfo storage;                              if (rowFields.TryGetValue("_" + property.Name' out storage) ||                                  rowFields.TryGetValue("m_" + property.Name' out storage) ||                                  rowFields.TryGetValue(property.Name' out storage))                              {                                  prm[5] = CreateFieldGetMethod(storage);                                  prm[6] = CreateFieldSetMethod(storage);                              }                                field = (Field)Activator.CreateInstance(fieldInfo.FieldType' prm);                              fieldInfo.SetValue(this' field);                          }                          else                          {                              if (size != null)                                  throw new InvalidProgramException(String.Format(                                      "Field size '{0}' in type {1} can't be overridden by Size attribute!"'                                          fieldInfo.Name' rowType.Name));                                if (display != null)                                  field.Caption = new LocalText(display.DisplayName);                                if ((int)addFlags != 0 || (int)removeFlags != 0)                                  field.Flags = (field.Flags ^ removeFlags) | addFlags;                                if (column != null && String.Compare(column.Name' field.Name' StringComparison.OrdinalIgnoreCase) != 0)                                  throw new InvalidProgramException(String.Format(                                      "Field name '{0}' in type {1} can't be overridden by Column name attribute!"'                                          fieldInfo.Name' rowType.Name));                          }                            if (scale != null)                          {                              field.Scale = scale.Value;                          }                            if (defaultValue != null)                          {                              field.DefaultValue = defaultValue.Value;                          }                            if (selectLevel != null)                          {                              field.MinSelectLevel = selectLevel.Value;                          }                            if (expression != null)                          {                              field.Expression = expression.Value;                          }                            if (foreignKey != null)                          {                              field.ForeignTable = foreignKey.Table;                              field.ForeignField = foreignKey.Field;                          }                            if (leftJoin != null)                          {                              field.ForeignJoinAlias = new LeftJoin(this.joins' field.ForeignTable' leftJoin.Alias'                                  new Criteria(leftJoin.Alias' field.ForeignField) == new Criteria(field));                          }                            if (innerJoin != null)                          {                              field.ForeignJoinAlias = new InnerJoin(this.joins' field.ForeignTable' innerJoin.Alias'                                  new Criteria(innerJoin.Alias' field.ForeignField) == new Criteria(field));                          }                            if (textualField != null)                          {                              field.textualField = textualField.Value;                          }                            if (dateTimeKind != null && field is DateTimeField)                          {                              ((DateTimeField)field).DateTimeKind = dateTimeKind.Value;                          }                            if (readPermission != null)                          {                              field.readPermission = readPermission.Permission ?? "?";                          }                            if (insertPermission != null)                          {                              field.insertPermission = insertPermission.Permission ?? "?";                          }                            if (updatePermission != null)                          {                              field.updatePermission = updatePermission.Permission ?? "?";                          }                            if (property != null)                          {                              if (property.PropertyType != null &&                                  field is IEnumTypeField)                              {                                  if (property.PropertyType.IsEnum)                                  {                                      (field as IEnumTypeField).EnumType = property.PropertyType;                                  }                                  else                                  {                                      var nullableType = Nullable.GetUnderlyingType(property.PropertyType);                                      if (nullableType != null && nullableType.IsEnum)                                          (field as IEnumTypeField).EnumType = nullableType;                                  }                              }                                foreach (var attr in property.GetCustomAttributes<LeftJoinAttribute>())                                  if (attr.ToTable != null && attr.OnCriteria != null)                                      new LeftJoin(this.joins' attr.ToTable' attr.Alias'                                          new Criteria(attr.Alias' attr.OnCriteria) == new Criteria(field));                                foreach (var attr in property.GetCustomAttributes<InnerJoinAttribute>())                                  if (attr.ToTable != null && attr.OnCriteria != null)                                      new InnerJoin(this.joins' attr.ToTable' attr.Alias'                                          new Criteria(attr.Alias' attr.OnCriteria) == new Criteria(field));                                field.PropertyName = property.Name;                              this.byPropertyName[field.PropertyName] = field;                                field.CustomAttributes = property.GetCustomAttributes(false).ToArray();                          }                      }                  }                    foreach (var attr in rowCustomAttributes.OfType<LeftJoinAttribute>())                      new LeftJoin(this.joins' attr.ToTable' attr.Alias' new Criteria(attr.OnCriteria));                    foreach (var attr in rowCustomAttributes.OfType<InnerJoinAttribute>())                      new InnerJoin(this.joins' attr.ToTable' attr.Alias' new Criteria(attr.OnCriteria));                    foreach (var attr in rowCustomAttributes.OfType<OuterApplyAttribute>())                      new OuterApply(this.joins' attr.InnerQuery' attr.Alias);    #if !COREFX                  var propertyDescriptorArray = new PropertyDescriptor[this.Count];                  for (int i = 0; i < this.Count; i++)                  {                      var field = this[i];                      propertyDescriptorArray[i] = new FieldDescriptor(field);                  }                    this.propertyDescriptors = new PropertyDescriptorCollection(propertyDescriptorArray);  #endif                    InferTextualFields();                  AfterInitialize();              }
Magic Number,Serenity.Data,RowFieldsBase,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\RowFieldsBase.cs,Initialize,The following statement contains a magic number: lock (this.initializeLock)              {                  Dictionary<string' FieldInfo> rowFields;                  Dictionary<string' PropertyInfo> rowProperties;                  GetRowFieldsAndProperties(out rowFields' out rowProperties);                    var expressionSelector = new DialectExpressionSelector(connectionKey);                  var rowCustomAttributes = this.rowType.GetCustomAttributes().ToList();                    foreach (var fieldInfo in this.GetType().GetFields(BindingFlags.Instance | BindingFlags.Public))                  {                      if (fieldInfo.FieldType.IsSubclassOf(typeof(Field)))                      {                          var field = (Field)fieldInfo.GetValue(this);                            PropertyInfo property;                          if (!rowProperties.TryGetValue(fieldInfo.Name' out property))                              property = null;                            ColumnAttribute column = null;                          DisplayNameAttribute display = null;                          SizeAttribute size = null;                          ExpressionAttribute expression = null;                          ScaleAttribute scale = null;                          MinSelectLevelAttribute selectLevel = null;                          ForeignKeyAttribute foreignKey = null;                          LeftJoinAttribute leftJoin = null;                          InnerJoinAttribute innerJoin = null;                          DefaultValueAttribute defaultValue = null;                          TextualFieldAttribute textualField = null;                          DateTimeKindAttribute dateTimeKind = null;                          PermissionAttributeBase readPermission = null;                          PermissionAttributeBase insertPermission = null;                          PermissionAttributeBase updatePermission = null;                            FieldFlags addFlags = (FieldFlags)0;                          FieldFlags removeFlags = (FieldFlags)0;                            OriginPropertyDictionary propertyDictionary = null;                            if (property != null)                          {                              var origin = property.GetCustomAttribute<OriginAttribute>();                                  column = property.GetCustomAttribute<ColumnAttribute>(false);                              display = property.GetCustomAttribute<DisplayNameAttribute>(false);                              size = property.GetCustomAttribute<SizeAttribute>(false);                                var expressions = property.GetCustomAttributes<ExpressionAttribute>(false);                              if (expressions.Any())                                  expression = expressionSelector.GetBestMatch(expressions' x => x.Dialect);                                scale = property.GetCustomAttribute<ScaleAttribute>(false);                              selectLevel = property.GetCustomAttribute<MinSelectLevelAttribute>(false);                              foreignKey = property.GetCustomAttribute<ForeignKeyAttribute>(false);                              leftJoin = property.GetCustomAttributes<LeftJoinAttribute>(false)                                  .FirstOrDefault(x => x.ToTable == null && x.OnCriteria == null);                              innerJoin = property.GetCustomAttributes<InnerJoinAttribute>(false)                                  .FirstOrDefault(x => x.ToTable == null && x.OnCriteria == null);                              defaultValue = property.GetCustomAttribute<DefaultValueAttribute>(false);                              textualField = property.GetCustomAttribute<TextualFieldAttribute>(false);                              dateTimeKind = property.GetCustomAttribute<DateTimeKindAttribute>(false);                              readPermission = property.GetCustomAttribute<ReadPermissionAttribute>(false);                              insertPermission = property.GetCustomAttribute<InsertPermissionAttribute>(false) ??                                  property.GetCustomAttribute<ModifyPermissionAttribute>(false) ?? readPermission;                              updatePermission = property.GetCustomAttribute<UpdatePermissionAttribute>(false) ??                                  property.GetCustomAttribute<ModifyPermissionAttribute>(false) ?? readPermission;                                if (origin != null)                              {                                  propertyDictionary = propertyDictionary ?? OriginPropertyDictionary.GetPropertyDictionary(this.rowType);                                  try                                  {                                      if (!expressions.Any() && expression == null)                                          expression = new ExpressionAttribute(propertyDictionary.OriginExpression(                                              property' origin' expressionSelector' ""' rowCustomAttributes));                                        if (display == null)                                          display = new DisplayNameAttribute(propertyDictionary.OriginDisplayName(property' origin));                                        if (size == null)                                          size = propertyDictionary.OriginAttribute<SizeAttribute>(property' origin);                                        if (scale == null)                                          scale = propertyDictionary.OriginAttribute<ScaleAttribute>(property' origin);                                  }                                  catch (DivideByZeroException)                                  {                                      throw new Exception(String.Format(                                          "Infinite recursion detected while determining origins " +                                          "for property '{0}' on row type '{1}'"'                                          property.Name' rowType.FullName));                                  }                              }                                var insertable = property.GetCustomAttribute<InsertableAttribute>(false);                              var updatable = property.GetCustomAttribute<UpdatableAttribute>(false);                                if (insertable != null && !insertable.Value)                                  removeFlags |= FieldFlags.Insertable;                                if (updatable != null && !updatable.Value)                                  removeFlags |= FieldFlags.Updatable;                                foreach (var attr in property.GetCustomAttributes<SetFieldFlagsAttribute>(false))                              {                                  addFlags |= attr.Add;                                  removeFlags |= attr.Remove;                              }                          }                            if (ReferenceEquals(null' field))                          {                              if (property == null)                              {                                  throw new InvalidProgramException(String.Format(                                      "Field {0} in type {1} is null and has no corresponding property in entity!"'                                          fieldInfo.Name' rowType.Name));                              }                                object[] prm = new object[7];                              prm[0] = this; // owner                              prm[1] = column == null ? property.Name : (column.Name.TrimToNull() ?? property.Name);                              prm[2] = display != null ? new LocalText(display.DisplayName) : null;                              prm[3] = size != null ? size.Value : 0;                                var defaultFlags = FieldFlags.Default;                              if (fieldInfo.FieldType.GetCustomAttribute<NotMappedAttribute>() != null)                                  defaultFlags |= FieldFlags.NotMapped;                                prm[4] = (defaultFlags ^ removeFlags) | addFlags;                              prm[5] = null;                              prm[6] = null;                                FieldInfo storage;                              if (rowFields.TryGetValue("_" + property.Name' out storage) ||                                  rowFields.TryGetValue("m_" + property.Name' out storage) ||                                  rowFields.TryGetValue(property.Name' out storage))                              {                                  prm[5] = CreateFieldGetMethod(storage);                                  prm[6] = CreateFieldSetMethod(storage);                              }                                field = (Field)Activator.CreateInstance(fieldInfo.FieldType' prm);                              fieldInfo.SetValue(this' field);                          }                          else                          {                              if (size != null)                                  throw new InvalidProgramException(String.Format(                                      "Field size '{0}' in type {1} can't be overridden by Size attribute!"'                                          fieldInfo.Name' rowType.Name));                                if (display != null)                                  field.Caption = new LocalText(display.DisplayName);                                if ((int)addFlags != 0 || (int)removeFlags != 0)                                  field.Flags = (field.Flags ^ removeFlags) | addFlags;                                if (column != null && String.Compare(column.Name' field.Name' StringComparison.OrdinalIgnoreCase) != 0)                                  throw new InvalidProgramException(String.Format(                                      "Field name '{0}' in type {1} can't be overridden by Column name attribute!"'                                          fieldInfo.Name' rowType.Name));                          }                            if (scale != null)                          {                              field.Scale = scale.Value;                          }                            if (defaultValue != null)                          {                              field.DefaultValue = defaultValue.Value;                          }                            if (selectLevel != null)                          {                              field.MinSelectLevel = selectLevel.Value;                          }                            if (expression != null)                          {                              field.Expression = expression.Value;                          }                            if (foreignKey != null)                          {                              field.ForeignTable = foreignKey.Table;                              field.ForeignField = foreignKey.Field;                          }                            if (leftJoin != null)                          {                              field.ForeignJoinAlias = new LeftJoin(this.joins' field.ForeignTable' leftJoin.Alias'                                  new Criteria(leftJoin.Alias' field.ForeignField) == new Criteria(field));                          }                            if (innerJoin != null)                          {                              field.ForeignJoinAlias = new InnerJoin(this.joins' field.ForeignTable' innerJoin.Alias'                                  new Criteria(innerJoin.Alias' field.ForeignField) == new Criteria(field));                          }                            if (textualField != null)                          {                              field.textualField = textualField.Value;                          }                            if (dateTimeKind != null && field is DateTimeField)                          {                              ((DateTimeField)field).DateTimeKind = dateTimeKind.Value;                          }                            if (readPermission != null)                          {                              field.readPermission = readPermission.Permission ?? "?";                          }                            if (insertPermission != null)                          {                              field.insertPermission = insertPermission.Permission ?? "?";                          }                            if (updatePermission != null)                          {                              field.updatePermission = updatePermission.Permission ?? "?";                          }                            if (property != null)                          {                              if (property.PropertyType != null &&                                  field is IEnumTypeField)                              {                                  if (property.PropertyType.IsEnum)                                  {                                      (field as IEnumTypeField).EnumType = property.PropertyType;                                  }                                  else                                  {                                      var nullableType = Nullable.GetUnderlyingType(property.PropertyType);                                      if (nullableType != null && nullableType.IsEnum)                                          (field as IEnumTypeField).EnumType = nullableType;                                  }                              }                                foreach (var attr in property.GetCustomAttributes<LeftJoinAttribute>())                                  if (attr.ToTable != null && attr.OnCriteria != null)                                      new LeftJoin(this.joins' attr.ToTable' attr.Alias'                                          new Criteria(attr.Alias' attr.OnCriteria) == new Criteria(field));                                foreach (var attr in property.GetCustomAttributes<InnerJoinAttribute>())                                  if (attr.ToTable != null && attr.OnCriteria != null)                                      new InnerJoin(this.joins' attr.ToTable' attr.Alias'                                          new Criteria(attr.Alias' attr.OnCriteria) == new Criteria(field));                                field.PropertyName = property.Name;                              this.byPropertyName[field.PropertyName] = field;                                field.CustomAttributes = property.GetCustomAttributes(false).ToArray();                          }                      }                  }                    foreach (var attr in rowCustomAttributes.OfType<LeftJoinAttribute>())                      new LeftJoin(this.joins' attr.ToTable' attr.Alias' new Criteria(attr.OnCriteria));                    foreach (var attr in rowCustomAttributes.OfType<InnerJoinAttribute>())                      new InnerJoin(this.joins' attr.ToTable' attr.Alias' new Criteria(attr.OnCriteria));                    foreach (var attr in rowCustomAttributes.OfType<OuterApplyAttribute>())                      new OuterApply(this.joins' attr.InnerQuery' attr.Alias);    #if !COREFX                  var propertyDescriptorArray = new PropertyDescriptor[this.Count];                  for (int i = 0; i < this.Count; i++)                  {                      var field = this[i];                      propertyDescriptorArray[i] = new FieldDescriptor(field);                  }                    this.propertyDescriptors = new PropertyDescriptorCollection(propertyDescriptorArray);  #endif                    InferTextualFields();                  AfterInitialize();              }
Magic Number,Serenity.Data,RowFieldsBase,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\RowFieldsBase.cs,Initialize,The following statement contains a magic number: lock (this.initializeLock)              {                  Dictionary<string' FieldInfo> rowFields;                  Dictionary<string' PropertyInfo> rowProperties;                  GetRowFieldsAndProperties(out rowFields' out rowProperties);                    var expressionSelector = new DialectExpressionSelector(connectionKey);                  var rowCustomAttributes = this.rowType.GetCustomAttributes().ToList();                    foreach (var fieldInfo in this.GetType().GetFields(BindingFlags.Instance | BindingFlags.Public))                  {                      if (fieldInfo.FieldType.IsSubclassOf(typeof(Field)))                      {                          var field = (Field)fieldInfo.GetValue(this);                            PropertyInfo property;                          if (!rowProperties.TryGetValue(fieldInfo.Name' out property))                              property = null;                            ColumnAttribute column = null;                          DisplayNameAttribute display = null;                          SizeAttribute size = null;                          ExpressionAttribute expression = null;                          ScaleAttribute scale = null;                          MinSelectLevelAttribute selectLevel = null;                          ForeignKeyAttribute foreignKey = null;                          LeftJoinAttribute leftJoin = null;                          InnerJoinAttribute innerJoin = null;                          DefaultValueAttribute defaultValue = null;                          TextualFieldAttribute textualField = null;                          DateTimeKindAttribute dateTimeKind = null;                          PermissionAttributeBase readPermission = null;                          PermissionAttributeBase insertPermission = null;                          PermissionAttributeBase updatePermission = null;                            FieldFlags addFlags = (FieldFlags)0;                          FieldFlags removeFlags = (FieldFlags)0;                            OriginPropertyDictionary propertyDictionary = null;                            if (property != null)                          {                              var origin = property.GetCustomAttribute<OriginAttribute>();                                  column = property.GetCustomAttribute<ColumnAttribute>(false);                              display = property.GetCustomAttribute<DisplayNameAttribute>(false);                              size = property.GetCustomAttribute<SizeAttribute>(false);                                var expressions = property.GetCustomAttributes<ExpressionAttribute>(false);                              if (expressions.Any())                                  expression = expressionSelector.GetBestMatch(expressions' x => x.Dialect);                                scale = property.GetCustomAttribute<ScaleAttribute>(false);                              selectLevel = property.GetCustomAttribute<MinSelectLevelAttribute>(false);                              foreignKey = property.GetCustomAttribute<ForeignKeyAttribute>(false);                              leftJoin = property.GetCustomAttributes<LeftJoinAttribute>(false)                                  .FirstOrDefault(x => x.ToTable == null && x.OnCriteria == null);                              innerJoin = property.GetCustomAttributes<InnerJoinAttribute>(false)                                  .FirstOrDefault(x => x.ToTable == null && x.OnCriteria == null);                              defaultValue = property.GetCustomAttribute<DefaultValueAttribute>(false);                              textualField = property.GetCustomAttribute<TextualFieldAttribute>(false);                              dateTimeKind = property.GetCustomAttribute<DateTimeKindAttribute>(false);                              readPermission = property.GetCustomAttribute<ReadPermissionAttribute>(false);                              insertPermission = property.GetCustomAttribute<InsertPermissionAttribute>(false) ??                                  property.GetCustomAttribute<ModifyPermissionAttribute>(false) ?? readPermission;                              updatePermission = property.GetCustomAttribute<UpdatePermissionAttribute>(false) ??                                  property.GetCustomAttribute<ModifyPermissionAttribute>(false) ?? readPermission;                                if (origin != null)                              {                                  propertyDictionary = propertyDictionary ?? OriginPropertyDictionary.GetPropertyDictionary(this.rowType);                                  try                                  {                                      if (!expressions.Any() && expression == null)                                          expression = new ExpressionAttribute(propertyDictionary.OriginExpression(                                              property' origin' expressionSelector' ""' rowCustomAttributes));                                        if (display == null)                                          display = new DisplayNameAttribute(propertyDictionary.OriginDisplayName(property' origin));                                        if (size == null)                                          size = propertyDictionary.OriginAttribute<SizeAttribute>(property' origin);                                        if (scale == null)                                          scale = propertyDictionary.OriginAttribute<ScaleAttribute>(property' origin);                                  }                                  catch (DivideByZeroException)                                  {                                      throw new Exception(String.Format(                                          "Infinite recursion detected while determining origins " +                                          "for property '{0}' on row type '{1}'"'                                          property.Name' rowType.FullName));                                  }                              }                                var insertable = property.GetCustomAttribute<InsertableAttribute>(false);                              var updatable = property.GetCustomAttribute<UpdatableAttribute>(false);                                if (insertable != null && !insertable.Value)                                  removeFlags |= FieldFlags.Insertable;                                if (updatable != null && !updatable.Value)                                  removeFlags |= FieldFlags.Updatable;                                foreach (var attr in property.GetCustomAttributes<SetFieldFlagsAttribute>(false))                              {                                  addFlags |= attr.Add;                                  removeFlags |= attr.Remove;                              }                          }                            if (ReferenceEquals(null' field))                          {                              if (property == null)                              {                                  throw new InvalidProgramException(String.Format(                                      "Field {0} in type {1} is null and has no corresponding property in entity!"'                                          fieldInfo.Name' rowType.Name));                              }                                object[] prm = new object[7];                              prm[0] = this; // owner                              prm[1] = column == null ? property.Name : (column.Name.TrimToNull() ?? property.Name);                              prm[2] = display != null ? new LocalText(display.DisplayName) : null;                              prm[3] = size != null ? size.Value : 0;                                var defaultFlags = FieldFlags.Default;                              if (fieldInfo.FieldType.GetCustomAttribute<NotMappedAttribute>() != null)                                  defaultFlags |= FieldFlags.NotMapped;                                prm[4] = (defaultFlags ^ removeFlags) | addFlags;                              prm[5] = null;                              prm[6] = null;                                FieldInfo storage;                              if (rowFields.TryGetValue("_" + property.Name' out storage) ||                                  rowFields.TryGetValue("m_" + property.Name' out storage) ||                                  rowFields.TryGetValue(property.Name' out storage))                              {                                  prm[5] = CreateFieldGetMethod(storage);                                  prm[6] = CreateFieldSetMethod(storage);                              }                                field = (Field)Activator.CreateInstance(fieldInfo.FieldType' prm);                              fieldInfo.SetValue(this' field);                          }                          else                          {                              if (size != null)                                  throw new InvalidProgramException(String.Format(                                      "Field size '{0}' in type {1} can't be overridden by Size attribute!"'                                          fieldInfo.Name' rowType.Name));                                if (display != null)                                  field.Caption = new LocalText(display.DisplayName);                                if ((int)addFlags != 0 || (int)removeFlags != 0)                                  field.Flags = (field.Flags ^ removeFlags) | addFlags;                                if (column != null && String.Compare(column.Name' field.Name' StringComparison.OrdinalIgnoreCase) != 0)                                  throw new InvalidProgramException(String.Format(                                      "Field name '{0}' in type {1} can't be overridden by Column name attribute!"'                                          fieldInfo.Name' rowType.Name));                          }                            if (scale != null)                          {                              field.Scale = scale.Value;                          }                            if (defaultValue != null)                          {                              field.DefaultValue = defaultValue.Value;                          }                            if (selectLevel != null)                          {                              field.MinSelectLevel = selectLevel.Value;                          }                            if (expression != null)                          {                              field.Expression = expression.Value;                          }                            if (foreignKey != null)                          {                              field.ForeignTable = foreignKey.Table;                              field.ForeignField = foreignKey.Field;                          }                            if (leftJoin != null)                          {                              field.ForeignJoinAlias = new LeftJoin(this.joins' field.ForeignTable' leftJoin.Alias'                                  new Criteria(leftJoin.Alias' field.ForeignField) == new Criteria(field));                          }                            if (innerJoin != null)                          {                              field.ForeignJoinAlias = new InnerJoin(this.joins' field.ForeignTable' innerJoin.Alias'                                  new Criteria(innerJoin.Alias' field.ForeignField) == new Criteria(field));                          }                            if (textualField != null)                          {                              field.textualField = textualField.Value;                          }                            if (dateTimeKind != null && field is DateTimeField)                          {                              ((DateTimeField)field).DateTimeKind = dateTimeKind.Value;                          }                            if (readPermission != null)                          {                              field.readPermission = readPermission.Permission ?? "?";                          }                            if (insertPermission != null)                          {                              field.insertPermission = insertPermission.Permission ?? "?";                          }                            if (updatePermission != null)                          {                              field.updatePermission = updatePermission.Permission ?? "?";                          }                            if (property != null)                          {                              if (property.PropertyType != null &&                                  field is IEnumTypeField)                              {                                  if (property.PropertyType.IsEnum)                                  {                                      (field as IEnumTypeField).EnumType = property.PropertyType;                                  }                                  else                                  {                                      var nullableType = Nullable.GetUnderlyingType(property.PropertyType);                                      if (nullableType != null && nullableType.IsEnum)                                          (field as IEnumTypeField).EnumType = nullableType;                                  }                              }                                foreach (var attr in property.GetCustomAttributes<LeftJoinAttribute>())                                  if (attr.ToTable != null && attr.OnCriteria != null)                                      new LeftJoin(this.joins' attr.ToTable' attr.Alias'                                          new Criteria(attr.Alias' attr.OnCriteria) == new Criteria(field));                                foreach (var attr in property.GetCustomAttributes<InnerJoinAttribute>())                                  if (attr.ToTable != null && attr.OnCriteria != null)                                      new InnerJoin(this.joins' attr.ToTable' attr.Alias'                                          new Criteria(attr.Alias' attr.OnCriteria) == new Criteria(field));                                field.PropertyName = property.Name;                              this.byPropertyName[field.PropertyName] = field;                                field.CustomAttributes = property.GetCustomAttributes(false).ToArray();                          }                      }                  }                    foreach (var attr in rowCustomAttributes.OfType<LeftJoinAttribute>())                      new LeftJoin(this.joins' attr.ToTable' attr.Alias' new Criteria(attr.OnCriteria));                    foreach (var attr in rowCustomAttributes.OfType<InnerJoinAttribute>())                      new InnerJoin(this.joins' attr.ToTable' attr.Alias' new Criteria(attr.OnCriteria));                    foreach (var attr in rowCustomAttributes.OfType<OuterApplyAttribute>())                      new OuterApply(this.joins' attr.InnerQuery' attr.Alias);    #if !COREFX                  var propertyDescriptorArray = new PropertyDescriptor[this.Count];                  for (int i = 0; i < this.Count; i++)                  {                      var field = this[i];                      propertyDescriptorArray[i] = new FieldDescriptor(field);                  }                    this.propertyDescriptors = new PropertyDescriptorCollection(propertyDescriptorArray);  #endif                    InferTextualFields();                  AfterInitialize();              }
Magic Number,Serenity.Data,RowFieldsBase,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\RowFieldsBase.cs,Initialize,The following statement contains a magic number: lock (this.initializeLock)              {                  Dictionary<string' FieldInfo> rowFields;                  Dictionary<string' PropertyInfo> rowProperties;                  GetRowFieldsAndProperties(out rowFields' out rowProperties);                    var expressionSelector = new DialectExpressionSelector(connectionKey);                  var rowCustomAttributes = this.rowType.GetCustomAttributes().ToList();                    foreach (var fieldInfo in this.GetType().GetFields(BindingFlags.Instance | BindingFlags.Public))                  {                      if (fieldInfo.FieldType.IsSubclassOf(typeof(Field)))                      {                          var field = (Field)fieldInfo.GetValue(this);                            PropertyInfo property;                          if (!rowProperties.TryGetValue(fieldInfo.Name' out property))                              property = null;                            ColumnAttribute column = null;                          DisplayNameAttribute display = null;                          SizeAttribute size = null;                          ExpressionAttribute expression = null;                          ScaleAttribute scale = null;                          MinSelectLevelAttribute selectLevel = null;                          ForeignKeyAttribute foreignKey = null;                          LeftJoinAttribute leftJoin = null;                          InnerJoinAttribute innerJoin = null;                          DefaultValueAttribute defaultValue = null;                          TextualFieldAttribute textualField = null;                          DateTimeKindAttribute dateTimeKind = null;                          PermissionAttributeBase readPermission = null;                          PermissionAttributeBase insertPermission = null;                          PermissionAttributeBase updatePermission = null;                            FieldFlags addFlags = (FieldFlags)0;                          FieldFlags removeFlags = (FieldFlags)0;                            OriginPropertyDictionary propertyDictionary = null;                            if (property != null)                          {                              var origin = property.GetCustomAttribute<OriginAttribute>();                                  column = property.GetCustomAttribute<ColumnAttribute>(false);                              display = property.GetCustomAttribute<DisplayNameAttribute>(false);                              size = property.GetCustomAttribute<SizeAttribute>(false);                                var expressions = property.GetCustomAttributes<ExpressionAttribute>(false);                              if (expressions.Any())                                  expression = expressionSelector.GetBestMatch(expressions' x => x.Dialect);                                scale = property.GetCustomAttribute<ScaleAttribute>(false);                              selectLevel = property.GetCustomAttribute<MinSelectLevelAttribute>(false);                              foreignKey = property.GetCustomAttribute<ForeignKeyAttribute>(false);                              leftJoin = property.GetCustomAttributes<LeftJoinAttribute>(false)                                  .FirstOrDefault(x => x.ToTable == null && x.OnCriteria == null);                              innerJoin = property.GetCustomAttributes<InnerJoinAttribute>(false)                                  .FirstOrDefault(x => x.ToTable == null && x.OnCriteria == null);                              defaultValue = property.GetCustomAttribute<DefaultValueAttribute>(false);                              textualField = property.GetCustomAttribute<TextualFieldAttribute>(false);                              dateTimeKind = property.GetCustomAttribute<DateTimeKindAttribute>(false);                              readPermission = property.GetCustomAttribute<ReadPermissionAttribute>(false);                              insertPermission = property.GetCustomAttribute<InsertPermissionAttribute>(false) ??                                  property.GetCustomAttribute<ModifyPermissionAttribute>(false) ?? readPermission;                              updatePermission = property.GetCustomAttribute<UpdatePermissionAttribute>(false) ??                                  property.GetCustomAttribute<ModifyPermissionAttribute>(false) ?? readPermission;                                if (origin != null)                              {                                  propertyDictionary = propertyDictionary ?? OriginPropertyDictionary.GetPropertyDictionary(this.rowType);                                  try                                  {                                      if (!expressions.Any() && expression == null)                                          expression = new ExpressionAttribute(propertyDictionary.OriginExpression(                                              property' origin' expressionSelector' ""' rowCustomAttributes));                                        if (display == null)                                          display = new DisplayNameAttribute(propertyDictionary.OriginDisplayName(property' origin));                                        if (size == null)                                          size = propertyDictionary.OriginAttribute<SizeAttribute>(property' origin);                                        if (scale == null)                                          scale = propertyDictionary.OriginAttribute<ScaleAttribute>(property' origin);                                  }                                  catch (DivideByZeroException)                                  {                                      throw new Exception(String.Format(                                          "Infinite recursion detected while determining origins " +                                          "for property '{0}' on row type '{1}'"'                                          property.Name' rowType.FullName));                                  }                              }                                var insertable = property.GetCustomAttribute<InsertableAttribute>(false);                              var updatable = property.GetCustomAttribute<UpdatableAttribute>(false);                                if (insertable != null && !insertable.Value)                                  removeFlags |= FieldFlags.Insertable;                                if (updatable != null && !updatable.Value)                                  removeFlags |= FieldFlags.Updatable;                                foreach (var attr in property.GetCustomAttributes<SetFieldFlagsAttribute>(false))                              {                                  addFlags |= attr.Add;                                  removeFlags |= attr.Remove;                              }                          }                            if (ReferenceEquals(null' field))                          {                              if (property == null)                              {                                  throw new InvalidProgramException(String.Format(                                      "Field {0} in type {1} is null and has no corresponding property in entity!"'                                          fieldInfo.Name' rowType.Name));                              }                                object[] prm = new object[7];                              prm[0] = this; // owner                              prm[1] = column == null ? property.Name : (column.Name.TrimToNull() ?? property.Name);                              prm[2] = display != null ? new LocalText(display.DisplayName) : null;                              prm[3] = size != null ? size.Value : 0;                                var defaultFlags = FieldFlags.Default;                              if (fieldInfo.FieldType.GetCustomAttribute<NotMappedAttribute>() != null)                                  defaultFlags |= FieldFlags.NotMapped;                                prm[4] = (defaultFlags ^ removeFlags) | addFlags;                              prm[5] = null;                              prm[6] = null;                                FieldInfo storage;                              if (rowFields.TryGetValue("_" + property.Name' out storage) ||                                  rowFields.TryGetValue("m_" + property.Name' out storage) ||                                  rowFields.TryGetValue(property.Name' out storage))                              {                                  prm[5] = CreateFieldGetMethod(storage);                                  prm[6] = CreateFieldSetMethod(storage);                              }                                field = (Field)Activator.CreateInstance(fieldInfo.FieldType' prm);                              fieldInfo.SetValue(this' field);                          }                          else                          {                              if (size != null)                                  throw new InvalidProgramException(String.Format(                                      "Field size '{0}' in type {1} can't be overridden by Size attribute!"'                                          fieldInfo.Name' rowType.Name));                                if (display != null)                                  field.Caption = new LocalText(display.DisplayName);                                if ((int)addFlags != 0 || (int)removeFlags != 0)                                  field.Flags = (field.Flags ^ removeFlags) | addFlags;                                if (column != null && String.Compare(column.Name' field.Name' StringComparison.OrdinalIgnoreCase) != 0)                                  throw new InvalidProgramException(String.Format(                                      "Field name '{0}' in type {1} can't be overridden by Column name attribute!"'                                          fieldInfo.Name' rowType.Name));                          }                            if (scale != null)                          {                              field.Scale = scale.Value;                          }                            if (defaultValue != null)                          {                              field.DefaultValue = defaultValue.Value;                          }                            if (selectLevel != null)                          {                              field.MinSelectLevel = selectLevel.Value;                          }                            if (expression != null)                          {                              field.Expression = expression.Value;                          }                            if (foreignKey != null)                          {                              field.ForeignTable = foreignKey.Table;                              field.ForeignField = foreignKey.Field;                          }                            if (leftJoin != null)                          {                              field.ForeignJoinAlias = new LeftJoin(this.joins' field.ForeignTable' leftJoin.Alias'                                  new Criteria(leftJoin.Alias' field.ForeignField) == new Criteria(field));                          }                            if (innerJoin != null)                          {                              field.ForeignJoinAlias = new InnerJoin(this.joins' field.ForeignTable' innerJoin.Alias'                                  new Criteria(innerJoin.Alias' field.ForeignField) == new Criteria(field));                          }                            if (textualField != null)                          {                              field.textualField = textualField.Value;                          }                            if (dateTimeKind != null && field is DateTimeField)                          {                              ((DateTimeField)field).DateTimeKind = dateTimeKind.Value;                          }                            if (readPermission != null)                          {                              field.readPermission = readPermission.Permission ?? "?";                          }                            if (insertPermission != null)                          {                              field.insertPermission = insertPermission.Permission ?? "?";                          }                            if (updatePermission != null)                          {                              field.updatePermission = updatePermission.Permission ?? "?";                          }                            if (property != null)                          {                              if (property.PropertyType != null &&                                  field is IEnumTypeField)                              {                                  if (property.PropertyType.IsEnum)                                  {                                      (field as IEnumTypeField).EnumType = property.PropertyType;                                  }                                  else                                  {                                      var nullableType = Nullable.GetUnderlyingType(property.PropertyType);                                      if (nullableType != null && nullableType.IsEnum)                                          (field as IEnumTypeField).EnumType = nullableType;                                  }                              }                                foreach (var attr in property.GetCustomAttributes<LeftJoinAttribute>())                                  if (attr.ToTable != null && attr.OnCriteria != null)                                      new LeftJoin(this.joins' attr.ToTable' attr.Alias'                                          new Criteria(attr.Alias' attr.OnCriteria) == new Criteria(field));                                foreach (var attr in property.GetCustomAttributes<InnerJoinAttribute>())                                  if (attr.ToTable != null && attr.OnCriteria != null)                                      new InnerJoin(this.joins' attr.ToTable' attr.Alias'                                          new Criteria(attr.Alias' attr.OnCriteria) == new Criteria(field));                                field.PropertyName = property.Name;                              this.byPropertyName[field.PropertyName] = field;                                field.CustomAttributes = property.GetCustomAttributes(false).ToArray();                          }                      }                  }                    foreach (var attr in rowCustomAttributes.OfType<LeftJoinAttribute>())                      new LeftJoin(this.joins' attr.ToTable' attr.Alias' new Criteria(attr.OnCriteria));                    foreach (var attr in rowCustomAttributes.OfType<InnerJoinAttribute>())                      new InnerJoin(this.joins' attr.ToTable' attr.Alias' new Criteria(attr.OnCriteria));                    foreach (var attr in rowCustomAttributes.OfType<OuterApplyAttribute>())                      new OuterApply(this.joins' attr.InnerQuery' attr.Alias);    #if !COREFX                  var propertyDescriptorArray = new PropertyDescriptor[this.Count];                  for (int i = 0; i < this.Count; i++)                  {                      var field = this[i];                      propertyDescriptorArray[i] = new FieldDescriptor(field);                  }                    this.propertyDescriptors = new PropertyDescriptorCollection(propertyDescriptorArray);  #endif                    InferTextualFields();                  AfterInitialize();              }
Magic Number,Serenity.Data,RowFieldsBase,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\RowFieldsBase.cs,Initialize,The following statement contains a magic number: lock (this.initializeLock)              {                  Dictionary<string' FieldInfo> rowFields;                  Dictionary<string' PropertyInfo> rowProperties;                  GetRowFieldsAndProperties(out rowFields' out rowProperties);                    var expressionSelector = new DialectExpressionSelector(connectionKey);                  var rowCustomAttributes = this.rowType.GetCustomAttributes().ToList();                    foreach (var fieldInfo in this.GetType().GetFields(BindingFlags.Instance | BindingFlags.Public))                  {                      if (fieldInfo.FieldType.IsSubclassOf(typeof(Field)))                      {                          var field = (Field)fieldInfo.GetValue(this);                            PropertyInfo property;                          if (!rowProperties.TryGetValue(fieldInfo.Name' out property))                              property = null;                            ColumnAttribute column = null;                          DisplayNameAttribute display = null;                          SizeAttribute size = null;                          ExpressionAttribute expression = null;                          ScaleAttribute scale = null;                          MinSelectLevelAttribute selectLevel = null;                          ForeignKeyAttribute foreignKey = null;                          LeftJoinAttribute leftJoin = null;                          InnerJoinAttribute innerJoin = null;                          DefaultValueAttribute defaultValue = null;                          TextualFieldAttribute textualField = null;                          DateTimeKindAttribute dateTimeKind = null;                          PermissionAttributeBase readPermission = null;                          PermissionAttributeBase insertPermission = null;                          PermissionAttributeBase updatePermission = null;                            FieldFlags addFlags = (FieldFlags)0;                          FieldFlags removeFlags = (FieldFlags)0;                            OriginPropertyDictionary propertyDictionary = null;                            if (property != null)                          {                              var origin = property.GetCustomAttribute<OriginAttribute>();                                  column = property.GetCustomAttribute<ColumnAttribute>(false);                              display = property.GetCustomAttribute<DisplayNameAttribute>(false);                              size = property.GetCustomAttribute<SizeAttribute>(false);                                var expressions = property.GetCustomAttributes<ExpressionAttribute>(false);                              if (expressions.Any())                                  expression = expressionSelector.GetBestMatch(expressions' x => x.Dialect);                                scale = property.GetCustomAttribute<ScaleAttribute>(false);                              selectLevel = property.GetCustomAttribute<MinSelectLevelAttribute>(false);                              foreignKey = property.GetCustomAttribute<ForeignKeyAttribute>(false);                              leftJoin = property.GetCustomAttributes<LeftJoinAttribute>(false)                                  .FirstOrDefault(x => x.ToTable == null && x.OnCriteria == null);                              innerJoin = property.GetCustomAttributes<InnerJoinAttribute>(false)                                  .FirstOrDefault(x => x.ToTable == null && x.OnCriteria == null);                              defaultValue = property.GetCustomAttribute<DefaultValueAttribute>(false);                              textualField = property.GetCustomAttribute<TextualFieldAttribute>(false);                              dateTimeKind = property.GetCustomAttribute<DateTimeKindAttribute>(false);                              readPermission = property.GetCustomAttribute<ReadPermissionAttribute>(false);                              insertPermission = property.GetCustomAttribute<InsertPermissionAttribute>(false) ??                                  property.GetCustomAttribute<ModifyPermissionAttribute>(false) ?? readPermission;                              updatePermission = property.GetCustomAttribute<UpdatePermissionAttribute>(false) ??                                  property.GetCustomAttribute<ModifyPermissionAttribute>(false) ?? readPermission;                                if (origin != null)                              {                                  propertyDictionary = propertyDictionary ?? OriginPropertyDictionary.GetPropertyDictionary(this.rowType);                                  try                                  {                                      if (!expressions.Any() && expression == null)                                          expression = new ExpressionAttribute(propertyDictionary.OriginExpression(                                              property' origin' expressionSelector' ""' rowCustomAttributes));                                        if (display == null)                                          display = new DisplayNameAttribute(propertyDictionary.OriginDisplayName(property' origin));                                        if (size == null)                                          size = propertyDictionary.OriginAttribute<SizeAttribute>(property' origin);                                        if (scale == null)                                          scale = propertyDictionary.OriginAttribute<ScaleAttribute>(property' origin);                                  }                                  catch (DivideByZeroException)                                  {                                      throw new Exception(String.Format(                                          "Infinite recursion detected while determining origins " +                                          "for property '{0}' on row type '{1}'"'                                          property.Name' rowType.FullName));                                  }                              }                                var insertable = property.GetCustomAttribute<InsertableAttribute>(false);                              var updatable = property.GetCustomAttribute<UpdatableAttribute>(false);                                if (insertable != null && !insertable.Value)                                  removeFlags |= FieldFlags.Insertable;                                if (updatable != null && !updatable.Value)                                  removeFlags |= FieldFlags.Updatable;                                foreach (var attr in property.GetCustomAttributes<SetFieldFlagsAttribute>(false))                              {                                  addFlags |= attr.Add;                                  removeFlags |= attr.Remove;                              }                          }                            if (ReferenceEquals(null' field))                          {                              if (property == null)                              {                                  throw new InvalidProgramException(String.Format(                                      "Field {0} in type {1} is null and has no corresponding property in entity!"'                                          fieldInfo.Name' rowType.Name));                              }                                object[] prm = new object[7];                              prm[0] = this; // owner                              prm[1] = column == null ? property.Name : (column.Name.TrimToNull() ?? property.Name);                              prm[2] = display != null ? new LocalText(display.DisplayName) : null;                              prm[3] = size != null ? size.Value : 0;                                var defaultFlags = FieldFlags.Default;                              if (fieldInfo.FieldType.GetCustomAttribute<NotMappedAttribute>() != null)                                  defaultFlags |= FieldFlags.NotMapped;                                prm[4] = (defaultFlags ^ removeFlags) | addFlags;                              prm[5] = null;                              prm[6] = null;                                FieldInfo storage;                              if (rowFields.TryGetValue("_" + property.Name' out storage) ||                                  rowFields.TryGetValue("m_" + property.Name' out storage) ||                                  rowFields.TryGetValue(property.Name' out storage))                              {                                  prm[5] = CreateFieldGetMethod(storage);                                  prm[6] = CreateFieldSetMethod(storage);                              }                                field = (Field)Activator.CreateInstance(fieldInfo.FieldType' prm);                              fieldInfo.SetValue(this' field);                          }                          else                          {                              if (size != null)                                  throw new InvalidProgramException(String.Format(                                      "Field size '{0}' in type {1} can't be overridden by Size attribute!"'                                          fieldInfo.Name' rowType.Name));                                if (display != null)                                  field.Caption = new LocalText(display.DisplayName);                                if ((int)addFlags != 0 || (int)removeFlags != 0)                                  field.Flags = (field.Flags ^ removeFlags) | addFlags;                                if (column != null && String.Compare(column.Name' field.Name' StringComparison.OrdinalIgnoreCase) != 0)                                  throw new InvalidProgramException(String.Format(                                      "Field name '{0}' in type {1} can't be overridden by Column name attribute!"'                                          fieldInfo.Name' rowType.Name));                          }                            if (scale != null)                          {                              field.Scale = scale.Value;                          }                            if (defaultValue != null)                          {                              field.DefaultValue = defaultValue.Value;                          }                            if (selectLevel != null)                          {                              field.MinSelectLevel = selectLevel.Value;                          }                            if (expression != null)                          {                              field.Expression = expression.Value;                          }                            if (foreignKey != null)                          {                              field.ForeignTable = foreignKey.Table;                              field.ForeignField = foreignKey.Field;                          }                            if (leftJoin != null)                          {                              field.ForeignJoinAlias = new LeftJoin(this.joins' field.ForeignTable' leftJoin.Alias'                                  new Criteria(leftJoin.Alias' field.ForeignField) == new Criteria(field));                          }                            if (innerJoin != null)                          {                              field.ForeignJoinAlias = new InnerJoin(this.joins' field.ForeignTable' innerJoin.Alias'                                  new Criteria(innerJoin.Alias' field.ForeignField) == new Criteria(field));                          }                            if (textualField != null)                          {                              field.textualField = textualField.Value;                          }                            if (dateTimeKind != null && field is DateTimeField)                          {                              ((DateTimeField)field).DateTimeKind = dateTimeKind.Value;                          }                            if (readPermission != null)                          {                              field.readPermission = readPermission.Permission ?? "?";                          }                            if (insertPermission != null)                          {                              field.insertPermission = insertPermission.Permission ?? "?";                          }                            if (updatePermission != null)                          {                              field.updatePermission = updatePermission.Permission ?? "?";                          }                            if (property != null)                          {                              if (property.PropertyType != null &&                                  field is IEnumTypeField)                              {                                  if (property.PropertyType.IsEnum)                                  {                                      (field as IEnumTypeField).EnumType = property.PropertyType;                                  }                                  else                                  {                                      var nullableType = Nullable.GetUnderlyingType(property.PropertyType);                                      if (nullableType != null && nullableType.IsEnum)                                          (field as IEnumTypeField).EnumType = nullableType;                                  }                              }                                foreach (var attr in property.GetCustomAttributes<LeftJoinAttribute>())                                  if (attr.ToTable != null && attr.OnCriteria != null)                                      new LeftJoin(this.joins' attr.ToTable' attr.Alias'                                          new Criteria(attr.Alias' attr.OnCriteria) == new Criteria(field));                                foreach (var attr in property.GetCustomAttributes<InnerJoinAttribute>())                                  if (attr.ToTable != null && attr.OnCriteria != null)                                      new InnerJoin(this.joins' attr.ToTable' attr.Alias'                                          new Criteria(attr.Alias' attr.OnCriteria) == new Criteria(field));                                field.PropertyName = property.Name;                              this.byPropertyName[field.PropertyName] = field;                                field.CustomAttributes = property.GetCustomAttributes(false).ToArray();                          }                      }                  }                    foreach (var attr in rowCustomAttributes.OfType<LeftJoinAttribute>())                      new LeftJoin(this.joins' attr.ToTable' attr.Alias' new Criteria(attr.OnCriteria));                    foreach (var attr in rowCustomAttributes.OfType<InnerJoinAttribute>())                      new InnerJoin(this.joins' attr.ToTable' attr.Alias' new Criteria(attr.OnCriteria));                    foreach (var attr in rowCustomAttributes.OfType<OuterApplyAttribute>())                      new OuterApply(this.joins' attr.InnerQuery' attr.Alias);    #if !COREFX                  var propertyDescriptorArray = new PropertyDescriptor[this.Count];                  for (int i = 0; i < this.Count; i++)                  {                      var field = this[i];                      propertyDescriptorArray[i] = new FieldDescriptor(field);                  }                    this.propertyDescriptors = new PropertyDescriptorCollection(propertyDescriptorArray);  #endif                    InferTextualFields();                  AfterInitialize();              }
Magic Number,Serenity.Data,RowFieldsBase,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\RowFieldsBase.cs,Initialize,The following statement contains a magic number: lock (this.initializeLock)              {                  Dictionary<string' FieldInfo> rowFields;                  Dictionary<string' PropertyInfo> rowProperties;                  GetRowFieldsAndProperties(out rowFields' out rowProperties);                    var expressionSelector = new DialectExpressionSelector(connectionKey);                  var rowCustomAttributes = this.rowType.GetCustomAttributes().ToList();                    foreach (var fieldInfo in this.GetType().GetFields(BindingFlags.Instance | BindingFlags.Public))                  {                      if (fieldInfo.FieldType.IsSubclassOf(typeof(Field)))                      {                          var field = (Field)fieldInfo.GetValue(this);                            PropertyInfo property;                          if (!rowProperties.TryGetValue(fieldInfo.Name' out property))                              property = null;                            ColumnAttribute column = null;                          DisplayNameAttribute display = null;                          SizeAttribute size = null;                          ExpressionAttribute expression = null;                          ScaleAttribute scale = null;                          MinSelectLevelAttribute selectLevel = null;                          ForeignKeyAttribute foreignKey = null;                          LeftJoinAttribute leftJoin = null;                          InnerJoinAttribute innerJoin = null;                          DefaultValueAttribute defaultValue = null;                          TextualFieldAttribute textualField = null;                          DateTimeKindAttribute dateTimeKind = null;                          PermissionAttributeBase readPermission = null;                          PermissionAttributeBase insertPermission = null;                          PermissionAttributeBase updatePermission = null;                            FieldFlags addFlags = (FieldFlags)0;                          FieldFlags removeFlags = (FieldFlags)0;                            OriginPropertyDictionary propertyDictionary = null;                            if (property != null)                          {                              var origin = property.GetCustomAttribute<OriginAttribute>();                                  column = property.GetCustomAttribute<ColumnAttribute>(false);                              display = property.GetCustomAttribute<DisplayNameAttribute>(false);                              size = property.GetCustomAttribute<SizeAttribute>(false);                                var expressions = property.GetCustomAttributes<ExpressionAttribute>(false);                              if (expressions.Any())                                  expression = expressionSelector.GetBestMatch(expressions' x => x.Dialect);                                scale = property.GetCustomAttribute<ScaleAttribute>(false);                              selectLevel = property.GetCustomAttribute<MinSelectLevelAttribute>(false);                              foreignKey = property.GetCustomAttribute<ForeignKeyAttribute>(false);                              leftJoin = property.GetCustomAttributes<LeftJoinAttribute>(false)                                  .FirstOrDefault(x => x.ToTable == null && x.OnCriteria == null);                              innerJoin = property.GetCustomAttributes<InnerJoinAttribute>(false)                                  .FirstOrDefault(x => x.ToTable == null && x.OnCriteria == null);                              defaultValue = property.GetCustomAttribute<DefaultValueAttribute>(false);                              textualField = property.GetCustomAttribute<TextualFieldAttribute>(false);                              dateTimeKind = property.GetCustomAttribute<DateTimeKindAttribute>(false);                              readPermission = property.GetCustomAttribute<ReadPermissionAttribute>(false);                              insertPermission = property.GetCustomAttribute<InsertPermissionAttribute>(false) ??                                  property.GetCustomAttribute<ModifyPermissionAttribute>(false) ?? readPermission;                              updatePermission = property.GetCustomAttribute<UpdatePermissionAttribute>(false) ??                                  property.GetCustomAttribute<ModifyPermissionAttribute>(false) ?? readPermission;                                if (origin != null)                              {                                  propertyDictionary = propertyDictionary ?? OriginPropertyDictionary.GetPropertyDictionary(this.rowType);                                  try                                  {                                      if (!expressions.Any() && expression == null)                                          expression = new ExpressionAttribute(propertyDictionary.OriginExpression(                                              property' origin' expressionSelector' ""' rowCustomAttributes));                                        if (display == null)                                          display = new DisplayNameAttribute(propertyDictionary.OriginDisplayName(property' origin));                                        if (size == null)                                          size = propertyDictionary.OriginAttribute<SizeAttribute>(property' origin);                                        if (scale == null)                                          scale = propertyDictionary.OriginAttribute<ScaleAttribute>(property' origin);                                  }                                  catch (DivideByZeroException)                                  {                                      throw new Exception(String.Format(                                          "Infinite recursion detected while determining origins " +                                          "for property '{0}' on row type '{1}'"'                                          property.Name' rowType.FullName));                                  }                              }                                var insertable = property.GetCustomAttribute<InsertableAttribute>(false);                              var updatable = property.GetCustomAttribute<UpdatableAttribute>(false);                                if (insertable != null && !insertable.Value)                                  removeFlags |= FieldFlags.Insertable;                                if (updatable != null && !updatable.Value)                                  removeFlags |= FieldFlags.Updatable;                                foreach (var attr in property.GetCustomAttributes<SetFieldFlagsAttribute>(false))                              {                                  addFlags |= attr.Add;                                  removeFlags |= attr.Remove;                              }                          }                            if (ReferenceEquals(null' field))                          {                              if (property == null)                              {                                  throw new InvalidProgramException(String.Format(                                      "Field {0} in type {1} is null and has no corresponding property in entity!"'                                          fieldInfo.Name' rowType.Name));                              }                                object[] prm = new object[7];                              prm[0] = this; // owner                              prm[1] = column == null ? property.Name : (column.Name.TrimToNull() ?? property.Name);                              prm[2] = display != null ? new LocalText(display.DisplayName) : null;                              prm[3] = size != null ? size.Value : 0;                                var defaultFlags = FieldFlags.Default;                              if (fieldInfo.FieldType.GetCustomAttribute<NotMappedAttribute>() != null)                                  defaultFlags |= FieldFlags.NotMapped;                                prm[4] = (defaultFlags ^ removeFlags) | addFlags;                              prm[5] = null;                              prm[6] = null;                                FieldInfo storage;                              if (rowFields.TryGetValue("_" + property.Name' out storage) ||                                  rowFields.TryGetValue("m_" + property.Name' out storage) ||                                  rowFields.TryGetValue(property.Name' out storage))                              {                                  prm[5] = CreateFieldGetMethod(storage);                                  prm[6] = CreateFieldSetMethod(storage);                              }                                field = (Field)Activator.CreateInstance(fieldInfo.FieldType' prm);                              fieldInfo.SetValue(this' field);                          }                          else                          {                              if (size != null)                                  throw new InvalidProgramException(String.Format(                                      "Field size '{0}' in type {1} can't be overridden by Size attribute!"'                                          fieldInfo.Name' rowType.Name));                                if (display != null)                                  field.Caption = new LocalText(display.DisplayName);                                if ((int)addFlags != 0 || (int)removeFlags != 0)                                  field.Flags = (field.Flags ^ removeFlags) | addFlags;                                if (column != null && String.Compare(column.Name' field.Name' StringComparison.OrdinalIgnoreCase) != 0)                                  throw new InvalidProgramException(String.Format(                                      "Field name '{0}' in type {1} can't be overridden by Column name attribute!"'                                          fieldInfo.Name' rowType.Name));                          }                            if (scale != null)                          {                              field.Scale = scale.Value;                          }                            if (defaultValue != null)                          {                              field.DefaultValue = defaultValue.Value;                          }                            if (selectLevel != null)                          {                              field.MinSelectLevel = selectLevel.Value;                          }                            if (expression != null)                          {                              field.Expression = expression.Value;                          }                            if (foreignKey != null)                          {                              field.ForeignTable = foreignKey.Table;                              field.ForeignField = foreignKey.Field;                          }                            if (leftJoin != null)                          {                              field.ForeignJoinAlias = new LeftJoin(this.joins' field.ForeignTable' leftJoin.Alias'                                  new Criteria(leftJoin.Alias' field.ForeignField) == new Criteria(field));                          }                            if (innerJoin != null)                          {                              field.ForeignJoinAlias = new InnerJoin(this.joins' field.ForeignTable' innerJoin.Alias'                                  new Criteria(innerJoin.Alias' field.ForeignField) == new Criteria(field));                          }                            if (textualField != null)                          {                              field.textualField = textualField.Value;                          }                            if (dateTimeKind != null && field is DateTimeField)                          {                              ((DateTimeField)field).DateTimeKind = dateTimeKind.Value;                          }                            if (readPermission != null)                          {                              field.readPermission = readPermission.Permission ?? "?";                          }                            if (insertPermission != null)                          {                              field.insertPermission = insertPermission.Permission ?? "?";                          }                            if (updatePermission != null)                          {                              field.updatePermission = updatePermission.Permission ?? "?";                          }                            if (property != null)                          {                              if (property.PropertyType != null &&                                  field is IEnumTypeField)                              {                                  if (property.PropertyType.IsEnum)                                  {                                      (field as IEnumTypeField).EnumType = property.PropertyType;                                  }                                  else                                  {                                      var nullableType = Nullable.GetUnderlyingType(property.PropertyType);                                      if (nullableType != null && nullableType.IsEnum)                                          (field as IEnumTypeField).EnumType = nullableType;                                  }                              }                                foreach (var attr in property.GetCustomAttributes<LeftJoinAttribute>())                                  if (attr.ToTable != null && attr.OnCriteria != null)                                      new LeftJoin(this.joins' attr.ToTable' attr.Alias'                                          new Criteria(attr.Alias' attr.OnCriteria) == new Criteria(field));                                foreach (var attr in property.GetCustomAttributes<InnerJoinAttribute>())                                  if (attr.ToTable != null && attr.OnCriteria != null)                                      new InnerJoin(this.joins' attr.ToTable' attr.Alias'                                          new Criteria(attr.Alias' attr.OnCriteria) == new Criteria(field));                                field.PropertyName = property.Name;                              this.byPropertyName[field.PropertyName] = field;                                field.CustomAttributes = property.GetCustomAttributes(false).ToArray();                          }                      }                  }                    foreach (var attr in rowCustomAttributes.OfType<LeftJoinAttribute>())                      new LeftJoin(this.joins' attr.ToTable' attr.Alias' new Criteria(attr.OnCriteria));                    foreach (var attr in rowCustomAttributes.OfType<InnerJoinAttribute>())                      new InnerJoin(this.joins' attr.ToTable' attr.Alias' new Criteria(attr.OnCriteria));                    foreach (var attr in rowCustomAttributes.OfType<OuterApplyAttribute>())                      new OuterApply(this.joins' attr.InnerQuery' attr.Alias);    #if !COREFX                  var propertyDescriptorArray = new PropertyDescriptor[this.Count];                  for (int i = 0; i < this.Count; i++)                  {                      var field = this[i];                      propertyDescriptorArray[i] = new FieldDescriptor(field);                  }                    this.propertyDescriptors = new PropertyDescriptorCollection(propertyDescriptorArray);  #endif                    InferTextualFields();                  AfterInitialize();              }
Magic Number,Serenity.Data,RowFieldsBase,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\RowFieldsBase.cs,Initialize,The following statement contains a magic number: lock (this.initializeLock)              {                  Dictionary<string' FieldInfo> rowFields;                  Dictionary<string' PropertyInfo> rowProperties;                  GetRowFieldsAndProperties(out rowFields' out rowProperties);                    var expressionSelector = new DialectExpressionSelector(connectionKey);                  var rowCustomAttributes = this.rowType.GetCustomAttributes().ToList();                    foreach (var fieldInfo in this.GetType().GetFields(BindingFlags.Instance | BindingFlags.Public))                  {                      if (fieldInfo.FieldType.IsSubclassOf(typeof(Field)))                      {                          var field = (Field)fieldInfo.GetValue(this);                            PropertyInfo property;                          if (!rowProperties.TryGetValue(fieldInfo.Name' out property))                              property = null;                            ColumnAttribute column = null;                          DisplayNameAttribute display = null;                          SizeAttribute size = null;                          ExpressionAttribute expression = null;                          ScaleAttribute scale = null;                          MinSelectLevelAttribute selectLevel = null;                          ForeignKeyAttribute foreignKey = null;                          LeftJoinAttribute leftJoin = null;                          InnerJoinAttribute innerJoin = null;                          DefaultValueAttribute defaultValue = null;                          TextualFieldAttribute textualField = null;                          DateTimeKindAttribute dateTimeKind = null;                          PermissionAttributeBase readPermission = null;                          PermissionAttributeBase insertPermission = null;                          PermissionAttributeBase updatePermission = null;                            FieldFlags addFlags = (FieldFlags)0;                          FieldFlags removeFlags = (FieldFlags)0;                            OriginPropertyDictionary propertyDictionary = null;                            if (property != null)                          {                              var origin = property.GetCustomAttribute<OriginAttribute>();                                  column = property.GetCustomAttribute<ColumnAttribute>(false);                              display = property.GetCustomAttribute<DisplayNameAttribute>(false);                              size = property.GetCustomAttribute<SizeAttribute>(false);                                var expressions = property.GetCustomAttributes<ExpressionAttribute>(false);                              if (expressions.Any())                                  expression = expressionSelector.GetBestMatch(expressions' x => x.Dialect);                                scale = property.GetCustomAttribute<ScaleAttribute>(false);                              selectLevel = property.GetCustomAttribute<MinSelectLevelAttribute>(false);                              foreignKey = property.GetCustomAttribute<ForeignKeyAttribute>(false);                              leftJoin = property.GetCustomAttributes<LeftJoinAttribute>(false)                                  .FirstOrDefault(x => x.ToTable == null && x.OnCriteria == null);                              innerJoin = property.GetCustomAttributes<InnerJoinAttribute>(false)                                  .FirstOrDefault(x => x.ToTable == null && x.OnCriteria == null);                              defaultValue = property.GetCustomAttribute<DefaultValueAttribute>(false);                              textualField = property.GetCustomAttribute<TextualFieldAttribute>(false);                              dateTimeKind = property.GetCustomAttribute<DateTimeKindAttribute>(false);                              readPermission = property.GetCustomAttribute<ReadPermissionAttribute>(false);                              insertPermission = property.GetCustomAttribute<InsertPermissionAttribute>(false) ??                                  property.GetCustomAttribute<ModifyPermissionAttribute>(false) ?? readPermission;                              updatePermission = property.GetCustomAttribute<UpdatePermissionAttribute>(false) ??                                  property.GetCustomAttribute<ModifyPermissionAttribute>(false) ?? readPermission;                                if (origin != null)                              {                                  propertyDictionary = propertyDictionary ?? OriginPropertyDictionary.GetPropertyDictionary(this.rowType);                                  try                                  {                                      if (!expressions.Any() && expression == null)                                          expression = new ExpressionAttribute(propertyDictionary.OriginExpression(                                              property' origin' expressionSelector' ""' rowCustomAttributes));                                        if (display == null)                                          display = new DisplayNameAttribute(propertyDictionary.OriginDisplayName(property' origin));                                        if (size == null)                                          size = propertyDictionary.OriginAttribute<SizeAttribute>(property' origin);                                        if (scale == null)                                          scale = propertyDictionary.OriginAttribute<ScaleAttribute>(property' origin);                                  }                                  catch (DivideByZeroException)                                  {                                      throw new Exception(String.Format(                                          "Infinite recursion detected while determining origins " +                                          "for property '{0}' on row type '{1}'"'                                          property.Name' rowType.FullName));                                  }                              }                                var insertable = property.GetCustomAttribute<InsertableAttribute>(false);                              var updatable = property.GetCustomAttribute<UpdatableAttribute>(false);                                if (insertable != null && !insertable.Value)                                  removeFlags |= FieldFlags.Insertable;                                if (updatable != null && !updatable.Value)                                  removeFlags |= FieldFlags.Updatable;                                foreach (var attr in property.GetCustomAttributes<SetFieldFlagsAttribute>(false))                              {                                  addFlags |= attr.Add;                                  removeFlags |= attr.Remove;                              }                          }                            if (ReferenceEquals(null' field))                          {                              if (property == null)                              {                                  throw new InvalidProgramException(String.Format(                                      "Field {0} in type {1} is null and has no corresponding property in entity!"'                                          fieldInfo.Name' rowType.Name));                              }                                object[] prm = new object[7];                              prm[0] = this; // owner                              prm[1] = column == null ? property.Name : (column.Name.TrimToNull() ?? property.Name);                              prm[2] = display != null ? new LocalText(display.DisplayName) : null;                              prm[3] = size != null ? size.Value : 0;                                var defaultFlags = FieldFlags.Default;                              if (fieldInfo.FieldType.GetCustomAttribute<NotMappedAttribute>() != null)                                  defaultFlags |= FieldFlags.NotMapped;                                prm[4] = (defaultFlags ^ removeFlags) | addFlags;                              prm[5] = null;                              prm[6] = null;                                FieldInfo storage;                              if (rowFields.TryGetValue("_" + property.Name' out storage) ||                                  rowFields.TryGetValue("m_" + property.Name' out storage) ||                                  rowFields.TryGetValue(property.Name' out storage))                              {                                  prm[5] = CreateFieldGetMethod(storage);                                  prm[6] = CreateFieldSetMethod(storage);                              }                                field = (Field)Activator.CreateInstance(fieldInfo.FieldType' prm);                              fieldInfo.SetValue(this' field);                          }                          else                          {                              if (size != null)                                  throw new InvalidProgramException(String.Format(                                      "Field size '{0}' in type {1} can't be overridden by Size attribute!"'                                          fieldInfo.Name' rowType.Name));                                if (display != null)                                  field.Caption = new LocalText(display.DisplayName);                                if ((int)addFlags != 0 || (int)removeFlags != 0)                                  field.Flags = (field.Flags ^ removeFlags) | addFlags;                                if (column != null && String.Compare(column.Name' field.Name' StringComparison.OrdinalIgnoreCase) != 0)                                  throw new InvalidProgramException(String.Format(                                      "Field name '{0}' in type {1} can't be overridden by Column name attribute!"'                                          fieldInfo.Name' rowType.Name));                          }                            if (scale != null)                          {                              field.Scale = scale.Value;                          }                            if (defaultValue != null)                          {                              field.DefaultValue = defaultValue.Value;                          }                            if (selectLevel != null)                          {                              field.MinSelectLevel = selectLevel.Value;                          }                            if (expression != null)                          {                              field.Expression = expression.Value;                          }                            if (foreignKey != null)                          {                              field.ForeignTable = foreignKey.Table;                              field.ForeignField = foreignKey.Field;                          }                            if (leftJoin != null)                          {                              field.ForeignJoinAlias = new LeftJoin(this.joins' field.ForeignTable' leftJoin.Alias'                                  new Criteria(leftJoin.Alias' field.ForeignField) == new Criteria(field));                          }                            if (innerJoin != null)                          {                              field.ForeignJoinAlias = new InnerJoin(this.joins' field.ForeignTable' innerJoin.Alias'                                  new Criteria(innerJoin.Alias' field.ForeignField) == new Criteria(field));                          }                            if (textualField != null)                          {                              field.textualField = textualField.Value;                          }                            if (dateTimeKind != null && field is DateTimeField)                          {                              ((DateTimeField)field).DateTimeKind = dateTimeKind.Value;                          }                            if (readPermission != null)                          {                              field.readPermission = readPermission.Permission ?? "?";                          }                            if (insertPermission != null)                          {                              field.insertPermission = insertPermission.Permission ?? "?";                          }                            if (updatePermission != null)                          {                              field.updatePermission = updatePermission.Permission ?? "?";                          }                            if (property != null)                          {                              if (property.PropertyType != null &&                                  field is IEnumTypeField)                              {                                  if (property.PropertyType.IsEnum)                                  {                                      (field as IEnumTypeField).EnumType = property.PropertyType;                                  }                                  else                                  {                                      var nullableType = Nullable.GetUnderlyingType(property.PropertyType);                                      if (nullableType != null && nullableType.IsEnum)                                          (field as IEnumTypeField).EnumType = nullableType;                                  }                              }                                foreach (var attr in property.GetCustomAttributes<LeftJoinAttribute>())                                  if (attr.ToTable != null && attr.OnCriteria != null)                                      new LeftJoin(this.joins' attr.ToTable' attr.Alias'                                          new Criteria(attr.Alias' attr.OnCriteria) == new Criteria(field));                                foreach (var attr in property.GetCustomAttributes<InnerJoinAttribute>())                                  if (attr.ToTable != null && attr.OnCriteria != null)                                      new InnerJoin(this.joins' attr.ToTable' attr.Alias'                                          new Criteria(attr.Alias' attr.OnCriteria) == new Criteria(field));                                field.PropertyName = property.Name;                              this.byPropertyName[field.PropertyName] = field;                                field.CustomAttributes = property.GetCustomAttributes(false).ToArray();                          }                      }                  }                    foreach (var attr in rowCustomAttributes.OfType<LeftJoinAttribute>())                      new LeftJoin(this.joins' attr.ToTable' attr.Alias' new Criteria(attr.OnCriteria));                    foreach (var attr in rowCustomAttributes.OfType<InnerJoinAttribute>())                      new InnerJoin(this.joins' attr.ToTable' attr.Alias' new Criteria(attr.OnCriteria));                    foreach (var attr in rowCustomAttributes.OfType<OuterApplyAttribute>())                      new OuterApply(this.joins' attr.InnerQuery' attr.Alias);    #if !COREFX                  var propertyDescriptorArray = new PropertyDescriptor[this.Count];                  for (int i = 0; i < this.Count; i++)                  {                      var field = this[i];                      propertyDescriptorArray[i] = new FieldDescriptor(field);                  }                    this.propertyDescriptors = new PropertyDescriptorCollection(propertyDescriptorArray);  #endif                    InferTextualFields();                  AfterInitialize();              }
Magic Number,Serenity.Data,RowFieldsBase,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\RowFieldsBase.cs,Initialize,The following statement contains a magic number: lock (this.initializeLock)              {                  Dictionary<string' FieldInfo> rowFields;                  Dictionary<string' PropertyInfo> rowProperties;                  GetRowFieldsAndProperties(out rowFields' out rowProperties);                    var expressionSelector = new DialectExpressionSelector(connectionKey);                  var rowCustomAttributes = this.rowType.GetCustomAttributes().ToList();                    foreach (var fieldInfo in this.GetType().GetFields(BindingFlags.Instance | BindingFlags.Public))                  {                      if (fieldInfo.FieldType.IsSubclassOf(typeof(Field)))                      {                          var field = (Field)fieldInfo.GetValue(this);                            PropertyInfo property;                          if (!rowProperties.TryGetValue(fieldInfo.Name' out property))                              property = null;                            ColumnAttribute column = null;                          DisplayNameAttribute display = null;                          SizeAttribute size = null;                          ExpressionAttribute expression = null;                          ScaleAttribute scale = null;                          MinSelectLevelAttribute selectLevel = null;                          ForeignKeyAttribute foreignKey = null;                          LeftJoinAttribute leftJoin = null;                          InnerJoinAttribute innerJoin = null;                          DefaultValueAttribute defaultValue = null;                          TextualFieldAttribute textualField = null;                          DateTimeKindAttribute dateTimeKind = null;                          PermissionAttributeBase readPermission = null;                          PermissionAttributeBase insertPermission = null;                          PermissionAttributeBase updatePermission = null;                            FieldFlags addFlags = (FieldFlags)0;                          FieldFlags removeFlags = (FieldFlags)0;                            OriginPropertyDictionary propertyDictionary = null;                            if (property != null)                          {                              var origin = property.GetCustomAttribute<OriginAttribute>();                                  column = property.GetCustomAttribute<ColumnAttribute>(false);                              display = property.GetCustomAttribute<DisplayNameAttribute>(false);                              size = property.GetCustomAttribute<SizeAttribute>(false);                                var expressions = property.GetCustomAttributes<ExpressionAttribute>(false);                              if (expressions.Any())                                  expression = expressionSelector.GetBestMatch(expressions' x => x.Dialect);                                scale = property.GetCustomAttribute<ScaleAttribute>(false);                              selectLevel = property.GetCustomAttribute<MinSelectLevelAttribute>(false);                              foreignKey = property.GetCustomAttribute<ForeignKeyAttribute>(false);                              leftJoin = property.GetCustomAttributes<LeftJoinAttribute>(false)                                  .FirstOrDefault(x => x.ToTable == null && x.OnCriteria == null);                              innerJoin = property.GetCustomAttributes<InnerJoinAttribute>(false)                                  .FirstOrDefault(x => x.ToTable == null && x.OnCriteria == null);                              defaultValue = property.GetCustomAttribute<DefaultValueAttribute>(false);                              textualField = property.GetCustomAttribute<TextualFieldAttribute>(false);                              dateTimeKind = property.GetCustomAttribute<DateTimeKindAttribute>(false);                              readPermission = property.GetCustomAttribute<ReadPermissionAttribute>(false);                              insertPermission = property.GetCustomAttribute<InsertPermissionAttribute>(false) ??                                  property.GetCustomAttribute<ModifyPermissionAttribute>(false) ?? readPermission;                              updatePermission = property.GetCustomAttribute<UpdatePermissionAttribute>(false) ??                                  property.GetCustomAttribute<ModifyPermissionAttribute>(false) ?? readPermission;                                if (origin != null)                              {                                  propertyDictionary = propertyDictionary ?? OriginPropertyDictionary.GetPropertyDictionary(this.rowType);                                  try                                  {                                      if (!expressions.Any() && expression == null)                                          expression = new ExpressionAttribute(propertyDictionary.OriginExpression(                                              property' origin' expressionSelector' ""' rowCustomAttributes));                                        if (display == null)                                          display = new DisplayNameAttribute(propertyDictionary.OriginDisplayName(property' origin));                                        if (size == null)                                          size = propertyDictionary.OriginAttribute<SizeAttribute>(property' origin);                                        if (scale == null)                                          scale = propertyDictionary.OriginAttribute<ScaleAttribute>(property' origin);                                  }                                  catch (DivideByZeroException)                                  {                                      throw new Exception(String.Format(                                          "Infinite recursion detected while determining origins " +                                          "for property '{0}' on row type '{1}'"'                                          property.Name' rowType.FullName));                                  }                              }                                var insertable = property.GetCustomAttribute<InsertableAttribute>(false);                              var updatable = property.GetCustomAttribute<UpdatableAttribute>(false);                                if (insertable != null && !insertable.Value)                                  removeFlags |= FieldFlags.Insertable;                                if (updatable != null && !updatable.Value)                                  removeFlags |= FieldFlags.Updatable;                                foreach (var attr in property.GetCustomAttributes<SetFieldFlagsAttribute>(false))                              {                                  addFlags |= attr.Add;                                  removeFlags |= attr.Remove;                              }                          }                            if (ReferenceEquals(null' field))                          {                              if (property == null)                              {                                  throw new InvalidProgramException(String.Format(                                      "Field {0} in type {1} is null and has no corresponding property in entity!"'                                          fieldInfo.Name' rowType.Name));                              }                                object[] prm = new object[7];                              prm[0] = this; // owner                              prm[1] = column == null ? property.Name : (column.Name.TrimToNull() ?? property.Name);                              prm[2] = display != null ? new LocalText(display.DisplayName) : null;                              prm[3] = size != null ? size.Value : 0;                                var defaultFlags = FieldFlags.Default;                              if (fieldInfo.FieldType.GetCustomAttribute<NotMappedAttribute>() != null)                                  defaultFlags |= FieldFlags.NotMapped;                                prm[4] = (defaultFlags ^ removeFlags) | addFlags;                              prm[5] = null;                              prm[6] = null;                                FieldInfo storage;                              if (rowFields.TryGetValue("_" + property.Name' out storage) ||                                  rowFields.TryGetValue("m_" + property.Name' out storage) ||                                  rowFields.TryGetValue(property.Name' out storage))                              {                                  prm[5] = CreateFieldGetMethod(storage);                                  prm[6] = CreateFieldSetMethod(storage);                              }                                field = (Field)Activator.CreateInstance(fieldInfo.FieldType' prm);                              fieldInfo.SetValue(this' field);                          }                          else                          {                              if (size != null)                                  throw new InvalidProgramException(String.Format(                                      "Field size '{0}' in type {1} can't be overridden by Size attribute!"'                                          fieldInfo.Name' rowType.Name));                                if (display != null)                                  field.Caption = new LocalText(display.DisplayName);                                if ((int)addFlags != 0 || (int)removeFlags != 0)                                  field.Flags = (field.Flags ^ removeFlags) | addFlags;                                if (column != null && String.Compare(column.Name' field.Name' StringComparison.OrdinalIgnoreCase) != 0)                                  throw new InvalidProgramException(String.Format(                                      "Field name '{0}' in type {1} can't be overridden by Column name attribute!"'                                          fieldInfo.Name' rowType.Name));                          }                            if (scale != null)                          {                              field.Scale = scale.Value;                          }                            if (defaultValue != null)                          {                              field.DefaultValue = defaultValue.Value;                          }                            if (selectLevel != null)                          {                              field.MinSelectLevel = selectLevel.Value;                          }                            if (expression != null)                          {                              field.Expression = expression.Value;                          }                            if (foreignKey != null)                          {                              field.ForeignTable = foreignKey.Table;                              field.ForeignField = foreignKey.Field;                          }                            if (leftJoin != null)                          {                              field.ForeignJoinAlias = new LeftJoin(this.joins' field.ForeignTable' leftJoin.Alias'                                  new Criteria(leftJoin.Alias' field.ForeignField) == new Criteria(field));                          }                            if (innerJoin != null)                          {                              field.ForeignJoinAlias = new InnerJoin(this.joins' field.ForeignTable' innerJoin.Alias'                                  new Criteria(innerJoin.Alias' field.ForeignField) == new Criteria(field));                          }                            if (textualField != null)                          {                              field.textualField = textualField.Value;                          }                            if (dateTimeKind != null && field is DateTimeField)                          {                              ((DateTimeField)field).DateTimeKind = dateTimeKind.Value;                          }                            if (readPermission != null)                          {                              field.readPermission = readPermission.Permission ?? "?";                          }                            if (insertPermission != null)                          {                              field.insertPermission = insertPermission.Permission ?? "?";                          }                            if (updatePermission != null)                          {                              field.updatePermission = updatePermission.Permission ?? "?";                          }                            if (property != null)                          {                              if (property.PropertyType != null &&                                  field is IEnumTypeField)                              {                                  if (property.PropertyType.IsEnum)                                  {                                      (field as IEnumTypeField).EnumType = property.PropertyType;                                  }                                  else                                  {                                      var nullableType = Nullable.GetUnderlyingType(property.PropertyType);                                      if (nullableType != null && nullableType.IsEnum)                                          (field as IEnumTypeField).EnumType = nullableType;                                  }                              }                                foreach (var attr in property.GetCustomAttributes<LeftJoinAttribute>())                                  if (attr.ToTable != null && attr.OnCriteria != null)                                      new LeftJoin(this.joins' attr.ToTable' attr.Alias'                                          new Criteria(attr.Alias' attr.OnCriteria) == new Criteria(field));                                foreach (var attr in property.GetCustomAttributes<InnerJoinAttribute>())                                  if (attr.ToTable != null && attr.OnCriteria != null)                                      new InnerJoin(this.joins' attr.ToTable' attr.Alias'                                          new Criteria(attr.Alias' attr.OnCriteria) == new Criteria(field));                                field.PropertyName = property.Name;                              this.byPropertyName[field.PropertyName] = field;                                field.CustomAttributes = property.GetCustomAttributes(false).ToArray();                          }                      }                  }                    foreach (var attr in rowCustomAttributes.OfType<LeftJoinAttribute>())                      new LeftJoin(this.joins' attr.ToTable' attr.Alias' new Criteria(attr.OnCriteria));                    foreach (var attr in rowCustomAttributes.OfType<InnerJoinAttribute>())                      new InnerJoin(this.joins' attr.ToTable' attr.Alias' new Criteria(attr.OnCriteria));                    foreach (var attr in rowCustomAttributes.OfType<OuterApplyAttribute>())                      new OuterApply(this.joins' attr.InnerQuery' attr.Alias);    #if !COREFX                  var propertyDescriptorArray = new PropertyDescriptor[this.Count];                  for (int i = 0; i < this.Count; i++)                  {                      var field = this[i];                      propertyDescriptorArray[i] = new FieldDescriptor(field);                  }                    this.propertyDescriptors = new PropertyDescriptorCollection(propertyDescriptorArray);  #endif                    InferTextualFields();                  AfterInitialize();              }
Magic Number,Serenity.Data,RowFieldsBase,C:\repos\volkanceylan_serenity\Serenity.Data.Entity\Row\RowFieldsBase.cs,CreateFieldSetMethod,The following statement contains a magic number: Type[] arguments = new Type[2];
