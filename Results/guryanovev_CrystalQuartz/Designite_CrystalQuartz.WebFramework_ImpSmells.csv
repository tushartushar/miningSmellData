Implementation smell,Namespace,Class,File,Method,Description
Long Statement,CrystalQuartz.WebFramework.Config,FillerConfig,D:\research\architectureSmells\repos\guryanovev_CrystalQuartz\src\CrystalQuartz.WebFramework\Config\FillerConfig.cs,Do,The length of the statement  "            return Do<TInput>(input => new SerializationBasedResponseFiller<TOutput>(serializer' "application/json"' (TOutput) command.Execute(input))); " is 140.
Magic Number,CrystalQuartz.WebFramework.Binding,ReflectionBinder,D:\research\architectureSmells\repos\guryanovev_CrystalQuartz\src\CrystalQuartz.WebFramework\Binding\ReflectionBinder.cs,FetchValue,The following statement contains a magic number: object[] items = request.AllKeys                      .Where(k => k.StartsWith(propertyNamePrefix' StringComparison.InvariantCultureIgnoreCase))                      .Select(k =>                      {                          string tail = k.Substring(propertyNamePrefix.Length);                            int tailIndex = 0;                          while (tailIndex < tail.Length - 1 /* ] should not be the last char so we do - 1 */)                          {                              if (tail[tailIndex] == ']')                              {                                  return new                                  {                                      IndexCode = tail.Substring(0' tailIndex)'                                      NestedKey = tail.Substring(tailIndex + 2)'                                      OriginalKey = k                                  };                              }                                tailIndex++;                          }                            return null;                      })                      .Where(x => x != null)                      .GroupBy(x => x.IndexCode)                      .Select(group =>                      {                          var nestedRequest = new DictionaryRequest();                          foreach (var item in group)                          {                              nestedRequest[item.NestedKey] = request[item.OriginalKey];                          }                            return Bind(elementType' nestedRequest);                      })                      .ToArray();
Magic Number,CrystalQuartz.WebFramework.Request,AbstractFileRequestHandler,D:\research\architectureSmells\repos\guryanovev_CrystalQuartz\src\CrystalQuartz.WebFramework\Request\AbstractFileRequestHandler.cs,WriteResourceToStream,The following statement contains a magic number: return new RequestHandlingResult(true' new Response(null' 404' null));
Magic Number,CrystalQuartz.WebFramework.Request,AbstractFileRequestHandler,D:\research\architectureSmells\repos\guryanovev_CrystalQuartz\src\CrystalQuartz.WebFramework\Request\AbstractFileRequestHandler.cs,WriteResourceToStream,The following statement contains a magic number: return new RequestHandlingResult(                  true'                  new Response(contentType' 200' outputStream =>                  {                      using (inputStream)                      {                          var buffer = new byte[Math.Min(inputStream.Length' 4096)];                          var readLength = inputStream.Read(buffer' 0' buffer.Length);                            while (readLength > 0)                          {                              outputStream.Write(buffer' 0' readLength);                              readLength = inputStream.Read(buffer' 0' buffer.Length);                          }                      }                  }));
Magic Number,CrystalQuartz.WebFramework.Request,AbstractFileRequestHandler,D:\research\architectureSmells\repos\guryanovev_CrystalQuartz\src\CrystalQuartz.WebFramework\Request\AbstractFileRequestHandler.cs,WriteResourceToStream,The following statement contains a magic number: return new RequestHandlingResult(                  true'                  new Response(contentType' 200' outputStream =>                  {                      using (inputStream)                      {                          var buffer = new byte[Math.Min(inputStream.Length' 4096)];                          var readLength = inputStream.Read(buffer' 0' buffer.Length);                            while (readLength > 0)                          {                              outputStream.Write(buffer' 0' readLength);                              readLength = inputStream.Read(buffer' 0' buffer.Length);                          }                      }                  }));
