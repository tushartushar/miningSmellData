Implementation smell,Namespace,Class,File,Method,Description
Long Method,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetValues,The method has 196 lines of code.
Long Method,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetMembers,The method has 487 lines of code.
Long Method,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The method has 157 lines of code.
Long Method,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,ToString,The method has 110 lines of code.
Long Method,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,SelectToString,The method has 233 lines of code.
Long Method,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The method has 300 lines of code.
Long Method,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The method has 133 lines of code.
Long Method,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal,The method has 306 lines of code.
Long Method,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal2,The method has 321 lines of code.
Long Method,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,UpdateOrInsert,The method has 112 lines of code.
Long Method,Gurux.Service.Rest,GXGeneral,C:\repos\Gurux_Gurux.Service\Development\Rest\GXGeneral.cs,UpdateRestMessageTypes,The method has 108 lines of code.
Long Method,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The method has 103 lines of code.
Complex Method,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,ConvertToString,Cyclomatic complexity of the method is 19
Complex Method,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetUpdateQuery,Cyclomatic complexity of the method is 11
Complex Method,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetInsertQuery,Cyclomatic complexity of the method is 16
Complex Method,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetValues,Cyclomatic complexity of the method is 45
Complex Method,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetMembers,Cyclomatic complexity of the method is 138
Complex Method,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,Cyclomatic complexity of the method is 34
Complex Method,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetColumns,Cyclomatic complexity of the method is 12
Complex Method,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,ToString,Cyclomatic complexity of the method is 19
Complex Method,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetAsName,Cyclomatic complexity of the method is 10
Complex Method,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,SelectToString,Cyclomatic complexity of the method is 57
Complex Method,Gurux.Service.Orm,GXSelectArgs,C:\repos\Gurux_Gurux.Service\Development\Db\GXSelectArgs.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,Gurux.Service.Orm,GXSelectArgs,C:\repos\Gurux_Gurux.Service\Development\Db\GXSelectArgs.cs,Verify,Cyclomatic complexity of the method is 8
Complex Method,Gurux.Service.Orm,GXWhereCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXWhereCollection.cs,WhereToString,Cyclomatic complexity of the method is 13
Complex Method,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GXDbConnection,Cyclomatic complexity of the method is 11
Complex Method,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetTables,Cyclomatic complexity of the method is 11
Complex Method,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,Cyclomatic complexity of the method is 77
Complex Method,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetLastInsertId,Cyclomatic complexity of the method is 9
Complex Method,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetColumnsInteral,Cyclomatic complexity of the method is 27
Complex Method,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetTables,Cyclomatic complexity of the method is 22
Complex Method,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,TableExist,Cyclomatic complexity of the method is 18
Complex Method,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetDataBaseType,Cyclomatic complexity of the method is 12
Complex Method,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,Cyclomatic complexity of the method is 28
Complex Method,Gurux.Service.Orm,GXSqlBuilder,C:\repos\Gurux_Gurux.Service\Development\Db\GXSqlBuilder.cs,GXSqlBuilder,Cyclomatic complexity of the method is 17
Complex Method,Gurux.Service.Orm,GXSqlBuilder,C:\repos\Gurux_Gurux.Service\Development\Db\GXSqlBuilder.cs,UpdateRelations,Cyclomatic complexity of the method is 22
Complex Method,Gurux.Service.Orm,GXSqlBuilder,C:\repos\Gurux_Gurux.Service\Development\Db\GXSqlBuilder.cs,UpdateAttributes,Cyclomatic complexity of the method is 12
Complex Method,Gurux.Service.Orm.Settings,GXOracleSqlSettings,C:\repos\Gurux_Gurux.Service\Development\Db\Settings\GXOracleSqlSettings.cs,ConvertToString,Cyclomatic complexity of the method is 8
Complex Method,Gurux.Service.Rest,GXGeneral,C:\repos\Gurux_Gurux.Service\Development\Rest\GXGeneral.cs,UpdateRestMessageTypes,Cyclomatic complexity of the method is 32
Complex Method,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,ProcessRequest,Cyclomatic complexity of the method is 13
Complex Method,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,GetReply,Cyclomatic complexity of the method is 19
Complex Method,Gurux.Service.Rest,GXWebService,C:\repos\Gurux_Gurux.Service\Development\Rest\GXWebService.cs,ProcessRequest,Cyclomatic complexity of the method is 20
Complex Method,Gurux.Service.Rest,GXWebServiceModule,C:\repos\Gurux_Gurux.Service\Development\Rest\GXWebServiceModule.cs,OnAuthenticateRequest,Cyclomatic complexity of the method is 8
Complex Method,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,SetValue,Cyclomatic complexity of the method is 9
Complex Method,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,GetValues,Cyclomatic complexity of the method is 19
Complex Method,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,Cyclomatic complexity of the method is 30
Complex Method,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ShouldSerializeValue,Cyclomatic complexity of the method is 37
Complex Method,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ToString,Cyclomatic complexity of the method is 8
Long Parameter List,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetTableName,The method has 5 parameters.
Long Parameter List,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetValues,The method has 10 parameters.
Long Parameter List,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetMembers,The method has 5 parameters.
Long Parameter List,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The method has 6 parameters.
Long Parameter List,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,SelectToString,The method has 7 parameters.
Long Parameter List,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The method has 6 parameters.
Long Parameter List,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The method has 7 parameters.
Long Parameter List,Gurux.Service.Orm.Settings,GXDBSettings,C:\repos\Gurux_Gurux.Service\Development\Db\Settings\GXDBSettings.cs,OnDelete,The method has 5 parameters.
Long Parameter List,Gurux.Service.Orm.Settings,GXDBSettings,C:\repos\Gurux_Gurux.Service\Development\Db\Settings\GXDBSettings.cs,OnUpdate,The method has 5 parameters.
Long Parameter List,Gurux.Service.Orm.Settings,GXOracleSqlSettings,C:\repos\Gurux_Gurux.Service\Development\Db\Settings\GXOracleSqlSettings.cs,OnUpdate,The method has 5 parameters.
Long Parameter List,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,GetReply,The method has 7 parameters.
Long Parameter List,Gurux.Service.Rest,GXWebServiceModule,C:\repos\Gurux_Gurux.Service\Development\Rest\GXWebServiceModule.cs,TryAuthenticate,The method has 7 parameters.
Long Statement,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,OriginalTableName,The length of the statement  "	if (type.BaseType != typeof(object) && type.BaseType.GetCustomAttributes (typeof(DataContractAttribute)' true).Length != 0) { " is 125.
Long Statement,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,IsSharedTable,The length of the statement  "	return type.BaseType != typeof(object) && type.BaseType.GetCustomAttributes (typeof(DataContractAttribute)' true).Length != 0; " is 126.
Long Statement,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetTableName,The length of the statement  "	if (allowSharedTables && type.BaseType != typeof(object) && type.BaseType.GetCustomAttributes (typeof(DataContractAttribute)' true).Length != 0) { " is 146.
Long Statement,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetValues,The length of the statement  "								m.Columns.Add (GetColumnName (GXSqlBuilder.FindRelation (it.Value.Relation.RelationMapTable.Relation.PrimaryTable' type).Target as PropertyInfo' '\0')); " is 152.
Long Statement,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetValues,The length of the statement  "								itemsList.Add (new KeyValuePair<Type' GXUpdateItem> ((it.Value.Relation.RelationMapTable.Target as PropertyInfo).DeclaringType' m)); " is 132.
Long Statement,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetValues,The length of the statement  "			if (item.Relation != null && item.Relation.ForeignTable != type && item.Relation.RelationMapTable == null && //If relation is to the class not Id. " is 146.
Long Statement,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetMembers,The length of the statement  "						GXDbHelpers.OriginalTableName (memberExpression.Expression.Type) + "." + GetColumnName (memberExpression.Member' settings.ColumnQuotation) " is 138.
Long Statement,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetMembers,The length of the statement  "					GXDbHelpers.GetTableName (memberExpression.Expression.Type' true' settings) + "." + GetColumnName (memberExpression.Member' settings.ColumnQuotation) " is 149.
Long Statement,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetMembers,The length of the statement  "						"(" + GetMembers (settings' m.Arguments [0]' quoteSeparator' where' false) [0] + " IN (" + GetMembers (settings' m.Arguments [1]' quoteSeparator' where' true) [0] + "))" " is 169.
Long Statement,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetMembers,The length of the statement  "					"(" + GetMembers (settings' m.Arguments [1]' quoteSeparator' where) [0] + " IN (" + GetMembers (settings' m.Arguments [0]' quoteSeparator' where) [0] + "))" " is 156.
Long Statement,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetMembers,The length of the statement  "					"(" + GetMembers (settings' m.Object' quoteSeparator' where) [0] + " LIKE('" + GetMembers (settings' m.Arguments [0]' '\0'' where) [0] + "%'))" " is 143.
Long Statement,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetMembers,The length of the statement  "					"(" + GetMembers (settings' m.Object' quoteSeparator' where) [0] + " LIKE('%" + GetMembers (settings' m.Arguments [0]' '\0'' where) [0] + "'))" " is 143.
Long Statement,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetMembers,The length of the statement  "					"(" + GetMembers (settings' m.Object' quoteSeparator' where) [0] + " LIKE('%" + GetMembers (settings' m.Arguments [0]' '\0'' where) [0] + "%'))" " is 144.
Long Statement,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetMembers,The length of the statement  "							"(" + GetMembers (settings' m.Object' quoteSeparator' where) [0] + " LIKE('" + GetMembers (settings' m.Arguments [0]' '\0'' where' true) [0] + "'))" " is 148.
Long Statement,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetMembers,The length of the statement  "						"(" + GetMembers (settings' m.Object' quoteSeparator' where) [0] + "=" + GetMembers (settings' m.Arguments [0]' '\0'' where' true) [0].ToUpper () + ")" " is 151.
Long Statement,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetMembers,The length of the statement  "			list.Add ("POWER(" + GetMembers (settings' newExpression.Left' quoteSeparator' where) [0] + "' " + GetMembers (settings' newExpression.Right' quoteSeparator' where) [0] + ")"); " is 176.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The length of the statement  "					if (!(excludedColumns.ContainsKey (it.Value.Relation.ForeignTable) && excludedColumns [it.Value.Relation.ForeignTable].Contains ("*"))) { " is 137.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The length of the statement  "							j.AllowNull2 = !GXDbHelpers.IsSharedTable (it.Value.Relation.ForeignTable) && tp2.IsGenericType && tp2.GetGenericTypeDefinition () == typeof(Nullable<>); " is 153.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The length of the statement  "						if (GXDbHelpers.IsSharedTable (it.Value.Relation.ForeignTable) || GXDbHelpers.IsAliasName (it.Value.Relation.ForeignTable)) { " is 125.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The length of the statement  "						if (it.Value.Relation.RelationType == RelationType.OneToOne || it.Value.Relation.RelationType == RelationType.Relation) { " is 121.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The length of the statement  "							j.Column2 = GXDbHelpers.GetColumnName (it.Value.Relation.PrimaryId.Relation.ForeignId.Target as PropertyInfo' Parent.Settings.ColumnQuotation); " is 143.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The length of the statement  "							j.Column1 = GXDbHelpers.GetColumnName (it.Value.Relation.PrimaryId.Target as PropertyInfo' Parent.Settings.ColumnQuotation); " is 124.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The length of the statement  "								j.AllowNull2 = !GXDbHelpers.IsSharedTable (it.Value.Relation.ForeignTable) && tp2.IsGenericType && tp2.GetGenericTypeDefinition () == typeof(Nullable<>); " is 153.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The length of the statement  "							j.Column1 = GXDbHelpers.GetColumnName (it.Value.Relation.PrimaryId.Relation.ForeignId.Target as PropertyInfo' Parent.Settings.ColumnQuotation); " is 143.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The length of the statement  "							j.Column2 = GXDbHelpers.GetColumnName (it.Value.Relation.PrimaryId.Target as PropertyInfo' Parent.Settings.ColumnQuotation); " is 124.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The length of the statement  "								j.AllowNull2 = !GXDbHelpers.IsSharedTable (it.Value.Relation.ForeignTable) && tp2.IsGenericType && tp2.GetGenericTypeDefinition () == typeof(Nullable<>); " is 153.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The length of the statement  "							j.Column2 = GXDbHelpers.GetColumnName (GXSqlBuilder.FindRelation (it.Value.Relation.RelationMapTable.Relation.PrimaryTable' tp).Target as PropertyInfo' Parent.Settings.ColumnQuotation); " is 185.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The length of the statement  "							j.Column1 = GXDbHelpers.GetColumnName (GXSqlBuilder.FindUnique (tp).Target as PropertyInfo' Parent.Settings.ColumnQuotation); " is 125.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The length of the statement  "								j.AllowNull1 = !!GXDbHelpers.IsSharedTable (tmp) && tmp.IsGenericType && tmp.GetGenericTypeDefinition () == typeof(Nullable<>); " is 127.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The length of the statement  "								j.Column1 = GXDbHelpers.GetColumnName (it.Value.Relation.RelationMapTable.Target as PropertyInfo' Parent.Settings.ColumnQuotation); " is 131.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The length of the statement  "								j.Column2 = GXDbHelpers.GetColumnName (it.Value.Relation.ForeignId.Target as PropertyInfo' Parent.Settings.ColumnQuotation); " is 124.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetColumns,The length of the statement  "						if (it.Value.Relation.RelationType == RelationType.OneToOne || it.Value.Relation.RelationType == RelationType.Relation) { " is 121.
Long Statement,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,SelectToString,The length of the statement  "			sb.Append (GXDbHelpers.GetTableName (it.Key' settings.UseQuotationWhereColumns' settings.ColumnQuotation' settings.TablePrefix)); " is 129.
Long Statement,Gurux.Service.Orm,GXOrderByCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXOrderByCollection.cs,OrderBy,The length of the statement  "	string table = GXDbHelpers.GetTableName (sourceColumn.Parameters [0].Type' true' settings.ColumnQuotation' settings.TablePrefix); " is 129.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetTables,The length of the statement  "						tables.Add (it.Value.Relation.RelationMapTable.Relation.PrimaryTable' it.Value.Relation.RelationMapTable.Relation.PrimaryId); " is 125.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The length of the statement  "								t = GetCreateTableQueries (create' it.Value.Relation.ForeignTable' null' tables' tablesCreationQueries' it.Value.Relation.RelationType != RelationType.Relation); " is 161.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The length of the statement  "								t = GetCreateTableQueries (create' it.Value.Relation.ForeignTable' tableItem' tables' tablesCreationQueries' it.Value.Relation.RelationType != RelationType.Relation); " is 166.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The length of the statement  "							t = GetCreateTableQueries (create' it.Value.Relation.ForeignTable' null' tables' tablesCreationQueries' it.Value.Relation.RelationType != RelationType.Relation); " is 161.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The length of the statement  "							m = GetCreateTableQueries (create' it.Value.Relation.RelationMapTable.Relation.PrimaryTable' null' tables' tablesCreationQueries' it.Value.Relation.RelationMapTable.Relation.RelationType != RelationType.Relation); " is 213.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The length of the statement  "									t = GetCreateTableQueries (create' it.Value.Relation.ForeignTable' tableItem' tables' tablesCreationQueries' it.Value.Relation.RelationType != RelationType.Relation); " is 166.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The length of the statement  "									t = GetCreateTableQueries (create' it.Value.Relation.ForeignTable' null' tables' tablesCreationQueries' it.Value.Relation.RelationType != RelationType.Relation); " is 161.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The length of the statement  "								t = GetCreateTableQueries (create' it.Value.Relation.ForeignTable' null' tables' tablesCreationQueries' it.Value.Relation.RelationType != RelationType.Relation); " is 161.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The length of the statement  "						if (tp != typeof(string) && tp != typeof(byte[]) && tp != typeof(char[]) && (tp.IsArray || typeof(IList).IsAssignableFrom (tp))) { " is 130.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The length of the statement  "					if (!((it.Value.Attributes & (Attributes.AutoIncrement)) != 0 && (Builder.Settings.Type == DatabaseType.Access || Builder.Settings.Type == DatabaseType.SqLite))) { " is 163.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The length of the statement  "							if (Builder.Settings.Type == DatabaseType.Access && ((it.Value.Attributes & (Attributes.PrimaryKey | Attributes.ForeignKey)) != 0)) { " is 133.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The length of the statement  "					if (it.Value.Relation != null || (it.Value.Type.IsGenericType && it.Value.Type.GetGenericTypeDefinition () == typeof(Nullable<>)) || it.Value.Type.IsArray || it.Value.Type.IsClass || it.Value.Type == typeof(DateTime) || it.Value.Type == typeof(Guid)) { " is 252.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The length of the statement  "					if (it.Value.Relation != null && it.Value.Relation.ForeignTable != type && it.Value.Relation.RelationType == RelationType.OneToOne) { " is 133.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The length of the statement  "						ForeignKeyAttribute fk = ((ForeignKeyAttribute[])(it.Value.Target as PropertyInfo).GetCustomAttributes (typeof(ForeignKeyAttribute)' true)) [0]; " is 144.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,CreateIndex,The length of the statement  "			if (!(Builder.Settings.Type == DatabaseType.Oracle && (it.Value.Attributes & (Attributes.AutoIncrement | Attributes.PrimaryKey)) != 0)) { " is 137.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetLastInsertId,The length of the statement  "		return ExecuteScalarInternal (transaction' "SELECT " + Gurux.Service.Orm.Settings.GXOracleSqlSettings.GetSequenceName (table' columnName) + ".CURRVAL FROM dual"' valueType); " is 173.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetTables,The length of the statement  "		query = string.Format ("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '{0}'"' Connection.Database); " is 123.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,TableExist,The length of the statement  "		query = string.Format ("SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '{0}' AND TABLE_SCHEMA = '{1}'"' tableName' Connection.Database); " is 155.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetDataBaseType,The length of the statement  "		throw new Exception ("Invalid data type: " + type.Name + ". Make sure that you have added ForeignKey attribute to the property."); " is 130.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The length of the statement  "				if (string.Compare (GXDbHelpers.GetTableName (it.Key' false' '\0'' null' false)' c.Table' true) == 0 || string.Compare (GXDbHelpers.OriginalTableName (it.Key)' c.Table' true) == 0) { " is 182.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The length of the statement  "					if (it.Value.Relation != null && it.Value.Relation.RelationType != RelationType.OneToOne && it.Value.Relation.RelationType != RelationType.Relation && GXInternal.GetPropertyType (it.Value.Type) == it.Value.Relation.ForeignTable) { " is 230.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The length of the statement  "							tp = ((ForeignKeyAttribute[])(it.Value.Target as PropertyInfo).GetCustomAttributes (typeof(ForeignKeyAttribute)' true)) [0].MapTable; " is 133.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal,The length of the statement  "								if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) { " is 217.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal,The length of the statement  "									if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) { " is 131.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal2,The length of the statement  "								if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) { " is 217.
Long Statement,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal2,The length of the statement  "									if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) { " is 131.
Long Statement,Gurux.Service.Orm,GXSqlBuilder,C:\repos\Gurux_Gurux.Service\Development\Db\GXSqlBuilder.cs,UpdateRelations,The length of the statement  "			ForeignKeyAttribute fk = ((ForeignKeyAttribute[])(s.Target as PropertyInfo).GetCustomAttributes (typeof(ForeignKeyAttribute)' false)) [0]; " is 138.
Long Statement,Gurux.Service.Orm,GXSqlBuilder,C:\repos\Gurux_Gurux.Service\Development\Db\GXSqlBuilder.cs,UpdateRelations,The length of the statement  "					throw new Exception (string.Format ("Relation create failed. Foreign table '{0}' do not have relation to table '{1}'."' GXDbHelpers.GetTableName (type' false' null)' GXDbHelpers.OriginalTableName (mainType))); " is 209.
Long Statement,Gurux.Service.Orm,GXSqlBuilder,C:\repos\Gurux_Gurux.Service\Development\Db\GXSqlBuilder.cs,UpdateRelations,The length of the statement  "			RelationAttribute ra = ((RelationAttribute[])(s.Target as PropertyInfo).GetCustomAttributes (typeof(RelationAttribute)' false)) [0]; " is 132.
Long Statement,Gurux.Service.Orm,GXSqlBuilder,C:\repos\Gurux_Gurux.Service\Development\Db\GXSqlBuilder.cs,UpdateRelations,The length of the statement  "			ForeignKeyAttribute fk = ((ForeignKeyAttribute[])(s.Target as PropertyInfo).GetCustomAttributes (typeof(ForeignKeyAttribute)' true)) [0]; " is 137.
Long Statement,Gurux.Service.Orm,GXSqlBuilder,C:\repos\Gurux_Gurux.Service\Development\Db\GXSqlBuilder.cs,UpdateRelations,The length of the statement  "				throw new Exception (string.Format ("Table {0} Relation create failed. Class must be derived from IUnique or target type must set in ForeignKey or Relation attribute."' GXDbHelpers.GetTableName (mainType' true' '\''' null))); " is 225.
Long Statement,Gurux.Service.Orm,GXSqlBuilder,C:\repos\Gurux_Gurux.Service\Development\Db\GXSqlBuilder.cs,UpdateRelations,The length of the statement  "			RelationAttribute ra = ((RelationAttribute[])(s.Target as PropertyInfo).GetCustomAttributes (typeof(RelationAttribute)' false)) [0]; " is 132.
Long Statement,Gurux.Service.Orm,GXSqlBuilder,C:\repos\Gurux_Gurux.Service\Development\Db\GXSqlBuilder.cs,UpdateRelations,The length of the statement  "				throw new Exception (string.Format ("Table {0} Relation create failed. Class must be derived from IUnique or target type must set in ForeignKey or Relation attribute."' GXDbHelpers.GetTableName (mainType' true' '\''' null))); " is 225.
Long Statement,Gurux.Service.Orm,GXSqlBuilder,C:\repos\Gurux_Gurux.Service\Development\Db\GXSqlBuilder.cs,GetTableName,The length of the statement  "	return GXDbHelpers.GetTableName (type' addQuoteSeparator' Settings.TableQuotation' Settings.TablePrefix' allowSharedTables); " is 124.
Long Statement,Gurux.Service.Orm.Settings,GXOracleSqlSettings,C:\repos\Gurux_Gurux.Service\Development\Db\Settings\GXOracleSqlSettings.cs,CreateAutoIncrement,The length of the statement  "			"DECLARE\n C NUMBER;\nBEGIN\nSELECT COUNT(*) INTO C FROM USER_SEQUENCES WHERE SEQUENCE_NAME = '" + trigger + "';\n" + "IF (C = 0) THEN\n EXECUTE IMMEDIATE 'CREATE SEQUENCE " + trigger + "';\nEND IF;END;"' " is 204.
Long Statement,Gurux.Service.Orm.Settings,GXOracleSqlSettings,C:\repos\Gurux_Gurux.Service\Development\Db\Settings\GXOracleSqlSettings.cs,CreateAutoIncrement,The length of the statement  "			"CREATE OR REPLACE TRIGGER " + trigger + " BEFORE INSERT ON " + tableName + " FOR EACH ROW\n" + "BEGIN\n SELECT " + trigger + ".NEXTVAL\n INTO\n :new." + columnName + "\n \nFROM dual;\nEND;" " is 190.
Long Statement,Gurux.Service.Rest,GXGeneral,C:\repos\Gurux_Gurux.Service\Development\Rest\GXGeneral.cs,UpdateRestMessageTypes,The length of the statement  "						if (parameters.Length == 1 && (method.Name == "Post" || method.Name == "Get" || method.Name == "Put" || method.Name == "Delete")) { " is 131.
Long Statement,Gurux.Service.Rest,GXWebService,C:\repos\Gurux_Gurux.Service\Development\Rest\GXWebService.cs,ProcessRequest,The length of the statement  "			throw new HttpException (405' string.Format ("Method '{0}' not allowed for {1}"' context.Request.HttpMethod' RestMethodInfo.RequestType.Name)); " is 143.
Long Statement,Gurux.Service.Rest,GXWebServiceModule,C:\repos\Gurux_Gurux.Service\Development\Rest\GXWebServiceModule.cs,TryAuthenticate,The length of the statement  "	return TryAuthenticate (messageMap' request.HttpMethod' request.ContentType' path' request.Headers ["Authorization"]' out username' out password); " is 146.
Long Statement,Gurux.Service.Rest,GXWebServiceModule,C:\repos\Gurux_Gurux.Service\Development\Rest\GXWebServiceModule.cs,TryAuthenticate,The length of the statement  "	if (TryAuthenticate (MessageMap' request.HttpMethod' request.ContentType' request.Path' request.Headers ["Authorization"]' out username' out password)) { " is 153.
Long Statement,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,SetValue,The length of the statement  "				else if (pi.PropertyType.IsGenericType && pi.PropertyType.GetGenericTypeDefinition () == typeof(System.Data.Linq.EntitySet<>)) { " is 128.
Long Statement,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,GetValues,The length of the statement  "		if (((all && it.CanWrite) || attr.Length != 0) && it.GetCustomAttributes (typeof(IgnoreDataMemberAttribute)' true).Length == 0) { " is 129.
Long Statement,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,IsGenericDataType,The length of the statement  "	return type.IsPrimitive || type.IsEnum || type == typeof(Guid) || type == typeof(DateTime) || type == typeof(string) || type == typeof(Type) || type == typeof(object) || type == typeof(decimal) || type == typeof(TimeSpan) || type == typeof(DateTimeOffset); " is 256.
Long Statement,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ToString,The length of the statement  "		str += TimeZone.CurrentTimeZone.GetUtcOffset (dt).Hours.ToString ("00") + TimeZone.CurrentTimeZone.GetUtcOffset (dt).Minutes.ToString ("00"); " is 141.
Complex Conditional,Gurux.Service.Orm,GXInsertArgs,C:\repos\Gurux_Gurux.Service\Development\Db\GXInsertArgs.cs,Add,The conditional expression  "items == null || collections == null || items.Length == 0 || collections.Length == 0"  is complex.
Complex Conditional,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetValues,The conditional expression  "item.Relation != null && item.Relation.ForeignTable != type && item.Relation.RelationMapTable == null && //If relation is to the class not Id.  !GXInternal.IsGenericDataType (item.Type)"  is complex.
Complex Conditional,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,GetMembers,The conditional expression  "where && (tmp == null || ((settings.Type == DatabaseType.Oracle) && tmp == "''"))"  is complex.
Complex Conditional,Gurux.Service.Orm,GXDeleteArgs,C:\repos\Gurux_Gurux.Service\Development\Db\GXDeleteArgs.cs,Remove,The conditional expression  "items == null || collections == null || items.Length == 0 || collections.Length == 0"  is complex.
Complex Conditional,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The conditional expression  "(j1 == t1 && j2 == t2) || (j2 == t1 && j1 == t2)"  is complex.
Complex Conditional,Gurux.Service.Orm,GXColumnCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXColumnCollection.cs,GetRelations,The conditional expression  "(j1 == t1 && j2 == t2) || (j2 == t1 && j1 == t2)"  is complex.
Complex Conditional,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The conditional expression  "tp != typeof(string) && tp != typeof(byte[]) && tp != typeof(char[]) && (tp.IsArray || typeof(IList).IsAssignableFrom (tp))"  is complex.
Complex Conditional,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetCreateTableQueries,The conditional expression  "it.Value.Relation != null || (it.Value.Type.IsGenericType && it.Value.Type.GetGenericTypeDefinition () == typeof(Nullable<>)) || it.Value.Type.IsArray || it.Value.Type.IsClass || it.Value.Type == typeof(DateTime) || it.Value.Type == typeof(Guid)"  is complex.
Complex Conditional,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The conditional expression  "it.Value.Relation != null && it.Value.Relation.RelationType != RelationType.OneToOne && it.Value.Relation.RelationType != RelationType.Relation && GXInternal.GetPropertyType (it.Value.Type) == it.Value.Relation.ForeignTable"  is complex.
Complex Conditional,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal,The conditional expression  "mapTables != null && item != null && id == null && mapTables.ContainsKey (item.GetType ())"  is complex.
Complex Conditional,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal,The conditional expression  "objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])"  is complex.
Complex Conditional,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal2,The conditional expression  "mapTables != null && item != null && id == null && mapTables.ContainsKey (item.GetType ())"  is complex.
Complex Conditional,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal2,The conditional expression  "objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])"  is complex.
Complex Conditional,Gurux.Service.Rest,GXGeneral,C:\repos\Gurux_Gurux.Service\Development\Rest\GXGeneral.cs,UpdateRestMessageTypes,The conditional expression  "parameters.Length == 1 && (method.Name == "Post" || method.Name == "Get" || method.Name == "Put" || method.Name == "Delete")"  is complex.
Complex Conditional,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,GetValues,The conditional expression  "((all && it.CanWrite) || attr.Length != 0) && it.GetCustomAttributes (typeof(IgnoreDataMemberAttribute)' true).Length == 0"  is complex.
Magic Number,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,ConvertToString,The following statement contains a magic number: if (value == null) {  	str = "NULL";  }  else if (value is string) {  	str = value as string;  	str = str.Replace ("\\"' "\\\\").Replace ("'"' @"\'");  	str = GetQuetedValue (str);  }  else if (value is Type) {  	str = GetQuetedValue (((Type)value).FullName);  }  else if (value is float || value is double || value is System.Decimal) {  	str = settings.ConvertToString (value);  }  else if (value.GetType ().IsEnum) {  	if (settings.UseEnumStringValue) {  		str = GetQuetedValue (Convert.ToString (value));  	}  	else {  		str = Convert.ToString ((int)value);  	}  }  else if (value is TimeSpan) {  	str = ((TimeSpan)value).TotalMilliseconds.ToString ();  }  else if (value is bool) {  	str = (bool)value ? "1" : "0";  }  else if (value is Guid) {  	str = GetQuetedValue (((Guid)value).ToString ().Replace ("-"' ""));  }  else if (value is char) {  	str = GetQuetedValue (Convert.ToString (value));  }  else if (value is byte[]) {  	str = GetQuetedValue (GXCommon.ToHex (value as byte[]' false));  }  else if (value is DateTime) {  	if (settings.UseEpochTimeFormat) {  		DateTime epoch = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  		str = (((DateTime)value).ToUniversalTime () - epoch).TotalSeconds.ToString ();  	}  	else {  		DateTime tm = (DateTime)value;  		if (tm != DateTime.MinValue && tm != DateTime.MaxValue) {  			tm = tm.ToUniversalTime ();  		}  		str = settings.ConvertToString (tm);  	}  }  else if (value is DateTimeOffset) {  	str = settings.ConvertToString (((DateTimeOffset)value).ToUniversalTime ());  }  else if (value is System.Collections.IEnumerable)//If collection   {  	StringBuilder sb = new StringBuilder ();  	foreach (object it in (System.Collections.IEnumerable)value) {  		sb.Append (it.ToString ());  		sb.Append (';');  	}  	if (sb.Length != 0) {  		sb.Length = sb.Length - 1;  	}  	str = GetQuetedValue (sb.ToString ());  }  else {  	str = Convert.ToString (value);  }  
Magic Number,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,ConvertToString,The following statement contains a magic number: if (value is string) {  	str = value as string;  	str = str.Replace ("\\"' "\\\\").Replace ("'"' @"\'");  	str = GetQuetedValue (str);  }  else if (value is Type) {  	str = GetQuetedValue (((Type)value).FullName);  }  else if (value is float || value is double || value is System.Decimal) {  	str = settings.ConvertToString (value);  }  else if (value.GetType ().IsEnum) {  	if (settings.UseEnumStringValue) {  		str = GetQuetedValue (Convert.ToString (value));  	}  	else {  		str = Convert.ToString ((int)value);  	}  }  else if (value is TimeSpan) {  	str = ((TimeSpan)value).TotalMilliseconds.ToString ();  }  else if (value is bool) {  	str = (bool)value ? "1" : "0";  }  else if (value is Guid) {  	str = GetQuetedValue (((Guid)value).ToString ().Replace ("-"' ""));  }  else if (value is char) {  	str = GetQuetedValue (Convert.ToString (value));  }  else if (value is byte[]) {  	str = GetQuetedValue (GXCommon.ToHex (value as byte[]' false));  }  else if (value is DateTime) {  	if (settings.UseEpochTimeFormat) {  		DateTime epoch = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  		str = (((DateTime)value).ToUniversalTime () - epoch).TotalSeconds.ToString ();  	}  	else {  		DateTime tm = (DateTime)value;  		if (tm != DateTime.MinValue && tm != DateTime.MaxValue) {  			tm = tm.ToUniversalTime ();  		}  		str = settings.ConvertToString (tm);  	}  }  else if (value is DateTimeOffset) {  	str = settings.ConvertToString (((DateTimeOffset)value).ToUniversalTime ());  }  else if (value is System.Collections.IEnumerable)//If collection   {  	StringBuilder sb = new StringBuilder ();  	foreach (object it in (System.Collections.IEnumerable)value) {  		sb.Append (it.ToString ());  		sb.Append (';');  	}  	if (sb.Length != 0) {  		sb.Length = sb.Length - 1;  	}  	str = GetQuetedValue (sb.ToString ());  }  else {  	str = Convert.ToString (value);  }  
Magic Number,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,ConvertToString,The following statement contains a magic number: if (value is Type) {  	str = GetQuetedValue (((Type)value).FullName);  }  else if (value is float || value is double || value is System.Decimal) {  	str = settings.ConvertToString (value);  }  else if (value.GetType ().IsEnum) {  	if (settings.UseEnumStringValue) {  		str = GetQuetedValue (Convert.ToString (value));  	}  	else {  		str = Convert.ToString ((int)value);  	}  }  else if (value is TimeSpan) {  	str = ((TimeSpan)value).TotalMilliseconds.ToString ();  }  else if (value is bool) {  	str = (bool)value ? "1" : "0";  }  else if (value is Guid) {  	str = GetQuetedValue (((Guid)value).ToString ().Replace ("-"' ""));  }  else if (value is char) {  	str = GetQuetedValue (Convert.ToString (value));  }  else if (value is byte[]) {  	str = GetQuetedValue (GXCommon.ToHex (value as byte[]' false));  }  else if (value is DateTime) {  	if (settings.UseEpochTimeFormat) {  		DateTime epoch = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  		str = (((DateTime)value).ToUniversalTime () - epoch).TotalSeconds.ToString ();  	}  	else {  		DateTime tm = (DateTime)value;  		if (tm != DateTime.MinValue && tm != DateTime.MaxValue) {  			tm = tm.ToUniversalTime ();  		}  		str = settings.ConvertToString (tm);  	}  }  else if (value is DateTimeOffset) {  	str = settings.ConvertToString (((DateTimeOffset)value).ToUniversalTime ());  }  else if (value is System.Collections.IEnumerable)//If collection   {  	StringBuilder sb = new StringBuilder ();  	foreach (object it in (System.Collections.IEnumerable)value) {  		sb.Append (it.ToString ());  		sb.Append (';');  	}  	if (sb.Length != 0) {  		sb.Length = sb.Length - 1;  	}  	str = GetQuetedValue (sb.ToString ());  }  else {  	str = Convert.ToString (value);  }  
Magic Number,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,ConvertToString,The following statement contains a magic number: if (value is float || value is double || value is System.Decimal) {  	str = settings.ConvertToString (value);  }  else if (value.GetType ().IsEnum) {  	if (settings.UseEnumStringValue) {  		str = GetQuetedValue (Convert.ToString (value));  	}  	else {  		str = Convert.ToString ((int)value);  	}  }  else if (value is TimeSpan) {  	str = ((TimeSpan)value).TotalMilliseconds.ToString ();  }  else if (value is bool) {  	str = (bool)value ? "1" : "0";  }  else if (value is Guid) {  	str = GetQuetedValue (((Guid)value).ToString ().Replace ("-"' ""));  }  else if (value is char) {  	str = GetQuetedValue (Convert.ToString (value));  }  else if (value is byte[]) {  	str = GetQuetedValue (GXCommon.ToHex (value as byte[]' false));  }  else if (value is DateTime) {  	if (settings.UseEpochTimeFormat) {  		DateTime epoch = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  		str = (((DateTime)value).ToUniversalTime () - epoch).TotalSeconds.ToString ();  	}  	else {  		DateTime tm = (DateTime)value;  		if (tm != DateTime.MinValue && tm != DateTime.MaxValue) {  			tm = tm.ToUniversalTime ();  		}  		str = settings.ConvertToString (tm);  	}  }  else if (value is DateTimeOffset) {  	str = settings.ConvertToString (((DateTimeOffset)value).ToUniversalTime ());  }  else if (value is System.Collections.IEnumerable)//If collection   {  	StringBuilder sb = new StringBuilder ();  	foreach (object it in (System.Collections.IEnumerable)value) {  		sb.Append (it.ToString ());  		sb.Append (';');  	}  	if (sb.Length != 0) {  		sb.Length = sb.Length - 1;  	}  	str = GetQuetedValue (sb.ToString ());  }  else {  	str = Convert.ToString (value);  }  
Magic Number,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,ConvertToString,The following statement contains a magic number: if (value.GetType ().IsEnum) {  	if (settings.UseEnumStringValue) {  		str = GetQuetedValue (Convert.ToString (value));  	}  	else {  		str = Convert.ToString ((int)value);  	}  }  else if (value is TimeSpan) {  	str = ((TimeSpan)value).TotalMilliseconds.ToString ();  }  else if (value is bool) {  	str = (bool)value ? "1" : "0";  }  else if (value is Guid) {  	str = GetQuetedValue (((Guid)value).ToString ().Replace ("-"' ""));  }  else if (value is char) {  	str = GetQuetedValue (Convert.ToString (value));  }  else if (value is byte[]) {  	str = GetQuetedValue (GXCommon.ToHex (value as byte[]' false));  }  else if (value is DateTime) {  	if (settings.UseEpochTimeFormat) {  		DateTime epoch = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  		str = (((DateTime)value).ToUniversalTime () - epoch).TotalSeconds.ToString ();  	}  	else {  		DateTime tm = (DateTime)value;  		if (tm != DateTime.MinValue && tm != DateTime.MaxValue) {  			tm = tm.ToUniversalTime ();  		}  		str = settings.ConvertToString (tm);  	}  }  else if (value is DateTimeOffset) {  	str = settings.ConvertToString (((DateTimeOffset)value).ToUniversalTime ());  }  else if (value is System.Collections.IEnumerable)//If collection   {  	StringBuilder sb = new StringBuilder ();  	foreach (object it in (System.Collections.IEnumerable)value) {  		sb.Append (it.ToString ());  		sb.Append (';');  	}  	if (sb.Length != 0) {  		sb.Length = sb.Length - 1;  	}  	str = GetQuetedValue (sb.ToString ());  }  else {  	str = Convert.ToString (value);  }  
Magic Number,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,ConvertToString,The following statement contains a magic number: if (value is TimeSpan) {  	str = ((TimeSpan)value).TotalMilliseconds.ToString ();  }  else if (value is bool) {  	str = (bool)value ? "1" : "0";  }  else if (value is Guid) {  	str = GetQuetedValue (((Guid)value).ToString ().Replace ("-"' ""));  }  else if (value is char) {  	str = GetQuetedValue (Convert.ToString (value));  }  else if (value is byte[]) {  	str = GetQuetedValue (GXCommon.ToHex (value as byte[]' false));  }  else if (value is DateTime) {  	if (settings.UseEpochTimeFormat) {  		DateTime epoch = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  		str = (((DateTime)value).ToUniversalTime () - epoch).TotalSeconds.ToString ();  	}  	else {  		DateTime tm = (DateTime)value;  		if (tm != DateTime.MinValue && tm != DateTime.MaxValue) {  			tm = tm.ToUniversalTime ();  		}  		str = settings.ConvertToString (tm);  	}  }  else if (value is DateTimeOffset) {  	str = settings.ConvertToString (((DateTimeOffset)value).ToUniversalTime ());  }  else if (value is System.Collections.IEnumerable)//If collection   {  	StringBuilder sb = new StringBuilder ();  	foreach (object it in (System.Collections.IEnumerable)value) {  		sb.Append (it.ToString ());  		sb.Append (';');  	}  	if (sb.Length != 0) {  		sb.Length = sb.Length - 1;  	}  	str = GetQuetedValue (sb.ToString ());  }  else {  	str = Convert.ToString (value);  }  
Magic Number,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,ConvertToString,The following statement contains a magic number: if (value is bool) {  	str = (bool)value ? "1" : "0";  }  else if (value is Guid) {  	str = GetQuetedValue (((Guid)value).ToString ().Replace ("-"' ""));  }  else if (value is char) {  	str = GetQuetedValue (Convert.ToString (value));  }  else if (value is byte[]) {  	str = GetQuetedValue (GXCommon.ToHex (value as byte[]' false));  }  else if (value is DateTime) {  	if (settings.UseEpochTimeFormat) {  		DateTime epoch = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  		str = (((DateTime)value).ToUniversalTime () - epoch).TotalSeconds.ToString ();  	}  	else {  		DateTime tm = (DateTime)value;  		if (tm != DateTime.MinValue && tm != DateTime.MaxValue) {  			tm = tm.ToUniversalTime ();  		}  		str = settings.ConvertToString (tm);  	}  }  else if (value is DateTimeOffset) {  	str = settings.ConvertToString (((DateTimeOffset)value).ToUniversalTime ());  }  else if (value is System.Collections.IEnumerable)//If collection   {  	StringBuilder sb = new StringBuilder ();  	foreach (object it in (System.Collections.IEnumerable)value) {  		sb.Append (it.ToString ());  		sb.Append (';');  	}  	if (sb.Length != 0) {  		sb.Length = sb.Length - 1;  	}  	str = GetQuetedValue (sb.ToString ());  }  else {  	str = Convert.ToString (value);  }  
Magic Number,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,ConvertToString,The following statement contains a magic number: if (value is Guid) {  	str = GetQuetedValue (((Guid)value).ToString ().Replace ("-"' ""));  }  else if (value is char) {  	str = GetQuetedValue (Convert.ToString (value));  }  else if (value is byte[]) {  	str = GetQuetedValue (GXCommon.ToHex (value as byte[]' false));  }  else if (value is DateTime) {  	if (settings.UseEpochTimeFormat) {  		DateTime epoch = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  		str = (((DateTime)value).ToUniversalTime () - epoch).TotalSeconds.ToString ();  	}  	else {  		DateTime tm = (DateTime)value;  		if (tm != DateTime.MinValue && tm != DateTime.MaxValue) {  			tm = tm.ToUniversalTime ();  		}  		str = settings.ConvertToString (tm);  	}  }  else if (value is DateTimeOffset) {  	str = settings.ConvertToString (((DateTimeOffset)value).ToUniversalTime ());  }  else if (value is System.Collections.IEnumerable)//If collection   {  	StringBuilder sb = new StringBuilder ();  	foreach (object it in (System.Collections.IEnumerable)value) {  		sb.Append (it.ToString ());  		sb.Append (';');  	}  	if (sb.Length != 0) {  		sb.Length = sb.Length - 1;  	}  	str = GetQuetedValue (sb.ToString ());  }  else {  	str = Convert.ToString (value);  }  
Magic Number,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,ConvertToString,The following statement contains a magic number: if (value is char) {  	str = GetQuetedValue (Convert.ToString (value));  }  else if (value is byte[]) {  	str = GetQuetedValue (GXCommon.ToHex (value as byte[]' false));  }  else if (value is DateTime) {  	if (settings.UseEpochTimeFormat) {  		DateTime epoch = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  		str = (((DateTime)value).ToUniversalTime () - epoch).TotalSeconds.ToString ();  	}  	else {  		DateTime tm = (DateTime)value;  		if (tm != DateTime.MinValue && tm != DateTime.MaxValue) {  			tm = tm.ToUniversalTime ();  		}  		str = settings.ConvertToString (tm);  	}  }  else if (value is DateTimeOffset) {  	str = settings.ConvertToString (((DateTimeOffset)value).ToUniversalTime ());  }  else if (value is System.Collections.IEnumerable)//If collection   {  	StringBuilder sb = new StringBuilder ();  	foreach (object it in (System.Collections.IEnumerable)value) {  		sb.Append (it.ToString ());  		sb.Append (';');  	}  	if (sb.Length != 0) {  		sb.Length = sb.Length - 1;  	}  	str = GetQuetedValue (sb.ToString ());  }  else {  	str = Convert.ToString (value);  }  
Magic Number,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,ConvertToString,The following statement contains a magic number: if (value is byte[]) {  	str = GetQuetedValue (GXCommon.ToHex (value as byte[]' false));  }  else if (value is DateTime) {  	if (settings.UseEpochTimeFormat) {  		DateTime epoch = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  		str = (((DateTime)value).ToUniversalTime () - epoch).TotalSeconds.ToString ();  	}  	else {  		DateTime tm = (DateTime)value;  		if (tm != DateTime.MinValue && tm != DateTime.MaxValue) {  			tm = tm.ToUniversalTime ();  		}  		str = settings.ConvertToString (tm);  	}  }  else if (value is DateTimeOffset) {  	str = settings.ConvertToString (((DateTimeOffset)value).ToUniversalTime ());  }  else if (value is System.Collections.IEnumerable)//If collection   {  	StringBuilder sb = new StringBuilder ();  	foreach (object it in (System.Collections.IEnumerable)value) {  		sb.Append (it.ToString ());  		sb.Append (';');  	}  	if (sb.Length != 0) {  		sb.Length = sb.Length - 1;  	}  	str = GetQuetedValue (sb.ToString ());  }  else {  	str = Convert.ToString (value);  }  
Magic Number,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,ConvertToString,The following statement contains a magic number: if (value is DateTime) {  	if (settings.UseEpochTimeFormat) {  		DateTime epoch = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  		str = (((DateTime)value).ToUniversalTime () - epoch).TotalSeconds.ToString ();  	}  	else {  		DateTime tm = (DateTime)value;  		if (tm != DateTime.MinValue && tm != DateTime.MaxValue) {  			tm = tm.ToUniversalTime ();  		}  		str = settings.ConvertToString (tm);  	}  }  else if (value is DateTimeOffset) {  	str = settings.ConvertToString (((DateTimeOffset)value).ToUniversalTime ());  }  else if (value is System.Collections.IEnumerable)//If collection   {  	StringBuilder sb = new StringBuilder ();  	foreach (object it in (System.Collections.IEnumerable)value) {  		sb.Append (it.ToString ());  		sb.Append (';');  	}  	if (sb.Length != 0) {  		sb.Length = sb.Length - 1;  	}  	str = GetQuetedValue (sb.ToString ());  }  else {  	str = Convert.ToString (value);  }  
Magic Number,Gurux.Service.Orm,GXDbHelpers,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbHelpers.cs,ConvertToString,The following statement contains a magic number: if (settings.UseEpochTimeFormat) {  	DateTime epoch = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);  	str = (((DateTime)value).ToUniversalTime () - epoch).TotalSeconds.ToString ();  }  else {  	DateTime tm = (DateTime)value;  	if (tm != DateTime.MinValue && tm != DateTime.MaxValue) {  		tm = tm.ToUniversalTime ();  	}  	str = settings.ConvertToString (tm);  }  
Magic Number,Gurux.Service.Orm,GXWhereCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXWhereCollection.cs,Where,The following statement contains a magic number: if (value != null) {  	string str;  	if (Settings.UseQuotationWhereColumns) {  		str = GXDbHelpers.GetMembers (Settings' value.Body' Settings.ColumnQuotation' true) [0];  	}  	else {  		str = GXDbHelpers.GetMembers (Settings' value.Body' '\0'' true) [0];  	}  	//Remove brackets.  	if (removebrackets) {  		return str.Substring (1' str.Length - 2);  	}  	else {  		return str;  	}  }  
Magic Number,Gurux.Service.Orm,GXWhereCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXWhereCollection.cs,Where,The following statement contains a magic number: if (removebrackets) {  	return str.Substring (1' str.Length - 2);  }  else {  	return str;  }  
Magic Number,Gurux.Service.Orm,GXWhereCollection,C:\repos\Gurux_Gurux.Service\Development\Db\GXWhereCollection.cs,Where,The following statement contains a magic number: return str.Substring (1' str.Length - 2);  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetColumnsInteral,The following statement contains a magic number: switch (type) {  case DatabaseType.MySQL:  	query = string.Format ("SHOW COLUMNS FROM {0}"' tableName);  	break;  case DatabaseType.MSSQL:  	query = string.Format ("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' tableName);  	break;  case DatabaseType.Oracle:  	query = string.Format ("SELECT COLUMN_NAME FROM USER_TAB_COLUMNS WHERE TABLE_NAME = '{0}'"' tableName);  	break;  case DatabaseType.SqLite:  	query = string.Format ("PRAGMA table_info('{0}')"' tableName);  	index = 1;  	break;  case DatabaseType.Access:  	DataTable dt;  	if (connection as System.Data.OleDb.OleDbConnection != null) {  		dt = (connection as System.Data.OleDb.OleDbConnection).GetSchema ("Columns"' new string[] {  			null'  			null'  			tableName  		});  	}  	else {  		dt = (connection as System.Data.Odbc.OdbcConnection).GetSchema ("Columns"' new string[] {  			null'  			null'  			tableName  		});  	}  	list = new List<string> (dt.Rows.Count);  	foreach (DataRow it in dt.Rows) {  		list.Add (it [3].ToString ());  	}  	return list.ToArray ();  default:  	throw new ArgumentOutOfRangeException ("TableExist failed. Unknown database connection.");  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetColumnsInteral,The following statement contains a magic number: foreach (DataRow it in dt.Rows) {  	list.Add (it [3].ToString ());  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetColumnsInteral,The following statement contains a magic number: list.Add (it [3].ToString ());  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetTables,The following statement contains a magic number: switch (Builder.Settings.Type) {  case DatabaseType.MySQL:  	query = string.Format ("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '{0}'"' Connection.Database);  	break;  case DatabaseType.MSSQL:  	query = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES";  	break;  case DatabaseType.Oracle:  	query = "SELECT TABLE_NAME FROM USER_TABLES ORDER BY TABLE_NAME";  	break;  case DatabaseType.SqLite:  	query = "SELECT NAME FROM sqlite_master WHERE type='table'";  	break;  case DatabaseType.Access:  	DataTable dt;  	if (Connection as System.Data.OleDb.OleDbConnection != null) {  		dt = (Connection as System.Data.OleDb.OleDbConnection).GetSchema ("Tables"' new string[] {  			null'  			null'  			null  		});  	}  	else {  		dt = (Connection as System.Data.Odbc.OdbcConnection).GetSchema ("Tables"' new string[] {  			null'  			null'  			null  		});  	}  	List<string> list = new List<string> ();  	foreach (DataRow it in dt.Rows) {  		if (it [3].ToString () == "TABLE") {  			list.Add (it [2].ToString ());  		}  	}  	return list.ToArray ();  default:  	throw new ArgumentOutOfRangeException ("TableExist failed. Unknown database connection.");  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetTables,The following statement contains a magic number: switch (Builder.Settings.Type) {  case DatabaseType.MySQL:  	query = string.Format ("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '{0}'"' Connection.Database);  	break;  case DatabaseType.MSSQL:  	query = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES";  	break;  case DatabaseType.Oracle:  	query = "SELECT TABLE_NAME FROM USER_TABLES ORDER BY TABLE_NAME";  	break;  case DatabaseType.SqLite:  	query = "SELECT NAME FROM sqlite_master WHERE type='table'";  	break;  case DatabaseType.Access:  	DataTable dt;  	if (Connection as System.Data.OleDb.OleDbConnection != null) {  		dt = (Connection as System.Data.OleDb.OleDbConnection).GetSchema ("Tables"' new string[] {  			null'  			null'  			null  		});  	}  	else {  		dt = (Connection as System.Data.Odbc.OdbcConnection).GetSchema ("Tables"' new string[] {  			null'  			null'  			null  		});  	}  	List<string> list = new List<string> ();  	foreach (DataRow it in dt.Rows) {  		if (it [3].ToString () == "TABLE") {  			list.Add (it [2].ToString ());  		}  	}  	return list.ToArray ();  default:  	throw new ArgumentOutOfRangeException ("TableExist failed. Unknown database connection.");  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetTables,The following statement contains a magic number: foreach (DataRow it in dt.Rows) {  	if (it [3].ToString () == "TABLE") {  		list.Add (it [2].ToString ());  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetTables,The following statement contains a magic number: foreach (DataRow it in dt.Rows) {  	if (it [3].ToString () == "TABLE") {  		list.Add (it [2].ToString ());  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetTables,The following statement contains a magic number: if (it [3].ToString () == "TABLE") {  	list.Add (it [2].ToString ());  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetTables,The following statement contains a magic number: if (it [3].ToString () == "TABLE") {  	list.Add (it [2].ToString ());  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetTables,The following statement contains a magic number: list.Add (it [2].ToString ());  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetDataBaseType,The following statement contains a magic number: if (type.IsGenericType && type.GetGenericTypeDefinition () == typeof(Nullable<>)) {  	type = Nullable.GetUnderlyingType (type);  }  //100 character is allocated for type.  else if (type == typeof(Type)) {  	return this.Builder.Settings.StringColumnDefinition (100);  }  else if (type.IsEnum) {  	if (this.Builder.Settings.UseEnumStringValue) {  		StringLengthAttribute[] attr = (StringLengthAttribute[])type.GetCustomAttributes (typeof(StringLengthAttribute)' true);  		if (attr.Length == 0) {  			return this.Builder.Settings.StringColumnDefinition (0);  		}  		return this.Builder.Settings.StringColumnDefinition (attr [0].Length);  	}  	else//In default enumeration values are saved as long values.  	 {  		return this.Builder.Settings.LongColumnDefinition;  	}  }  else if (type == typeof(string) || type == typeof(char[]) || type == typeof(object)) {  	StringLengthAttribute[] attr = (StringLengthAttribute[])type.GetCustomAttributes (typeof(StringLengthAttribute)' true);  	if (attr.Length == 0) {  		return this.Builder.Settings.StringColumnDefinition (0);  	}  	return this.Builder.Settings.StringColumnDefinition (attr [0].Length);  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetDataBaseType,The following statement contains a magic number: if (type == typeof(Type)) {  	return this.Builder.Settings.StringColumnDefinition (100);  }  else if (type.IsEnum) {  	if (this.Builder.Settings.UseEnumStringValue) {  		StringLengthAttribute[] attr = (StringLengthAttribute[])type.GetCustomAttributes (typeof(StringLengthAttribute)' true);  		if (attr.Length == 0) {  			return this.Builder.Settings.StringColumnDefinition (0);  		}  		return this.Builder.Settings.StringColumnDefinition (attr [0].Length);  	}  	else//In default enumeration values are saved as long values.  	 {  		return this.Builder.Settings.LongColumnDefinition;  	}  }  else if (type == typeof(string) || type == typeof(char[]) || type == typeof(object)) {  	StringLengthAttribute[] attr = (StringLengthAttribute[])type.GetCustomAttributes (typeof(StringLengthAttribute)' true);  	if (attr.Length == 0) {  		return this.Builder.Settings.StringColumnDefinition (0);  	}  	return this.Builder.Settings.StringColumnDefinition (attr [0].Length);  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,GetDataBaseType,The following statement contains a magic number: return this.Builder.Settings.StringColumnDefinition (100);  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The following statement contains a magic number: if (tables.Count == 1) {  	tableType = typeof(T);  }  else if (!settings.SelectUsingAs) {  	schema = reader.GetSchemaTable ();  	if (schema.Columns [10].ColumnName == "BaseTableName") {  		tableIndex = 10;  	}  	else {  		foreach (DataColumn index in schema.Columns) {  			if (index.ColumnName == "BaseTableName") {  				tableIndex = pos;  				break;  			}  			++pos;  		}  		if (tableIndex == -1) {  			throw new ArgumentOutOfRangeException ("Table name not found.");  		}  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The following statement contains a magic number: if (tables.Count == 1) {  	tableType = typeof(T);  }  else if (!settings.SelectUsingAs) {  	schema = reader.GetSchemaTable ();  	if (schema.Columns [10].ColumnName == "BaseTableName") {  		tableIndex = 10;  	}  	else {  		foreach (DataColumn index in schema.Columns) {  			if (index.ColumnName == "BaseTableName") {  				tableIndex = pos;  				break;  			}  			++pos;  		}  		if (tableIndex == -1) {  			throw new ArgumentOutOfRangeException ("Table name not found.");  		}  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The following statement contains a magic number: if (!settings.SelectUsingAs) {  	schema = reader.GetSchemaTable ();  	if (schema.Columns [10].ColumnName == "BaseTableName") {  		tableIndex = 10;  	}  	else {  		foreach (DataColumn index in schema.Columns) {  			if (index.ColumnName == "BaseTableName") {  				tableIndex = pos;  				break;  			}  			++pos;  		}  		if (tableIndex == -1) {  			throw new ArgumentOutOfRangeException ("Table name not found.");  		}  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The following statement contains a magic number: if (!settings.SelectUsingAs) {  	schema = reader.GetSchemaTable ();  	if (schema.Columns [10].ColumnName == "BaseTableName") {  		tableIndex = 10;  	}  	else {  		foreach (DataColumn index in schema.Columns) {  			if (index.ColumnName == "BaseTableName") {  				tableIndex = pos;  				break;  			}  			++pos;  		}  		if (tableIndex == -1) {  			throw new ArgumentOutOfRangeException ("Table name not found.");  		}  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The following statement contains a magic number: if (schema.Columns [10].ColumnName == "BaseTableName") {  	tableIndex = 10;  }  else {  	foreach (DataColumn index in schema.Columns) {  		if (index.ColumnName == "BaseTableName") {  			tableIndex = pos;  			break;  		}  		++pos;  	}  	if (tableIndex == -1) {  		throw new ArgumentOutOfRangeException ("Table name not found.");  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The following statement contains a magic number: if (schema.Columns [10].ColumnName == "BaseTableName") {  	tableIndex = 10;  }  else {  	foreach (DataColumn index in schema.Columns) {  		if (index.ColumnName == "BaseTableName") {  			tableIndex = pos;  			break;  		}  		++pos;  	}  	if (tableIndex == -1) {  		throw new ArgumentOutOfRangeException ("Table name not found.");  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The following statement contains a magic number: tableIndex = 10;  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The following statement contains a magic number: for (pos = 0; pos != reader.FieldCount; ++pos) {  	GXColumnHelper c = new GXColumnHelper ();  	//Get column and table name.  	name = reader.GetName (pos);  	//If table name is returned in schema.  	if (schema != null) {  		tmp = name.LastIndexOf ('.');  		if (tmp != -1) {  			c.Name = name.Substring (tmp + 1);  			c.Table = name.Substring (0' tmp);  		}  		else {  			c.Name = name;  			c.Table = schema.Rows [pos].ItemArray [tableIndex].ToString ();  		}  		if (string.IsNullOrEmpty (c.Table)) {  			throw new Exception ("Database must use SelectUsingAs attribute.");  		}  	}  	else {  		tmp = name.LastIndexOf ('.');  		if (tmp == -1) {  			c.Table = GXDbHelpers.GetTableName (tableType' false' '\0'' null);  			c.Name = name;  			if (name [0] == settings.ColumnQuotation) {  				c.Name = name.Substring (1' name.Length - 2);  			}  		}  		else {  			c.Table = name.Substring (0' tmp);  			c.Name = name.Substring (tmp + 1);  		}  	}  	//If table has change.  	if (lastTable.CompareTo (c.Table) != 0) {  		si = null;  		foreach (var it in tables) {  			if (string.Compare (GXDbHelpers.GetTableName (it.Key' false' '\0'' null' false)' c.Table' true) == 0 || string.Compare (GXDbHelpers.OriginalTableName (it.Key)' c.Table' true) == 0) {  				si = it.Value;  				break;  			}  		}  		//If there is only one table.  		if (si == null) {  			tableType = typeof(T);  		}  		else if (si.Relation != null) {  			tableType = si.Relation.PrimaryTable;  		}  		else {  			tableType = (si.Target as PropertyInfo).ReflectedType;  		}  		properties = GXSqlBuilder.GetProperties (tableType);  		lastTable = c.Table;  		if (tables.Count != 1) {  			//Find Relation table setter.  			foreach (var it in properties) {  				if (it.Value.Relation != null && it.Value.Relation.RelationType != RelationType.OneToOne && it.Value.Relation.RelationType != RelationType.Relation && GXInternal.GetPropertyType (it.Value.Type) == it.Value.Relation.ForeignTable) {  					Dictionary<Type' GXSerializedItem> list;  					if (it.Value.Relation.RelationType == RelationType.ManyToMany) {  						tp = ((ForeignKeyAttribute[])(it.Value.Target as PropertyInfo).GetCustomAttributes (typeof(ForeignKeyAttribute)' true)) [0].MapTable;  						if (!mapTable.ContainsKey (tp)) {  							mapTable.Add (tp' new List<object> ());  							GXSerializedItem t = new GXSerializedItem ();  							list = new Dictionary<Type' GXSerializedItem> ();  							relationDataSetters.Add (tp' list);  							list.Add (it.Value.Relation.ForeignTable' GXSqlBuilder.FindRelation (tp' it.Value.Relation.ForeignTable));  							list.Add (it.Value.Relation.PrimaryTable' GXSqlBuilder.FindRelation (tp' it.Value.Relation.PrimaryTable));  						}  					}  					tp = GXInternal.GetPropertyType (it.Value.Type);  					if (relationDataSetters.ContainsKey (tp)) {  						if (relationDataSetters [tp].ContainsKey (it.Value.Type)) {  							list = relationDataSetters [tp];  							if (list.ContainsKey (tableType)) {  								break;  							}  						}  						else {  							list = new Dictionary<Type' GXSerializedItem> ();  						}  					}  					else {  						list = new Dictionary<Type' GXSerializedItem> ();  						relationDataSetters.Add (tp' list);  					}  					list.Add (tableType' it.Value);  				}  			}  		}  	}  	if (properties.Count != 0 && properties.ContainsKey (c.Name)) {  		columns.Add (pos' c);  		c.Setter = properties [c.Name];  		//Add table index position.  		if (TableIndexes != null && (c.Setter.Attributes & Attributes.PrimaryKey) != 0) {  			TableIndexes.Add (tableType' pos);  		}  	}  	c.TableType = tableType;  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The following statement contains a magic number: if (schema != null) {  	tmp = name.LastIndexOf ('.');  	if (tmp != -1) {  		c.Name = name.Substring (tmp + 1);  		c.Table = name.Substring (0' tmp);  	}  	else {  		c.Name = name;  		c.Table = schema.Rows [pos].ItemArray [tableIndex].ToString ();  	}  	if (string.IsNullOrEmpty (c.Table)) {  		throw new Exception ("Database must use SelectUsingAs attribute.");  	}  }  else {  	tmp = name.LastIndexOf ('.');  	if (tmp == -1) {  		c.Table = GXDbHelpers.GetTableName (tableType' false' '\0'' null);  		c.Name = name;  		if (name [0] == settings.ColumnQuotation) {  			c.Name = name.Substring (1' name.Length - 2);  		}  	}  	else {  		c.Table = name.Substring (0' tmp);  		c.Name = name.Substring (tmp + 1);  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The following statement contains a magic number: if (tmp == -1) {  	c.Table = GXDbHelpers.GetTableName (tableType' false' '\0'' null);  	c.Name = name;  	if (name [0] == settings.ColumnQuotation) {  		c.Name = name.Substring (1' name.Length - 2);  	}  }  else {  	c.Table = name.Substring (0' tmp);  	c.Name = name.Substring (tmp + 1);  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The following statement contains a magic number: if (name [0] == settings.ColumnQuotation) {  	c.Name = name.Substring (1' name.Length - 2);  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,InitializeSelect,The following statement contains a magic number: c.Name = name.Substring (1' name.Length - 2);  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal,The following statement contains a magic number: lock (Connection) {  	if (Connection.State != ConnectionState.Open) {  		Connection.Open ();  	}  	if (typeof(T) == typeof(object[])) {  		objectList = new List<object[]> ();  	}  	else if (GXInternal.IsGenericDataType (typeof(T))) {  		baseList = new List<T> ();  	}  	else {  		tables = new Dictionary<Type' GXSerializedItem> ();  		GetTables (typeof(T)' tables);  		//If there are no relations to other tables.  		if (!tables.ContainsKey (type)) {  			tables.Add (type' null);  		}  		list = new List<T> ();  		columns = new Dictionary<int' GXColumnHelper> ();  		//If we are using 1:n or n:n references.  		if (tables.Count != 1) {  			relationDataSetters = new Dictionary<Type' Dictionary<Type' GXSerializedItem>> ();  			TableIndexes = new Dictionary<Type' int> ();  			objects = new Dictionary<Type' SortedDictionary<object' object>> ();  			mapTables = new Dictionary<Type' List<object>> ();  		}  	}  	//Read column headers.  	if (columns != null) {  		if (Connection is OdbcConnection) {  			using (IDbCommand com = ((OdbcConnection)Connection).CreateCommand ()) {  				com.CommandType = CommandType.Text;  				com.CommandText = query;  				using (IDataReader reader = com.ExecuteReader (CommandBehavior.KeyInfo)) {  					InitializeSelect<T> (reader' this.Builder.Settings' tables' TableIndexes' columns' mapTables' relationDataSetters);  					reader.Close ();  				}  			}  		}  		else if (Connection is OleDbConnection) {  			using (IDbCommand com = ((OleDbConnection)Connection).CreateCommand ()) {  				com.CommandType = CommandType.Text;  				com.CommandText = query;  				using (IDataReader reader = com.ExecuteReader (CommandBehavior.KeyInfo)) {  					InitializeSelect<T> (reader' this.Builder.Settings' tables' TableIndexes' columns' mapTables' relationDataSetters);  					reader.Close ();  				}  			}  		}  	}  	using (IDbCommand com = Connection.CreateCommand ()) {  		com.CommandType = CommandType.Text;  		com.CommandText = query;  		using (IDataReader reader = com.ExecuteReader ()) {  			while (reader.Read ()) {  				UpdatedColumns.Clear ();  				if (values == null) {  					values = new object[reader.FieldCount];  				}  				reader.GetValues (values);  				if (columns != null && columns.Count == 0) {  					InitializeSelect<T> (reader' this.Builder.Settings' tables' TableIndexes' columns' mapTables' relationDataSetters);  				}  				targetTable = null;  				if (list != null) {  					//If we want to read only basic data types example count(*)  					if (GXInternal.IsGenericDataType (type)) {  						list.Add ((T)GXInternal.ChangeType (reader.GetValue (0)' type));  						return list;  					}  					properties = GXSqlBuilder.GetProperties<T> ();  				}  				if (objectList != null) {  					objectList.Add (values);  				}  				else if (baseList != null) {  					baseList.Add ((T)Convert.ChangeType (values [0]' type));  				}  				else {  					item = null;  					//If we are reading values from multiple tables each component is created only once.  					bool isCreated = false;  					//For Oracle reader.FieldCount is too high. For this reason columns.Count is used.  					for (int pos = 0; pos != Math.Min (reader.FieldCount' columns.Count); ++pos) {  						value = null;  						//If we are asking some data from the DB that is not exist on class.  						//This is removed from the interface etc...  						if (!columns.ContainsKey (pos)) {  							continue;  						}  						GXColumnHelper col = columns [pos];  						//If we are reading multiple objects and object has changed.  						if (string.Compare (col.Table' targetTable' true) != 0) {  							isCreated = false;  							if (TableIndexes != null && TableIndexes.ContainsKey (col.TableType)) {  								id = values [TableIndexes [col.TableType]];  								if (id == null || id is DBNull) {  									isCreated = true;  								}  								else {  									if (objects.ContainsKey (col.TableType)) {  										// Check is item already created.                                              										if (objects [col.TableType].ContainsKey (GXInternal.ChangeType (id' col.Setter.Type))) {  											isCreated = true;  										}  									}  									else {  										objects.Add (col.TableType' new SortedDictionary<object' object> ());  									}  								}  							}  							else//If Map table.  							 {  								id = null;  							}  							if (!isCreated) {  								if (!GXInternal.IsGenericDataType (col.TableType) && item == null || item.GetType () != col.TableType) {  									item = GXJsonParser.CreateInstance (col.TableType);  									if (item != null && item.GetType () == typeof(T)) {  										list.Add ((T)item);  									}  									//If we are adding map table.  									if (mapTables != null && item != null && id == null && mapTables.ContainsKey (item.GetType ())) {  										mapTables [item.GetType ()].Add (item);  									}  								}  								if (objects != null && id != null) {  									//Id is not save directly because class might change it's type example from uint to int.  									if (GXInternal.IsGenericDataType (col.Setter.Type)) {  										objects [col.TableType].Add (GXInternal.ChangeType (id' col.Setter.Type)' item);  									}  									else//If we are saving table.  									 {  										objects [col.TableType].Add (id' item);  									}  								}  							}  							targetTable = col.Table;  						}  						if (!isCreated) {  							//If 1:1 relation.  							if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) {  								Type pt = GXInternal.GetPropertyType (col.Setter.Type);  								if (GXInternal.IsGenericDataType (pt)) {  									if (!string.IsNullOrEmpty (values [pos].ToString ())) {  										string[] tmp = values [pos].ToString ().Split (new char[] {  											';'  										});  										Array items = Array.CreateInstance (pt' tmp.Length);  										int pos2 = -1;  										foreach (string it in tmp) {  											items.SetValue (GXInternal.ChangeType (it' pt)' ++pos2);  										}  										value = items;  									}  									else {  										value = Array.CreateInstance (pt' 0);  									}  								}  								else {  									//Columns relations are updated when all data from the row is read.  									UpdatedColumns.Add (new KeyValuePair<int' object> (pos' item));  								}  							}  							else if (col.Setter != null) {  								value = GXInternal.ChangeType (values [pos]' col.Setter.Type);  							}  							else {  								value = values [pos];  							}  							if (value != null) {  								//Access minimum date time is 98' 11' 26.  								if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  									value = DateTime.MinValue;  								}  								if (col.Setter.Set != null) {  									col.Setter.Set (item' value);  								}  								else {  									PropertyInfo pi = col.Setter.Target as PropertyInfo;  									if (pi != null) {  										pi.SetValue (item' value' null);  									}  									else {  										FieldInfo fi = col.Setter.Target as FieldInfo;  										fi.SetValue (item' value);  									}  								}  							}  						}  					}  				}  				//Update columns that was not read yet.  				foreach (var it in UpdatedColumns) {  					GXColumnHelper col = columns [it.Key];  					object relationId = GXInternal.ChangeType (values [it.Key]' col.Setter.Relation.ForeignId.Type);  					if (objects.ContainsKey (col.Setter.Type) && objects [col.Setter.Type].ContainsKey (relationId)) {  						object relationData = objects [col.Setter.Type] [relationId];  						col.Setter.Set (it.Value' relationData);  					}  				}  				UpdatedColumns.Clear ();  			}  			reader.Close ();  		}  	}  	if (list != null) {  		//Update relation data.  		if (relationDataSetters != null) {  			Type mapTable = null;  			foreach (var it in objects) {  				if (relationDataSetters.ContainsKey (it.Key)) {  					var parents = relationDataSetters [it.Key];  					foreach (var p in parents) {  						if (!objects.ContainsKey (p.Key)) {  							continue;  						}  						if (p.Value.Relation.RelationType == RelationType.ManyToMany) {  							mapTable = p.Value.Relation.RelationMapTable.Relation.PrimaryTable;  						}  						SortedDictionary<object' object> parentList = objects [p.Key];  						Dictionary<object' List<object>> parentValues = new Dictionary<object' List<object>> ();  						foreach (var p2 in parentList) {  							parentValues.Add (p2.Key' new List<object> ());  						}  						object pId;  						if (p.Value.Relation.RelationType == RelationType.ManyToMany) {  							foreach (object v in mapTables [mapTable]) {  								pId = relationDataSetters [mapTable] [p.Key].Get (v);  								object cId = relationDataSetters [mapTable] [p.Value.Relation.ForeignTable].Get (v);  								//Loop values and map them to parent id.  								foreach (var c in it.Value) {  									object id2 = p.Value.Relation.ForeignId.Get (c.Value);  									if (id2.Equals (cId)) {  										//Value is null if item is empty in that row.  										if (parentValues.ContainsKey (pId)) {  											parentValues [pId].Add (c.Value);  										}  										break;  									}  								}  							}  						}  						else {  							//Loop values and map them to parent id.  							foreach (var c in it.Value) {  								if (p.Value.Relation.RelationType != RelationType.Relation) {  									//If FK is primary data type like int.  									if (GXInternal.IsGenericDataType (p.Value.Relation.PrimaryId.Type)) {  										pId = p.Value.Relation.PrimaryId.Get (c.Value);  									}  									else//If FK is class.  									 {  										//Get target class.  										pId = p.Value.Relation.PrimaryId.Get (c.Value);  										//With SQLite there might be some empty rows after delete.  										if (pId != null) {  											//Get ID from target class.  											pId = p.Value.Relation.PrimaryId.Relation.ForeignId.Get (pId);  										}  									}  									//Value is null if item is empty in that row.  									if (pId != null && parentValues.ContainsKey (pId)) {  										parentValues [pId].Add (c.Value);  									}  								}  							}  						}  						//Add collections of child values to the parent.  						foreach (var p3 in parentValues) {  							object p2 = parentList [p3.Key];  							GXInternal.SetValue (p2' p.Value.Target' p3.Value);  						}  					}  				}  			}  		}  		return list;  	}  	if (baseList != null) {  		return baseList;  	}  	return objectList;  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal,The following statement contains a magic number: using (IDbCommand com = Connection.CreateCommand ()) {  	com.CommandType = CommandType.Text;  	com.CommandText = query;  	using (IDataReader reader = com.ExecuteReader ()) {  		while (reader.Read ()) {  			UpdatedColumns.Clear ();  			if (values == null) {  				values = new object[reader.FieldCount];  			}  			reader.GetValues (values);  			if (columns != null && columns.Count == 0) {  				InitializeSelect<T> (reader' this.Builder.Settings' tables' TableIndexes' columns' mapTables' relationDataSetters);  			}  			targetTable = null;  			if (list != null) {  				//If we want to read only basic data types example count(*)  				if (GXInternal.IsGenericDataType (type)) {  					list.Add ((T)GXInternal.ChangeType (reader.GetValue (0)' type));  					return list;  				}  				properties = GXSqlBuilder.GetProperties<T> ();  			}  			if (objectList != null) {  				objectList.Add (values);  			}  			else if (baseList != null) {  				baseList.Add ((T)Convert.ChangeType (values [0]' type));  			}  			else {  				item = null;  				//If we are reading values from multiple tables each component is created only once.  				bool isCreated = false;  				//For Oracle reader.FieldCount is too high. For this reason columns.Count is used.  				for (int pos = 0; pos != Math.Min (reader.FieldCount' columns.Count); ++pos) {  					value = null;  					//If we are asking some data from the DB that is not exist on class.  					//This is removed from the interface etc...  					if (!columns.ContainsKey (pos)) {  						continue;  					}  					GXColumnHelper col = columns [pos];  					//If we are reading multiple objects and object has changed.  					if (string.Compare (col.Table' targetTable' true) != 0) {  						isCreated = false;  						if (TableIndexes != null && TableIndexes.ContainsKey (col.TableType)) {  							id = values [TableIndexes [col.TableType]];  							if (id == null || id is DBNull) {  								isCreated = true;  							}  							else {  								if (objects.ContainsKey (col.TableType)) {  									// Check is item already created.                                              									if (objects [col.TableType].ContainsKey (GXInternal.ChangeType (id' col.Setter.Type))) {  										isCreated = true;  									}  								}  								else {  									objects.Add (col.TableType' new SortedDictionary<object' object> ());  								}  							}  						}  						else//If Map table.  						 {  							id = null;  						}  						if (!isCreated) {  							if (!GXInternal.IsGenericDataType (col.TableType) && item == null || item.GetType () != col.TableType) {  								item = GXJsonParser.CreateInstance (col.TableType);  								if (item != null && item.GetType () == typeof(T)) {  									list.Add ((T)item);  								}  								//If we are adding map table.  								if (mapTables != null && item != null && id == null && mapTables.ContainsKey (item.GetType ())) {  									mapTables [item.GetType ()].Add (item);  								}  							}  							if (objects != null && id != null) {  								//Id is not save directly because class might change it's type example from uint to int.  								if (GXInternal.IsGenericDataType (col.Setter.Type)) {  									objects [col.TableType].Add (GXInternal.ChangeType (id' col.Setter.Type)' item);  								}  								else//If we are saving table.  								 {  									objects [col.TableType].Add (id' item);  								}  							}  						}  						targetTable = col.Table;  					}  					if (!isCreated) {  						//If 1:1 relation.  						if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) {  							Type pt = GXInternal.GetPropertyType (col.Setter.Type);  							if (GXInternal.IsGenericDataType (pt)) {  								if (!string.IsNullOrEmpty (values [pos].ToString ())) {  									string[] tmp = values [pos].ToString ().Split (new char[] {  										';'  									});  									Array items = Array.CreateInstance (pt' tmp.Length);  									int pos2 = -1;  									foreach (string it in tmp) {  										items.SetValue (GXInternal.ChangeType (it' pt)' ++pos2);  									}  									value = items;  								}  								else {  									value = Array.CreateInstance (pt' 0);  								}  							}  							else {  								//Columns relations are updated when all data from the row is read.  								UpdatedColumns.Add (new KeyValuePair<int' object> (pos' item));  							}  						}  						else if (col.Setter != null) {  							value = GXInternal.ChangeType (values [pos]' col.Setter.Type);  						}  						else {  							value = values [pos];  						}  						if (value != null) {  							//Access minimum date time is 98' 11' 26.  							if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  								value = DateTime.MinValue;  							}  							if (col.Setter.Set != null) {  								col.Setter.Set (item' value);  							}  							else {  								PropertyInfo pi = col.Setter.Target as PropertyInfo;  								if (pi != null) {  									pi.SetValue (item' value' null);  								}  								else {  									FieldInfo fi = col.Setter.Target as FieldInfo;  									fi.SetValue (item' value);  								}  							}  						}  					}  				}  			}  			//Update columns that was not read yet.  			foreach (var it in UpdatedColumns) {  				GXColumnHelper col = columns [it.Key];  				object relationId = GXInternal.ChangeType (values [it.Key]' col.Setter.Relation.ForeignId.Type);  				if (objects.ContainsKey (col.Setter.Type) && objects [col.Setter.Type].ContainsKey (relationId)) {  					object relationData = objects [col.Setter.Type] [relationId];  					col.Setter.Set (it.Value' relationData);  				}  			}  			UpdatedColumns.Clear ();  		}  		reader.Close ();  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal,The following statement contains a magic number: using (IDataReader reader = com.ExecuteReader ()) {  	while (reader.Read ()) {  		UpdatedColumns.Clear ();  		if (values == null) {  			values = new object[reader.FieldCount];  		}  		reader.GetValues (values);  		if (columns != null && columns.Count == 0) {  			InitializeSelect<T> (reader' this.Builder.Settings' tables' TableIndexes' columns' mapTables' relationDataSetters);  		}  		targetTable = null;  		if (list != null) {  			//If we want to read only basic data types example count(*)  			if (GXInternal.IsGenericDataType (type)) {  				list.Add ((T)GXInternal.ChangeType (reader.GetValue (0)' type));  				return list;  			}  			properties = GXSqlBuilder.GetProperties<T> ();  		}  		if (objectList != null) {  			objectList.Add (values);  		}  		else if (baseList != null) {  			baseList.Add ((T)Convert.ChangeType (values [0]' type));  		}  		else {  			item = null;  			//If we are reading values from multiple tables each component is created only once.  			bool isCreated = false;  			//For Oracle reader.FieldCount is too high. For this reason columns.Count is used.  			for (int pos = 0; pos != Math.Min (reader.FieldCount' columns.Count); ++pos) {  				value = null;  				//If we are asking some data from the DB that is not exist on class.  				//This is removed from the interface etc...  				if (!columns.ContainsKey (pos)) {  					continue;  				}  				GXColumnHelper col = columns [pos];  				//If we are reading multiple objects and object has changed.  				if (string.Compare (col.Table' targetTable' true) != 0) {  					isCreated = false;  					if (TableIndexes != null && TableIndexes.ContainsKey (col.TableType)) {  						id = values [TableIndexes [col.TableType]];  						if (id == null || id is DBNull) {  							isCreated = true;  						}  						else {  							if (objects.ContainsKey (col.TableType)) {  								// Check is item already created.                                              								if (objects [col.TableType].ContainsKey (GXInternal.ChangeType (id' col.Setter.Type))) {  									isCreated = true;  								}  							}  							else {  								objects.Add (col.TableType' new SortedDictionary<object' object> ());  							}  						}  					}  					else//If Map table.  					 {  						id = null;  					}  					if (!isCreated) {  						if (!GXInternal.IsGenericDataType (col.TableType) && item == null || item.GetType () != col.TableType) {  							item = GXJsonParser.CreateInstance (col.TableType);  							if (item != null && item.GetType () == typeof(T)) {  								list.Add ((T)item);  							}  							//If we are adding map table.  							if (mapTables != null && item != null && id == null && mapTables.ContainsKey (item.GetType ())) {  								mapTables [item.GetType ()].Add (item);  							}  						}  						if (objects != null && id != null) {  							//Id is not save directly because class might change it's type example from uint to int.  							if (GXInternal.IsGenericDataType (col.Setter.Type)) {  								objects [col.TableType].Add (GXInternal.ChangeType (id' col.Setter.Type)' item);  							}  							else//If we are saving table.  							 {  								objects [col.TableType].Add (id' item);  							}  						}  					}  					targetTable = col.Table;  				}  				if (!isCreated) {  					//If 1:1 relation.  					if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) {  						Type pt = GXInternal.GetPropertyType (col.Setter.Type);  						if (GXInternal.IsGenericDataType (pt)) {  							if (!string.IsNullOrEmpty (values [pos].ToString ())) {  								string[] tmp = values [pos].ToString ().Split (new char[] {  									';'  								});  								Array items = Array.CreateInstance (pt' tmp.Length);  								int pos2 = -1;  								foreach (string it in tmp) {  									items.SetValue (GXInternal.ChangeType (it' pt)' ++pos2);  								}  								value = items;  							}  							else {  								value = Array.CreateInstance (pt' 0);  							}  						}  						else {  							//Columns relations are updated when all data from the row is read.  							UpdatedColumns.Add (new KeyValuePair<int' object> (pos' item));  						}  					}  					else if (col.Setter != null) {  						value = GXInternal.ChangeType (values [pos]' col.Setter.Type);  					}  					else {  						value = values [pos];  					}  					if (value != null) {  						//Access minimum date time is 98' 11' 26.  						if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  							value = DateTime.MinValue;  						}  						if (col.Setter.Set != null) {  							col.Setter.Set (item' value);  						}  						else {  							PropertyInfo pi = col.Setter.Target as PropertyInfo;  							if (pi != null) {  								pi.SetValue (item' value' null);  							}  							else {  								FieldInfo fi = col.Setter.Target as FieldInfo;  								fi.SetValue (item' value);  							}  						}  					}  				}  			}  		}  		//Update columns that was not read yet.  		foreach (var it in UpdatedColumns) {  			GXColumnHelper col = columns [it.Key];  			object relationId = GXInternal.ChangeType (values [it.Key]' col.Setter.Relation.ForeignId.Type);  			if (objects.ContainsKey (col.Setter.Type) && objects [col.Setter.Type].ContainsKey (relationId)) {  				object relationData = objects [col.Setter.Type] [relationId];  				col.Setter.Set (it.Value' relationData);  			}  		}  		UpdatedColumns.Clear ();  	}  	reader.Close ();  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal,The following statement contains a magic number: while (reader.Read ()) {  	UpdatedColumns.Clear ();  	if (values == null) {  		values = new object[reader.FieldCount];  	}  	reader.GetValues (values);  	if (columns != null && columns.Count == 0) {  		InitializeSelect<T> (reader' this.Builder.Settings' tables' TableIndexes' columns' mapTables' relationDataSetters);  	}  	targetTable = null;  	if (list != null) {  		//If we want to read only basic data types example count(*)  		if (GXInternal.IsGenericDataType (type)) {  			list.Add ((T)GXInternal.ChangeType (reader.GetValue (0)' type));  			return list;  		}  		properties = GXSqlBuilder.GetProperties<T> ();  	}  	if (objectList != null) {  		objectList.Add (values);  	}  	else if (baseList != null) {  		baseList.Add ((T)Convert.ChangeType (values [0]' type));  	}  	else {  		item = null;  		//If we are reading values from multiple tables each component is created only once.  		bool isCreated = false;  		//For Oracle reader.FieldCount is too high. For this reason columns.Count is used.  		for (int pos = 0; pos != Math.Min (reader.FieldCount' columns.Count); ++pos) {  			value = null;  			//If we are asking some data from the DB that is not exist on class.  			//This is removed from the interface etc...  			if (!columns.ContainsKey (pos)) {  				continue;  			}  			GXColumnHelper col = columns [pos];  			//If we are reading multiple objects and object has changed.  			if (string.Compare (col.Table' targetTable' true) != 0) {  				isCreated = false;  				if (TableIndexes != null && TableIndexes.ContainsKey (col.TableType)) {  					id = values [TableIndexes [col.TableType]];  					if (id == null || id is DBNull) {  						isCreated = true;  					}  					else {  						if (objects.ContainsKey (col.TableType)) {  							// Check is item already created.                                              							if (objects [col.TableType].ContainsKey (GXInternal.ChangeType (id' col.Setter.Type))) {  								isCreated = true;  							}  						}  						else {  							objects.Add (col.TableType' new SortedDictionary<object' object> ());  						}  					}  				}  				else//If Map table.  				 {  					id = null;  				}  				if (!isCreated) {  					if (!GXInternal.IsGenericDataType (col.TableType) && item == null || item.GetType () != col.TableType) {  						item = GXJsonParser.CreateInstance (col.TableType);  						if (item != null && item.GetType () == typeof(T)) {  							list.Add ((T)item);  						}  						//If we are adding map table.  						if (mapTables != null && item != null && id == null && mapTables.ContainsKey (item.GetType ())) {  							mapTables [item.GetType ()].Add (item);  						}  					}  					if (objects != null && id != null) {  						//Id is not save directly because class might change it's type example from uint to int.  						if (GXInternal.IsGenericDataType (col.Setter.Type)) {  							objects [col.TableType].Add (GXInternal.ChangeType (id' col.Setter.Type)' item);  						}  						else//If we are saving table.  						 {  							objects [col.TableType].Add (id' item);  						}  					}  				}  				targetTable = col.Table;  			}  			if (!isCreated) {  				//If 1:1 relation.  				if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) {  					Type pt = GXInternal.GetPropertyType (col.Setter.Type);  					if (GXInternal.IsGenericDataType (pt)) {  						if (!string.IsNullOrEmpty (values [pos].ToString ())) {  							string[] tmp = values [pos].ToString ().Split (new char[] {  								';'  							});  							Array items = Array.CreateInstance (pt' tmp.Length);  							int pos2 = -1;  							foreach (string it in tmp) {  								items.SetValue (GXInternal.ChangeType (it' pt)' ++pos2);  							}  							value = items;  						}  						else {  							value = Array.CreateInstance (pt' 0);  						}  					}  					else {  						//Columns relations are updated when all data from the row is read.  						UpdatedColumns.Add (new KeyValuePair<int' object> (pos' item));  					}  				}  				else if (col.Setter != null) {  					value = GXInternal.ChangeType (values [pos]' col.Setter.Type);  				}  				else {  					value = values [pos];  				}  				if (value != null) {  					//Access minimum date time is 98' 11' 26.  					if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  						value = DateTime.MinValue;  					}  					if (col.Setter.Set != null) {  						col.Setter.Set (item' value);  					}  					else {  						PropertyInfo pi = col.Setter.Target as PropertyInfo;  						if (pi != null) {  							pi.SetValue (item' value' null);  						}  						else {  							FieldInfo fi = col.Setter.Target as FieldInfo;  							fi.SetValue (item' value);  						}  					}  				}  			}  		}  	}  	//Update columns that was not read yet.  	foreach (var it in UpdatedColumns) {  		GXColumnHelper col = columns [it.Key];  		object relationId = GXInternal.ChangeType (values [it.Key]' col.Setter.Relation.ForeignId.Type);  		if (objects.ContainsKey (col.Setter.Type) && objects [col.Setter.Type].ContainsKey (relationId)) {  			object relationData = objects [col.Setter.Type] [relationId];  			col.Setter.Set (it.Value' relationData);  		}  	}  	UpdatedColumns.Clear ();  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal,The following statement contains a magic number: if (objectList != null) {  	objectList.Add (values);  }  else if (baseList != null) {  	baseList.Add ((T)Convert.ChangeType (values [0]' type));  }  else {  	item = null;  	//If we are reading values from multiple tables each component is created only once.  	bool isCreated = false;  	//For Oracle reader.FieldCount is too high. For this reason columns.Count is used.  	for (int pos = 0; pos != Math.Min (reader.FieldCount' columns.Count); ++pos) {  		value = null;  		//If we are asking some data from the DB that is not exist on class.  		//This is removed from the interface etc...  		if (!columns.ContainsKey (pos)) {  			continue;  		}  		GXColumnHelper col = columns [pos];  		//If we are reading multiple objects and object has changed.  		if (string.Compare (col.Table' targetTable' true) != 0) {  			isCreated = false;  			if (TableIndexes != null && TableIndexes.ContainsKey (col.TableType)) {  				id = values [TableIndexes [col.TableType]];  				if (id == null || id is DBNull) {  					isCreated = true;  				}  				else {  					if (objects.ContainsKey (col.TableType)) {  						// Check is item already created.                                              						if (objects [col.TableType].ContainsKey (GXInternal.ChangeType (id' col.Setter.Type))) {  							isCreated = true;  						}  					}  					else {  						objects.Add (col.TableType' new SortedDictionary<object' object> ());  					}  				}  			}  			else//If Map table.  			 {  				id = null;  			}  			if (!isCreated) {  				if (!GXInternal.IsGenericDataType (col.TableType) && item == null || item.GetType () != col.TableType) {  					item = GXJsonParser.CreateInstance (col.TableType);  					if (item != null && item.GetType () == typeof(T)) {  						list.Add ((T)item);  					}  					//If we are adding map table.  					if (mapTables != null && item != null && id == null && mapTables.ContainsKey (item.GetType ())) {  						mapTables [item.GetType ()].Add (item);  					}  				}  				if (objects != null && id != null) {  					//Id is not save directly because class might change it's type example from uint to int.  					if (GXInternal.IsGenericDataType (col.Setter.Type)) {  						objects [col.TableType].Add (GXInternal.ChangeType (id' col.Setter.Type)' item);  					}  					else//If we are saving table.  					 {  						objects [col.TableType].Add (id' item);  					}  				}  			}  			targetTable = col.Table;  		}  		if (!isCreated) {  			//If 1:1 relation.  			if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) {  				Type pt = GXInternal.GetPropertyType (col.Setter.Type);  				if (GXInternal.IsGenericDataType (pt)) {  					if (!string.IsNullOrEmpty (values [pos].ToString ())) {  						string[] tmp = values [pos].ToString ().Split (new char[] {  							';'  						});  						Array items = Array.CreateInstance (pt' tmp.Length);  						int pos2 = -1;  						foreach (string it in tmp) {  							items.SetValue (GXInternal.ChangeType (it' pt)' ++pos2);  						}  						value = items;  					}  					else {  						value = Array.CreateInstance (pt' 0);  					}  				}  				else {  					//Columns relations are updated when all data from the row is read.  					UpdatedColumns.Add (new KeyValuePair<int' object> (pos' item));  				}  			}  			else if (col.Setter != null) {  				value = GXInternal.ChangeType (values [pos]' col.Setter.Type);  			}  			else {  				value = values [pos];  			}  			if (value != null) {  				//Access minimum date time is 98' 11' 26.  				if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  					value = DateTime.MinValue;  				}  				if (col.Setter.Set != null) {  					col.Setter.Set (item' value);  				}  				else {  					PropertyInfo pi = col.Setter.Target as PropertyInfo;  					if (pi != null) {  						pi.SetValue (item' value' null);  					}  					else {  						FieldInfo fi = col.Setter.Target as FieldInfo;  						fi.SetValue (item' value);  					}  				}  			}  		}  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal,The following statement contains a magic number: if (baseList != null) {  	baseList.Add ((T)Convert.ChangeType (values [0]' type));  }  else {  	item = null;  	//If we are reading values from multiple tables each component is created only once.  	bool isCreated = false;  	//For Oracle reader.FieldCount is too high. For this reason columns.Count is used.  	for (int pos = 0; pos != Math.Min (reader.FieldCount' columns.Count); ++pos) {  		value = null;  		//If we are asking some data from the DB that is not exist on class.  		//This is removed from the interface etc...  		if (!columns.ContainsKey (pos)) {  			continue;  		}  		GXColumnHelper col = columns [pos];  		//If we are reading multiple objects and object has changed.  		if (string.Compare (col.Table' targetTable' true) != 0) {  			isCreated = false;  			if (TableIndexes != null && TableIndexes.ContainsKey (col.TableType)) {  				id = values [TableIndexes [col.TableType]];  				if (id == null || id is DBNull) {  					isCreated = true;  				}  				else {  					if (objects.ContainsKey (col.TableType)) {  						// Check is item already created.                                              						if (objects [col.TableType].ContainsKey (GXInternal.ChangeType (id' col.Setter.Type))) {  							isCreated = true;  						}  					}  					else {  						objects.Add (col.TableType' new SortedDictionary<object' object> ());  					}  				}  			}  			else//If Map table.  			 {  				id = null;  			}  			if (!isCreated) {  				if (!GXInternal.IsGenericDataType (col.TableType) && item == null || item.GetType () != col.TableType) {  					item = GXJsonParser.CreateInstance (col.TableType);  					if (item != null && item.GetType () == typeof(T)) {  						list.Add ((T)item);  					}  					//If we are adding map table.  					if (mapTables != null && item != null && id == null && mapTables.ContainsKey (item.GetType ())) {  						mapTables [item.GetType ()].Add (item);  					}  				}  				if (objects != null && id != null) {  					//Id is not save directly because class might change it's type example from uint to int.  					if (GXInternal.IsGenericDataType (col.Setter.Type)) {  						objects [col.TableType].Add (GXInternal.ChangeType (id' col.Setter.Type)' item);  					}  					else//If we are saving table.  					 {  						objects [col.TableType].Add (id' item);  					}  				}  			}  			targetTable = col.Table;  		}  		if (!isCreated) {  			//If 1:1 relation.  			if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) {  				Type pt = GXInternal.GetPropertyType (col.Setter.Type);  				if (GXInternal.IsGenericDataType (pt)) {  					if (!string.IsNullOrEmpty (values [pos].ToString ())) {  						string[] tmp = values [pos].ToString ().Split (new char[] {  							';'  						});  						Array items = Array.CreateInstance (pt' tmp.Length);  						int pos2 = -1;  						foreach (string it in tmp) {  							items.SetValue (GXInternal.ChangeType (it' pt)' ++pos2);  						}  						value = items;  					}  					else {  						value = Array.CreateInstance (pt' 0);  					}  				}  				else {  					//Columns relations are updated when all data from the row is read.  					UpdatedColumns.Add (new KeyValuePair<int' object> (pos' item));  				}  			}  			else if (col.Setter != null) {  				value = GXInternal.ChangeType (values [pos]' col.Setter.Type);  			}  			else {  				value = values [pos];  			}  			if (value != null) {  				//Access minimum date time is 98' 11' 26.  				if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  					value = DateTime.MinValue;  				}  				if (col.Setter.Set != null) {  					col.Setter.Set (item' value);  				}  				else {  					PropertyInfo pi = col.Setter.Target as PropertyInfo;  					if (pi != null) {  						pi.SetValue (item' value' null);  					}  					else {  						FieldInfo fi = col.Setter.Target as FieldInfo;  						fi.SetValue (item' value);  					}  				}  			}  		}  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal,The following statement contains a magic number: for (int pos = 0; pos != Math.Min (reader.FieldCount' columns.Count); ++pos) {  	value = null;  	//If we are asking some data from the DB that is not exist on class.  	//This is removed from the interface etc...  	if (!columns.ContainsKey (pos)) {  		continue;  	}  	GXColumnHelper col = columns [pos];  	//If we are reading multiple objects and object has changed.  	if (string.Compare (col.Table' targetTable' true) != 0) {  		isCreated = false;  		if (TableIndexes != null && TableIndexes.ContainsKey (col.TableType)) {  			id = values [TableIndexes [col.TableType]];  			if (id == null || id is DBNull) {  				isCreated = true;  			}  			else {  				if (objects.ContainsKey (col.TableType)) {  					// Check is item already created.                                              					if (objects [col.TableType].ContainsKey (GXInternal.ChangeType (id' col.Setter.Type))) {  						isCreated = true;  					}  				}  				else {  					objects.Add (col.TableType' new SortedDictionary<object' object> ());  				}  			}  		}  		else//If Map table.  		 {  			id = null;  		}  		if (!isCreated) {  			if (!GXInternal.IsGenericDataType (col.TableType) && item == null || item.GetType () != col.TableType) {  				item = GXJsonParser.CreateInstance (col.TableType);  				if (item != null && item.GetType () == typeof(T)) {  					list.Add ((T)item);  				}  				//If we are adding map table.  				if (mapTables != null && item != null && id == null && mapTables.ContainsKey (item.GetType ())) {  					mapTables [item.GetType ()].Add (item);  				}  			}  			if (objects != null && id != null) {  				//Id is not save directly because class might change it's type example from uint to int.  				if (GXInternal.IsGenericDataType (col.Setter.Type)) {  					objects [col.TableType].Add (GXInternal.ChangeType (id' col.Setter.Type)' item);  				}  				else//If we are saving table.  				 {  					objects [col.TableType].Add (id' item);  				}  			}  		}  		targetTable = col.Table;  	}  	if (!isCreated) {  		//If 1:1 relation.  		if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) {  			Type pt = GXInternal.GetPropertyType (col.Setter.Type);  			if (GXInternal.IsGenericDataType (pt)) {  				if (!string.IsNullOrEmpty (values [pos].ToString ())) {  					string[] tmp = values [pos].ToString ().Split (new char[] {  						';'  					});  					Array items = Array.CreateInstance (pt' tmp.Length);  					int pos2 = -1;  					foreach (string it in tmp) {  						items.SetValue (GXInternal.ChangeType (it' pt)' ++pos2);  					}  					value = items;  				}  				else {  					value = Array.CreateInstance (pt' 0);  				}  			}  			else {  				//Columns relations are updated when all data from the row is read.  				UpdatedColumns.Add (new KeyValuePair<int' object> (pos' item));  			}  		}  		else if (col.Setter != null) {  			value = GXInternal.ChangeType (values [pos]' col.Setter.Type);  		}  		else {  			value = values [pos];  		}  		if (value != null) {  			//Access minimum date time is 98' 11' 26.  			if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  				value = DateTime.MinValue;  			}  			if (col.Setter.Set != null) {  				col.Setter.Set (item' value);  			}  			else {  				PropertyInfo pi = col.Setter.Target as PropertyInfo;  				if (pi != null) {  					pi.SetValue (item' value' null);  				}  				else {  					FieldInfo fi = col.Setter.Target as FieldInfo;  					fi.SetValue (item' value);  				}  			}  		}  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal,The following statement contains a magic number: if (!isCreated) {  	//If 1:1 relation.  	if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) {  		Type pt = GXInternal.GetPropertyType (col.Setter.Type);  		if (GXInternal.IsGenericDataType (pt)) {  			if (!string.IsNullOrEmpty (values [pos].ToString ())) {  				string[] tmp = values [pos].ToString ().Split (new char[] {  					';'  				});  				Array items = Array.CreateInstance (pt' tmp.Length);  				int pos2 = -1;  				foreach (string it in tmp) {  					items.SetValue (GXInternal.ChangeType (it' pt)' ++pos2);  				}  				value = items;  			}  			else {  				value = Array.CreateInstance (pt' 0);  			}  		}  		else {  			//Columns relations are updated when all data from the row is read.  			UpdatedColumns.Add (new KeyValuePair<int' object> (pos' item));  		}  	}  	else if (col.Setter != null) {  		value = GXInternal.ChangeType (values [pos]' col.Setter.Type);  	}  	else {  		value = values [pos];  	}  	if (value != null) {  		//Access minimum date time is 98' 11' 26.  		if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  			value = DateTime.MinValue;  		}  		if (col.Setter.Set != null) {  			col.Setter.Set (item' value);  		}  		else {  			PropertyInfo pi = col.Setter.Target as PropertyInfo;  			if (pi != null) {  				pi.SetValue (item' value' null);  			}  			else {  				FieldInfo fi = col.Setter.Target as FieldInfo;  				fi.SetValue (item' value);  			}  		}  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal,The following statement contains a magic number: if (value != null) {  	//Access minimum date time is 98' 11' 26.  	if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  		value = DateTime.MinValue;  	}  	if (col.Setter.Set != null) {  		col.Setter.Set (item' value);  	}  	else {  		PropertyInfo pi = col.Setter.Target as PropertyInfo;  		if (pi != null) {  			pi.SetValue (item' value' null);  		}  		else {  			FieldInfo fi = col.Setter.Target as FieldInfo;  			fi.SetValue (item' value);  		}  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal,The following statement contains a magic number: if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  	value = DateTime.MinValue;  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal2,The following statement contains a magic number: lock (Connection) {  	if (Connection.State != ConnectionState.Open) {  		Connection.Open ();  	}  	if (typeof(T) == typeof(object[])) {  		objectList = new List<object[]> ();  	}  	else if (GXInternal.IsGenericDataType (typeof(T))) {  		baseList = new List<T> ();  	}  	else {  		tables = new Dictionary<Type' GXSerializedItem> ();  		Dictionary<Type' GXSerializedItem> tmp = new Dictionary<Type' GXSerializedItem> ();  		GetTables (typeof(T)' tmp);  		//If there are no relations to other tables.  		if (!tmp.ContainsKey (type)) {  			tmp.Add (type' null);  		}  		///Loop throw all tables and add only selected tables.  		foreach (var it in tmp) {  			if (arg.Columns.ColumnList.ContainsKey (it.Key)) {  				tables.Add (it.Key' it.Value);  			}  		}  		list = new List<T> ();  		columns = new Dictionary<int' GXColumnHelper> ();  		//If we are using 1:n or n:n references.  		if (tables.Count != 1) {  			relationDataSetters = new Dictionary<Type' Dictionary<Type' GXSerializedItem>> ();  			TableIndexes = new Dictionary<Type' int> ();  			objects = new Dictionary<Type' SortedDictionary<object' object>> ();  			mapTables = new Dictionary<Type' List<object>> ();  		}  	}  	//Read column headers.  	if (columns != null) {  		if (Connection is OdbcConnection) {  			using (IDbCommand com = ((OdbcConnection)Connection).CreateCommand ()) {  				com.CommandType = CommandType.Text;  				com.CommandText = query;  				using (IDataReader reader = com.ExecuteReader (CommandBehavior.KeyInfo)) {  					InitializeSelect<T> (reader' this.Builder.Settings' tables' TableIndexes' columns' mapTables' relationDataSetters);  					reader.Close ();  				}  			}  		}  		else if (Connection is OleDbConnection) {  			using (IDbCommand com = ((OleDbConnection)Connection).CreateCommand ()) {  				com.CommandType = CommandType.Text;  				com.CommandText = query;  				using (IDataReader reader = com.ExecuteReader (CommandBehavior.KeyInfo)) {  					InitializeSelect<T> (reader' this.Builder.Settings' tables' TableIndexes' columns' mapTables' relationDataSetters);  					reader.Close ();  				}  			}  		}  	}  	using (IDbCommand com = Connection.CreateCommand ()) {  		com.CommandType = CommandType.Text;  		com.CommandText = query;  		using (IDataReader reader = com.ExecuteReader ()) {  			while (reader.Read ()) {  				UpdatedColumns.Clear ();  				if (values == null) {  					values = new object[reader.FieldCount];  				}  				reader.GetValues (values);  				if (columns != null && columns.Count == 0) {  					InitializeSelect<T> (reader' this.Builder.Settings' tables' TableIndexes' columns' mapTables' relationDataSetters);  				}  				targetTable = null;  				if (list != null) {  					//If we want to read only basic data types example count(*)  					if (GXInternal.IsGenericDataType (type)) {  						list.Add ((T)GXInternal.ChangeType (reader.GetValue (0)' type));  						return list;  					}  					properties = GXSqlBuilder.GetProperties<T> ();  				}  				if (objectList != null) {  					objectList.Add (values);  				}  				else if (baseList != null) {  					baseList.Add ((T)Convert.ChangeType (values [0]' type));  				}  				else {  					item = null;  					//If we are reading values from multiple tables each component is created only once.  					bool isCreated = false;  					//For Oracle reader.FieldCount is too high. For this reason columns.Count is used.  					for (int pos = 0; pos != Math.Min (reader.FieldCount' columns.Count); ++pos) {  						value = null;  						//If we are asking some data from the DB that is not exist on class.  						//This is removed from the interface etc...  						if (!columns.ContainsKey (pos)) {  							continue;  						}  						GXColumnHelper col = columns [pos];  						//If we are reading multiple objects and object has changed.  						if (string.Compare (col.Table' targetTable' true) != 0) {  							isCreated = false;  							if (TableIndexes != null && TableIndexes.ContainsKey (col.TableType)) {  								id = values [TableIndexes [col.TableType]];  								if (id == null || id is DBNull) {  									isCreated = true;  								}  								else {  									if (objects.ContainsKey (col.TableType)) {  										// Check is item already created.                                              										if (objects [col.TableType].ContainsKey (GXInternal.ChangeType (id' col.Setter.Type))) {  											isCreated = true;  										}  									}  									else {  										objects.Add (col.TableType' new SortedDictionary<object' object> ());  									}  								}  							}  							else//If Map table.  							 {  								id = null;  							}  							if (!isCreated) {  								if (!GXInternal.IsGenericDataType (col.TableType) && item == null || item.GetType () != col.TableType) {  									item = GXJsonParser.CreateInstance (col.TableType);  									if (item != null && item.GetType () == typeof(T)) {  										list.Add ((T)item);  									}  									//If we are adding map table.  									if (mapTables != null && item != null && id == null && mapTables.ContainsKey (item.GetType ())) {  										mapTables [item.GetType ()].Add (item);  									}  								}  								if (objects != null && id != null) {  									//Id is not save directly because class might change it's type example from uint to int.  									if (GXInternal.IsGenericDataType (col.Setter.Type)) {  										objects [col.TableType].Add (GXInternal.ChangeType (id' col.Setter.Type)' item);  									}  									else//If we are saving table.  									 {  										objects [col.TableType].Add (id' item);  									}  								}  							}  							targetTable = col.Table;  						}  						if (!isCreated) {  							//If 1:1 relation.  							if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) {  								Type pt = GXInternal.GetPropertyType (col.Setter.Type);  								if (GXInternal.IsGenericDataType (pt)) {  									if (!string.IsNullOrEmpty (values [pos].ToString ())) {  										string[] tmp = values [pos].ToString ().Split (new char[] {  											';'  										});  										Array items = Array.CreateInstance (pt' tmp.Length);  										int pos2 = -1;  										foreach (string it in tmp) {  											items.SetValue (GXInternal.ChangeType (it' pt)' ++pos2);  										}  										value = items;  									}  									else {  										value = Array.CreateInstance (pt' 0);  									}  								}  								else {  									//Columns relations are updated when all data from the row is read.  									UpdatedColumns.Add (new KeyValuePair<int' object> (pos' item));  								}  							}  							else if (col.Setter != null) {  								//Get value if not class.  								if (col.Setter.Type.IsArray || GXInternal.IsGenericDataType (col.Setter.Type)) {  									value = GXInternal.ChangeType (values [pos]' col.Setter.Type);  								}  								else//Parameter type is class. Set to null.  								 {  									value = null;  								}  							}  							else {  								value = values [pos];  							}  							if (value != null) {  								//Access minimum date time is 98' 11' 26.  								if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  									value = DateTime.MinValue;  								}  								if (col.Setter.Set != null) {  									col.Setter.Set (item' value);  								}  								else {  									PropertyInfo pi = col.Setter.Target as PropertyInfo;  									if (pi != null) {  										pi.SetValue (item' value' null);  									}  									else {  										FieldInfo fi = col.Setter.Target as FieldInfo;  										fi.SetValue (item' value);  									}  								}  							}  						}  					}  				}  				//Update columns that was not read yet.  				foreach (var it in UpdatedColumns) {  					GXColumnHelper col = columns [it.Key];  					object relationId = GXInternal.ChangeType (values [it.Key]' col.Setter.Relation.ForeignId.Type);  					if (objects.ContainsKey (col.Setter.Type) && objects [col.Setter.Type].ContainsKey (relationId)) {  						object relationData = objects [col.Setter.Type] [relationId];  						col.Setter.Set (it.Value' relationData);  					}  				}  				UpdatedColumns.Clear ();  			}  			reader.Close ();  		}  	}  	if (list != null) {  		//Update relation data.  		if (relationDataSetters != null) {  			Type mapTable = null;  			foreach (var it in objects) {  				if (relationDataSetters.ContainsKey (it.Key)) {  					var parents = relationDataSetters [it.Key];  					foreach (var p in parents) {  						if (!objects.ContainsKey (p.Key)) {  							continue;  						}  						if (p.Value.Relation.RelationType == RelationType.ManyToMany) {  							mapTable = p.Value.Relation.RelationMapTable.Relation.PrimaryTable;  						}  						SortedDictionary<object' object> parentList = objects [p.Key];  						Dictionary<object' List<object>> parentValues = new Dictionary<object' List<object>> ();  						foreach (var p2 in parentList) {  							parentValues.Add (p2.Key' new List<object> ());  						}  						object pId;  						if (p.Value.Relation.RelationType == RelationType.ManyToMany) {  							foreach (object v in mapTables [mapTable]) {  								pId = relationDataSetters [mapTable] [p.Key].Get (v);  								object cId = relationDataSetters [mapTable] [p.Value.Relation.ForeignTable].Get (v);  								//Loop values and map them to parent id.  								foreach (var c in it.Value) {  									object id2 = p.Value.Relation.ForeignId.Get (c.Value);  									if (id2.Equals (cId)) {  										//Value is null if item is empty in that row.  										if (parentValues.ContainsKey (pId)) {  											parentValues [pId].Add (c.Value);  										}  										break;  									}  								}  							}  						}  						else {  							//Loop values and map them to parent id.  							foreach (var c in it.Value) {  								if (p.Value.Relation.RelationType != RelationType.Relation) {  									//If FK is primary data type like int.  									if (GXInternal.IsGenericDataType (p.Value.Relation.PrimaryId.Type)) {  										pId = p.Value.Relation.PrimaryId.Get (c.Value);  									}  									else//If FK is class.  									 {  										//Get target class.  										pId = p.Value.Relation.PrimaryId.Get (c.Value);  										//With SQLite there might be some empty rows after delete.  										if (pId != null) {  											//Get ID from target class.  											pId = p.Value.Relation.PrimaryId.Relation.ForeignId.Get (pId);  										}  									}  									//Value is null if item is empty in that row.  									if (pId != null && parentValues.ContainsKey (pId)) {  										parentValues [pId].Add (c.Value);  									}  								}  							}  						}  						//Add collections of child values to the parent.  						foreach (var p3 in parentValues) {  							object p2 = parentList [p3.Key];  							GXInternal.SetValue (p2' p.Value.Target' p3.Value);  						}  					}  				}  			}  		}  		return list;  	}  	if (baseList != null) {  		return baseList;  	}  	return objectList;  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal2,The following statement contains a magic number: using (IDbCommand com = Connection.CreateCommand ()) {  	com.CommandType = CommandType.Text;  	com.CommandText = query;  	using (IDataReader reader = com.ExecuteReader ()) {  		while (reader.Read ()) {  			UpdatedColumns.Clear ();  			if (values == null) {  				values = new object[reader.FieldCount];  			}  			reader.GetValues (values);  			if (columns != null && columns.Count == 0) {  				InitializeSelect<T> (reader' this.Builder.Settings' tables' TableIndexes' columns' mapTables' relationDataSetters);  			}  			targetTable = null;  			if (list != null) {  				//If we want to read only basic data types example count(*)  				if (GXInternal.IsGenericDataType (type)) {  					list.Add ((T)GXInternal.ChangeType (reader.GetValue (0)' type));  					return list;  				}  				properties = GXSqlBuilder.GetProperties<T> ();  			}  			if (objectList != null) {  				objectList.Add (values);  			}  			else if (baseList != null) {  				baseList.Add ((T)Convert.ChangeType (values [0]' type));  			}  			else {  				item = null;  				//If we are reading values from multiple tables each component is created only once.  				bool isCreated = false;  				//For Oracle reader.FieldCount is too high. For this reason columns.Count is used.  				for (int pos = 0; pos != Math.Min (reader.FieldCount' columns.Count); ++pos) {  					value = null;  					//If we are asking some data from the DB that is not exist on class.  					//This is removed from the interface etc...  					if (!columns.ContainsKey (pos)) {  						continue;  					}  					GXColumnHelper col = columns [pos];  					//If we are reading multiple objects and object has changed.  					if (string.Compare (col.Table' targetTable' true) != 0) {  						isCreated = false;  						if (TableIndexes != null && TableIndexes.ContainsKey (col.TableType)) {  							id = values [TableIndexes [col.TableType]];  							if (id == null || id is DBNull) {  								isCreated = true;  							}  							else {  								if (objects.ContainsKey (col.TableType)) {  									// Check is item already created.                                              									if (objects [col.TableType].ContainsKey (GXInternal.ChangeType (id' col.Setter.Type))) {  										isCreated = true;  									}  								}  								else {  									objects.Add (col.TableType' new SortedDictionary<object' object> ());  								}  							}  						}  						else//If Map table.  						 {  							id = null;  						}  						if (!isCreated) {  							if (!GXInternal.IsGenericDataType (col.TableType) && item == null || item.GetType () != col.TableType) {  								item = GXJsonParser.CreateInstance (col.TableType);  								if (item != null && item.GetType () == typeof(T)) {  									list.Add ((T)item);  								}  								//If we are adding map table.  								if (mapTables != null && item != null && id == null && mapTables.ContainsKey (item.GetType ())) {  									mapTables [item.GetType ()].Add (item);  								}  							}  							if (objects != null && id != null) {  								//Id is not save directly because class might change it's type example from uint to int.  								if (GXInternal.IsGenericDataType (col.Setter.Type)) {  									objects [col.TableType].Add (GXInternal.ChangeType (id' col.Setter.Type)' item);  								}  								else//If we are saving table.  								 {  									objects [col.TableType].Add (id' item);  								}  							}  						}  						targetTable = col.Table;  					}  					if (!isCreated) {  						//If 1:1 relation.  						if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) {  							Type pt = GXInternal.GetPropertyType (col.Setter.Type);  							if (GXInternal.IsGenericDataType (pt)) {  								if (!string.IsNullOrEmpty (values [pos].ToString ())) {  									string[] tmp = values [pos].ToString ().Split (new char[] {  										';'  									});  									Array items = Array.CreateInstance (pt' tmp.Length);  									int pos2 = -1;  									foreach (string it in tmp) {  										items.SetValue (GXInternal.ChangeType (it' pt)' ++pos2);  									}  									value = items;  								}  								else {  									value = Array.CreateInstance (pt' 0);  								}  							}  							else {  								//Columns relations are updated when all data from the row is read.  								UpdatedColumns.Add (new KeyValuePair<int' object> (pos' item));  							}  						}  						else if (col.Setter != null) {  							//Get value if not class.  							if (col.Setter.Type.IsArray || GXInternal.IsGenericDataType (col.Setter.Type)) {  								value = GXInternal.ChangeType (values [pos]' col.Setter.Type);  							}  							else//Parameter type is class. Set to null.  							 {  								value = null;  							}  						}  						else {  							value = values [pos];  						}  						if (value != null) {  							//Access minimum date time is 98' 11' 26.  							if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  								value = DateTime.MinValue;  							}  							if (col.Setter.Set != null) {  								col.Setter.Set (item' value);  							}  							else {  								PropertyInfo pi = col.Setter.Target as PropertyInfo;  								if (pi != null) {  									pi.SetValue (item' value' null);  								}  								else {  									FieldInfo fi = col.Setter.Target as FieldInfo;  									fi.SetValue (item' value);  								}  							}  						}  					}  				}  			}  			//Update columns that was not read yet.  			foreach (var it in UpdatedColumns) {  				GXColumnHelper col = columns [it.Key];  				object relationId = GXInternal.ChangeType (values [it.Key]' col.Setter.Relation.ForeignId.Type);  				if (objects.ContainsKey (col.Setter.Type) && objects [col.Setter.Type].ContainsKey (relationId)) {  					object relationData = objects [col.Setter.Type] [relationId];  					col.Setter.Set (it.Value' relationData);  				}  			}  			UpdatedColumns.Clear ();  		}  		reader.Close ();  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal2,The following statement contains a magic number: using (IDataReader reader = com.ExecuteReader ()) {  	while (reader.Read ()) {  		UpdatedColumns.Clear ();  		if (values == null) {  			values = new object[reader.FieldCount];  		}  		reader.GetValues (values);  		if (columns != null && columns.Count == 0) {  			InitializeSelect<T> (reader' this.Builder.Settings' tables' TableIndexes' columns' mapTables' relationDataSetters);  		}  		targetTable = null;  		if (list != null) {  			//If we want to read only basic data types example count(*)  			if (GXInternal.IsGenericDataType (type)) {  				list.Add ((T)GXInternal.ChangeType (reader.GetValue (0)' type));  				return list;  			}  			properties = GXSqlBuilder.GetProperties<T> ();  		}  		if (objectList != null) {  			objectList.Add (values);  		}  		else if (baseList != null) {  			baseList.Add ((T)Convert.ChangeType (values [0]' type));  		}  		else {  			item = null;  			//If we are reading values from multiple tables each component is created only once.  			bool isCreated = false;  			//For Oracle reader.FieldCount is too high. For this reason columns.Count is used.  			for (int pos = 0; pos != Math.Min (reader.FieldCount' columns.Count); ++pos) {  				value = null;  				//If we are asking some data from the DB that is not exist on class.  				//This is removed from the interface etc...  				if (!columns.ContainsKey (pos)) {  					continue;  				}  				GXColumnHelper col = columns [pos];  				//If we are reading multiple objects and object has changed.  				if (string.Compare (col.Table' targetTable' true) != 0) {  					isCreated = false;  					if (TableIndexes != null && TableIndexes.ContainsKey (col.TableType)) {  						id = values [TableIndexes [col.TableType]];  						if (id == null || id is DBNull) {  							isCreated = true;  						}  						else {  							if (objects.ContainsKey (col.TableType)) {  								// Check is item already created.                                              								if (objects [col.TableType].ContainsKey (GXInternal.ChangeType (id' col.Setter.Type))) {  									isCreated = true;  								}  							}  							else {  								objects.Add (col.TableType' new SortedDictionary<object' object> ());  							}  						}  					}  					else//If Map table.  					 {  						id = null;  					}  					if (!isCreated) {  						if (!GXInternal.IsGenericDataType (col.TableType) && item == null || item.GetType () != col.TableType) {  							item = GXJsonParser.CreateInstance (col.TableType);  							if (item != null && item.GetType () == typeof(T)) {  								list.Add ((T)item);  							}  							//If we are adding map table.  							if (mapTables != null && item != null && id == null && mapTables.ContainsKey (item.GetType ())) {  								mapTables [item.GetType ()].Add (item);  							}  						}  						if (objects != null && id != null) {  							//Id is not save directly because class might change it's type example from uint to int.  							if (GXInternal.IsGenericDataType (col.Setter.Type)) {  								objects [col.TableType].Add (GXInternal.ChangeType (id' col.Setter.Type)' item);  							}  							else//If we are saving table.  							 {  								objects [col.TableType].Add (id' item);  							}  						}  					}  					targetTable = col.Table;  				}  				if (!isCreated) {  					//If 1:1 relation.  					if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) {  						Type pt = GXInternal.GetPropertyType (col.Setter.Type);  						if (GXInternal.IsGenericDataType (pt)) {  							if (!string.IsNullOrEmpty (values [pos].ToString ())) {  								string[] tmp = values [pos].ToString ().Split (new char[] {  									';'  								});  								Array items = Array.CreateInstance (pt' tmp.Length);  								int pos2 = -1;  								foreach (string it in tmp) {  									items.SetValue (GXInternal.ChangeType (it' pt)' ++pos2);  								}  								value = items;  							}  							else {  								value = Array.CreateInstance (pt' 0);  							}  						}  						else {  							//Columns relations are updated when all data from the row is read.  							UpdatedColumns.Add (new KeyValuePair<int' object> (pos' item));  						}  					}  					else if (col.Setter != null) {  						//Get value if not class.  						if (col.Setter.Type.IsArray || GXInternal.IsGenericDataType (col.Setter.Type)) {  							value = GXInternal.ChangeType (values [pos]' col.Setter.Type);  						}  						else//Parameter type is class. Set to null.  						 {  							value = null;  						}  					}  					else {  						value = values [pos];  					}  					if (value != null) {  						//Access minimum date time is 98' 11' 26.  						if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  							value = DateTime.MinValue;  						}  						if (col.Setter.Set != null) {  							col.Setter.Set (item' value);  						}  						else {  							PropertyInfo pi = col.Setter.Target as PropertyInfo;  							if (pi != null) {  								pi.SetValue (item' value' null);  							}  							else {  								FieldInfo fi = col.Setter.Target as FieldInfo;  								fi.SetValue (item' value);  							}  						}  					}  				}  			}  		}  		//Update columns that was not read yet.  		foreach (var it in UpdatedColumns) {  			GXColumnHelper col = columns [it.Key];  			object relationId = GXInternal.ChangeType (values [it.Key]' col.Setter.Relation.ForeignId.Type);  			if (objects.ContainsKey (col.Setter.Type) && objects [col.Setter.Type].ContainsKey (relationId)) {  				object relationData = objects [col.Setter.Type] [relationId];  				col.Setter.Set (it.Value' relationData);  			}  		}  		UpdatedColumns.Clear ();  	}  	reader.Close ();  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal2,The following statement contains a magic number: while (reader.Read ()) {  	UpdatedColumns.Clear ();  	if (values == null) {  		values = new object[reader.FieldCount];  	}  	reader.GetValues (values);  	if (columns != null && columns.Count == 0) {  		InitializeSelect<T> (reader' this.Builder.Settings' tables' TableIndexes' columns' mapTables' relationDataSetters);  	}  	targetTable = null;  	if (list != null) {  		//If we want to read only basic data types example count(*)  		if (GXInternal.IsGenericDataType (type)) {  			list.Add ((T)GXInternal.ChangeType (reader.GetValue (0)' type));  			return list;  		}  		properties = GXSqlBuilder.GetProperties<T> ();  	}  	if (objectList != null) {  		objectList.Add (values);  	}  	else if (baseList != null) {  		baseList.Add ((T)Convert.ChangeType (values [0]' type));  	}  	else {  		item = null;  		//If we are reading values from multiple tables each component is created only once.  		bool isCreated = false;  		//For Oracle reader.FieldCount is too high. For this reason columns.Count is used.  		for (int pos = 0; pos != Math.Min (reader.FieldCount' columns.Count); ++pos) {  			value = null;  			//If we are asking some data from the DB that is not exist on class.  			//This is removed from the interface etc...  			if (!columns.ContainsKey (pos)) {  				continue;  			}  			GXColumnHelper col = columns [pos];  			//If we are reading multiple objects and object has changed.  			if (string.Compare (col.Table' targetTable' true) != 0) {  				isCreated = false;  				if (TableIndexes != null && TableIndexes.ContainsKey (col.TableType)) {  					id = values [TableIndexes [col.TableType]];  					if (id == null || id is DBNull) {  						isCreated = true;  					}  					else {  						if (objects.ContainsKey (col.TableType)) {  							// Check is item already created.                                              							if (objects [col.TableType].ContainsKey (GXInternal.ChangeType (id' col.Setter.Type))) {  								isCreated = true;  							}  						}  						else {  							objects.Add (col.TableType' new SortedDictionary<object' object> ());  						}  					}  				}  				else//If Map table.  				 {  					id = null;  				}  				if (!isCreated) {  					if (!GXInternal.IsGenericDataType (col.TableType) && item == null || item.GetType () != col.TableType) {  						item = GXJsonParser.CreateInstance (col.TableType);  						if (item != null && item.GetType () == typeof(T)) {  							list.Add ((T)item);  						}  						//If we are adding map table.  						if (mapTables != null && item != null && id == null && mapTables.ContainsKey (item.GetType ())) {  							mapTables [item.GetType ()].Add (item);  						}  					}  					if (objects != null && id != null) {  						//Id is not save directly because class might change it's type example from uint to int.  						if (GXInternal.IsGenericDataType (col.Setter.Type)) {  							objects [col.TableType].Add (GXInternal.ChangeType (id' col.Setter.Type)' item);  						}  						else//If we are saving table.  						 {  							objects [col.TableType].Add (id' item);  						}  					}  				}  				targetTable = col.Table;  			}  			if (!isCreated) {  				//If 1:1 relation.  				if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) {  					Type pt = GXInternal.GetPropertyType (col.Setter.Type);  					if (GXInternal.IsGenericDataType (pt)) {  						if (!string.IsNullOrEmpty (values [pos].ToString ())) {  							string[] tmp = values [pos].ToString ().Split (new char[] {  								';'  							});  							Array items = Array.CreateInstance (pt' tmp.Length);  							int pos2 = -1;  							foreach (string it in tmp) {  								items.SetValue (GXInternal.ChangeType (it' pt)' ++pos2);  							}  							value = items;  						}  						else {  							value = Array.CreateInstance (pt' 0);  						}  					}  					else {  						//Columns relations are updated when all data from the row is read.  						UpdatedColumns.Add (new KeyValuePair<int' object> (pos' item));  					}  				}  				else if (col.Setter != null) {  					//Get value if not class.  					if (col.Setter.Type.IsArray || GXInternal.IsGenericDataType (col.Setter.Type)) {  						value = GXInternal.ChangeType (values [pos]' col.Setter.Type);  					}  					else//Parameter type is class. Set to null.  					 {  						value = null;  					}  				}  				else {  					value = values [pos];  				}  				if (value != null) {  					//Access minimum date time is 98' 11' 26.  					if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  						value = DateTime.MinValue;  					}  					if (col.Setter.Set != null) {  						col.Setter.Set (item' value);  					}  					else {  						PropertyInfo pi = col.Setter.Target as PropertyInfo;  						if (pi != null) {  							pi.SetValue (item' value' null);  						}  						else {  							FieldInfo fi = col.Setter.Target as FieldInfo;  							fi.SetValue (item' value);  						}  					}  				}  			}  		}  	}  	//Update columns that was not read yet.  	foreach (var it in UpdatedColumns) {  		GXColumnHelper col = columns [it.Key];  		object relationId = GXInternal.ChangeType (values [it.Key]' col.Setter.Relation.ForeignId.Type);  		if (objects.ContainsKey (col.Setter.Type) && objects [col.Setter.Type].ContainsKey (relationId)) {  			object relationData = objects [col.Setter.Type] [relationId];  			col.Setter.Set (it.Value' relationData);  		}  	}  	UpdatedColumns.Clear ();  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal2,The following statement contains a magic number: if (objectList != null) {  	objectList.Add (values);  }  else if (baseList != null) {  	baseList.Add ((T)Convert.ChangeType (values [0]' type));  }  else {  	item = null;  	//If we are reading values from multiple tables each component is created only once.  	bool isCreated = false;  	//For Oracle reader.FieldCount is too high. For this reason columns.Count is used.  	for (int pos = 0; pos != Math.Min (reader.FieldCount' columns.Count); ++pos) {  		value = null;  		//If we are asking some data from the DB that is not exist on class.  		//This is removed from the interface etc...  		if (!columns.ContainsKey (pos)) {  			continue;  		}  		GXColumnHelper col = columns [pos];  		//If we are reading multiple objects and object has changed.  		if (string.Compare (col.Table' targetTable' true) != 0) {  			isCreated = false;  			if (TableIndexes != null && TableIndexes.ContainsKey (col.TableType)) {  				id = values [TableIndexes [col.TableType]];  				if (id == null || id is DBNull) {  					isCreated = true;  				}  				else {  					if (objects.ContainsKey (col.TableType)) {  						// Check is item already created.                                              						if (objects [col.TableType].ContainsKey (GXInternal.ChangeType (id' col.Setter.Type))) {  							isCreated = true;  						}  					}  					else {  						objects.Add (col.TableType' new SortedDictionary<object' object> ());  					}  				}  			}  			else//If Map table.  			 {  				id = null;  			}  			if (!isCreated) {  				if (!GXInternal.IsGenericDataType (col.TableType) && item == null || item.GetType () != col.TableType) {  					item = GXJsonParser.CreateInstance (col.TableType);  					if (item != null && item.GetType () == typeof(T)) {  						list.Add ((T)item);  					}  					//If we are adding map table.  					if (mapTables != null && item != null && id == null && mapTables.ContainsKey (item.GetType ())) {  						mapTables [item.GetType ()].Add (item);  					}  				}  				if (objects != null && id != null) {  					//Id is not save directly because class might change it's type example from uint to int.  					if (GXInternal.IsGenericDataType (col.Setter.Type)) {  						objects [col.TableType].Add (GXInternal.ChangeType (id' col.Setter.Type)' item);  					}  					else//If we are saving table.  					 {  						objects [col.TableType].Add (id' item);  					}  				}  			}  			targetTable = col.Table;  		}  		if (!isCreated) {  			//If 1:1 relation.  			if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) {  				Type pt = GXInternal.GetPropertyType (col.Setter.Type);  				if (GXInternal.IsGenericDataType (pt)) {  					if (!string.IsNullOrEmpty (values [pos].ToString ())) {  						string[] tmp = values [pos].ToString ().Split (new char[] {  							';'  						});  						Array items = Array.CreateInstance (pt' tmp.Length);  						int pos2 = -1;  						foreach (string it in tmp) {  							items.SetValue (GXInternal.ChangeType (it' pt)' ++pos2);  						}  						value = items;  					}  					else {  						value = Array.CreateInstance (pt' 0);  					}  				}  				else {  					//Columns relations are updated when all data from the row is read.  					UpdatedColumns.Add (new KeyValuePair<int' object> (pos' item));  				}  			}  			else if (col.Setter != null) {  				//Get value if not class.  				if (col.Setter.Type.IsArray || GXInternal.IsGenericDataType (col.Setter.Type)) {  					value = GXInternal.ChangeType (values [pos]' col.Setter.Type);  				}  				else//Parameter type is class. Set to null.  				 {  					value = null;  				}  			}  			else {  				value = values [pos];  			}  			if (value != null) {  				//Access minimum date time is 98' 11' 26.  				if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  					value = DateTime.MinValue;  				}  				if (col.Setter.Set != null) {  					col.Setter.Set (item' value);  				}  				else {  					PropertyInfo pi = col.Setter.Target as PropertyInfo;  					if (pi != null) {  						pi.SetValue (item' value' null);  					}  					else {  						FieldInfo fi = col.Setter.Target as FieldInfo;  						fi.SetValue (item' value);  					}  				}  			}  		}  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal2,The following statement contains a magic number: if (baseList != null) {  	baseList.Add ((T)Convert.ChangeType (values [0]' type));  }  else {  	item = null;  	//If we are reading values from multiple tables each component is created only once.  	bool isCreated = false;  	//For Oracle reader.FieldCount is too high. For this reason columns.Count is used.  	for (int pos = 0; pos != Math.Min (reader.FieldCount' columns.Count); ++pos) {  		value = null;  		//If we are asking some data from the DB that is not exist on class.  		//This is removed from the interface etc...  		if (!columns.ContainsKey (pos)) {  			continue;  		}  		GXColumnHelper col = columns [pos];  		//If we are reading multiple objects and object has changed.  		if (string.Compare (col.Table' targetTable' true) != 0) {  			isCreated = false;  			if (TableIndexes != null && TableIndexes.ContainsKey (col.TableType)) {  				id = values [TableIndexes [col.TableType]];  				if (id == null || id is DBNull) {  					isCreated = true;  				}  				else {  					if (objects.ContainsKey (col.TableType)) {  						// Check is item already created.                                              						if (objects [col.TableType].ContainsKey (GXInternal.ChangeType (id' col.Setter.Type))) {  							isCreated = true;  						}  					}  					else {  						objects.Add (col.TableType' new SortedDictionary<object' object> ());  					}  				}  			}  			else//If Map table.  			 {  				id = null;  			}  			if (!isCreated) {  				if (!GXInternal.IsGenericDataType (col.TableType) && item == null || item.GetType () != col.TableType) {  					item = GXJsonParser.CreateInstance (col.TableType);  					if (item != null && item.GetType () == typeof(T)) {  						list.Add ((T)item);  					}  					//If we are adding map table.  					if (mapTables != null && item != null && id == null && mapTables.ContainsKey (item.GetType ())) {  						mapTables [item.GetType ()].Add (item);  					}  				}  				if (objects != null && id != null) {  					//Id is not save directly because class might change it's type example from uint to int.  					if (GXInternal.IsGenericDataType (col.Setter.Type)) {  						objects [col.TableType].Add (GXInternal.ChangeType (id' col.Setter.Type)' item);  					}  					else//If we are saving table.  					 {  						objects [col.TableType].Add (id' item);  					}  				}  			}  			targetTable = col.Table;  		}  		if (!isCreated) {  			//If 1:1 relation.  			if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) {  				Type pt = GXInternal.GetPropertyType (col.Setter.Type);  				if (GXInternal.IsGenericDataType (pt)) {  					if (!string.IsNullOrEmpty (values [pos].ToString ())) {  						string[] tmp = values [pos].ToString ().Split (new char[] {  							';'  						});  						Array items = Array.CreateInstance (pt' tmp.Length);  						int pos2 = -1;  						foreach (string it in tmp) {  							items.SetValue (GXInternal.ChangeType (it' pt)' ++pos2);  						}  						value = items;  					}  					else {  						value = Array.CreateInstance (pt' 0);  					}  				}  				else {  					//Columns relations are updated when all data from the row is read.  					UpdatedColumns.Add (new KeyValuePair<int' object> (pos' item));  				}  			}  			else if (col.Setter != null) {  				//Get value if not class.  				if (col.Setter.Type.IsArray || GXInternal.IsGenericDataType (col.Setter.Type)) {  					value = GXInternal.ChangeType (values [pos]' col.Setter.Type);  				}  				else//Parameter type is class. Set to null.  				 {  					value = null;  				}  			}  			else {  				value = values [pos];  			}  			if (value != null) {  				//Access minimum date time is 98' 11' 26.  				if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  					value = DateTime.MinValue;  				}  				if (col.Setter.Set != null) {  					col.Setter.Set (item' value);  				}  				else {  					PropertyInfo pi = col.Setter.Target as PropertyInfo;  					if (pi != null) {  						pi.SetValue (item' value' null);  					}  					else {  						FieldInfo fi = col.Setter.Target as FieldInfo;  						fi.SetValue (item' value);  					}  				}  			}  		}  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal2,The following statement contains a magic number: for (int pos = 0; pos != Math.Min (reader.FieldCount' columns.Count); ++pos) {  	value = null;  	//If we are asking some data from the DB that is not exist on class.  	//This is removed from the interface etc...  	if (!columns.ContainsKey (pos)) {  		continue;  	}  	GXColumnHelper col = columns [pos];  	//If we are reading multiple objects and object has changed.  	if (string.Compare (col.Table' targetTable' true) != 0) {  		isCreated = false;  		if (TableIndexes != null && TableIndexes.ContainsKey (col.TableType)) {  			id = values [TableIndexes [col.TableType]];  			if (id == null || id is DBNull) {  				isCreated = true;  			}  			else {  				if (objects.ContainsKey (col.TableType)) {  					// Check is item already created.                                              					if (objects [col.TableType].ContainsKey (GXInternal.ChangeType (id' col.Setter.Type))) {  						isCreated = true;  					}  				}  				else {  					objects.Add (col.TableType' new SortedDictionary<object' object> ());  				}  			}  		}  		else//If Map table.  		 {  			id = null;  		}  		if (!isCreated) {  			if (!GXInternal.IsGenericDataType (col.TableType) && item == null || item.GetType () != col.TableType) {  				item = GXJsonParser.CreateInstance (col.TableType);  				if (item != null && item.GetType () == typeof(T)) {  					list.Add ((T)item);  				}  				//If we are adding map table.  				if (mapTables != null && item != null && id == null && mapTables.ContainsKey (item.GetType ())) {  					mapTables [item.GetType ()].Add (item);  				}  			}  			if (objects != null && id != null) {  				//Id is not save directly because class might change it's type example from uint to int.  				if (GXInternal.IsGenericDataType (col.Setter.Type)) {  					objects [col.TableType].Add (GXInternal.ChangeType (id' col.Setter.Type)' item);  				}  				else//If we are saving table.  				 {  					objects [col.TableType].Add (id' item);  				}  			}  		}  		targetTable = col.Table;  	}  	if (!isCreated) {  		//If 1:1 relation.  		if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) {  			Type pt = GXInternal.GetPropertyType (col.Setter.Type);  			if (GXInternal.IsGenericDataType (pt)) {  				if (!string.IsNullOrEmpty (values [pos].ToString ())) {  					string[] tmp = values [pos].ToString ().Split (new char[] {  						';'  					});  					Array items = Array.CreateInstance (pt' tmp.Length);  					int pos2 = -1;  					foreach (string it in tmp) {  						items.SetValue (GXInternal.ChangeType (it' pt)' ++pos2);  					}  					value = items;  				}  				else {  					value = Array.CreateInstance (pt' 0);  				}  			}  			else {  				//Columns relations are updated when all data from the row is read.  				UpdatedColumns.Add (new KeyValuePair<int' object> (pos' item));  			}  		}  		else if (col.Setter != null) {  			//Get value if not class.  			if (col.Setter.Type.IsArray || GXInternal.IsGenericDataType (col.Setter.Type)) {  				value = GXInternal.ChangeType (values [pos]' col.Setter.Type);  			}  			else//Parameter type is class. Set to null.  			 {  				value = null;  			}  		}  		else {  			value = values [pos];  		}  		if (value != null) {  			//Access minimum date time is 98' 11' 26.  			if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  				value = DateTime.MinValue;  			}  			if (col.Setter.Set != null) {  				col.Setter.Set (item' value);  			}  			else {  				PropertyInfo pi = col.Setter.Target as PropertyInfo;  				if (pi != null) {  					pi.SetValue (item' value' null);  				}  				else {  					FieldInfo fi = col.Setter.Target as FieldInfo;  					fi.SetValue (item' value);  				}  			}  		}  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal2,The following statement contains a magic number: if (!isCreated) {  	//If 1:1 relation.  	if (objects != null && !GXInternal.IsGenericDataType (col.Setter.Type) && !GXInternal.IsGenericDataType (GXInternal.GetPropertyType (col.Setter.Type)) && col.Setter.Type.IsClass && col.Setter.Type != typeof(byte[])) {  		Type pt = GXInternal.GetPropertyType (col.Setter.Type);  		if (GXInternal.IsGenericDataType (pt)) {  			if (!string.IsNullOrEmpty (values [pos].ToString ())) {  				string[] tmp = values [pos].ToString ().Split (new char[] {  					';'  				});  				Array items = Array.CreateInstance (pt' tmp.Length);  				int pos2 = -1;  				foreach (string it in tmp) {  					items.SetValue (GXInternal.ChangeType (it' pt)' ++pos2);  				}  				value = items;  			}  			else {  				value = Array.CreateInstance (pt' 0);  			}  		}  		else {  			//Columns relations are updated when all data from the row is read.  			UpdatedColumns.Add (new KeyValuePair<int' object> (pos' item));  		}  	}  	else if (col.Setter != null) {  		//Get value if not class.  		if (col.Setter.Type.IsArray || GXInternal.IsGenericDataType (col.Setter.Type)) {  			value = GXInternal.ChangeType (values [pos]' col.Setter.Type);  		}  		else//Parameter type is class. Set to null.  		 {  			value = null;  		}  	}  	else {  		value = values [pos];  	}  	if (value != null) {  		//Access minimum date time is 98' 11' 26.  		if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  			value = DateTime.MinValue;  		}  		if (col.Setter.Set != null) {  			col.Setter.Set (item' value);  		}  		else {  			PropertyInfo pi = col.Setter.Target as PropertyInfo;  			if (pi != null) {  				pi.SetValue (item' value' null);  			}  			else {  				FieldInfo fi = col.Setter.Target as FieldInfo;  				fi.SetValue (item' value);  			}  		}  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal2,The following statement contains a magic number: if (value != null) {  	//Access minimum date time is 98' 11' 26.  	if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  		value = DateTime.MinValue;  	}  	if (col.Setter.Set != null) {  		col.Setter.Set (item' value);  	}  	else {  		PropertyInfo pi = col.Setter.Target as PropertyInfo;  		if (pi != null) {  			pi.SetValue (item' value' null);  		}  		else {  			FieldInfo fi = col.Setter.Target as FieldInfo;  			fi.SetValue (item' value);  		}  	}  }  
Magic Number,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,SelectInternal2,The following statement contains a magic number: if (this.Builder.Settings.Type == DatabaseType.Access && value is DateTime && ((DateTime)value).Date <= new DateTime (100' 1' 1)) {  	value = DateTime.MinValue;  }  
Magic Number,Gurux.Service.Orm.Settings,GXOracleSqlSettings,C:\repos\Gurux_Gurux.Service\Development\Db\Settings\GXOracleSqlSettings.cs,GetVersion,The following statement contains a magic number: return int.Parse (this.ServerVersion.Substring (0' 2));  
Magic Number,Gurux.Service.Orm.Settings,GXOracleSqlSettings,C:\repos\Gurux_Gurux.Service\Development\Db\Settings\GXOracleSqlSettings.cs,GetSequenceName,The following statement contains a magic number: if (name.Length > 30) {  	return name.GetHashCode ().ToString ().ToUpper ();  }  
Magic Number,Gurux.Service.Orm.Settings,GXOracleSqlSettings,C:\repos\Gurux_Gurux.Service\Development\Db\Settings\GXOracleSqlSettings.cs,GetTriggerName,The following statement contains a magic number: if (name.Length > 30) {  	return name.GetHashCode ().ToString ().ToUpper ();  }  
Magic Number,Gurux.Service.Orm.Settings,GXOracleSqlSettings,C:\repos\Gurux_Gurux.Service\Development\Db\Settings\GXOracleSqlSettings.cs,CreateAutoIncrement,The following statement contains a magic number: if (GetVersion () < 12) {  	string trigger = GetTriggerName (tableName' columnName);  	tableName = GXDbHelpers.AddQuotes (tableName' this.TableQuotation);  	columnName = GXDbHelpers.AddQuotes (columnName' this.ColumnQuotation);  	//Create sequence.  	return new string[] {  		"DECLARE\n C NUMBER;\nBEGIN\nSELECT COUNT(*) INTO C FROM USER_SEQUENCES WHERE SEQUENCE_NAME = '" + trigger + "';\n" + "IF (C = 0) THEN\n EXECUTE IMMEDIATE 'CREATE SEQUENCE " + trigger + "';\nEND IF;END;"'  		//Create or replace trigger.  		"CREATE OR REPLACE TRIGGER " + trigger + " BEFORE INSERT ON " + tableName + " FOR EACH ROW\n" + "BEGIN\n SELECT " + trigger + ".NEXTVAL\n INTO\n :new." + columnName + "\n \nFROM dual;\nEND;"  	};  }  
Magic Number,Gurux.Service.Orm.Settings,GXOracleSqlSettings,C:\repos\Gurux_Gurux.Service\Development\Db\Settings\GXOracleSqlSettings.cs,DropAutoIncrement,The following statement contains a magic number: if (GetVersion () < 12) {  	return new string[] {  		"DROP SEQUENCE " + GetSequenceName (tableName' columnName)  	};  }  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,ListenThread,The following statement contains a magic number: while (Listener.IsListening) {  	bool accept = false;  	string username' password;  	AutoResetEvent h = new AutoResetEvent (false);  	IAsyncResult result = Listener.BeginGetContext (delegate (IAsyncResult ListenerCallback) {  		HttpListener listener = (HttpListener)ListenerCallback.AsyncState;  		//If server is not closed.  		if (listener.IsListening) {  			try {  				c = listener.EndGetContext (ListenerCallback);  			}  			catch (Exception) {  				h.Set ();  				return;  			}  			GXWebServiceModule.TryAuthenticate (tmp.MessageMap' c.Request' out username' out password);  			//Anonymous access is allowed.  			if (username == null && password == null) {  				accept = true;  				user = null;  			}  			else {  				user = TryAuthenticate (username' password);  				accept = user != null;  			}  			if (accept) {  				Thread thread = new Thread (new ParameterizedThreadStart (Process));  				thread.Start (new object[] {  					tmp'  					c'  					user  				});  			}  			else {  				c.Response.StatusCode = 401;  				c.Response.StatusDescription = "Access Denied";  				c.Response.AddHeader ("WWW-Authenticate"' "Basic Realm");  				GXErrorWrapper err = new GXErrorWrapper (new HttpException (401' "Access Denied"));  				using (TextWriter writer = new StreamWriter (c.Response.OutputStream' Encoding.ASCII)) {  					GXJsonParser parser = new GXJsonParser ();  					string data = parser.Serialize (err);  					c.Response.ContentLength64 = data.Length;  					writer.Write (data);  				}  				c.Response.Close ();  			}  			h.Set ();  		}  	}' Listener);  	EventWaitHandle.WaitAny (new EventWaitHandle[] {  		h'  		Closing  	});  	if (!accept || !Listener.IsListening) {  		result.AsyncWaitHandle.WaitOne (1000);  		Closed.Set ();  		break;  	}  }  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,ListenThread,The following statement contains a magic number: while (Listener.IsListening) {  	bool accept = false;  	string username' password;  	AutoResetEvent h = new AutoResetEvent (false);  	IAsyncResult result = Listener.BeginGetContext (delegate (IAsyncResult ListenerCallback) {  		HttpListener listener = (HttpListener)ListenerCallback.AsyncState;  		//If server is not closed.  		if (listener.IsListening) {  			try {  				c = listener.EndGetContext (ListenerCallback);  			}  			catch (Exception) {  				h.Set ();  				return;  			}  			GXWebServiceModule.TryAuthenticate (tmp.MessageMap' c.Request' out username' out password);  			//Anonymous access is allowed.  			if (username == null && password == null) {  				accept = true;  				user = null;  			}  			else {  				user = TryAuthenticate (username' password);  				accept = user != null;  			}  			if (accept) {  				Thread thread = new Thread (new ParameterizedThreadStart (Process));  				thread.Start (new object[] {  					tmp'  					c'  					user  				});  			}  			else {  				c.Response.StatusCode = 401;  				c.Response.StatusDescription = "Access Denied";  				c.Response.AddHeader ("WWW-Authenticate"' "Basic Realm");  				GXErrorWrapper err = new GXErrorWrapper (new HttpException (401' "Access Denied"));  				using (TextWriter writer = new StreamWriter (c.Response.OutputStream' Encoding.ASCII)) {  					GXJsonParser parser = new GXJsonParser ();  					string data = parser.Serialize (err);  					c.Response.ContentLength64 = data.Length;  					writer.Write (data);  				}  				c.Response.Close ();  			}  			h.Set ();  		}  	}' Listener);  	EventWaitHandle.WaitAny (new EventWaitHandle[] {  		h'  		Closing  	});  	if (!accept || !Listener.IsListening) {  		result.AsyncWaitHandle.WaitOne (1000);  		Closed.Set ();  		break;  	}  }  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,ListenThread,The following statement contains a magic number: while (Listener.IsListening) {  	bool accept = false;  	string username' password;  	AutoResetEvent h = new AutoResetEvent (false);  	IAsyncResult result = Listener.BeginGetContext (delegate (IAsyncResult ListenerCallback) {  		HttpListener listener = (HttpListener)ListenerCallback.AsyncState;  		//If server is not closed.  		if (listener.IsListening) {  			try {  				c = listener.EndGetContext (ListenerCallback);  			}  			catch (Exception) {  				h.Set ();  				return;  			}  			GXWebServiceModule.TryAuthenticate (tmp.MessageMap' c.Request' out username' out password);  			//Anonymous access is allowed.  			if (username == null && password == null) {  				accept = true;  				user = null;  			}  			else {  				user = TryAuthenticate (username' password);  				accept = user != null;  			}  			if (accept) {  				Thread thread = new Thread (new ParameterizedThreadStart (Process));  				thread.Start (new object[] {  					tmp'  					c'  					user  				});  			}  			else {  				c.Response.StatusCode = 401;  				c.Response.StatusDescription = "Access Denied";  				c.Response.AddHeader ("WWW-Authenticate"' "Basic Realm");  				GXErrorWrapper err = new GXErrorWrapper (new HttpException (401' "Access Denied"));  				using (TextWriter writer = new StreamWriter (c.Response.OutputStream' Encoding.ASCII)) {  					GXJsonParser parser = new GXJsonParser ();  					string data = parser.Serialize (err);  					c.Response.ContentLength64 = data.Length;  					writer.Write (data);  				}  				c.Response.Close ();  			}  			h.Set ();  		}  	}' Listener);  	EventWaitHandle.WaitAny (new EventWaitHandle[] {  		h'  		Closing  	});  	if (!accept || !Listener.IsListening) {  		result.AsyncWaitHandle.WaitOne (1000);  		Closed.Set ();  		break;  	}  }  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,ListenThread,The following statement contains a magic number: if (listener.IsListening) {  	try {  		c = listener.EndGetContext (ListenerCallback);  	}  	catch (Exception) {  		h.Set ();  		return;  	}  	GXWebServiceModule.TryAuthenticate (tmp.MessageMap' c.Request' out username' out password);  	//Anonymous access is allowed.  	if (username == null && password == null) {  		accept = true;  		user = null;  	}  	else {  		user = TryAuthenticate (username' password);  		accept = user != null;  	}  	if (accept) {  		Thread thread = new Thread (new ParameterizedThreadStart (Process));  		thread.Start (new object[] {  			tmp'  			c'  			user  		});  	}  	else {  		c.Response.StatusCode = 401;  		c.Response.StatusDescription = "Access Denied";  		c.Response.AddHeader ("WWW-Authenticate"' "Basic Realm");  		GXErrorWrapper err = new GXErrorWrapper (new HttpException (401' "Access Denied"));  		using (TextWriter writer = new StreamWriter (c.Response.OutputStream' Encoding.ASCII)) {  			GXJsonParser parser = new GXJsonParser ();  			string data = parser.Serialize (err);  			c.Response.ContentLength64 = data.Length;  			writer.Write (data);  		}  		c.Response.Close ();  	}  	h.Set ();  }  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,ListenThread,The following statement contains a magic number: if (listener.IsListening) {  	try {  		c = listener.EndGetContext (ListenerCallback);  	}  	catch (Exception) {  		h.Set ();  		return;  	}  	GXWebServiceModule.TryAuthenticate (tmp.MessageMap' c.Request' out username' out password);  	//Anonymous access is allowed.  	if (username == null && password == null) {  		accept = true;  		user = null;  	}  	else {  		user = TryAuthenticate (username' password);  		accept = user != null;  	}  	if (accept) {  		Thread thread = new Thread (new ParameterizedThreadStart (Process));  		thread.Start (new object[] {  			tmp'  			c'  			user  		});  	}  	else {  		c.Response.StatusCode = 401;  		c.Response.StatusDescription = "Access Denied";  		c.Response.AddHeader ("WWW-Authenticate"' "Basic Realm");  		GXErrorWrapper err = new GXErrorWrapper (new HttpException (401' "Access Denied"));  		using (TextWriter writer = new StreamWriter (c.Response.OutputStream' Encoding.ASCII)) {  			GXJsonParser parser = new GXJsonParser ();  			string data = parser.Serialize (err);  			c.Response.ContentLength64 = data.Length;  			writer.Write (data);  		}  		c.Response.Close ();  	}  	h.Set ();  }  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,ListenThread,The following statement contains a magic number: if (accept) {  	Thread thread = new Thread (new ParameterizedThreadStart (Process));  	thread.Start (new object[] {  		tmp'  		c'  		user  	});  }  else {  	c.Response.StatusCode = 401;  	c.Response.StatusDescription = "Access Denied";  	c.Response.AddHeader ("WWW-Authenticate"' "Basic Realm");  	GXErrorWrapper err = new GXErrorWrapper (new HttpException (401' "Access Denied"));  	using (TextWriter writer = new StreamWriter (c.Response.OutputStream' Encoding.ASCII)) {  		GXJsonParser parser = new GXJsonParser ();  		string data = parser.Serialize (err);  		c.Response.ContentLength64 = data.Length;  		writer.Write (data);  	}  	c.Response.Close ();  }  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,ListenThread,The following statement contains a magic number: if (accept) {  	Thread thread = new Thread (new ParameterizedThreadStart (Process));  	thread.Start (new object[] {  		tmp'  		c'  		user  	});  }  else {  	c.Response.StatusCode = 401;  	c.Response.StatusDescription = "Access Denied";  	c.Response.AddHeader ("WWW-Authenticate"' "Basic Realm");  	GXErrorWrapper err = new GXErrorWrapper (new HttpException (401' "Access Denied"));  	using (TextWriter writer = new StreamWriter (c.Response.OutputStream' Encoding.ASCII)) {  		GXJsonParser parser = new GXJsonParser ();  		string data = parser.Serialize (err);  		c.Response.ContentLength64 = data.Length;  		writer.Write (data);  	}  	c.Response.Close ();  }  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,ListenThread,The following statement contains a magic number: c.Response.StatusCode = 401;  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,ListenThread,The following statement contains a magic number: if (!accept || !Listener.IsListening) {  	result.AsyncWaitHandle.WaitOne (1000);  	Closed.Set ();  	break;  }  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,ListenThread,The following statement contains a magic number: result.AsyncWaitHandle.WaitOne (1000);  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,ProcessRequest,The following statement contains a magic number: if (context.Request.ContentType.Contains ("json")) {  	string method = context.Request.HttpMethod.ToUpper ();  	bool content = method == "POST" || method == "PUT";  	if (content) {  		int length = (int)context.Request.ContentLength64;  		MemoryStream ms = new MemoryStream (length);  		Stream stream = context.Request.InputStream;  		byte[] buffer = new byte[length == 0 || length > 1024 ? 1024 : length];  		IAsyncResult read = stream.BeginRead (buffer' 0' buffer.Length' null' null);  		while (true) {  			// wait for the read operation to complete  			if (!read.AsyncWaitHandle.WaitOne ()) {  				break;  			}  			int count = stream.EndRead (read);  			ms.Write (buffer' 0' count);  			// If read is done.  			if (ms.Position == length || count == 0) {  				break;  			}  			read = stream.BeginRead (buffer' 0' buffer.Length' null' null);  		}  		ms.Position = 0;  		using (StreamReader sr = new StreamReader (ms)) {  			data = sr.ReadToEnd ();  		}  		path = context.Request.RawUrl;  	}  	else {  		int pos = context.Request.RawUrl.IndexOf ('?');  		if (pos != -1) {  			path = context.Request.RawUrl.Substring (0' pos);  			data = context.Request.RawUrl.Substring (pos + 1);  		}  		else {  			path = context.Request.RawUrl;  			data = null;  		}  	}  	System.Diagnostics.Debug.WriteLine ("-> " + path + " : " + data);  	//If proxy is used.  	string add = null;  	if (HttpContext.Current != null) {  		add = HttpContext.Current.Request.ServerVariables ["REMOTE_ADDR"].ToString ();  	}  	if (add == null) {  		add = context.Request.UserHostAddress;  	}  	string reply = GetReply (server.MessageMap' user' server' add' context.Request.HttpMethod' path' data);  	context.Response.ContentType = "json";  	context.Response.ContentLength64 = reply.Length;  	System.Diagnostics.Debug.WriteLine ("<- " + reply);  	using (BufferedStream bs = new BufferedStream (context.Response.OutputStream)) {  		bs.Write (ASCIIEncoding.ASCII.GetBytes (reply)' 0' reply.Length);  	}  }  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,ProcessRequest,The following statement contains a magic number: if (context.Request.ContentType.Contains ("json")) {  	string method = context.Request.HttpMethod.ToUpper ();  	bool content = method == "POST" || method == "PUT";  	if (content) {  		int length = (int)context.Request.ContentLength64;  		MemoryStream ms = new MemoryStream (length);  		Stream stream = context.Request.InputStream;  		byte[] buffer = new byte[length == 0 || length > 1024 ? 1024 : length];  		IAsyncResult read = stream.BeginRead (buffer' 0' buffer.Length' null' null);  		while (true) {  			// wait for the read operation to complete  			if (!read.AsyncWaitHandle.WaitOne ()) {  				break;  			}  			int count = stream.EndRead (read);  			ms.Write (buffer' 0' count);  			// If read is done.  			if (ms.Position == length || count == 0) {  				break;  			}  			read = stream.BeginRead (buffer' 0' buffer.Length' null' null);  		}  		ms.Position = 0;  		using (StreamReader sr = new StreamReader (ms)) {  			data = sr.ReadToEnd ();  		}  		path = context.Request.RawUrl;  	}  	else {  		int pos = context.Request.RawUrl.IndexOf ('?');  		if (pos != -1) {  			path = context.Request.RawUrl.Substring (0' pos);  			data = context.Request.RawUrl.Substring (pos + 1);  		}  		else {  			path = context.Request.RawUrl;  			data = null;  		}  	}  	System.Diagnostics.Debug.WriteLine ("-> " + path + " : " + data);  	//If proxy is used.  	string add = null;  	if (HttpContext.Current != null) {  		add = HttpContext.Current.Request.ServerVariables ["REMOTE_ADDR"].ToString ();  	}  	if (add == null) {  		add = context.Request.UserHostAddress;  	}  	string reply = GetReply (server.MessageMap' user' server' add' context.Request.HttpMethod' path' data);  	context.Response.ContentType = "json";  	context.Response.ContentLength64 = reply.Length;  	System.Diagnostics.Debug.WriteLine ("<- " + reply);  	using (BufferedStream bs = new BufferedStream (context.Response.OutputStream)) {  		bs.Write (ASCIIEncoding.ASCII.GetBytes (reply)' 0' reply.Length);  	}  }  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,ProcessRequest,The following statement contains a magic number: if (content) {  	int length = (int)context.Request.ContentLength64;  	MemoryStream ms = new MemoryStream (length);  	Stream stream = context.Request.InputStream;  	byte[] buffer = new byte[length == 0 || length > 1024 ? 1024 : length];  	IAsyncResult read = stream.BeginRead (buffer' 0' buffer.Length' null' null);  	while (true) {  		// wait for the read operation to complete  		if (!read.AsyncWaitHandle.WaitOne ()) {  			break;  		}  		int count = stream.EndRead (read);  		ms.Write (buffer' 0' count);  		// If read is done.  		if (ms.Position == length || count == 0) {  			break;  		}  		read = stream.BeginRead (buffer' 0' buffer.Length' null' null);  	}  	ms.Position = 0;  	using (StreamReader sr = new StreamReader (ms)) {  		data = sr.ReadToEnd ();  	}  	path = context.Request.RawUrl;  }  else {  	int pos = context.Request.RawUrl.IndexOf ('?');  	if (pos != -1) {  		path = context.Request.RawUrl.Substring (0' pos);  		data = context.Request.RawUrl.Substring (pos + 1);  	}  	else {  		path = context.Request.RawUrl;  		data = null;  	}  }  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,ProcessRequest,The following statement contains a magic number: if (content) {  	int length = (int)context.Request.ContentLength64;  	MemoryStream ms = new MemoryStream (length);  	Stream stream = context.Request.InputStream;  	byte[] buffer = new byte[length == 0 || length > 1024 ? 1024 : length];  	IAsyncResult read = stream.BeginRead (buffer' 0' buffer.Length' null' null);  	while (true) {  		// wait for the read operation to complete  		if (!read.AsyncWaitHandle.WaitOne ()) {  			break;  		}  		int count = stream.EndRead (read);  		ms.Write (buffer' 0' count);  		// If read is done.  		if (ms.Position == length || count == 0) {  			break;  		}  		read = stream.BeginRead (buffer' 0' buffer.Length' null' null);  	}  	ms.Position = 0;  	using (StreamReader sr = new StreamReader (ms)) {  		data = sr.ReadToEnd ();  	}  	path = context.Request.RawUrl;  }  else {  	int pos = context.Request.RawUrl.IndexOf ('?');  	if (pos != -1) {  		path = context.Request.RawUrl.Substring (0' pos);  		data = context.Request.RawUrl.Substring (pos + 1);  	}  	else {  		path = context.Request.RawUrl;  		data = null;  	}  }  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,GetReply,The following statement contains a magic number: if (mi == null) {  	throw new HttpException (405' string.Format ("Rest method '{0}' not implemented."' command));  }  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,GetReply,The following statement contains a magic number: throw new HttpException (405' string.Format ("Rest method '{0}' not implemented."' command));  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,GetReply,The following statement contains a magic number: if (handler == null) {  	throw new HttpException (405' string.Format ("Method '{0}' not allowed for {1}"' method' command));  }  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,GetReply,The following statement contains a magic number: throw new HttpException (405' string.Format ("Method '{0}' not allowed for {1}"' method' command));  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,GetReply,The following statement contains a magic number: if (tmp == null) {  	throw new HttpException (405' string.Format ("Command '{0}' returned null."' command));  }  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,GetReply,The following statement contains a magic number: throw new HttpException (405' string.Format ("Command '{0}' returned null."' command));  
Magic Number,Gurux.Service.Rest,GXServer,C:\repos\Gurux_Gurux.Service\Development\Rest\GXServer.cs,Close,The following statement contains a magic number: Closed.WaitOne (1000);  
Magic Number,Gurux.Service.Rest,GXWebService,C:\repos\Gurux_Gurux.Service\Development\Rest\GXWebService.cs,ProcessRequest,The following statement contains a magic number: if (context.Request.ContentType.Contains ("json")) {  	switch (context.Request.HttpMethod) {  	case "GET":  		handler = RestMethodInfo.Get;  		break;  	case "POST":  		handler = RestMethodInfo.Post;  		break;  	case "PUT":  		handler = RestMethodInfo.Put;  		break;  	case "DELETE":  		handler = RestMethodInfo.Delete;  		break;  	default:  		handler = null;  		break;  	}  	if (handler == null) {  		throw new HttpException (405' string.Format ("Method '{0}' not allowed for {1}"' context.Request.HttpMethod' RestMethodInfo.RequestType.Name));  	}  	object req;  	if (context.Request.HttpMethod == "POST") {  		req = Parser.Deserialize (context.Request.InputStream' RestMethodInfo.RequestType);  	}  	else {  		string data = "{" + context.Request.QueryString.ToString () + "}";  		req = Parser.Deserialize (data' RestMethodInfo.RequestType);  	}  	//Get Rest class from cache.  	GXRestService target = RestMap [RestMethodInfo.RestClassType] as GXRestService;  	if (target == null) {  		target = GXJsonParser.CreateInstance (RestMethodInfo.RestClassType) as GXRestService;  		RestMap [RestMethodInfo.RestClassType] = target;  	}  	//Update user and DB info.  	//If proxy is used.                  	string add = HttpContext.Current.Request.ServerVariables ["REMOTE_ADDR"].ToString ();  	if (add == null) {  		add = context.Request.UserHostAddress;  	}  	target.Host = GXAppHost.Instance ();  	target.User = context.User;  	target.Db = Connection;  	object tmp = handler (target' req);  	string reply = Parser.Serialize (tmp);  	context.Response.Write (reply);  	context.Response.ContentType = "json";  }  
Magic Number,Gurux.Service.Rest,GXWebService,C:\repos\Gurux_Gurux.Service\Development\Rest\GXWebService.cs,ProcessRequest,The following statement contains a magic number: if (handler == null) {  	throw new HttpException (405' string.Format ("Method '{0}' not allowed for {1}"' context.Request.HttpMethod' RestMethodInfo.RequestType.Name));  }  
Magic Number,Gurux.Service.Rest,GXWebService,C:\repos\Gurux_Gurux.Service\Development\Rest\GXWebService.cs,ProcessRequest,The following statement contains a magic number: throw new HttpException (405' string.Format ("Method '{0}' not allowed for {1}"' context.Request.HttpMethod' RestMethodInfo.RequestType.Name));  
Magic Number,Gurux.Service.Rest,GXWebServiceModule,C:\repos\Gurux_Gurux.Service\Development\Rest\GXWebServiceModule.cs,DenyAccess,The following statement contains a magic number: app.Response.StatusCode = 401;  
Magic Number,Gurux.Service.Rest,GXWebServiceModule,C:\repos\Gurux_Gurux.Service\Development\Rest\GXWebServiceModule.cs,TryAuthenticate,The following statement contains a magic number: if (NeedAuthentication (messageMap' httpMethod' contentType' path)) {  	//Authorization header is checked if present.  	if (!string.IsNullOrEmpty (authHeader)) {  		authHeader = authHeader.Trim ();  		if (authHeader.IndexOf ("Basic"' 0) != 0) {  			throw new Exception ("Invalid authentication header.");  		}  		else {  			authHeader = authHeader.Trim ();  			string encodedCredentials = authHeader.Substring (6);  			byte[] decodedBytes = Convert.FromBase64String (encodedCredentials);  			string s = new ASCIIEncoding ().GetString (decodedBytes);  			string[] userPass = s.Split (new char[] {  				':'  			});  			username = userPass [0];  			password = userPass [1];  			return true;  		}  	}  	else//If authentication is not given' but it's needed.  	 {  		username = password = "";  		return false;  	}  }  
Magic Number,Gurux.Service.Rest,GXWebServiceModule,C:\repos\Gurux_Gurux.Service\Development\Rest\GXWebServiceModule.cs,TryAuthenticate,The following statement contains a magic number: if (!string.IsNullOrEmpty (authHeader)) {  	authHeader = authHeader.Trim ();  	if (authHeader.IndexOf ("Basic"' 0) != 0) {  		throw new Exception ("Invalid authentication header.");  	}  	else {  		authHeader = authHeader.Trim ();  		string encodedCredentials = authHeader.Substring (6);  		byte[] decodedBytes = Convert.FromBase64String (encodedCredentials);  		string s = new ASCIIEncoding ().GetString (decodedBytes);  		string[] userPass = s.Split (new char[] {  			':'  		});  		username = userPass [0];  		password = userPass [1];  		return true;  	}  }  else//If authentication is not given' but it's needed.   {  	username = password = "";  	return false;  }  
Magic Number,Gurux.Service.Rest,GXWebServiceModule,C:\repos\Gurux_Gurux.Service\Development\Rest\GXWebServiceModule.cs,TryAuthenticate,The following statement contains a magic number: if (authHeader.IndexOf ("Basic"' 0) != 0) {  	throw new Exception ("Invalid authentication header.");  }  else {  	authHeader = authHeader.Trim ();  	string encodedCredentials = authHeader.Substring (6);  	byte[] decodedBytes = Convert.FromBase64String (encodedCredentials);  	string s = new ASCIIEncoding ().GetString (decodedBytes);  	string[] userPass = s.Split (new char[] {  		':'  	});  	username = userPass [0];  	password = userPass [1];  	return true;  }  
Magic Number,Gurux.Service.Rest,GXWebServiceModule,C:\repos\Gurux_Gurux.Service\Development\Rest\GXWebServiceModule.cs,OnEndRequest,The following statement contains a magic number: if (httpApp.Response.StatusCode == 401) {  	//If the status is 401 the WWW-Authenticated is added to  	//the response so client knows it needs to send credentials  	HttpContext context = httpApp.Context;  	// HttpContext.Current;  	context.Response.StatusCode = 401;  	context.Response.AddHeader ("WWW-Authenticate"' "Basic Realm");  }  else {  	// Get the time of the begin request event.  	if (httpApp.Context.Items.Contains ("beginRequestTime")) {  		DateTime beginRequestTime = (DateTime)httpApp.Context.Items ["beginRequestTime"];  		TimeSpan ts = DateTime.Now - beginRequestTime;  		httpApp.Context.Response.AppendHeader ("TimeSpan"' ts.ToString ());  	}  }  
Magic Number,Gurux.Service.Rest,GXWebServiceModule,C:\repos\Gurux_Gurux.Service\Development\Rest\GXWebServiceModule.cs,OnEndRequest,The following statement contains a magic number: if (httpApp.Response.StatusCode == 401) {  	//If the status is 401 the WWW-Authenticated is added to  	//the response so client knows it needs to send credentials  	HttpContext context = httpApp.Context;  	// HttpContext.Current;  	context.Response.StatusCode = 401;  	context.Response.AddHeader ("WWW-Authenticate"' "Basic Realm");  }  else {  	// Get the time of the begin request event.  	if (httpApp.Context.Items.Contains ("beginRequestTime")) {  		DateTime beginRequestTime = (DateTime)httpApp.Context.Items ["beginRequestTime"];  		TimeSpan ts = DateTime.Now - beginRequestTime;  		httpApp.Context.Response.AppendHeader ("TimeSpan"' ts.ToString ());  	}  }  
Magic Number,Gurux.Service.Rest,GXWebServiceModule,C:\repos\Gurux_Gurux.Service\Development\Rest\GXWebServiceModule.cs,OnEndRequest,The following statement contains a magic number: context.Response.StatusCode = 401;  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(DateTime)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' type);  	if (dt == DateTime.MinValue) {  		return dt;  	}  	//Milliseconst are not saved.  	if (dt.Ticks == DateTime.MaxValue.AddTicks (-9999999).Ticks) {  		return DateTime.MaxValue;  	}  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return dt.ToLocalTime ();  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (dt.Ticks == DateTime.MaxValue.AddTicks (-9999999).Ticks) {  	return DateTime.MaxValue;  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(Guid)) {  	if (value is string) {  		Guid g = new Guid ((string)value);  		return g;  	}  }  else if (type.IsEnum) {  	if (value is string) {  		return Enum.Parse (type' (string)value);  	}  	return Enum.Parse (type' value.ToString ());  }  else if (type == typeof(System.Decimal)) {  	if (Convert.ToDouble (value) == -7.9228162514264338E+28) {  		return System.Decimal.MinValue;  	}  	if (Convert.ToDouble (value) == 7.9228162514264338E+28) {  		return System.Decimal.MaxValue;  	}  	Convert.ToDecimal (value);  }  else if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(Guid)) {  	if (value is string) {  		Guid g = new Guid ((string)value);  		return g;  	}  }  else if (type.IsEnum) {  	if (value is string) {  		return Enum.Parse (type' (string)value);  	}  	return Enum.Parse (type' value.ToString ());  }  else if (type == typeof(System.Decimal)) {  	if (Convert.ToDouble (value) == -7.9228162514264338E+28) {  		return System.Decimal.MinValue;  	}  	if (Convert.ToDouble (value) == 7.9228162514264338E+28) {  		return System.Decimal.MaxValue;  	}  	Convert.ToDecimal (value);  }  else if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(Guid)) {  	if (value is string) {  		Guid g = new Guid ((string)value);  		return g;  	}  }  else if (type.IsEnum) {  	if (value is string) {  		return Enum.Parse (type' (string)value);  	}  	return Enum.Parse (type' value.ToString ());  }  else if (type == typeof(System.Decimal)) {  	if (Convert.ToDouble (value) == -7.9228162514264338E+28) {  		return System.Decimal.MinValue;  	}  	if (Convert.ToDouble (value) == 7.9228162514264338E+28) {  		return System.Decimal.MaxValue;  	}  	Convert.ToDecimal (value);  }  else if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(Guid)) {  	if (value is string) {  		Guid g = new Guid ((string)value);  		return g;  	}  }  else if (type.IsEnum) {  	if (value is string) {  		return Enum.Parse (type' (string)value);  	}  	return Enum.Parse (type' value.ToString ());  }  else if (type == typeof(System.Decimal)) {  	if (Convert.ToDouble (value) == -7.9228162514264338E+28) {  		return System.Decimal.MinValue;  	}  	if (Convert.ToDouble (value) == 7.9228162514264338E+28) {  		return System.Decimal.MaxValue;  	}  	Convert.ToDecimal (value);  }  else if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(Guid)) {  	if (value is string) {  		Guid g = new Guid ((string)value);  		return g;  	}  }  else if (type.IsEnum) {  	if (value is string) {  		return Enum.Parse (type' (string)value);  	}  	return Enum.Parse (type' value.ToString ());  }  else if (type == typeof(System.Decimal)) {  	if (Convert.ToDouble (value) == -7.9228162514264338E+28) {  		return System.Decimal.MinValue;  	}  	if (Convert.ToDouble (value) == 7.9228162514264338E+28) {  		return System.Decimal.MaxValue;  	}  	Convert.ToDecimal (value);  }  else if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type.IsEnum) {  	if (value is string) {  		return Enum.Parse (type' (string)value);  	}  	return Enum.Parse (type' value.ToString ());  }  else if (type == typeof(System.Decimal)) {  	if (Convert.ToDouble (value) == -7.9228162514264338E+28) {  		return System.Decimal.MinValue;  	}  	if (Convert.ToDouble (value) == 7.9228162514264338E+28) {  		return System.Decimal.MaxValue;  	}  	Convert.ToDecimal (value);  }  else if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type.IsEnum) {  	if (value is string) {  		return Enum.Parse (type' (string)value);  	}  	return Enum.Parse (type' value.ToString ());  }  else if (type == typeof(System.Decimal)) {  	if (Convert.ToDouble (value) == -7.9228162514264338E+28) {  		return System.Decimal.MinValue;  	}  	if (Convert.ToDouble (value) == 7.9228162514264338E+28) {  		return System.Decimal.MaxValue;  	}  	Convert.ToDecimal (value);  }  else if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type.IsEnum) {  	if (value is string) {  		return Enum.Parse (type' (string)value);  	}  	return Enum.Parse (type' value.ToString ());  }  else if (type == typeof(System.Decimal)) {  	if (Convert.ToDouble (value) == -7.9228162514264338E+28) {  		return System.Decimal.MinValue;  	}  	if (Convert.ToDouble (value) == 7.9228162514264338E+28) {  		return System.Decimal.MaxValue;  	}  	Convert.ToDecimal (value);  }  else if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type.IsEnum) {  	if (value is string) {  		return Enum.Parse (type' (string)value);  	}  	return Enum.Parse (type' value.ToString ());  }  else if (type == typeof(System.Decimal)) {  	if (Convert.ToDouble (value) == -7.9228162514264338E+28) {  		return System.Decimal.MinValue;  	}  	if (Convert.ToDouble (value) == 7.9228162514264338E+28) {  		return System.Decimal.MaxValue;  	}  	Convert.ToDecimal (value);  }  else if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type.IsEnum) {  	if (value is string) {  		return Enum.Parse (type' (string)value);  	}  	return Enum.Parse (type' value.ToString ());  }  else if (type == typeof(System.Decimal)) {  	if (Convert.ToDouble (value) == -7.9228162514264338E+28) {  		return System.Decimal.MinValue;  	}  	if (Convert.ToDouble (value) == 7.9228162514264338E+28) {  		return System.Decimal.MaxValue;  	}  	Convert.ToDecimal (value);  }  else if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(System.Decimal)) {  	if (Convert.ToDouble (value) == -7.9228162514264338E+28) {  		return System.Decimal.MinValue;  	}  	if (Convert.ToDouble (value) == 7.9228162514264338E+28) {  		return System.Decimal.MaxValue;  	}  	Convert.ToDecimal (value);  }  else if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(System.Decimal)) {  	if (Convert.ToDouble (value) == -7.9228162514264338E+28) {  		return System.Decimal.MinValue;  	}  	if (Convert.ToDouble (value) == 7.9228162514264338E+28) {  		return System.Decimal.MaxValue;  	}  	Convert.ToDecimal (value);  }  else if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(System.Decimal)) {  	if (Convert.ToDouble (value) == -7.9228162514264338E+28) {  		return System.Decimal.MinValue;  	}  	if (Convert.ToDouble (value) == 7.9228162514264338E+28) {  		return System.Decimal.MaxValue;  	}  	Convert.ToDecimal (value);  }  else if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(System.Decimal)) {  	if (Convert.ToDouble (value) == -7.9228162514264338E+28) {  		return System.Decimal.MinValue;  	}  	if (Convert.ToDouble (value) == 7.9228162514264338E+28) {  		return System.Decimal.MaxValue;  	}  	Convert.ToDecimal (value);  }  else if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(System.Decimal)) {  	if (Convert.ToDouble (value) == -7.9228162514264338E+28) {  		return System.Decimal.MinValue;  	}  	if (Convert.ToDouble (value) == 7.9228162514264338E+28) {  		return System.Decimal.MaxValue;  	}  	Convert.ToDecimal (value);  }  else if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (Convert.ToDouble (value) == -7.9228162514264338E+28) {  	return System.Decimal.MinValue;  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (Convert.ToDouble (value) == 7.9228162514264338E+28) {  	return System.Decimal.MaxValue;  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(Int64)) {  	if (value is double) {  		if ((double)value == 9.2233720368547758E+18) {  			return Int64.MaxValue;  		}  	}  }  else if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (value is double) {  	if ((double)value == 9.2233720368547758E+18) {  		return Int64.MaxValue;  	}  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if ((double)value == 9.2233720368547758E+18) {  	return Int64.MaxValue;  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(UInt64)) {  	if (value is double) {  		if ((double)value == 1.8446744073709552E+19) {  			return UInt64.MaxValue;  		}  	}  }  else if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (value is double) {  	if ((double)value == 1.8446744073709552E+19) {  		return UInt64.MaxValue;  	}  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if ((double)value == 1.8446744073709552E+19) {  	return UInt64.MaxValue;  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: if (type == typeof(TimeSpan)) {  	return new TimeSpan (Convert.ToInt64 (value) * 10000);  }  else if (type == typeof(DateTimeOffset)) {  	DateTime dt = (DateTime)Convert.ChangeType (value' typeof(DateTime));  	dt = DateTime.SpecifyKind (dt' DateTimeKind.Utc);  	return new DateTimeOffset (dt.ToLocalTime ());  }  
Magic Number,Gurux.Common.Internal,GXInternal,C:\repos\Gurux_Gurux.Service\Development\Internal\Internal.cs,ChangeType,The following statement contains a magic number: return new TimeSpan (Convert.ToInt64 (value) * 10000);  
Duplicate Code,Gurux.Service.Orm,GXDbConnection,C:\repos\Gurux_Gurux.Service\Development\Db\GXDbConnection.cs,UpdateOrInsert,The method contains a code clone-set at the following line numbers (starting from the method definition): ((46' 67)' (73' 94))
