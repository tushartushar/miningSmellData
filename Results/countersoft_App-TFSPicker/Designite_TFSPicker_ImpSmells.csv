Implementation smell,Namespace,Class,File,Method,Description
Long Method,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Search,The method has 116 lines of code.
Long Method,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Authenticate,The method has 106 lines of code.
Complex Method,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Show,Cyclomatic complexity of the method is 13
Complex Method,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Search,Cyclomatic complexity of the method is 17
Complex Method,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Authenticate,Cyclomatic complexity of the method is 13
Long Statement,TFSPicker,TFSPicker,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,AuthenticateUser,The length of the statement  "	UserWidgetData<UserWidgetDataDetails> userDataRaw = args.GeminiContext.UserWidgetStore.Get<UserWidgetDataDetails> (args.UserContext.User.Entity.Id' Constants.AppId' Constants.ControlId); " is 186.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Show,The length of the statement  "	IssueWidgetData<List<string>> data = GeminiContext.IssueWidgetStore.Get<List<string>> (issueItem.Entity.Id' Constants.AppId' Constants.ControlId); " is 146.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Show,The length of the statement  "	Pair<int' string> authenticationModel = new Pair<int' string> (issueItem.Entity.Id' string.Concat ("apps/tfspicker/authenticate/"' issueItem.Entity.Id)); " is 153.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Show,The length of the statement  "							url = string.Format ("{0}/web/UI/Pages/WorkItems/WorkItemEdit.aspx?id={1}&pguid={2}"' RepositoryUrl' item.Id' item.Project.Guid); " is 129.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Show,The length of the statement  "                                    url = string.Format("{0}/web/UI/Pages/WorkItems/WorkItemEdit.aspx?id={1}&pguid={2}"' RepositoryUrl' item.Id' item.Project.Guid);" is 128.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,AuthenticateUser,The length of the statement  "	UserWidgetData<UserWidgetDataDetails> userDataRaw = GeminiContext.UserWidgetStore.Get<UserWidgetDataDetails> (CurrentUser.Entity.Id' Constants.AppId' Constants.ControlId); " is 171.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Search,The length of the statement  "		ItemWidgetArguments args = new ItemWidgetArguments (UserContext' GeminiContext' Cache' System.Web.HttpContext.Current.Request' CurrentIssue); " is 141.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Search,The length of the statement  "		TfsConfigurationServer configurationServer = TfsConfigurationServerFactory.GetConfigurationServer (new Uri (loginDetails.RepositoryUrl)); " is 137.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Search,The length of the statement  "		string query = "Select [Id]' [Work Item Type]' [Title]' [State] From WorkItems Where [Title] Contains '" + search + "' Order By [Id] Asc"; " is 138.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Search,The length of the statement  "			//tpc = new TfsTeamProjectCollection(new Uri(string.Concat(loginDetails.RepositoryUrl' '/'' tpcNode.Resource.DisplayName))' iCred); " is 131.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Search,The length of the statement  "			IssueWidgetData<List<string>> data = GeminiContext.IssueWidgetStore.Get<List<string>> (id.ToInt ()' Constants.AppId' Constants.ControlId); " is 138.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Search,The length of the statement  "		dataView = Content (BaseController.RenderPartialViewToString (this' AppManager.Instance.GetAppUrl ("782D003D-D9F0-455F-AF09-74417D6DFD2B"' "views/search.cshtml")' tfsPickerModel)); " is 180.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Search,The length of the statement  "		Pair<int' string> authenticationModel = new Pair<int' string> (CurrentIssue.Entity.Id' string.Concat (UserContext.Url' "/apps/tfspicker/authenticate/"' CurrentIssue.Entity.Id)); " is 177.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Search,The length of the statement  "		dataView = Content (BaseController.RenderPartialViewToString (this' AppManager.Instance.GetAppUrl ("782D003D-D9F0-455F-AF09-74417D6DFD2B"' "views/authenticationForm.cshtml")' authenticationModel)); " is 197.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Add,The length of the statement  "	IssueWidgetData<List<string>> data = GeminiContext.IssueWidgetStore.Get<List<string>> (issueId' Constants.AppId' Constants.ControlId); " is 134.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Add,The length of the statement  "	return JsonSuccess (AppManager.Instance.ItemContentWidgetsOnShow (this' UserContext' GeminiContext' Cache' UserContext.Issue' Constants.AppId' Constants.ControlId)); " is 165.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Delete,The length of the statement  "	IssueWidgetData<List<string>> data = GeminiContext.IssueWidgetStore.Get<List<string>> (issueId' Constants.AppId' Constants.ControlId); " is 134.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Delete,The length of the statement  "	return JsonSuccess (AppManager.Instance.ItemContentWidgetsOnShow (this' UserContext' GeminiContext' Cache' UserContext.Issue' Constants.AppId' Constants.ControlId)); " is 165.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Logout,The length of the statement  "	var data = GeminiContext.UserWidgetStore.Get<UserWidgetDataDetails> (CurrentUser.Entity.Id' Constants.AppId' Constants.ControlId); " is 130.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Authenticate,The length of the statement  "			ItemWidgetArguments args = new ItemWidgetArguments (UserContext' GeminiContext' Cache' System.Web.HttpContext.Current.Request' CurrentIssue); " is 141.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Authenticate,The length of the statement  "			TfsConfigurationServer configurationServer = TfsConfigurationServerFactory.GetConfigurationServer (new Uri (loginDetails.RepositoryUrl)); " is 137.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Authenticate,The length of the statement  "			var logindetails = GeminiContext.UserWidgetStore.Get<UserWidgetDataDetails> (CurrentUser.Entity.Id' Constants.AppId' Constants.ControlId); " is 138.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Authenticate,The length of the statement  "		IssueWidgetData<List<string>> data = GeminiContext.IssueWidgetStore.Get<List<string>> (issueId' Constants.AppId' Constants.ControlId); " is 134.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,SaveLoginDetails,The length of the statement  "	UserWidgetData<UserWidgetDataDetails> userDataRaw = gemini.UserWidgetStore.Get<UserWidgetDataDetails> (user.Entity.Id' Constants.AppId' Constants.ControlId); " is 157.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,GetItem,The length of the statement  "	TfsConfigurationServer configurationServer = TfsConfigurationServerFactory.GetConfigurationServer (new Uri (RepositoryUrl)); " is 124.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,GetItem,The length of the statement  "		TfsTeamProjectCollection tpc = configurationServer.GetTeamProjectCollection (new Guid (tpcNode.Resource.Properties ["InstanceId"])); " is 132.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,GetItem,The length of the statement  "		//TfsTeamProjectCollection tpc = new TfsTeamProjectCollection(new Uri(string.Concat(RepositoryUrl' '/'' tpcNode.Resource.DisplayName))' iCred); " is 143.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,GetItem,The length of the statement  "		WorkItemCollection queryResults = workItemStore.Query (string.Format ("Select [Id]' [Work Item Type]' [Title]' [State] From WorkItems WHERE [Id] = '{0}' Order By [Id] Asc"' id)); " is 178.
Long Statement,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,GetItem,The length of the statement  "				TswaClientHyperlinkService hyperlinkService = (TswaClientHyperlinkService)tpc.GetService (typeof(TswaClientHyperlinkService)); " is 126.
Empty Catch Block,TFSPicker,TFSPicker,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,TFSPicker,The method has an empty catch block.
Empty Catch Block,TFSPicker,TFSPicker,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,TFSPicker,The method has an empty catch block.
Empty Catch Block,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Search,The method has an empty catch block.
Empty Catch Block,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Search,The method has an empty catch block.
Empty Catch Block,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,GetItem,The method has an empty catch block.
Magic Number,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Search,The following statement contains a magic number: try {  	ItemWidgetArguments args = new ItemWidgetArguments (UserContext' GeminiContext' Cache' System.Web.HttpContext.Current.Request' CurrentIssue);  	TFSPicker tfsPicker = new TFSPicker ();  	tfsPicker.AuthenticateUser (args);  	UserWidgetDataDetails loginDetails = tfsPicker.getLoginDetails ();  	TFSPicker.ConnectByImplementingCredentialsProvider connect = new TFSPicker.ConnectByImplementingCredentialsProvider ();  	ICredentials iCred = new NetworkCredential (loginDetails.Username' loginDetails.Password);  	connect.setLoginDetails (loginDetails.Username' loginDetails.Password' loginDetails.RepositoryUrl);  	connect.GetCredentials (new Uri (loginDetails.RepositoryUrl)' iCred);  	TfsConfigurationServer configurationServer = TfsConfigurationServerFactory.GetConfigurationServer (new Uri (loginDetails.RepositoryUrl));  	configurationServer.Credentials = iCred;  	if (TFSPicker.IsBasicAuth) {  		configurationServer.ClientCredentials = new TfsClientCredentials (new BasicAuthCredential (iCred));  	}  	else {  		configurationServer.ClientCredentials = new TfsClientCredentials (new WindowsCredential (iCred));  	}  	try {  		configurationServer.EnsureAuthenticated ();  	}  	catch {  		System.Threading.Thread.Sleep (1000);  		configurationServer = TfsConfigurationServerFactory.GetConfigurationServer (new Uri (loginDetails.RepositoryUrl));  		configurationServer.Credentials = iCred;  		if (TFSPicker.IsBasicAuth) {  			configurationServer.ClientCredentials = new TfsClientCredentials (new BasicAuthCredential (iCred));  		}  		else {  			configurationServer.ClientCredentials = new TfsClientCredentials (new WindowsCredential (iCred));  		}  		configurationServer.EnsureAuthenticated ();  	}  	CatalogNode catalogNode = configurationServer.CatalogNode;  	ReadOnlyCollection<CatalogNode> tpcNodes = catalogNode.QueryChildren (new Guid[] {  		CatalogResourceTypes.ProjectCollection  	}' false' CatalogQueryOptions.None);  	string url = string.Empty;  	List<WorkItem2> queryResults = new List<WorkItem2> ();  	TfsTeamProjectCollection tpc = null;  	string query = "Select [Id]' [Work Item Type]' [Title]' [State] From WorkItems Where [Title] Contains '" + search + "' Order By [Id] Asc";  	if (search.Trim ().Length == 0) {  		query = "Select [Id]' [Work Item Type]' [Title]' [Description] From WorkItems Order By [Id] Asc";  	}  	foreach (CatalogNode tpcNode in tpcNodes) {  		tpc = configurationServer.GetTeamProjectCollection (new Guid (tpcNode.Resource.Properties ["InstanceId"]));  		//tpc = new TfsTeamProjectCollection(new Uri(string.Concat(loginDetails.RepositoryUrl' '/'' tpcNode.Resource.DisplayName))' iCred);  		if (TFSPicker.IsBasicAuth)  			tpc.ClientCredentials = new TfsClientCredentials (new BasicAuthCredential (iCred));  		WorkItemStore workItemStore = (WorkItemStore)tpc.GetService (typeof(WorkItemStore));  		var result = workItemStore.Query (query);  		if (result != null) {  			TswaClientHyperlinkService hyperlinkService = null;  			try {  				hyperlinkService = ((TswaClientHyperlinkService)tpc.GetService (typeof(TswaClientHyperlinkService)));  			}  			catch {  			}  			foreach (WorkItem res in result) {  				WorkItem2 item = new WorkItem2 () {  					Item = res'  					BaseUrl = string.Concat (tpcNode.Resource.DisplayName' '/'' res.AreaPath)  				};  				try {  					if (hyperlinkService != null) {  						item.FullUrl = hyperlinkService.GetWorkItemEditorUrl (res.Id);  					}  				}  				catch {  				}  				queryResults.Add (item);  			}  		}  	}  	Dictionary<string' WorkItem> details = new Dictionary<string' WorkItem> ();  	if (queryResults.Count > 0) {  		IssueWidgetData<List<string>> data = GeminiContext.IssueWidgetStore.Get<List<string>> (id.ToInt ()' Constants.AppId' Constants.ControlId);  		if (data == null || data.Value == null) {  			data = new IssueWidgetData<List<string>> ();  			data.AppId = Constants.AppId;  			data.ControlId = Constants.ControlId;  			data.IssueId = id.ToInt ();  			data.Value = new List<string> ();  		}  		foreach (WorkItem2 item in queryResults) {  			//check if we are not already there!  			if (data.Value.Contains (item.Item.Id.ToString ()))  				continue;  			/*if (isTfs2012)                             {*/if (item.FullUrl != null && item.FullUrl.ToString ().HasValue ()) {  				url = item.FullUrl.ToString ();  			}  			else {  				url = string.Format ("{0}/{1}/_workitems#_a=edit&id={2}"' loginDetails.RepositoryUrl' item.BaseUrl' item.Item.Id);  			}  			details.Add (url' item.Item);  		}  	}  	Dictionary<string' TfsPickerItem> tfsPickerModel = ConvertWorkItemsToTfsPickerItems (details);  	dataView = Content (BaseController.RenderPartialViewToString (this' AppManager.Instance.GetAppUrl ("782D003D-D9F0-455F-AF09-74417D6DFD2B"' "views/search.cshtml")' tfsPickerModel));  }  catch (Exception ex) {  	Pair<int' string> authenticationModel = new Pair<int' string> (CurrentIssue.Entity.Id' string.Concat (UserContext.Url' "/apps/tfspicker/authenticate/"' CurrentIssue.Entity.Id));  	dataView = Content (BaseController.RenderPartialViewToString (this' AppManager.Instance.GetAppUrl ("782D003D-D9F0-455F-AF09-74417D6DFD2B"' "views/authenticationForm.cshtml")' authenticationModel));  	successView = false;  	messageView = ex.Message;  	GeminiApp.LogException (new Exception (ex.Message) {  		Source = "TFS Picker"  	}' false);  }  
Magic Number,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Search,The following statement contains a magic number: try {  	configurationServer.EnsureAuthenticated ();  }  catch {  	System.Threading.Thread.Sleep (1000);  	configurationServer = TfsConfigurationServerFactory.GetConfigurationServer (new Uri (loginDetails.RepositoryUrl));  	configurationServer.Credentials = iCred;  	if (TFSPicker.IsBasicAuth) {  		configurationServer.ClientCredentials = new TfsClientCredentials (new BasicAuthCredential (iCred));  	}  	else {  		configurationServer.ClientCredentials = new TfsClientCredentials (new WindowsCredential (iCred));  	}  	configurationServer.EnsureAuthenticated ();  }  
Magic Number,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Search,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Authenticate,The following statement contains a magic number: if (success) {  	UserWidgetDataDetails userData = new UserWidgetDataDetails ();  	userData.Username = username.Trim ();  	userData.Password = SecretsHelper.Encrypt (password.Trim ()' SecretsHelper.EncryptionKey);  	userData.RepositoryUrl = repositoryUrl.Trim ();  	SaveLoginDetails (CurrentUser' userData' GeminiContext);  	TFSPicker tfsPicker = new TFSPicker ();  	try {  		ItemWidgetArguments args = new ItemWidgetArguments (UserContext' GeminiContext' Cache' System.Web.HttpContext.Current.Request' CurrentIssue);  		tfsPicker.AuthenticateUser (args);  		UserWidgetDataDetails loginDetails = tfsPicker.getLoginDetails ();  		TFSPicker.ConnectByImplementingCredentialsProvider connect = new TFSPicker.ConnectByImplementingCredentialsProvider ();  		ICredentials iCred = new NetworkCredential (loginDetails.Username' loginDetails.Password);  		connect.setLoginDetails (loginDetails.Username' loginDetails.Password' loginDetails.RepositoryUrl);  		connect.GetCredentials (new Uri (loginDetails.RepositoryUrl)' iCred);  		TfsConfigurationServer configurationServer = TfsConfigurationServerFactory.GetConfigurationServer (new Uri (loginDetails.RepositoryUrl));  		configurationServer.Credentials = iCred;  		if (TFSPicker.IsBasicAuth) {  			configurationServer.ClientCredentials = new TfsClientCredentials (new BasicAuthCredential (iCred));  		}  		else {  			configurationServer.ClientCredentials = new TfsClientCredentials (new WindowsCredential (iCred));  		}  		try {  			configurationServer.EnsureAuthenticated ();  		}  		catch {  			System.Threading.Thread.Sleep (1000);  			configurationServer = TfsConfigurationServerFactory.GetConfigurationServer (new Uri (loginDetails.RepositoryUrl));  			configurationServer.Credentials = iCred;  			if (TFSPicker.IsBasicAuth) {  				configurationServer.ClientCredentials = new TfsClientCredentials (new BasicAuthCredential (iCred));  			}  			else {  				configurationServer.ClientCredentials = new TfsClientCredentials (new WindowsCredential (iCred));  			}  			configurationServer.EnsureAuthenticated ();  		}  	}  	catch (Exception ex) {  		var logindetails = GeminiContext.UserWidgetStore.Get<UserWidgetDataDetails> (CurrentUser.Entity.Id' Constants.AppId' Constants.ControlId);  		if (logindetails != null) {  			GeminiContext.UserWidgetStore.Delete (logindetails.Id);  		}  		success = false;  		message = ex.Message;  		GeminiApp.LogException (new Exception (ex.Message) {  			Source = "TFS Picker"  		}' false);  		return JsonSuccess (new {  			success = success'  			message = message  		});  	}  	tfsPicker.setLoginDetails (userData.Username' password.Trim ()' userData.RepositoryUrl);  	WidgetResult result = new WidgetResult ();  	List<string> tfsDetails = new List<string> ();  	IssueWidgetData<List<string>> data = GeminiContext.IssueWidgetStore.Get<List<string>> (issueId' Constants.AppId' Constants.ControlId);  	if (data != null && data.Value != null && data.Value.Count > 0) {  		tfsDetails = data.Value;  	}  	List<WorkItem> details = new List<WorkItem> ();  	foreach (var tfs in tfsDetails) {  		try {  			string url;  			UserWidgetDataDetails loginDetails = tfsPicker.getLoginDetails ();  			if (Username.IsEmpty ()) {  				Username = loginDetails.Username;  			}  			if (Password.IsEmpty ()) {  				Password = loginDetails.Password;  			}  			if (RepositoryUrl.IsEmpty ()) {  				RepositoryUrl = loginDetails.RepositoryUrl;  			}  			var item = GetItem (tfs' out url);  			if (item != null) {  				details.Add (item);  			}  		}  		catch (Exception ex) {  			success = false;  			message = ex.Message;  			GeminiApp.LogException (new Exception (ex.Message) {  				Source = "TFS Picker"  			}' false);  		}  	}  }  
Magic Number,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Authenticate,The following statement contains a magic number: try {  	ItemWidgetArguments args = new ItemWidgetArguments (UserContext' GeminiContext' Cache' System.Web.HttpContext.Current.Request' CurrentIssue);  	tfsPicker.AuthenticateUser (args);  	UserWidgetDataDetails loginDetails = tfsPicker.getLoginDetails ();  	TFSPicker.ConnectByImplementingCredentialsProvider connect = new TFSPicker.ConnectByImplementingCredentialsProvider ();  	ICredentials iCred = new NetworkCredential (loginDetails.Username' loginDetails.Password);  	connect.setLoginDetails (loginDetails.Username' loginDetails.Password' loginDetails.RepositoryUrl);  	connect.GetCredentials (new Uri (loginDetails.RepositoryUrl)' iCred);  	TfsConfigurationServer configurationServer = TfsConfigurationServerFactory.GetConfigurationServer (new Uri (loginDetails.RepositoryUrl));  	configurationServer.Credentials = iCred;  	if (TFSPicker.IsBasicAuth) {  		configurationServer.ClientCredentials = new TfsClientCredentials (new BasicAuthCredential (iCred));  	}  	else {  		configurationServer.ClientCredentials = new TfsClientCredentials (new WindowsCredential (iCred));  	}  	try {  		configurationServer.EnsureAuthenticated ();  	}  	catch {  		System.Threading.Thread.Sleep (1000);  		configurationServer = TfsConfigurationServerFactory.GetConfigurationServer (new Uri (loginDetails.RepositoryUrl));  		configurationServer.Credentials = iCred;  		if (TFSPicker.IsBasicAuth) {  			configurationServer.ClientCredentials = new TfsClientCredentials (new BasicAuthCredential (iCred));  		}  		else {  			configurationServer.ClientCredentials = new TfsClientCredentials (new WindowsCredential (iCred));  		}  		configurationServer.EnsureAuthenticated ();  	}  }  catch (Exception ex) {  	var logindetails = GeminiContext.UserWidgetStore.Get<UserWidgetDataDetails> (CurrentUser.Entity.Id' Constants.AppId' Constants.ControlId);  	if (logindetails != null) {  		GeminiContext.UserWidgetStore.Delete (logindetails.Id);  	}  	success = false;  	message = ex.Message;  	GeminiApp.LogException (new Exception (ex.Message) {  		Source = "TFS Picker"  	}' false);  	return JsonSuccess (new {  		success = success'  		message = message  	});  }  
Magic Number,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Authenticate,The following statement contains a magic number: try {  	configurationServer.EnsureAuthenticated ();  }  catch {  	System.Threading.Thread.Sleep (1000);  	configurationServer = TfsConfigurationServerFactory.GetConfigurationServer (new Uri (loginDetails.RepositoryUrl));  	configurationServer.Credentials = iCred;  	if (TFSPicker.IsBasicAuth) {  		configurationServer.ClientCredentials = new TfsClientCredentials (new BasicAuthCredential (iCred));  	}  	else {  		configurationServer.ClientCredentials = new TfsClientCredentials (new WindowsCredential (iCred));  	}  	configurationServer.EnsureAuthenticated ();  }  
Magic Number,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,Authenticate,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,GetItem,The following statement contains a magic number: try {  	configurationServer.EnsureAuthenticated ();  }  catch {  	System.Threading.Thread.Sleep (1000);  	configurationServer = TfsConfigurationServerFactory.GetConfigurationServer (new Uri (RepositoryUrl));  	configurationServer.Credentials = iCred;  	if (TFSPicker.IsBasicAuth) {  		configurationServer.ClientCredentials = new TfsClientCredentials (new BasicAuthCredential (iCred));  	}  	else {  		configurationServer.ClientCredentials = new TfsClientCredentials (new WindowsCredential (iCred));  	}  	configurationServer.EnsureAuthenticated ();  }  
Magic Number,TFSPicker,TfsPickerController,C:\repos\countersoft_App-TFSPicker\TFSPicker.cs,GetItem,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
