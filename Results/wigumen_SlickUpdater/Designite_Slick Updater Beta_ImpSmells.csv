Implementation smell,Namespace,Class,File,Method,Description
Long Method,SlickUpdater,SlickVerify,C:\repos\wigumen_SlickUpdater\SlickUpdater\SlickVerify.cs,VerifyFiles,The method has 126 lines of code.
Long Method,SlickUpdater,UpdateManager,C:\repos\wigumen_SlickUpdater\SlickUpdater\UpdateManager.cs,UpdateCheck,The method has 157 lines of code.
Long Method,SlickUpdater,UpdateManager,C:\repos\wigumen_SlickUpdater\SlickUpdater\UpdateManager.cs,checkFilesFolders,The method has 151 lines of code.
Long Method,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The method has 654 lines of code.
Long Method,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The method has 320 lines of code.
Complex Method,SlickUpdater,Launch,C:\repos\wigumen_SlickUpdater\SlickUpdater\Launch.cs,a3Launch,Cyclomatic complexity of the method is 14
Complex Method,SlickUpdater,Launch,C:\repos\wigumen_SlickUpdater\SlickUpdater\Launch.cs,a2Launch,Cyclomatic complexity of the method is 14
Complex Method,SlickUpdater,SlickVerify,C:\repos\wigumen_SlickUpdater\SlickUpdater\SlickVerify.cs,VerifyFiles,Cyclomatic complexity of the method is 15
Complex Method,SlickUpdater,UpdateManager,C:\repos\wigumen_SlickUpdater\SlickUpdater\UpdateManager.cs,UpdateCheck,Cyclomatic complexity of the method is 10
Complex Method,SlickUpdater,UpdateManager,C:\repos\wigumen_SlickUpdater\SlickUpdater\UpdateManager.cs,a3Update,Cyclomatic complexity of the method is 10
Complex Method,SlickUpdater,UpdateManager,C:\repos\wigumen_SlickUpdater\SlickUpdater\UpdateManager.cs,checkFilesFolders,Cyclomatic complexity of the method is 22
Complex Method,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,Cyclomatic complexity of the method is 13
Long Statement,SlickUpdater,AddModsLaunchOptions,C:\repos\wigumen_SlickUpdater\SlickUpdater\AddModsLaunchOptions.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Slick Updater Beta;component/addmodslaunchoptions.xaml"' System.UriKind.Relative); " is 128.
Long Statement,SlickUpdater,Arma3LaunchOptionsDialogue,C:\repos\wigumen_SlickUpdater\SlickUpdater\Arma3LaunchOptionsDialogue.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Slick Updater Beta;component/arma3launchoptionsdialogue.xaml"' System.UriKind.Relative); " is 134.
Long Statement,SlickUpdater,AutoUpdate,C:\repos\wigumen_SlickUpdater\SlickUpdater\AutoUpdate.cs,getSlickJson,The length of the statement  "                    logIt.add("Error while trying to download slickversion.json from PA server' trying backup on gists. Error:\n" + ex.ToString()); " is 127.
Long Statement,SlickUpdater,AutoUpdate,C:\repos\wigumen_SlickUpdater\SlickUpdater\AutoUpdate.cs,getSlickJson,The length of the statement  "                        SlickJson = downloader.webRead("https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json"); " is 161.
Long Statement,SlickUpdater,AutoUpdate,C:\repos\wigumen_SlickUpdater\SlickUpdater\AutoUpdate.cs,CheckAvailableUpdates,The length of the statement  "                MessageBoxResult result = MessageBox.Show("There seems to be a new version of slickupdater available' do you wanna update it it?"' "New Update"' MessageBoxButton.YesNo); " is 169.
Long Statement,SlickUpdater,AutoUpdate,C:\repos\wigumen_SlickUpdater\SlickUpdater\AutoUpdate.cs,Update,The length of the statement  "            Process.Start("cmd"' "/C move /Y " + Directory.GetCurrentDirectory() + @"\update\*.* " + Directory.GetCurrentDirectory()); " is 122.
Long Statement,SlickUpdater,downloader,C:\repos\wigumen_SlickUpdater\SlickUpdater\downloader.cs,webRead,The length of the statement  "                //MessageBox.Show("An error occured while trying to download something. Maybe the server is down.\n\n" + e.ToString()' "Error while downloading"' MessageBoxButton.OK' MessageBoxImage.Error); " is 190.
Long Statement,SlickUpdater,DragAndDrop,C:\repos\wigumen_SlickUpdater\SlickUpdater\DragAndDrop.cs,outputDirListBox_PreviewMouseMove,The length of the statement  "			if (e.LeftButton == MouseButtonState.Pressed && (Math.Abs(diff.X) > SystemParameters.MinimumHorizontalDragDistance || Math.Abs(diff.Y) > SystemParameters.MinimumVerticalDragDistance)) { " is 185.
Long Statement,SlickUpdater,DragAndDrop,C:\repos\wigumen_SlickUpdater\SlickUpdater\DragAndDrop.cs,inputDirListBox_PreviewMouseMove,The length of the statement  "			if (e.LeftButton == MouseButtonState.Pressed && (Math.Abs(diff.X) > SystemParameters.MinimumHorizontalDragDistance || Math.Abs(diff.Y) > SystemParameters.MinimumVerticalDragDistance)) { " is 185.
Long Statement,SlickUpdater,Launch,C:\repos\wigumen_SlickUpdater\SlickUpdater\Launch.cs,a2Launch,The length of the statement  "                args += " \"-mod=" + varma2Path + ";EXPANSION;ca\"" + " \"-beta=Expansion\\beta;Expansion\\beta\\Expansion\" " + " \"-mod=" + mods + "\""; " is 138.
Long Statement,SlickUpdater,regcheck,C:\repos\wigumen_SlickUpdater\SlickUpdater\regcheck.cs,arma3RegCheck,The length of the statement  "                String value = (string)Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Bohemia Interactive\Arma 3"' "MAIN"' null); " is 126.
Long Statement,SlickUpdater,regcheck,C:\repos\wigumen_SlickUpdater\SlickUpdater\regcheck.cs,arma2RegCheck,The length of the statement  "                String value = (string)Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Bohemia Interactive\ArmA 2 OA\BattlEye"' "MAIN"' null); " is 138.
Long Statement,SlickUpdater,regcheck,C:\repos\wigumen_SlickUpdater\SlickUpdater\regcheck.cs,varma2RegCheck,The length of the statement  "                String value = (string)Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Bohemia Interactive\ArmA 2\BattlEye"' "MAIN"' null); " is 135.
Long Statement,SlickUpdater,regcheck,C:\repos\wigumen_SlickUpdater\SlickUpdater\regcheck.cs,ts3RegCheck,The length of the statement  "                String value = (string)Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Classes\ts3file\shell\open\command"' null' null); " is 120.
Long Statement,SlickUpdater,SlickVerify,C:\repos\wigumen_SlickUpdater\SlickUpdater\SlickVerify.cs,VerifyFiles,The length of the statement  "                output("Result: Scanned through " + LocalFiles.Count.ToString() + " files and found " + FinalList.Count.ToString() + " faulty files"); " is 134.
Long Statement,SlickUpdater,UpdateManager,C:\repos\wigumen_SlickUpdater\SlickUpdater\UpdateManager.cs,checkFilesFolders,The length of the statement  "                                MessageBox.Show("Teamspeak will now be closed to update the plugin files."' "Teamspeak will now close..."' MessageBoxButton.OK' MessageBoxImage.Exclamation); " is 157.
Long Statement,SlickUpdater,RepoGenerator,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGenerator.cs,inputGen,The length of the statement  "                BitmapImage modRed = new BitmapImage(new Uri(@"pack://application:'''/Slick Updater Beta;component/Resources/modRed.png")); " is 123.
Long Statement,SlickUpdater,RepoGenerator,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGenerator.cs,inputGen,The length of the statement  "                BitmapImage modGreen = new BitmapImage(new Uri(@"pack://application:'''/Slick Updater Beta;component/Resources/modGreen.png")); " is 127.
Long Statement,SlickUpdater,RepoGenerator,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGenerator.cs,generate,The length of the statement  "            BitmapImage modRed = new BitmapImage(new Uri(@"pack://application:'''/Slick Updater Beta;component/Resources/modRed.png")); " is 123.
Long Statement,SlickUpdater,RepoGenerator,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGenerator.cs,generate,The length of the statement  "            BitmapImage modGreen = new BitmapImage(new Uri(@"pack://application:'''/Slick Updater Beta;component/Resources/modGreen.png")); " is 127.
Long Statement,SlickUpdater,RepoGen_InputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_InputDir_Browse.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Slick Updater Beta;component/repogen_inputdir_browse.xaml"' System.UriKind.Relative); " is 131.
Long Statement,SlickUpdater,RepoGen_Options,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_Options.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Slick Updater Beta;component/repogen_options.xaml"' System.UriKind.Relative); " is 123.
Long Statement,SlickUpdater,RepoGen_Options,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_Options.xaml.cs,Connect,The length of the statement  "            this.outputDir_textBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.outputDir_textBox_TextChanged); " is 126.
Long Statement,SlickUpdater,RepoGen_Options,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_Options.xaml.cs,Connect,The length of the statement  "            this.inputDir_textBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.inputDir_textBox_TextChanged); " is 124.
Long Statement,SlickUpdater,RepoGen_OutputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_OutputDir_Browse.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Slick Updater Beta;component/repogen_outputdir_browse.xaml"' System.UriKind.Relative); " is 132.
Long Statement,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The length of the statement  "            this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown); " is 151.
Long Statement,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The length of the statement  "            this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove); " is 125.
Long Statement,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The length of the statement  "            this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown); " is 149.
Long Statement,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The length of the statement  "            this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove); " is 123.
Empty Catch Block,SlickUpdater,RepoGen_InputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_InputDir_Browse.xaml.cs,backButton_Click,The method has an empty catch block.
Empty Catch Block,SlickUpdater,RepoGen_InputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_InputDir_Browse.xaml.cs,forwardButton_Click,The method has an empty catch block.
Empty Catch Block,SlickUpdater,RepoGen_OutputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_OutputDir_Browse.xaml.cs,backButton_Click,The method has an empty catch block.
Empty Catch Block,SlickUpdater,RepoGen_OutputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_OutputDir_Browse.xaml.cs,forwardButton_Click,The method has an empty catch block.
Empty Catch Block,SlickUpdater,Unzippy,C:\repos\wigumen_SlickUpdater\SlickUpdater\Unzippy.cs,pluginMove,The method has an empty catch block.
Magic Number,SlickUpdater,AddModsLaunchOptions,C:\repos\wigumen_SlickUpdater\SlickUpdater\AddModsLaunchOptions.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\AddModsLaunchOptions.xaml"              ((SlickUpdater.AddModsLaunchOptions)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.folders = ((System.Windows.Controls.ListView)(target));              return;              case 3:              this.added = ((System.Windows.Controls.ListView)(target));              return;              case 4:              this.btn_done = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\AddModsLaunchOptions.xaml"              this.btn_done.Click += new System.Windows.RoutedEventHandler(this.btn_done_Click);                            #line default              #line hidden              return;              case 5:              this.btn_removeitem = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\AddModsLaunchOptions.xaml"              this.btn_removeitem.Click += new System.Windows.RoutedEventHandler(this.btn_removeitem_Click);                            #line default              #line hidden              return;              case 6:              this.btn_add = ((System.Windows.Controls.Button)(target));                            #line 22 "..\..\AddModsLaunchOptions.xaml"              this.btn_add.Click += new System.Windows.RoutedEventHandler(this.btn_add_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,AddModsLaunchOptions,C:\repos\wigumen_SlickUpdater\SlickUpdater\AddModsLaunchOptions.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\AddModsLaunchOptions.xaml"              ((SlickUpdater.AddModsLaunchOptions)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.folders = ((System.Windows.Controls.ListView)(target));              return;              case 3:              this.added = ((System.Windows.Controls.ListView)(target));              return;              case 4:              this.btn_done = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\AddModsLaunchOptions.xaml"              this.btn_done.Click += new System.Windows.RoutedEventHandler(this.btn_done_Click);                            #line default              #line hidden              return;              case 5:              this.btn_removeitem = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\AddModsLaunchOptions.xaml"              this.btn_removeitem.Click += new System.Windows.RoutedEventHandler(this.btn_removeitem_Click);                            #line default              #line hidden              return;              case 6:              this.btn_add = ((System.Windows.Controls.Button)(target));                            #line 22 "..\..\AddModsLaunchOptions.xaml"              this.btn_add.Click += new System.Windows.RoutedEventHandler(this.btn_add_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,AddModsLaunchOptions,C:\repos\wigumen_SlickUpdater\SlickUpdater\AddModsLaunchOptions.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\AddModsLaunchOptions.xaml"              ((SlickUpdater.AddModsLaunchOptions)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.folders = ((System.Windows.Controls.ListView)(target));              return;              case 3:              this.added = ((System.Windows.Controls.ListView)(target));              return;              case 4:              this.btn_done = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\AddModsLaunchOptions.xaml"              this.btn_done.Click += new System.Windows.RoutedEventHandler(this.btn_done_Click);                            #line default              #line hidden              return;              case 5:              this.btn_removeitem = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\AddModsLaunchOptions.xaml"              this.btn_removeitem.Click += new System.Windows.RoutedEventHandler(this.btn_removeitem_Click);                            #line default              #line hidden              return;              case 6:              this.btn_add = ((System.Windows.Controls.Button)(target));                            #line 22 "..\..\AddModsLaunchOptions.xaml"              this.btn_add.Click += new System.Windows.RoutedEventHandler(this.btn_add_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,AddModsLaunchOptions,C:\repos\wigumen_SlickUpdater\SlickUpdater\AddModsLaunchOptions.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\AddModsLaunchOptions.xaml"              ((SlickUpdater.AddModsLaunchOptions)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.folders = ((System.Windows.Controls.ListView)(target));              return;              case 3:              this.added = ((System.Windows.Controls.ListView)(target));              return;              case 4:              this.btn_done = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\AddModsLaunchOptions.xaml"              this.btn_done.Click += new System.Windows.RoutedEventHandler(this.btn_done_Click);                            #line default              #line hidden              return;              case 5:              this.btn_removeitem = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\AddModsLaunchOptions.xaml"              this.btn_removeitem.Click += new System.Windows.RoutedEventHandler(this.btn_removeitem_Click);                            #line default              #line hidden              return;              case 6:              this.btn_add = ((System.Windows.Controls.Button)(target));                            #line 22 "..\..\AddModsLaunchOptions.xaml"              this.btn_add.Click += new System.Windows.RoutedEventHandler(this.btn_add_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,AddModsLaunchOptions,C:\repos\wigumen_SlickUpdater\SlickUpdater\AddModsLaunchOptions.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\AddModsLaunchOptions.xaml"              ((SlickUpdater.AddModsLaunchOptions)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.folders = ((System.Windows.Controls.ListView)(target));              return;              case 3:              this.added = ((System.Windows.Controls.ListView)(target));              return;              case 4:              this.btn_done = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\AddModsLaunchOptions.xaml"              this.btn_done.Click += new System.Windows.RoutedEventHandler(this.btn_done_Click);                            #line default              #line hidden              return;              case 5:              this.btn_removeitem = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\AddModsLaunchOptions.xaml"              this.btn_removeitem.Click += new System.Windows.RoutedEventHandler(this.btn_removeitem_Click);                            #line default              #line hidden              return;              case 6:              this.btn_add = ((System.Windows.Controls.Button)(target));                            #line 22 "..\..\AddModsLaunchOptions.xaml"              this.btn_add.Click += new System.Windows.RoutedEventHandler(this.btn_add_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,Arma3LaunchOptionsDialogue,C:\repos\wigumen_SlickUpdater\SlickUpdater\Arma3LaunchOptionsDialogue.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\Arma3LaunchOptionsDialogue.xaml"              ((SlickUpdater.Arma3LaunchOptionsDialogue)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.window = ((System.Windows.Controls.CheckBox)(target));                            #line 6 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.window.Click += new System.Windows.RoutedEventHandler(this.window_Click);                            #line default              #line hidden              return;              case 3:              this.nosplash = ((System.Windows.Controls.CheckBox)(target));                            #line 7 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.nosplash.Click += new System.Windows.RoutedEventHandler(this.nosplash_Click);                            #line default              #line hidden              return;              case 4:              this.skipIntro = ((System.Windows.Controls.CheckBox)(target));                            #line 8 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.skipIntro.Click += new System.Windows.RoutedEventHandler(this.skipIntro_Click);                            #line default              #line hidden              return;              case 5:              this.world = ((System.Windows.Controls.TextBox)(target));                            #line 10 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.world.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.world_TextChanged);                            #line default              #line hidden              return;              case 6:              this.noLogs = ((System.Windows.Controls.CheckBox)(target));                            #line 11 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noLogs.Click += new System.Windows.RoutedEventHandler(this.noLogs_Click);                            #line default              #line hidden              return;              case 7:              this.noPause = ((System.Windows.Controls.CheckBox)(target));                            #line 12 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noPause.Click += new System.Windows.RoutedEventHandler(this.noPause_Click);                            #line default              #line hidden              return;              case 8:              this.showScriptErrors = ((System.Windows.Controls.CheckBox)(target));                            #line 13 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.showScriptErrors.Click += new System.Windows.RoutedEventHandler(this.showScriptErrors_Click);                            #line default              #line hidden              return;              case 9:              this.customParams = ((System.Windows.Controls.TextBox)(target));                            #line 15 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.customParams.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.customParams_TextChanged);                            #line default              #line hidden              return;              case 10:              this.btn_addmod = ((System.Windows.Controls.Button)(target));                            #line 16 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.btn_addmod.Click += new System.Windows.RoutedEventHandler(this.btn_addmod_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,Arma3LaunchOptionsDialogue,C:\repos\wigumen_SlickUpdater\SlickUpdater\Arma3LaunchOptionsDialogue.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\Arma3LaunchOptionsDialogue.xaml"              ((SlickUpdater.Arma3LaunchOptionsDialogue)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.window = ((System.Windows.Controls.CheckBox)(target));                            #line 6 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.window.Click += new System.Windows.RoutedEventHandler(this.window_Click);                            #line default              #line hidden              return;              case 3:              this.nosplash = ((System.Windows.Controls.CheckBox)(target));                            #line 7 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.nosplash.Click += new System.Windows.RoutedEventHandler(this.nosplash_Click);                            #line default              #line hidden              return;              case 4:              this.skipIntro = ((System.Windows.Controls.CheckBox)(target));                            #line 8 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.skipIntro.Click += new System.Windows.RoutedEventHandler(this.skipIntro_Click);                            #line default              #line hidden              return;              case 5:              this.world = ((System.Windows.Controls.TextBox)(target));                            #line 10 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.world.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.world_TextChanged);                            #line default              #line hidden              return;              case 6:              this.noLogs = ((System.Windows.Controls.CheckBox)(target));                            #line 11 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noLogs.Click += new System.Windows.RoutedEventHandler(this.noLogs_Click);                            #line default              #line hidden              return;              case 7:              this.noPause = ((System.Windows.Controls.CheckBox)(target));                            #line 12 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noPause.Click += new System.Windows.RoutedEventHandler(this.noPause_Click);                            #line default              #line hidden              return;              case 8:              this.showScriptErrors = ((System.Windows.Controls.CheckBox)(target));                            #line 13 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.showScriptErrors.Click += new System.Windows.RoutedEventHandler(this.showScriptErrors_Click);                            #line default              #line hidden              return;              case 9:              this.customParams = ((System.Windows.Controls.TextBox)(target));                            #line 15 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.customParams.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.customParams_TextChanged);                            #line default              #line hidden              return;              case 10:              this.btn_addmod = ((System.Windows.Controls.Button)(target));                            #line 16 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.btn_addmod.Click += new System.Windows.RoutedEventHandler(this.btn_addmod_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,Arma3LaunchOptionsDialogue,C:\repos\wigumen_SlickUpdater\SlickUpdater\Arma3LaunchOptionsDialogue.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\Arma3LaunchOptionsDialogue.xaml"              ((SlickUpdater.Arma3LaunchOptionsDialogue)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.window = ((System.Windows.Controls.CheckBox)(target));                            #line 6 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.window.Click += new System.Windows.RoutedEventHandler(this.window_Click);                            #line default              #line hidden              return;              case 3:              this.nosplash = ((System.Windows.Controls.CheckBox)(target));                            #line 7 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.nosplash.Click += new System.Windows.RoutedEventHandler(this.nosplash_Click);                            #line default              #line hidden              return;              case 4:              this.skipIntro = ((System.Windows.Controls.CheckBox)(target));                            #line 8 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.skipIntro.Click += new System.Windows.RoutedEventHandler(this.skipIntro_Click);                            #line default              #line hidden              return;              case 5:              this.world = ((System.Windows.Controls.TextBox)(target));                            #line 10 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.world.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.world_TextChanged);                            #line default              #line hidden              return;              case 6:              this.noLogs = ((System.Windows.Controls.CheckBox)(target));                            #line 11 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noLogs.Click += new System.Windows.RoutedEventHandler(this.noLogs_Click);                            #line default              #line hidden              return;              case 7:              this.noPause = ((System.Windows.Controls.CheckBox)(target));                            #line 12 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noPause.Click += new System.Windows.RoutedEventHandler(this.noPause_Click);                            #line default              #line hidden              return;              case 8:              this.showScriptErrors = ((System.Windows.Controls.CheckBox)(target));                            #line 13 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.showScriptErrors.Click += new System.Windows.RoutedEventHandler(this.showScriptErrors_Click);                            #line default              #line hidden              return;              case 9:              this.customParams = ((System.Windows.Controls.TextBox)(target));                            #line 15 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.customParams.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.customParams_TextChanged);                            #line default              #line hidden              return;              case 10:              this.btn_addmod = ((System.Windows.Controls.Button)(target));                            #line 16 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.btn_addmod.Click += new System.Windows.RoutedEventHandler(this.btn_addmod_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,Arma3LaunchOptionsDialogue,C:\repos\wigumen_SlickUpdater\SlickUpdater\Arma3LaunchOptionsDialogue.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\Arma3LaunchOptionsDialogue.xaml"              ((SlickUpdater.Arma3LaunchOptionsDialogue)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.window = ((System.Windows.Controls.CheckBox)(target));                            #line 6 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.window.Click += new System.Windows.RoutedEventHandler(this.window_Click);                            #line default              #line hidden              return;              case 3:              this.nosplash = ((System.Windows.Controls.CheckBox)(target));                            #line 7 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.nosplash.Click += new System.Windows.RoutedEventHandler(this.nosplash_Click);                            #line default              #line hidden              return;              case 4:              this.skipIntro = ((System.Windows.Controls.CheckBox)(target));                            #line 8 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.skipIntro.Click += new System.Windows.RoutedEventHandler(this.skipIntro_Click);                            #line default              #line hidden              return;              case 5:              this.world = ((System.Windows.Controls.TextBox)(target));                            #line 10 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.world.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.world_TextChanged);                            #line default              #line hidden              return;              case 6:              this.noLogs = ((System.Windows.Controls.CheckBox)(target));                            #line 11 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noLogs.Click += new System.Windows.RoutedEventHandler(this.noLogs_Click);                            #line default              #line hidden              return;              case 7:              this.noPause = ((System.Windows.Controls.CheckBox)(target));                            #line 12 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noPause.Click += new System.Windows.RoutedEventHandler(this.noPause_Click);                            #line default              #line hidden              return;              case 8:              this.showScriptErrors = ((System.Windows.Controls.CheckBox)(target));                            #line 13 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.showScriptErrors.Click += new System.Windows.RoutedEventHandler(this.showScriptErrors_Click);                            #line default              #line hidden              return;              case 9:              this.customParams = ((System.Windows.Controls.TextBox)(target));                            #line 15 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.customParams.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.customParams_TextChanged);                            #line default              #line hidden              return;              case 10:              this.btn_addmod = ((System.Windows.Controls.Button)(target));                            #line 16 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.btn_addmod.Click += new System.Windows.RoutedEventHandler(this.btn_addmod_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,Arma3LaunchOptionsDialogue,C:\repos\wigumen_SlickUpdater\SlickUpdater\Arma3LaunchOptionsDialogue.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\Arma3LaunchOptionsDialogue.xaml"              ((SlickUpdater.Arma3LaunchOptionsDialogue)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.window = ((System.Windows.Controls.CheckBox)(target));                            #line 6 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.window.Click += new System.Windows.RoutedEventHandler(this.window_Click);                            #line default              #line hidden              return;              case 3:              this.nosplash = ((System.Windows.Controls.CheckBox)(target));                            #line 7 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.nosplash.Click += new System.Windows.RoutedEventHandler(this.nosplash_Click);                            #line default              #line hidden              return;              case 4:              this.skipIntro = ((System.Windows.Controls.CheckBox)(target));                            #line 8 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.skipIntro.Click += new System.Windows.RoutedEventHandler(this.skipIntro_Click);                            #line default              #line hidden              return;              case 5:              this.world = ((System.Windows.Controls.TextBox)(target));                            #line 10 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.world.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.world_TextChanged);                            #line default              #line hidden              return;              case 6:              this.noLogs = ((System.Windows.Controls.CheckBox)(target));                            #line 11 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noLogs.Click += new System.Windows.RoutedEventHandler(this.noLogs_Click);                            #line default              #line hidden              return;              case 7:              this.noPause = ((System.Windows.Controls.CheckBox)(target));                            #line 12 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noPause.Click += new System.Windows.RoutedEventHandler(this.noPause_Click);                            #line default              #line hidden              return;              case 8:              this.showScriptErrors = ((System.Windows.Controls.CheckBox)(target));                            #line 13 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.showScriptErrors.Click += new System.Windows.RoutedEventHandler(this.showScriptErrors_Click);                            #line default              #line hidden              return;              case 9:              this.customParams = ((System.Windows.Controls.TextBox)(target));                            #line 15 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.customParams.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.customParams_TextChanged);                            #line default              #line hidden              return;              case 10:              this.btn_addmod = ((System.Windows.Controls.Button)(target));                            #line 16 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.btn_addmod.Click += new System.Windows.RoutedEventHandler(this.btn_addmod_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,Arma3LaunchOptionsDialogue,C:\repos\wigumen_SlickUpdater\SlickUpdater\Arma3LaunchOptionsDialogue.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\Arma3LaunchOptionsDialogue.xaml"              ((SlickUpdater.Arma3LaunchOptionsDialogue)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.window = ((System.Windows.Controls.CheckBox)(target));                            #line 6 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.window.Click += new System.Windows.RoutedEventHandler(this.window_Click);                            #line default              #line hidden              return;              case 3:              this.nosplash = ((System.Windows.Controls.CheckBox)(target));                            #line 7 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.nosplash.Click += new System.Windows.RoutedEventHandler(this.nosplash_Click);                            #line default              #line hidden              return;              case 4:              this.skipIntro = ((System.Windows.Controls.CheckBox)(target));                            #line 8 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.skipIntro.Click += new System.Windows.RoutedEventHandler(this.skipIntro_Click);                            #line default              #line hidden              return;              case 5:              this.world = ((System.Windows.Controls.TextBox)(target));                            #line 10 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.world.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.world_TextChanged);                            #line default              #line hidden              return;              case 6:              this.noLogs = ((System.Windows.Controls.CheckBox)(target));                            #line 11 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noLogs.Click += new System.Windows.RoutedEventHandler(this.noLogs_Click);                            #line default              #line hidden              return;              case 7:              this.noPause = ((System.Windows.Controls.CheckBox)(target));                            #line 12 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noPause.Click += new System.Windows.RoutedEventHandler(this.noPause_Click);                            #line default              #line hidden              return;              case 8:              this.showScriptErrors = ((System.Windows.Controls.CheckBox)(target));                            #line 13 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.showScriptErrors.Click += new System.Windows.RoutedEventHandler(this.showScriptErrors_Click);                            #line default              #line hidden              return;              case 9:              this.customParams = ((System.Windows.Controls.TextBox)(target));                            #line 15 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.customParams.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.customParams_TextChanged);                            #line default              #line hidden              return;              case 10:              this.btn_addmod = ((System.Windows.Controls.Button)(target));                            #line 16 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.btn_addmod.Click += new System.Windows.RoutedEventHandler(this.btn_addmod_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,Arma3LaunchOptionsDialogue,C:\repos\wigumen_SlickUpdater\SlickUpdater\Arma3LaunchOptionsDialogue.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\Arma3LaunchOptionsDialogue.xaml"              ((SlickUpdater.Arma3LaunchOptionsDialogue)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.window = ((System.Windows.Controls.CheckBox)(target));                            #line 6 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.window.Click += new System.Windows.RoutedEventHandler(this.window_Click);                            #line default              #line hidden              return;              case 3:              this.nosplash = ((System.Windows.Controls.CheckBox)(target));                            #line 7 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.nosplash.Click += new System.Windows.RoutedEventHandler(this.nosplash_Click);                            #line default              #line hidden              return;              case 4:              this.skipIntro = ((System.Windows.Controls.CheckBox)(target));                            #line 8 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.skipIntro.Click += new System.Windows.RoutedEventHandler(this.skipIntro_Click);                            #line default              #line hidden              return;              case 5:              this.world = ((System.Windows.Controls.TextBox)(target));                            #line 10 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.world.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.world_TextChanged);                            #line default              #line hidden              return;              case 6:              this.noLogs = ((System.Windows.Controls.CheckBox)(target));                            #line 11 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noLogs.Click += new System.Windows.RoutedEventHandler(this.noLogs_Click);                            #line default              #line hidden              return;              case 7:              this.noPause = ((System.Windows.Controls.CheckBox)(target));                            #line 12 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noPause.Click += new System.Windows.RoutedEventHandler(this.noPause_Click);                            #line default              #line hidden              return;              case 8:              this.showScriptErrors = ((System.Windows.Controls.CheckBox)(target));                            #line 13 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.showScriptErrors.Click += new System.Windows.RoutedEventHandler(this.showScriptErrors_Click);                            #line default              #line hidden              return;              case 9:              this.customParams = ((System.Windows.Controls.TextBox)(target));                            #line 15 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.customParams.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.customParams_TextChanged);                            #line default              #line hidden              return;              case 10:              this.btn_addmod = ((System.Windows.Controls.Button)(target));                            #line 16 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.btn_addmod.Click += new System.Windows.RoutedEventHandler(this.btn_addmod_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,Arma3LaunchOptionsDialogue,C:\repos\wigumen_SlickUpdater\SlickUpdater\Arma3LaunchOptionsDialogue.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\Arma3LaunchOptionsDialogue.xaml"              ((SlickUpdater.Arma3LaunchOptionsDialogue)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.window = ((System.Windows.Controls.CheckBox)(target));                            #line 6 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.window.Click += new System.Windows.RoutedEventHandler(this.window_Click);                            #line default              #line hidden              return;              case 3:              this.nosplash = ((System.Windows.Controls.CheckBox)(target));                            #line 7 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.nosplash.Click += new System.Windows.RoutedEventHandler(this.nosplash_Click);                            #line default              #line hidden              return;              case 4:              this.skipIntro = ((System.Windows.Controls.CheckBox)(target));                            #line 8 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.skipIntro.Click += new System.Windows.RoutedEventHandler(this.skipIntro_Click);                            #line default              #line hidden              return;              case 5:              this.world = ((System.Windows.Controls.TextBox)(target));                            #line 10 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.world.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.world_TextChanged);                            #line default              #line hidden              return;              case 6:              this.noLogs = ((System.Windows.Controls.CheckBox)(target));                            #line 11 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noLogs.Click += new System.Windows.RoutedEventHandler(this.noLogs_Click);                            #line default              #line hidden              return;              case 7:              this.noPause = ((System.Windows.Controls.CheckBox)(target));                            #line 12 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noPause.Click += new System.Windows.RoutedEventHandler(this.noPause_Click);                            #line default              #line hidden              return;              case 8:              this.showScriptErrors = ((System.Windows.Controls.CheckBox)(target));                            #line 13 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.showScriptErrors.Click += new System.Windows.RoutedEventHandler(this.showScriptErrors_Click);                            #line default              #line hidden              return;              case 9:              this.customParams = ((System.Windows.Controls.TextBox)(target));                            #line 15 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.customParams.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.customParams_TextChanged);                            #line default              #line hidden              return;              case 10:              this.btn_addmod = ((System.Windows.Controls.Button)(target));                            #line 16 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.btn_addmod.Click += new System.Windows.RoutedEventHandler(this.btn_addmod_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,Arma3LaunchOptionsDialogue,C:\repos\wigumen_SlickUpdater\SlickUpdater\Arma3LaunchOptionsDialogue.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\Arma3LaunchOptionsDialogue.xaml"              ((SlickUpdater.Arma3LaunchOptionsDialogue)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.window = ((System.Windows.Controls.CheckBox)(target));                            #line 6 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.window.Click += new System.Windows.RoutedEventHandler(this.window_Click);                            #line default              #line hidden              return;              case 3:              this.nosplash = ((System.Windows.Controls.CheckBox)(target));                            #line 7 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.nosplash.Click += new System.Windows.RoutedEventHandler(this.nosplash_Click);                            #line default              #line hidden              return;              case 4:              this.skipIntro = ((System.Windows.Controls.CheckBox)(target));                            #line 8 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.skipIntro.Click += new System.Windows.RoutedEventHandler(this.skipIntro_Click);                            #line default              #line hidden              return;              case 5:              this.world = ((System.Windows.Controls.TextBox)(target));                            #line 10 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.world.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.world_TextChanged);                            #line default              #line hidden              return;              case 6:              this.noLogs = ((System.Windows.Controls.CheckBox)(target));                            #line 11 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noLogs.Click += new System.Windows.RoutedEventHandler(this.noLogs_Click);                            #line default              #line hidden              return;              case 7:              this.noPause = ((System.Windows.Controls.CheckBox)(target));                            #line 12 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noPause.Click += new System.Windows.RoutedEventHandler(this.noPause_Click);                            #line default              #line hidden              return;              case 8:              this.showScriptErrors = ((System.Windows.Controls.CheckBox)(target));                            #line 13 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.showScriptErrors.Click += new System.Windows.RoutedEventHandler(this.showScriptErrors_Click);                            #line default              #line hidden              return;              case 9:              this.customParams = ((System.Windows.Controls.TextBox)(target));                            #line 15 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.customParams.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.customParams_TextChanged);                            #line default              #line hidden              return;              case 10:              this.btn_addmod = ((System.Windows.Controls.Button)(target));                            #line 16 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.btn_addmod.Click += new System.Windows.RoutedEventHandler(this.btn_addmod_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,downloader,C:\repos\wigumen_SlickUpdater\SlickUpdater\downloader.cs,download,The following statement contains a magic number: while (!downloadFinished) { System.Threading.Thread.Sleep(20);  }
Magic Number,SlickUpdater,log,C:\repos\wigumen_SlickUpdater\SlickUpdater\log.xaml.cs,constantUpdate,The following statement contains a magic number: System.Threading.Thread.Sleep(200);
Magic Number,SlickUpdater,log,C:\repos\wigumen_SlickUpdater\SlickUpdater\log.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.logwindow = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.clear = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\log.xaml"              this.clear.Click += new System.Windows.RoutedEventHandler(this.Button_Click_1);                            #line default              #line hidden              return;              case 3:              this.copy = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\log.xaml"              this.copy.Click += new System.Windows.RoutedEventHandler(this.copy_Click);                            #line default              #line hidden              return;              case 4:              this.updatelog = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\log.xaml"              this.updatelog.Click += new System.Windows.RoutedEventHandler(this.updatelog_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,log,C:\repos\wigumen_SlickUpdater\SlickUpdater\log.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.logwindow = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.clear = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\log.xaml"              this.clear.Click += new System.Windows.RoutedEventHandler(this.Button_Click_1);                            #line default              #line hidden              return;              case 3:              this.copy = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\log.xaml"              this.copy.Click += new System.Windows.RoutedEventHandler(this.copy_Click);                            #line default              #line hidden              return;              case 4:              this.updatelog = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\log.xaml"              this.updatelog.Click += new System.Windows.RoutedEventHandler(this.updatelog_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,log,C:\repos\wigumen_SlickUpdater\SlickUpdater\log.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.logwindow = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.clear = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\log.xaml"              this.clear.Click += new System.Windows.RoutedEventHandler(this.Button_Click_1);                            #line default              #line hidden              return;              case 3:              this.copy = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\log.xaml"              this.copy.Click += new System.Windows.RoutedEventHandler(this.copy_Click);                            #line default              #line hidden              return;              case 4:              this.updatelog = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\log.xaml"              this.updatelog.Click += new System.Windows.RoutedEventHandler(this.updatelog_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,newRepo,C:\repos\wigumen_SlickUpdater\SlickUpdater\newRepo.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.pathbox = ((System.Windows.Controls.TextBox)(target));                            #line 13 "..\..\newRepo.xaml"              this.pathbox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.updatePath);                            #line default              #line hidden              return;              case 2:                            #line 14 "..\..\newRepo.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.openFileBrowser);                            #line default              #line hidden              return;              case 3:              this.NameBox = ((System.Windows.Controls.TextBox)(target));                            #line 16 "..\..\newRepo.xaml"              this.NameBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.updateName);                            #line default              #line hidden              return;              case 4:                            #line 17 "..\..\newRepo.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.save);                            #line default              #line hidden              return;              case 5:                            #line 18 "..\..\newRepo.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.cancel);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,newRepo,C:\repos\wigumen_SlickUpdater\SlickUpdater\newRepo.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.pathbox = ((System.Windows.Controls.TextBox)(target));                            #line 13 "..\..\newRepo.xaml"              this.pathbox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.updatePath);                            #line default              #line hidden              return;              case 2:                            #line 14 "..\..\newRepo.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.openFileBrowser);                            #line default              #line hidden              return;              case 3:              this.NameBox = ((System.Windows.Controls.TextBox)(target));                            #line 16 "..\..\newRepo.xaml"              this.NameBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.updateName);                            #line default              #line hidden              return;              case 4:                            #line 17 "..\..\newRepo.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.save);                            #line default              #line hidden              return;              case 5:                            #line 18 "..\..\newRepo.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.cancel);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,newRepo,C:\repos\wigumen_SlickUpdater\SlickUpdater\newRepo.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.pathbox = ((System.Windows.Controls.TextBox)(target));                            #line 13 "..\..\newRepo.xaml"              this.pathbox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.updatePath);                            #line default              #line hidden              return;              case 2:                            #line 14 "..\..\newRepo.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.openFileBrowser);                            #line default              #line hidden              return;              case 3:              this.NameBox = ((System.Windows.Controls.TextBox)(target));                            #line 16 "..\..\newRepo.xaml"              this.NameBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.updateName);                            #line default              #line hidden              return;              case 4:                            #line 17 "..\..\newRepo.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.save);                            #line default              #line hidden              return;              case 5:                            #line 18 "..\..\newRepo.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.cancel);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,newRepo,C:\repos\wigumen_SlickUpdater\SlickUpdater\newRepo.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.pathbox = ((System.Windows.Controls.TextBox)(target));                            #line 13 "..\..\newRepo.xaml"              this.pathbox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.updatePath);                            #line default              #line hidden              return;              case 2:                            #line 14 "..\..\newRepo.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.openFileBrowser);                            #line default              #line hidden              return;              case 3:              this.NameBox = ((System.Windows.Controls.TextBox)(target));                            #line 16 "..\..\newRepo.xaml"              this.NameBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.updateName);                            #line default              #line hidden              return;              case 4:                            #line 17 "..\..\newRepo.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.save);                            #line default              #line hidden              return;              case 5:                            #line 18 "..\..\newRepo.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.cancel);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,SlickVerify,C:\repos\wigumen_SlickUpdater\SlickUpdater\SlickVerify.cs,HashFiles,The following statement contains a magic number: for (int i = 0; i < HashList.Count; i++)              {                  String[] tmp = MD5Compare2((Dir.Replace(@"\"' "/") + HashList[i])' (Url + HashList[i]));                  if (tmp[2] == "False")                  {                      DownloadList.Add(HashList[i]);                  }              }
Magic Number,SlickUpdater,SlickVerify,C:\repos\wigumen_SlickUpdater\SlickUpdater\SlickVerify.cs,WebReadLines,The following statement contains a magic number: _Request.Timeout = 3000;
Magic Number,SlickUpdater,SlickVerify,C:\repos\wigumen_SlickUpdater\SlickUpdater\SlickVerify.cs,WebReadLines,The following statement contains a magic number: _Request.ReadWriteTimeout = 3000;
Magic Number,SlickUpdater,UpdateManager,C:\repos\wigumen_SlickUpdater\SlickUpdater\UpdateManager.cs,UpdateCheck,The following statement contains a magic number: WindowManager.mainWindow.CheckWorker.ReportProgress(2' a3Items);
Magic Number,SlickUpdater,UpdateManager,C:\repos\wigumen_SlickUpdater\SlickUpdater\UpdateManager.cs,a3Update,The following statement contains a magic number: foreach (string modline in mods)              {                  i++;                  int index = modline.IndexOf("#");                  if (index != 0)                  {                      if (index != -1)                      {                          mod = modline.Substring(0' index);                      }                      else                      {                          mod = modline;                      }                      modFolder = armaPath + "\\" + mod;                      if (Directory.Exists(modFolder))                      {                          string versionFile = armaPath + "\\" + mod + "\\" + "SU.version";                          string version0File = "SU.version";                          if (File.Exists(versionFile))                          {                              versionString = File.ReadAllText(versionFile);                              version0String = downloader.webRead(url + mod + "\\" + version0File);                              logIt.add("Fetched versionfile from server version is " + versionString);                              File.Delete(version0File);                              if (versionString == version0String)                              {                                  //a3Items.Add(new Mod() { status = modGreen' modName = mod });                                  //MessageBox.Show(mod + " is up to date.");                              }                              else                              {                                  //a3Items.Add(new Mod() { status = modYellow' modName = mod });                                  //MessageBox.Show(mod + " is out of date.");                                  a3DetailUpdate(mod' client);                              }                          }                          else                          {                              //a3Items.Add(new Mod() { status = modBrown' modName = mod });                              //MessageBox.Show(mod + " is missing a version file.");                              version0String = downloader.webRead(url + mod + "\\" + version0File);                              MessageBoxResult result =                                  MessageBox.Show(                                      "SlickUpdater have detected that you have the folder " + modFolder +                                      " if your 100% sure this is up to date you don't have to re-download. \n\nAre you sure this mod is up to date?"'                                      "Mod folder detacted"' MessageBoxButton.YesNo);                              switch (result)                              {                                  case MessageBoxResult.Yes:                                      File.WriteAllText(modFolder + "\\SU.version"' version0String);                                      break;                                  case MessageBoxResult.No:                                      a3DetailUpdate(mod' client);                                      break;                              }                          }                      }                      else                      {                          //a3Items.Add(new Mod() { status = modBlue' modName = mod });                          //MessageBox.Show(mod + " doesn't exist on your computer.");                          a3DetailUpdate(mod' client);                      }                  }                  double status = i/(double) mods.Length;                  WindowManager.mainWindow.Worker.ReportProgress((int) (status*100) + 202);              }
Magic Number,SlickUpdater,UpdateManager,C:\repos\wigumen_SlickUpdater\SlickUpdater\UpdateManager.cs,a3Update,The following statement contains a magic number: foreach (string modline in mods)              {                  i++;                  int index = modline.IndexOf("#");                  if (index != 0)                  {                      if (index != -1)                      {                          mod = modline.Substring(0' index);                      }                      else                      {                          mod = modline;                      }                      modFolder = armaPath + "\\" + mod;                      if (Directory.Exists(modFolder))                      {                          string versionFile = armaPath + "\\" + mod + "\\" + "SU.version";                          string version0File = "SU.version";                          if (File.Exists(versionFile))                          {                              versionString = File.ReadAllText(versionFile);                              version0String = downloader.webRead(url + mod + "\\" + version0File);                              logIt.add("Fetched versionfile from server version is " + versionString);                              File.Delete(version0File);                              if (versionString == version0String)                              {                                  //a3Items.Add(new Mod() { status = modGreen' modName = mod });                                  //MessageBox.Show(mod + " is up to date.");                              }                              else                              {                                  //a3Items.Add(new Mod() { status = modYellow' modName = mod });                                  //MessageBox.Show(mod + " is out of date.");                                  a3DetailUpdate(mod' client);                              }                          }                          else                          {                              //a3Items.Add(new Mod() { status = modBrown' modName = mod });                              //MessageBox.Show(mod + " is missing a version file.");                              version0String = downloader.webRead(url + mod + "\\" + version0File);                              MessageBoxResult result =                                  MessageBox.Show(                                      "SlickUpdater have detected that you have the folder " + modFolder +                                      " if your 100% sure this is up to date you don't have to re-download. \n\nAre you sure this mod is up to date?"'                                      "Mod folder detacted"' MessageBoxButton.YesNo);                              switch (result)                              {                                  case MessageBoxResult.Yes:                                      File.WriteAllText(modFolder + "\\SU.version"' version0String);                                      break;                                  case MessageBoxResult.No:                                      a3DetailUpdate(mod' client);                                      break;                              }                          }                      }                      else                      {                          //a3Items.Add(new Mod() { status = modBlue' modName = mod });                          //MessageBox.Show(mod + " doesn't exist on your computer.");                          a3DetailUpdate(mod' client);                      }                  }                  double status = i/(double) mods.Length;                  WindowManager.mainWindow.Worker.ReportProgress((int) (status*100) + 202);              }
Magic Number,SlickUpdater,UpdateManager,C:\repos\wigumen_SlickUpdater\SlickUpdater\UpdateManager.cs,increment,The following statement contains a magic number: WindowManager.mainWindow.Worker.ReportProgress((int) (progress*100) + 101);
Magic Number,SlickUpdater,UpdateManager,C:\repos\wigumen_SlickUpdater\SlickUpdater\UpdateManager.cs,increment,The following statement contains a magic number: WindowManager.mainWindow.Worker.ReportProgress((int) (progress*100) + 101);
Magic Number,SlickUpdater,RepoGen_InputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_InputDir_Browse.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\RepoGen_InputDir_Browse.xaml"              ((SlickUpdater.RepoGen_InputDir_Browse)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_InputDir_Browse.xaml"              ((SlickUpdater.RepoGen_InputDir_Browse)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 6 "..\..\RepoGen_InputDir_Browse.xaml"              this.Browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.Browser_Navigated);                            #line default              #line hidden              return;              case 3:              this.cancelButton = ((System.Windows.Controls.Button)(target));                            #line 7 "..\..\RepoGen_InputDir_Browse.xaml"              this.cancelButton.Click += new System.Windows.RoutedEventHandler(this.cancelButton_Click);                            #line default              #line hidden              return;              case 4:              this.setDirectoryButton = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\RepoGen_InputDir_Browse.xaml"              this.setDirectoryButton.Click += new System.Windows.RoutedEventHandler(this.setDirectoryButton_Click);                            #line default              #line hidden              return;              case 5:              this.backButton = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\RepoGen_InputDir_Browse.xaml"              this.backButton.Click += new System.Windows.RoutedEventHandler(this.backButton_Click);                            #line default              #line hidden              return;              case 6:              this.forwardButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_InputDir_Browse.xaml"              this.forwardButton.Click += new System.Windows.RoutedEventHandler(this.forwardButton_Click);                            #line default              #line hidden              return;              case 7:              this.upButton = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_InputDir_Browse.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 8:              this.dirTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,SlickUpdater,RepoGen_InputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_InputDir_Browse.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\RepoGen_InputDir_Browse.xaml"              ((SlickUpdater.RepoGen_InputDir_Browse)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_InputDir_Browse.xaml"              ((SlickUpdater.RepoGen_InputDir_Browse)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 6 "..\..\RepoGen_InputDir_Browse.xaml"              this.Browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.Browser_Navigated);                            #line default              #line hidden              return;              case 3:              this.cancelButton = ((System.Windows.Controls.Button)(target));                            #line 7 "..\..\RepoGen_InputDir_Browse.xaml"              this.cancelButton.Click += new System.Windows.RoutedEventHandler(this.cancelButton_Click);                            #line default              #line hidden              return;              case 4:              this.setDirectoryButton = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\RepoGen_InputDir_Browse.xaml"              this.setDirectoryButton.Click += new System.Windows.RoutedEventHandler(this.setDirectoryButton_Click);                            #line default              #line hidden              return;              case 5:              this.backButton = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\RepoGen_InputDir_Browse.xaml"              this.backButton.Click += new System.Windows.RoutedEventHandler(this.backButton_Click);                            #line default              #line hidden              return;              case 6:              this.forwardButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_InputDir_Browse.xaml"              this.forwardButton.Click += new System.Windows.RoutedEventHandler(this.forwardButton_Click);                            #line default              #line hidden              return;              case 7:              this.upButton = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_InputDir_Browse.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 8:              this.dirTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,SlickUpdater,RepoGen_InputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_InputDir_Browse.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\RepoGen_InputDir_Browse.xaml"              ((SlickUpdater.RepoGen_InputDir_Browse)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_InputDir_Browse.xaml"              ((SlickUpdater.RepoGen_InputDir_Browse)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 6 "..\..\RepoGen_InputDir_Browse.xaml"              this.Browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.Browser_Navigated);                            #line default              #line hidden              return;              case 3:              this.cancelButton = ((System.Windows.Controls.Button)(target));                            #line 7 "..\..\RepoGen_InputDir_Browse.xaml"              this.cancelButton.Click += new System.Windows.RoutedEventHandler(this.cancelButton_Click);                            #line default              #line hidden              return;              case 4:              this.setDirectoryButton = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\RepoGen_InputDir_Browse.xaml"              this.setDirectoryButton.Click += new System.Windows.RoutedEventHandler(this.setDirectoryButton_Click);                            #line default              #line hidden              return;              case 5:              this.backButton = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\RepoGen_InputDir_Browse.xaml"              this.backButton.Click += new System.Windows.RoutedEventHandler(this.backButton_Click);                            #line default              #line hidden              return;              case 6:              this.forwardButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_InputDir_Browse.xaml"              this.forwardButton.Click += new System.Windows.RoutedEventHandler(this.forwardButton_Click);                            #line default              #line hidden              return;              case 7:              this.upButton = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_InputDir_Browse.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 8:              this.dirTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,SlickUpdater,RepoGen_InputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_InputDir_Browse.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\RepoGen_InputDir_Browse.xaml"              ((SlickUpdater.RepoGen_InputDir_Browse)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_InputDir_Browse.xaml"              ((SlickUpdater.RepoGen_InputDir_Browse)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 6 "..\..\RepoGen_InputDir_Browse.xaml"              this.Browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.Browser_Navigated);                            #line default              #line hidden              return;              case 3:              this.cancelButton = ((System.Windows.Controls.Button)(target));                            #line 7 "..\..\RepoGen_InputDir_Browse.xaml"              this.cancelButton.Click += new System.Windows.RoutedEventHandler(this.cancelButton_Click);                            #line default              #line hidden              return;              case 4:              this.setDirectoryButton = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\RepoGen_InputDir_Browse.xaml"              this.setDirectoryButton.Click += new System.Windows.RoutedEventHandler(this.setDirectoryButton_Click);                            #line default              #line hidden              return;              case 5:              this.backButton = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\RepoGen_InputDir_Browse.xaml"              this.backButton.Click += new System.Windows.RoutedEventHandler(this.backButton_Click);                            #line default              #line hidden              return;              case 6:              this.forwardButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_InputDir_Browse.xaml"              this.forwardButton.Click += new System.Windows.RoutedEventHandler(this.forwardButton_Click);                            #line default              #line hidden              return;              case 7:              this.upButton = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_InputDir_Browse.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 8:              this.dirTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,SlickUpdater,RepoGen_InputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_InputDir_Browse.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\RepoGen_InputDir_Browse.xaml"              ((SlickUpdater.RepoGen_InputDir_Browse)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_InputDir_Browse.xaml"              ((SlickUpdater.RepoGen_InputDir_Browse)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 6 "..\..\RepoGen_InputDir_Browse.xaml"              this.Browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.Browser_Navigated);                            #line default              #line hidden              return;              case 3:              this.cancelButton = ((System.Windows.Controls.Button)(target));                            #line 7 "..\..\RepoGen_InputDir_Browse.xaml"              this.cancelButton.Click += new System.Windows.RoutedEventHandler(this.cancelButton_Click);                            #line default              #line hidden              return;              case 4:              this.setDirectoryButton = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\RepoGen_InputDir_Browse.xaml"              this.setDirectoryButton.Click += new System.Windows.RoutedEventHandler(this.setDirectoryButton_Click);                            #line default              #line hidden              return;              case 5:              this.backButton = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\RepoGen_InputDir_Browse.xaml"              this.backButton.Click += new System.Windows.RoutedEventHandler(this.backButton_Click);                            #line default              #line hidden              return;              case 6:              this.forwardButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_InputDir_Browse.xaml"              this.forwardButton.Click += new System.Windows.RoutedEventHandler(this.forwardButton_Click);                            #line default              #line hidden              return;              case 7:              this.upButton = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_InputDir_Browse.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 8:              this.dirTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,SlickUpdater,RepoGen_InputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_InputDir_Browse.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\RepoGen_InputDir_Browse.xaml"              ((SlickUpdater.RepoGen_InputDir_Browse)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_InputDir_Browse.xaml"              ((SlickUpdater.RepoGen_InputDir_Browse)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 6 "..\..\RepoGen_InputDir_Browse.xaml"              this.Browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.Browser_Navigated);                            #line default              #line hidden              return;              case 3:              this.cancelButton = ((System.Windows.Controls.Button)(target));                            #line 7 "..\..\RepoGen_InputDir_Browse.xaml"              this.cancelButton.Click += new System.Windows.RoutedEventHandler(this.cancelButton_Click);                            #line default              #line hidden              return;              case 4:              this.setDirectoryButton = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\RepoGen_InputDir_Browse.xaml"              this.setDirectoryButton.Click += new System.Windows.RoutedEventHandler(this.setDirectoryButton_Click);                            #line default              #line hidden              return;              case 5:              this.backButton = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\RepoGen_InputDir_Browse.xaml"              this.backButton.Click += new System.Windows.RoutedEventHandler(this.backButton_Click);                            #line default              #line hidden              return;              case 6:              this.forwardButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_InputDir_Browse.xaml"              this.forwardButton.Click += new System.Windows.RoutedEventHandler(this.forwardButton_Click);                            #line default              #line hidden              return;              case 7:              this.upButton = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_InputDir_Browse.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 8:              this.dirTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,SlickUpdater,RepoGen_InputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_InputDir_Browse.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\RepoGen_InputDir_Browse.xaml"              ((SlickUpdater.RepoGen_InputDir_Browse)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_InputDir_Browse.xaml"              ((SlickUpdater.RepoGen_InputDir_Browse)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 6 "..\..\RepoGen_InputDir_Browse.xaml"              this.Browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.Browser_Navigated);                            #line default              #line hidden              return;              case 3:              this.cancelButton = ((System.Windows.Controls.Button)(target));                            #line 7 "..\..\RepoGen_InputDir_Browse.xaml"              this.cancelButton.Click += new System.Windows.RoutedEventHandler(this.cancelButton_Click);                            #line default              #line hidden              return;              case 4:              this.setDirectoryButton = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\RepoGen_InputDir_Browse.xaml"              this.setDirectoryButton.Click += new System.Windows.RoutedEventHandler(this.setDirectoryButton_Click);                            #line default              #line hidden              return;              case 5:              this.backButton = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\RepoGen_InputDir_Browse.xaml"              this.backButton.Click += new System.Windows.RoutedEventHandler(this.backButton_Click);                            #line default              #line hidden              return;              case 6:              this.forwardButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_InputDir_Browse.xaml"              this.forwardButton.Click += new System.Windows.RoutedEventHandler(this.forwardButton_Click);                            #line default              #line hidden              return;              case 7:              this.upButton = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_InputDir_Browse.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 8:              this.dirTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,SlickUpdater,RepoGen_Options,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_Options.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.repoGenWindow = ((SlickUpdater.RepoGen_Options)(target));                            #line 4 "..\..\RepoGen_Options.xaml"              this.repoGenWindow.Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_Options.xaml"              this.repoGenWindow.Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.outputDir_textBox = ((System.Windows.Controls.TextBox)(target));                            #line 7 "..\..\RepoGen_Options.xaml"              this.outputDir_textBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.outputDir_textBox_TextChanged);                            #line default              #line hidden              return;              case 3:              this.inputDir_textBox = ((System.Windows.Controls.TextBox)(target));                            #line 9 "..\..\RepoGen_Options.xaml"              this.inputDir_textBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.inputDir_textBox_TextChanged);                            #line default              #line hidden              return;              case 4:              this.inputDir_Button = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_Options.xaml"              this.inputDir_Button.Click += new System.Windows.RoutedEventHandler(this.inputDir_Button_Click);                            #line default              #line hidden              return;              case 5:              this.outputDir_Button = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_Options.xaml"              this.outputDir_Button.Click += new System.Windows.RoutedEventHandler(this.outputDir_Button_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,RepoGen_Options,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_Options.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.repoGenWindow = ((SlickUpdater.RepoGen_Options)(target));                            #line 4 "..\..\RepoGen_Options.xaml"              this.repoGenWindow.Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_Options.xaml"              this.repoGenWindow.Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.outputDir_textBox = ((System.Windows.Controls.TextBox)(target));                            #line 7 "..\..\RepoGen_Options.xaml"              this.outputDir_textBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.outputDir_textBox_TextChanged);                            #line default              #line hidden              return;              case 3:              this.inputDir_textBox = ((System.Windows.Controls.TextBox)(target));                            #line 9 "..\..\RepoGen_Options.xaml"              this.inputDir_textBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.inputDir_textBox_TextChanged);                            #line default              #line hidden              return;              case 4:              this.inputDir_Button = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_Options.xaml"              this.inputDir_Button.Click += new System.Windows.RoutedEventHandler(this.inputDir_Button_Click);                            #line default              #line hidden              return;              case 5:              this.outputDir_Button = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_Options.xaml"              this.outputDir_Button.Click += new System.Windows.RoutedEventHandler(this.outputDir_Button_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,RepoGen_Options,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_Options.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.repoGenWindow = ((SlickUpdater.RepoGen_Options)(target));                            #line 4 "..\..\RepoGen_Options.xaml"              this.repoGenWindow.Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_Options.xaml"              this.repoGenWindow.Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.outputDir_textBox = ((System.Windows.Controls.TextBox)(target));                            #line 7 "..\..\RepoGen_Options.xaml"              this.outputDir_textBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.outputDir_textBox_TextChanged);                            #line default              #line hidden              return;              case 3:              this.inputDir_textBox = ((System.Windows.Controls.TextBox)(target));                            #line 9 "..\..\RepoGen_Options.xaml"              this.inputDir_textBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.inputDir_textBox_TextChanged);                            #line default              #line hidden              return;              case 4:              this.inputDir_Button = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_Options.xaml"              this.inputDir_Button.Click += new System.Windows.RoutedEventHandler(this.inputDir_Button_Click);                            #line default              #line hidden              return;              case 5:              this.outputDir_Button = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_Options.xaml"              this.outputDir_Button.Click += new System.Windows.RoutedEventHandler(this.outputDir_Button_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,RepoGen_Options,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_Options.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.repoGenWindow = ((SlickUpdater.RepoGen_Options)(target));                            #line 4 "..\..\RepoGen_Options.xaml"              this.repoGenWindow.Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_Options.xaml"              this.repoGenWindow.Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.outputDir_textBox = ((System.Windows.Controls.TextBox)(target));                            #line 7 "..\..\RepoGen_Options.xaml"              this.outputDir_textBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.outputDir_textBox_TextChanged);                            #line default              #line hidden              return;              case 3:              this.inputDir_textBox = ((System.Windows.Controls.TextBox)(target));                            #line 9 "..\..\RepoGen_Options.xaml"              this.inputDir_textBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.inputDir_textBox_TextChanged);                            #line default              #line hidden              return;              case 4:              this.inputDir_Button = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_Options.xaml"              this.inputDir_Button.Click += new System.Windows.RoutedEventHandler(this.inputDir_Button_Click);                            #line default              #line hidden              return;              case 5:              this.outputDir_Button = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_Options.xaml"              this.outputDir_Button.Click += new System.Windows.RoutedEventHandler(this.outputDir_Button_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,RepoGen_OutputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_OutputDir_Browse.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\RepoGen_OutputDir_Browse.xaml"              ((SlickUpdater.RepoGen_OutputDir_Browse)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_OutputDir_Browse.xaml"              ((SlickUpdater.RepoGen_OutputDir_Browse)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 7 "..\..\RepoGen_OutputDir_Browse.xaml"              this.Browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.Browser_Navigated);                            #line default              #line hidden              return;              case 3:              this.cancelButton = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\RepoGen_OutputDir_Browse.xaml"              this.cancelButton.Click += new System.Windows.RoutedEventHandler(this.cancelButton_Click);                            #line default              #line hidden              return;              case 4:              this.setDirectoryButton = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\RepoGen_OutputDir_Browse.xaml"              this.setDirectoryButton.Click += new System.Windows.RoutedEventHandler(this.setDirectoryButton_Click);                            #line default              #line hidden              return;              case 5:              this.backButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_OutputDir_Browse.xaml"              this.backButton.Click += new System.Windows.RoutedEventHandler(this.backButton_Click);                            #line default              #line hidden              return;              case 6:              this.forwardButton = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_OutputDir_Browse.xaml"              this.forwardButton.Click += new System.Windows.RoutedEventHandler(this.forwardButton_Click);                            #line default              #line hidden              return;              case 7:              this.upButton = ((System.Windows.Controls.Button)(target));                            #line 12 "..\..\RepoGen_OutputDir_Browse.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 8:              this.dirTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,SlickUpdater,RepoGen_OutputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_OutputDir_Browse.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\RepoGen_OutputDir_Browse.xaml"              ((SlickUpdater.RepoGen_OutputDir_Browse)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_OutputDir_Browse.xaml"              ((SlickUpdater.RepoGen_OutputDir_Browse)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 7 "..\..\RepoGen_OutputDir_Browse.xaml"              this.Browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.Browser_Navigated);                            #line default              #line hidden              return;              case 3:              this.cancelButton = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\RepoGen_OutputDir_Browse.xaml"              this.cancelButton.Click += new System.Windows.RoutedEventHandler(this.cancelButton_Click);                            #line default              #line hidden              return;              case 4:              this.setDirectoryButton = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\RepoGen_OutputDir_Browse.xaml"              this.setDirectoryButton.Click += new System.Windows.RoutedEventHandler(this.setDirectoryButton_Click);                            #line default              #line hidden              return;              case 5:              this.backButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_OutputDir_Browse.xaml"              this.backButton.Click += new System.Windows.RoutedEventHandler(this.backButton_Click);                            #line default              #line hidden              return;              case 6:              this.forwardButton = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_OutputDir_Browse.xaml"              this.forwardButton.Click += new System.Windows.RoutedEventHandler(this.forwardButton_Click);                            #line default              #line hidden              return;              case 7:              this.upButton = ((System.Windows.Controls.Button)(target));                            #line 12 "..\..\RepoGen_OutputDir_Browse.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 8:              this.dirTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,SlickUpdater,RepoGen_OutputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_OutputDir_Browse.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\RepoGen_OutputDir_Browse.xaml"              ((SlickUpdater.RepoGen_OutputDir_Browse)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_OutputDir_Browse.xaml"              ((SlickUpdater.RepoGen_OutputDir_Browse)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 7 "..\..\RepoGen_OutputDir_Browse.xaml"              this.Browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.Browser_Navigated);                            #line default              #line hidden              return;              case 3:              this.cancelButton = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\RepoGen_OutputDir_Browse.xaml"              this.cancelButton.Click += new System.Windows.RoutedEventHandler(this.cancelButton_Click);                            #line default              #line hidden              return;              case 4:              this.setDirectoryButton = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\RepoGen_OutputDir_Browse.xaml"              this.setDirectoryButton.Click += new System.Windows.RoutedEventHandler(this.setDirectoryButton_Click);                            #line default              #line hidden              return;              case 5:              this.backButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_OutputDir_Browse.xaml"              this.backButton.Click += new System.Windows.RoutedEventHandler(this.backButton_Click);                            #line default              #line hidden              return;              case 6:              this.forwardButton = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_OutputDir_Browse.xaml"              this.forwardButton.Click += new System.Windows.RoutedEventHandler(this.forwardButton_Click);                            #line default              #line hidden              return;              case 7:              this.upButton = ((System.Windows.Controls.Button)(target));                            #line 12 "..\..\RepoGen_OutputDir_Browse.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 8:              this.dirTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,SlickUpdater,RepoGen_OutputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_OutputDir_Browse.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\RepoGen_OutputDir_Browse.xaml"              ((SlickUpdater.RepoGen_OutputDir_Browse)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_OutputDir_Browse.xaml"              ((SlickUpdater.RepoGen_OutputDir_Browse)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 7 "..\..\RepoGen_OutputDir_Browse.xaml"              this.Browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.Browser_Navigated);                            #line default              #line hidden              return;              case 3:              this.cancelButton = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\RepoGen_OutputDir_Browse.xaml"              this.cancelButton.Click += new System.Windows.RoutedEventHandler(this.cancelButton_Click);                            #line default              #line hidden              return;              case 4:              this.setDirectoryButton = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\RepoGen_OutputDir_Browse.xaml"              this.setDirectoryButton.Click += new System.Windows.RoutedEventHandler(this.setDirectoryButton_Click);                            #line default              #line hidden              return;              case 5:              this.backButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_OutputDir_Browse.xaml"              this.backButton.Click += new System.Windows.RoutedEventHandler(this.backButton_Click);                            #line default              #line hidden              return;              case 6:              this.forwardButton = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_OutputDir_Browse.xaml"              this.forwardButton.Click += new System.Windows.RoutedEventHandler(this.forwardButton_Click);                            #line default              #line hidden              return;              case 7:              this.upButton = ((System.Windows.Controls.Button)(target));                            #line 12 "..\..\RepoGen_OutputDir_Browse.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 8:              this.dirTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,SlickUpdater,RepoGen_OutputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_OutputDir_Browse.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\RepoGen_OutputDir_Browse.xaml"              ((SlickUpdater.RepoGen_OutputDir_Browse)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_OutputDir_Browse.xaml"              ((SlickUpdater.RepoGen_OutputDir_Browse)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 7 "..\..\RepoGen_OutputDir_Browse.xaml"              this.Browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.Browser_Navigated);                            #line default              #line hidden              return;              case 3:              this.cancelButton = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\RepoGen_OutputDir_Browse.xaml"              this.cancelButton.Click += new System.Windows.RoutedEventHandler(this.cancelButton_Click);                            #line default              #line hidden              return;              case 4:              this.setDirectoryButton = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\RepoGen_OutputDir_Browse.xaml"              this.setDirectoryButton.Click += new System.Windows.RoutedEventHandler(this.setDirectoryButton_Click);                            #line default              #line hidden              return;              case 5:              this.backButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_OutputDir_Browse.xaml"              this.backButton.Click += new System.Windows.RoutedEventHandler(this.backButton_Click);                            #line default              #line hidden              return;              case 6:              this.forwardButton = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_OutputDir_Browse.xaml"              this.forwardButton.Click += new System.Windows.RoutedEventHandler(this.forwardButton_Click);                            #line default              #line hidden              return;              case 7:              this.upButton = ((System.Windows.Controls.Button)(target));                            #line 12 "..\..\RepoGen_OutputDir_Browse.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 8:              this.dirTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,SlickUpdater,RepoGen_OutputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_OutputDir_Browse.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\RepoGen_OutputDir_Browse.xaml"              ((SlickUpdater.RepoGen_OutputDir_Browse)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_OutputDir_Browse.xaml"              ((SlickUpdater.RepoGen_OutputDir_Browse)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 7 "..\..\RepoGen_OutputDir_Browse.xaml"              this.Browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.Browser_Navigated);                            #line default              #line hidden              return;              case 3:              this.cancelButton = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\RepoGen_OutputDir_Browse.xaml"              this.cancelButton.Click += new System.Windows.RoutedEventHandler(this.cancelButton_Click);                            #line default              #line hidden              return;              case 4:              this.setDirectoryButton = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\RepoGen_OutputDir_Browse.xaml"              this.setDirectoryButton.Click += new System.Windows.RoutedEventHandler(this.setDirectoryButton_Click);                            #line default              #line hidden              return;              case 5:              this.backButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_OutputDir_Browse.xaml"              this.backButton.Click += new System.Windows.RoutedEventHandler(this.backButton_Click);                            #line default              #line hidden              return;              case 6:              this.forwardButton = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_OutputDir_Browse.xaml"              this.forwardButton.Click += new System.Windows.RoutedEventHandler(this.forwardButton_Click);                            #line default              #line hidden              return;              case 7:              this.upButton = ((System.Windows.Controls.Button)(target));                            #line 12 "..\..\RepoGen_OutputDir_Browse.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 8:              this.dirTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,SlickUpdater,RepoGen_OutputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_OutputDir_Browse.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\RepoGen_OutputDir_Browse.xaml"              ((SlickUpdater.RepoGen_OutputDir_Browse)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_OutputDir_Browse.xaml"              ((SlickUpdater.RepoGen_OutputDir_Browse)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 7 "..\..\RepoGen_OutputDir_Browse.xaml"              this.Browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.Browser_Navigated);                            #line default              #line hidden              return;              case 3:              this.cancelButton = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\RepoGen_OutputDir_Browse.xaml"              this.cancelButton.Click += new System.Windows.RoutedEventHandler(this.cancelButton_Click);                            #line default              #line hidden              return;              case 4:              this.setDirectoryButton = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\RepoGen_OutputDir_Browse.xaml"              this.setDirectoryButton.Click += new System.Windows.RoutedEventHandler(this.setDirectoryButton_Click);                            #line default              #line hidden              return;              case 5:              this.backButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_OutputDir_Browse.xaml"              this.backButton.Click += new System.Windows.RoutedEventHandler(this.backButton_Click);                            #line default              #line hidden              return;              case 6:              this.forwardButton = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_OutputDir_Browse.xaml"              this.forwardButton.Click += new System.Windows.RoutedEventHandler(this.forwardButton_Click);                            #line default              #line hidden              return;              case 7:              this.upButton = ((System.Windows.Controls.Button)(target));                            #line 12 "..\..\RepoGen_OutputDir_Browse.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 8:              this.dirTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (rawSlickJson == String.Empty)              {                  try                  {  #if DEBUG                  //local debug server for testing                  rawSlickJson = downloader.webRead("http://localhost/slickversion.json");  #else                      //Default master file location hosted on Project Awesome servers                      rawSlickJson = downloader.webRead("http://arma.projectawesome.net/beta/repo/slickupdater/slickversion.json");                  }                  catch (Exception ex)                  {                      logIt.add("Error while downloading slickversion.json trying backup server:\n" + ex.ToString());                  }                  if (String.IsNullOrEmpty(rawSlickJson))                  {                      try                      {                          //Backup master file hosted on GitHub servers                          rawSlickJson =                              downloader.webRead(                                  "https://gist.githubusercontent.com/wigumen/015cb44774c6320cf901/raw/6a5f22437997c6c120a1b15beaabdb3ade3be06a/slickversion.json");                      }                      catch (Exception ex)                      {                          logIt.add("Error while trying to reach backup server going offline mode:\n" + ex.ToString());                      }                  }              }                if (!String.IsNullOrEmpty(rawSlickJson))              {                  Slickversion = JsonConvert.DeserializeObject<versionfile>(rawSlickJson);              }              else              {                  // the Slickversion file couldn't be downloaded' create it ourselves.                  // Note: this means the data displayed in the app is not correct                  Slickversion = new versionfile();              }  #endif              InitializeComponent();              //First launch message!              if (Settings.Default.firstLaunch)              {                  MessageBox.Show(                      "Hello! This seems to be the first time you launch SlickUpdater so make sure your arma 3 and ts3 path is set correctly in options. Have a nice day!"'                      "Welcome");                  //Note to myself: I actualy set firstLaunch to false in initProps              }              LogThread = new logIt();              repoHide();              var fs = new FileStream("localversion"' FileMode.Create' FileAccess.Write);              var sw = new StreamWriter(fs);              sw.WriteLine(SlickVersion);              sw.Close();                //Timer callback stuff for clock                AutoUpdate Update = new AutoUpdate();              if (Update.exupdate == true)              {                  Update.CheckAvailableUpdates(SlickVersion' Slickversion.version);              }              else              {                  if (!String.IsNullOrEmpty(Slickversion.version) && !String.IsNullOrEmpty(SlickVersion) &&                      (Slickversion.version != SlickVersion))                  {                      MessageBoxResult result =                          MessageBox.Show(                              "There seems to be a new version of slickupdater available' do you wanna update it it?"'                              "New Update"' MessageBoxButton.YesNo);                      switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }                  }              }                initRepos();              // Initialize Update Worker              Worker = new BackgroundWorker();              Worker.DoWork += worker_DoWork;              Worker.ProgressChanged += worker_ProgressChanged;              Worker.WorkerReportsProgress = true;              Worker.RunWorkerCompleted += worker_RunWorkerCompleted;                //init checkWorker              CheckWorker = new BackgroundWorker();              CheckWorker.DoWork += checkWorker_DoWork;              CheckWorker.ProgressChanged += checkWorker_ProgressChanged;              CheckWorker.WorkerReportsProgress = true;              CheckWorker.RunWorkerCompleted += checkWorker_RunWorkerCompleted;                //reddit worker              RedditWorker = new BackgroundWorker();              RedditWorker.DoWork += redditWorker_DoWork;              RedditWorker.RunWorkerCompleted += redditworker_Done;                //Init timer              timer = new DispatcherTimer();              timer.Tick += updateTime;              timer.Interval = new TimeSpan(0' 0' 10);              timer.Start();                WindowManager.SetWnd(this);                a3DirText.Text = regcheck.arma3RegCheck();              a2DirText.Text = regcheck.arma2RegCheck();              va2DirText.Text = regcheck.varma2RegCheck();              ts3DirText.Text = regcheck.ts3RegCheck();                //Sets modpaths              if (Settings.Default.ModPathA3 == "")              {                  A3ModPath.Text = a3DirText.Text;              }                if (Settings.Default.ModPathA2 == "")              {                  A2ModPath.Text = a2DirText.Text;              }                            Settings.Default.firstLaunch = false;              InitProperties();              logocheck();              if (Settings.Default.WindowHeight > 0 || Settings.Default.WindowWidth > 0)              {                  mainWindow.Width = Settings.Default.WindowWidth;                  mainWindow.Height = Settings.Default.WindowHeight;              }          }            private void InitProperties()          {              a2DirText.Text = Settings.Default.A2path;              a3DirText.Text = Settings.Default.A3path;              A3ModPath.Text = Settings.Default.ModPathA3;              A2ModPath.Text = Settings.Default.ModPathA2;                ts3DirText.Text = Settings.Default.ts3Dir;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  _subreddit = Slickversion.repos[repomenu.SelectedIndex].subreddit;                  joinButton.Content = Slickversion.repos[repomenu.SelectedIndex].joinText;              }              updateGuides(null' null);              }            //Do some work          private void checkWorker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (CheckWorker.IsBusy) return;              if (Worker.IsBusy) return;              SetBusy(false);          }            //check if da shit is up to date          private void a3UpdateCheck()          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  CheckWorker.RunWorkerAsync();              }              else              {                  MessageBox.Show("checkWorker is Busy!");              }          }            private void checkWorker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }          }            // worker runs the updateManager' checks game version using <GameVER><Game>          private void checkWorker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.UpdateCheck();          }            private void updateTitle()          {              base.Title = _time + " UTC" + " | " + Title + _downloadProgress;          }            private void updateTime(object obj' EventArgs e)          {              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void SetBusy(bool isBusy)          {              if (isBusy)              {                  a3RefreshButton.IsEnabled = false;                  arma3Button.IsEnabled = false;                  joinButton.IsEnabled = false;                  repomenu.IsEnabled = false;              }              else if (!isBusy)              {                  a3RefreshButton.IsEnabled = true;                  arma3Button.IsEnabled = true;                  joinButton.IsEnabled = true;                  repomenu.IsEnabled = true;              }          }            private void OnArma3Clicked(object sender' RoutedEventArgs e)          {              string gameversion = Settings.Default.gameversion;              if (arma3Button.Content as string == "Update Arma 3" || arma3Button.Content as string == "Update Arma 2")              {                  if (UpdateManager.TFRalert == true)                  {                      MessageBoxResult result = MessageBox.Show("Teamspeak needs to be closed before updating Task Force Radio. Would you like SU to close Teamspeak automatically when needed?\n\nPress No to get a warning before and Yes to get no warning."'                  "Teamspeak needs to be closed..."' MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          UpdateManager.TFRalert = false;                      }                  }                  if (!Worker.IsBusy)                  {                      dlSpeedTimer = new Timer(10000);                      dlSpeedTimer.Elapsed += updateDlSpeed;                      dlSpeedTimer.Start();                      SetBusy(true);                      Worker.RunWorkerAsync();                  }                  else                  {                      MessageBox.Show(                          "Worker is Busy(You really must be dicking around or unlucky to make this pop up...)");                  }              }              else if (CurrentGame == "Arma 3")              {                  if (CheckProcess("arma3") == false)                  {                      Launch.a3Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 3 is already running!\nDo you want to start Arma 3 anyway?"' "Arma 3 already running!"'                       MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a3Launch(false' null' null);                      }                  }              }              else if (CurrentGame == "Arma 2")              {                  if (CheckProcess("ArmA2OA") == false)                  {                      Launch.a2Launch(false' null' null);                  }                  else                  {                      MessageBoxResult result = MessageBox.Show("Arma 2 OA is already running!\nDo you want to start Arma 2 OA anyway?"' "Arma 2 OA already running!"'                      MessageBoxButton.YesNo' MessageBoxImage.Exclamation);                      if (result == MessageBoxResult.Yes)                      {                          Launch.a2Launch(false' null' null);                      }                  }                              }          }            Boolean CheckProcess(String ProcessName)          {              Process[] list = Process.GetProcesses();                foreach (Process pro in list)              {                  if (pro.ProcessName == ProcessName)                  {                      return true;                  }              }              return false;          }            private void Hyperlink_RequestNavigate(object sender' RequestNavigateEventArgs e)          {              Process.Start(e.Uri.ToString());          }            private void a3RefreshButton_Click(object sender' RoutedEventArgs e)          {              if (!CheckWorker.IsBusy)              {                  SetBusy(true);                  a3UpdateCheck();              }              else              {                  MessageBox.Show("checkWorker thread is currently busy...");              }          }            private void a3RefreshImageEnter(object sender' MouseEventArgs e)          {              var rotationAnimation = new DoubleAnimation();                rotationAnimation.From = 0;              rotationAnimation.To = 360;              rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.5));              rotationAnimation.AccelerationRatio = 0.3;              rotationAnimation.DecelerationRatio = 0.3;                var storyboard = new Storyboard();                Storyboard.SetTarget(rotationAnimation' refreshImage);              Storyboard.SetTargetProperty(rotationAnimation'                  new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"));              storyboard.Children.Add(rotationAnimation);                  BeginStoryboard(storyboard);          }            private void launchOptionsButton_Click(object sender' RoutedEventArgs e)          {              var dialogue = new Arma3LaunchOptionsDialogue();              dialogue.Show();              mainWindow.IsEnabled = false;          }            private void a3DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A3path = a3DirText.Text;              Settings.Default.Save();          }            private void a3Ts3Text_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.ts3Dir = ts3DirText.Text;          }            private void MainWindow_Loaded(object sender' RoutedEventArgs e)          {              SetBusy(true);              a3UpdateCheck();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;              _time = DateTime.UtcNow.ToString("HH:mm");              updateTitle();          }            private void repoGen_Options_Click(object sender' RoutedEventArgs e)          {              var repoGen = new RepoGen_Options();              repoGen.Show();              mainWindow.IsEnabled = false;          }            private void inputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void inputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.inputDirListBox_PreviewMouseMove(sender' e);          }            private void outputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_DragEnter(sender' e);          }            private void outputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.outputDirListBox_Drop(sender' e);          }            private void repoGen_Refresh_Click(object sender' RoutedEventArgs e)          {              RepoGenerator.inputGen();          }            private void inputDirListBox_DragEnter(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_DragEnter(sender' e);          }            private void inputDirListBox_Drop(object sender' DragEventArgs e)          {              DragAndDrop.inputDirListBox_Drop(sender' e);          }            private void outputDirListBox_PreviewMouseLeftButtonDown(object sender' MouseButtonEventArgs e)          {              DragAndDrop.startPoint = e.GetPosition(null);          }            private void outputDirListBox_PreviewMouseMove(object sender' MouseEventArgs e)          {              DragAndDrop.outputDirListBox_PreviewMouseMove(sender' e);          }            private void repoGenButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              RepoGenerator.startGen();          }            private void worker_DoWork(object sender' DoWorkEventArgs e)          {              UpdateManager.a3Update();          }            private void updateDlSpeed(object sender' ElapsedEventArgs e)          {              DateTime now = DateTime.Now;              TimeSpan intverval = now - lastUpdateTime;              double timeDiff = intverval.TotalSeconds;              double sizeDiff = DownloadedBytes - lastDownloadedBytes;              double downloadSpeed = (int) Math.Floor((sizeDiff)/timeDiff);              downloadSpeed = downloadSpeed/1048576;              lastDownloadedBytes = DownloadedBytes;              lastUpdateTime = now;              _downloadProgress = " @ " + downloadSpeed.ToString("0.000") + " MB/s";              Dispatcher.Invoke(() => WindowManager.mainWindow.updateTitle());          }            private void worker_ProgressChanged(object sender' ProgressChangedEventArgs e)          {              if (e.ProgressPercentage <= 100 && e.ProgressPercentage >= 0)              {                  indivProgress.Value = e.ProgressPercentage;                  indivProgressTxt.Content = e.ProgressPercentage + "%";              }              else if (e.ProgressPercentage > 100 && e.ProgressPercentage <= 201)              {                  midProgressTxt.Content = e.ProgressPercentage - 101 + "%";                  midProgress.Value = e.ProgressPercentage - 101;              }              else if (e.ProgressPercentage > 201 && e.ProgressPercentage <= 302)              {                  totalProgressTxt.Content = e.ProgressPercentage - 202 + "%";                  totalProgress.Value = e.ProgressPercentage - 202;              }              else if (e.ProgressPercentage == -1)              {                  MessageBox.Show(e.UserState as string);              }          }            private void worker_RunWorkerCompleted(object sender' RunWorkerCompletedEventArgs e)          {              if (e.Error != null) {                  MessageBox.Show("Worker finished with errors!\n\n" + e.Error.ToString());              }              a3UpdateCheck();              indivProgress.Value = 0;              midProgress.Value = 0;              totalProgress.Value = 0;              midProgressTxt.Content = "";              indivProgressTxt.Content = "";              totalProgressTxt.Content = "";              _downloadProgress = "";              dlSpeedTimer.Stop();              updateTitle();          }            private void helpButton_Click(object sender' RoutedEventArgs e)          {              mainWindow.IsEnabled = false;              var abt = new About();              abt.Show();          }            private void logging_click(object sender' RoutedEventArgs e)          {              var logging = new log();              logging.Show();          }            private void repoHide()          {              repoGen.Visibility = Visibility.Hidden;          }            private void showrepo(object sender' MouseButtonEventArgs e)          {              clickCount++;              if (clickCount > 4)              {                  repoGen.Visibility = Visibility.Visible;              }          }            private void LaunchAndJoin(object sender' RoutedEventArgs e)          {              if (CurrentGame == "Arma 2")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a2Launch(true' server' password);              }              else if (CurrentGame == "Arma 3")              {                  string gameversion = Settings.Default.gameversion;                  string server = Slickversion.repos[repomenu.SelectedIndex].server;                  string password = Slickversion.repos[repomenu.SelectedIndex].password;                  Launch.a3Launch(true' server' password);              }          }            private void initRepos()          {              //List<ComboBoxItem> repos = new List<ComboBoxItem>();              if (Settings.Default.A3repo != "")              {                  repomenu.SelectedIndex = int.Parse(Settings.Default.A3repo);              }                foreach (Repos repo in Slickversion.repos)              {                  string Game = "";                  if (repo.game == "arma2")                  {                      Game = "Arma 2";                  }                  else if (repo.game == "arma3")                  {                      Game = "Arma 3";                  }                  var newItem = new ComboBoxItem();                  newItem.Tag = repo.url;                  newItem.Content = Game + " | " + repo.name;                  newItem.MouseDown += setActiveRepo;                  repomenu.Items.Add(newItem);              }          }            private void setActiveRepo(object sender' RoutedEventArgs e)          {              if (Slickversion.repos[repomenu.SelectedIndex].url == "not")              {                  MessageBox.Show("This repo has not yet been implemented. Setting you to default");                  repomenu.SelectedIndex = 0;                  Settings.Default.A3repo = "" + 0;                  Settings.Default.A3repourl = Slickversion.repos[0].url;              }              else              {                  Settings.Default.A3repo = "" + repomenu.SelectedIndex;                  Settings.Default.A3repourl = Slickversion.repos[repomenu.SelectedIndex].url;              }                            if (repomenu.IsDropDownOpen)              {                  a3UpdateCheck();              }             logocheck();             InitProperties();          }            private void refreshEvents(object sender' RoutedEventArgs e)          {              eventbox.Items.Clear();              _rposts.Clear();              RedditWorker.RunWorkerAsync();              eventbutton.IsEnabled = false;          }            //logo change          private void logocheck()          {              String currentGame = String.Empty;              if ((repomenu.SelectedIndex) < (Slickversion.repos.Count))              {                  Repos currentRepo = Slickversion.repos[repomenu.SelectedIndex];                  currentGame = currentRepo.game;              }                 if (currentGame == "arma2")              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA2.png"' UriKind.Relative));                  mainTab.Header = "Arma 2";                  CurrentGame = "Arma 2";                  UpdateManager.isArma2 = true;              }              else              {                  logo_image.Source = new BitmapImage(new Uri(@"Resources/ArmA3.png"' UriKind.Relative));                  mainTab.Header = "Arma 3";                  CurrentGame = "Arma 3";                  UpdateManager.isArma2 = false;              }          }            private void redditWorker_DoWork(object sender' DoWorkEventArgs e)          {              string url = @"http://www.reddit.com" + _subreddit + "/hot.json";              string json = String.Empty;              try              {                   json = downloader.webRead(url);              }              catch(Exception ex)              {                  logIt.add(ex.ToString());                  return;              }                var topic = JsonConvert.DeserializeObject<RootObject>(json);                foreach (Child i in topic.data.children)              {                  if (i.data.link_flair_text == "EVENT")                  {                      var evt = new events {title = i.data.title' author = i.data.author' url = i.data.permalink};                      _rposts.Add(evt);                  }              }          }            private void redditworker_Done(object sender' AsyncCompletedEventArgs e)          {              foreach (events evn in _rposts)              {                  var newEvent = new Button                  {                      Content = evn.title + " by " + evn.author'                      Height = 50'                      Width = this.Width - 45'                      Tag = evn.url'                      FontSize = 14                  };                  newEvent.Click += newEvent_Click;                  eventbox.Items.Add(newEvent);              }              eventbutton.IsEnabled = true;          }            private void newEvent_Click(object sender' RoutedEventArgs e)          {              var button = sender as Button;              Process.Start("http://www.reddit.com" + button.Tag);          }            private void Window_Closing(object sender' CancelEventArgs e)          {              Settings.Default.Save();          }            private void a2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.A2path = a2DirText.Text;              Settings.Default.Save();          }            private void va2DirText_TextChanged(object sender' TextChangedEventArgs e)          {              Settings.Default.vA2Path = va2DirText.Text;              Settings.Default.Save();          }  
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,nyanEgg,The following statement contains a magic number: if (nyanClick >= 15)              {                  suIcon.Visibility = Visibility.Hidden;                  nyan.Visibility = Visibility.Visible;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,updateGuides,The following statement contains a magic number: foreach (var guide in _links)              {                  var image = new Image()                  {                      Source = new BitmapImage(new Uri(guide.icon))'                      Width = 42'                      Height = 42'                      HorizontalAlignment = HorizontalAlignment.Left'                      Margin = new Thickness(4' 0' 0' 0)                  };                    var newGuide = new Button                  {                      Content = "                  " + guide.title'                      Height = 50'                      Width = mainWindow.Width + 30'                      Tag = guide.url + ""'                      FontSize = 14'                      HorizontalAlignment = HorizontalAlignment.Right'                      HorizontalContentAlignment = HorizontalAlignment.Left                  };                    var panel = new Grid();                  panel.Children.Add(newGuide);                  panel.Children.Add(image);                    newGuide.Click += GuideClick;                  Guidebox.Items.Add(panel);              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,updateGuides,The following statement contains a magic number: foreach (var guide in _links)              {                  var image = new Image()                  {                      Source = new BitmapImage(new Uri(guide.icon))'                      Width = 42'                      Height = 42'                      HorizontalAlignment = HorizontalAlignment.Left'                      Margin = new Thickness(4' 0' 0' 0)                  };                    var newGuide = new Button                  {                      Content = "                  " + guide.title'                      Height = 50'                      Width = mainWindow.Width + 30'                      Tag = guide.url + ""'                      FontSize = 14'                      HorizontalAlignment = HorizontalAlignment.Right'                      HorizontalContentAlignment = HorizontalAlignment.Left                  };                    var panel = new Grid();                  panel.Children.Add(newGuide);                  panel.Children.Add(image);                    newGuide.Click += GuideClick;                  Guidebox.Items.Add(panel);              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,updateGuides,The following statement contains a magic number: foreach (var guide in _links)              {                  var image = new Image()                  {                      Source = new BitmapImage(new Uri(guide.icon))'                      Width = 42'                      Height = 42'                      HorizontalAlignment = HorizontalAlignment.Left'                      Margin = new Thickness(4' 0' 0' 0)                  };                    var newGuide = new Button                  {                      Content = "                  " + guide.title'                      Height = 50'                      Width = mainWindow.Width + 30'                      Tag = guide.url + ""'                      FontSize = 14'                      HorizontalAlignment = HorizontalAlignment.Right'                      HorizontalContentAlignment = HorizontalAlignment.Left                  };                    var panel = new Grid();                  panel.Children.Add(newGuide);                  panel.Children.Add(image);                    newGuide.Click += GuideClick;                  Guidebox.Items.Add(panel);              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,updateGuides,The following statement contains a magic number: foreach (var guide in _links)              {                  var image = new Image()                  {                      Source = new BitmapImage(new Uri(guide.icon))'                      Width = 42'                      Height = 42'                      HorizontalAlignment = HorizontalAlignment.Left'                      Margin = new Thickness(4' 0' 0' 0)                  };                    var newGuide = new Button                  {                      Content = "                  " + guide.title'                      Height = 50'                      Width = mainWindow.Width + 30'                      Tag = guide.url + ""'                      FontSize = 14'                      HorizontalAlignment = HorizontalAlignment.Right'                      HorizontalContentAlignment = HorizontalAlignment.Left                  };                    var panel = new Grid();                  panel.Children.Add(newGuide);                  panel.Children.Add(image);                    newGuide.Click += GuideClick;                  Guidebox.Items.Add(panel);              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,updateGuides,The following statement contains a magic number: foreach (var guide in _links)              {                  var image = new Image()                  {                      Source = new BitmapImage(new Uri(guide.icon))'                      Width = 42'                      Height = 42'                      HorizontalAlignment = HorizontalAlignment.Left'                      Margin = new Thickness(4' 0' 0' 0)                  };                    var newGuide = new Button                  {                      Content = "                  " + guide.title'                      Height = 50'                      Width = mainWindow.Width + 30'                      Tag = guide.url + ""'                      FontSize = 14'                      HorizontalAlignment = HorizontalAlignment.Right'                      HorizontalContentAlignment = HorizontalAlignment.Left                  };                    var panel = new Grid();                  panel.Children.Add(newGuide);                  panel.Children.Add(image);                    newGuide.Click += GuideClick;                  Guidebox.Items.Add(panel);              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,updateGuides,The following statement contains a magic number: foreach (var guide in _links)              {                  var image = new Image()                  {                      Source = new BitmapImage(new Uri(guide.icon))'                      Width = 42'                      Height = 42'                      HorizontalAlignment = HorizontalAlignment.Left'                      Margin = new Thickness(4' 0' 0' 0)                  };                    var newGuide = new Button                  {                      Content = "                  " + guide.title'                      Height = 50'                      Width = mainWindow.Width + 30'                      Tag = guide.url + ""'                      FontSize = 14'                      HorizontalAlignment = HorizontalAlignment.Right'                      HorizontalContentAlignment = HorizontalAlignment.Left                  };                    var panel = new Grid();                  panel.Children.Add(newGuide);                  panel.Children.Add(image);                    newGuide.Click += GuideClick;                  Guidebox.Items.Add(panel);              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,verify_click,The following statement contains a magic number: mainWindow.verifyButton.Width = 100;
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,verify_done,The following statement contains a magic number: mainWindow.verifyButton.Width = 22;
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Magic Number,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
Missing Default,SlickUpdater,About,C:\repos\wigumen_SlickUpdater\SlickUpdater\About.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 4 "..\..\About.xaml"              ((SlickUpdater.About)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              }
Missing Default,SlickUpdater,AddModsLaunchOptions,C:\repos\wigumen_SlickUpdater\SlickUpdater\AddModsLaunchOptions.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 4 "..\..\AddModsLaunchOptions.xaml"              ((SlickUpdater.AddModsLaunchOptions)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.folders = ((System.Windows.Controls.ListView)(target));              return;              case 3:              this.added = ((System.Windows.Controls.ListView)(target));              return;              case 4:              this.btn_done = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\AddModsLaunchOptions.xaml"              this.btn_done.Click += new System.Windows.RoutedEventHandler(this.btn_done_Click);                            #line default              #line hidden              return;              case 5:              this.btn_removeitem = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\AddModsLaunchOptions.xaml"              this.btn_removeitem.Click += new System.Windows.RoutedEventHandler(this.btn_removeitem_Click);                            #line default              #line hidden              return;              case 6:              this.btn_add = ((System.Windows.Controls.Button)(target));                            #line 22 "..\..\AddModsLaunchOptions.xaml"              this.btn_add.Click += new System.Windows.RoutedEventHandler(this.btn_add_Click);                            #line default              #line hidden              return;              }
Missing Default,SlickUpdater,Arma3LaunchOptionsDialogue,C:\repos\wigumen_SlickUpdater\SlickUpdater\Arma3LaunchOptionsDialogue.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 4 "..\..\Arma3LaunchOptionsDialogue.xaml"              ((SlickUpdater.Arma3LaunchOptionsDialogue)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.window = ((System.Windows.Controls.CheckBox)(target));                            #line 6 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.window.Click += new System.Windows.RoutedEventHandler(this.window_Click);                            #line default              #line hidden              return;              case 3:              this.nosplash = ((System.Windows.Controls.CheckBox)(target));                            #line 7 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.nosplash.Click += new System.Windows.RoutedEventHandler(this.nosplash_Click);                            #line default              #line hidden              return;              case 4:              this.skipIntro = ((System.Windows.Controls.CheckBox)(target));                            #line 8 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.skipIntro.Click += new System.Windows.RoutedEventHandler(this.skipIntro_Click);                            #line default              #line hidden              return;              case 5:              this.world = ((System.Windows.Controls.TextBox)(target));                            #line 10 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.world.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.world_TextChanged);                            #line default              #line hidden              return;              case 6:              this.noLogs = ((System.Windows.Controls.CheckBox)(target));                            #line 11 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noLogs.Click += new System.Windows.RoutedEventHandler(this.noLogs_Click);                            #line default              #line hidden              return;              case 7:              this.noPause = ((System.Windows.Controls.CheckBox)(target));                            #line 12 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.noPause.Click += new System.Windows.RoutedEventHandler(this.noPause_Click);                            #line default              #line hidden              return;              case 8:              this.showScriptErrors = ((System.Windows.Controls.CheckBox)(target));                            #line 13 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.showScriptErrors.Click += new System.Windows.RoutedEventHandler(this.showScriptErrors_Click);                            #line default              #line hidden              return;              case 9:              this.customParams = ((System.Windows.Controls.TextBox)(target));                            #line 15 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.customParams.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.customParams_TextChanged);                            #line default              #line hidden              return;              case 10:              this.btn_addmod = ((System.Windows.Controls.Button)(target));                            #line 16 "..\..\Arma3LaunchOptionsDialogue.xaml"              this.btn_addmod.Click += new System.Windows.RoutedEventHandler(this.btn_addmod_Click);                            #line default              #line hidden              return;              }
Missing Default,SlickUpdater,AutoUpdate,C:\repos\wigumen_SlickUpdater\SlickUpdater\AutoUpdate.cs,CheckAvailableUpdates,The following switch statement is missing a default case: switch (result)                  {                      case MessageBoxResult.Yes:                          Update();                          break;                      case MessageBoxResult.No:                          break;                  }
Missing Default,SlickUpdater,log,C:\repos\wigumen_SlickUpdater\SlickUpdater\log.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.logwindow = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.clear = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\log.xaml"              this.clear.Click += new System.Windows.RoutedEventHandler(this.Button_Click_1);                            #line default              #line hidden              return;              case 3:              this.copy = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\log.xaml"              this.copy.Click += new System.Windows.RoutedEventHandler(this.copy_Click);                            #line default              #line hidden              return;              case 4:              this.updatelog = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\log.xaml"              this.updatelog.Click += new System.Windows.RoutedEventHandler(this.updatelog_Click);                            #line default              #line hidden              return;              }
Missing Default,SlickUpdater,newRepo,C:\repos\wigumen_SlickUpdater\SlickUpdater\newRepo.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.pathbox = ((System.Windows.Controls.TextBox)(target));                            #line 13 "..\..\newRepo.xaml"              this.pathbox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.updatePath);                            #line default              #line hidden              return;              case 2:                            #line 14 "..\..\newRepo.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.openFileBrowser);                            #line default              #line hidden              return;              case 3:              this.NameBox = ((System.Windows.Controls.TextBox)(target));                            #line 16 "..\..\newRepo.xaml"              this.NameBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.updateName);                            #line default              #line hidden              return;              case 4:                            #line 17 "..\..\newRepo.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.save);                            #line default              #line hidden              return;              case 5:                            #line 18 "..\..\newRepo.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.cancel);                            #line default              #line hidden              return;              }
Missing Default,SlickUpdater,UpdateManager,C:\repos\wigumen_SlickUpdater\SlickUpdater\UpdateManager.cs,a3Update,The following switch statement is missing a default case: switch (result)                              {                                  case MessageBoxResult.Yes:                                      File.WriteAllText(modFolder + "\\SU.version"' version0String);                                      break;                                  case MessageBoxResult.No:                                      a3DetailUpdate(mod' client);                                      break;                              }
Missing Default,SlickUpdater,RepoGen_InputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_InputDir_Browse.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 4 "..\..\RepoGen_InputDir_Browse.xaml"              ((SlickUpdater.RepoGen_InputDir_Browse)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_InputDir_Browse.xaml"              ((SlickUpdater.RepoGen_InputDir_Browse)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 6 "..\..\RepoGen_InputDir_Browse.xaml"              this.Browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.Browser_Navigated);                            #line default              #line hidden              return;              case 3:              this.cancelButton = ((System.Windows.Controls.Button)(target));                            #line 7 "..\..\RepoGen_InputDir_Browse.xaml"              this.cancelButton.Click += new System.Windows.RoutedEventHandler(this.cancelButton_Click);                            #line default              #line hidden              return;              case 4:              this.setDirectoryButton = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\RepoGen_InputDir_Browse.xaml"              this.setDirectoryButton.Click += new System.Windows.RoutedEventHandler(this.setDirectoryButton_Click);                            #line default              #line hidden              return;              case 5:              this.backButton = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\RepoGen_InputDir_Browse.xaml"              this.backButton.Click += new System.Windows.RoutedEventHandler(this.backButton_Click);                            #line default              #line hidden              return;              case 6:              this.forwardButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_InputDir_Browse.xaml"              this.forwardButton.Click += new System.Windows.RoutedEventHandler(this.forwardButton_Click);                            #line default              #line hidden              return;              case 7:              this.upButton = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_InputDir_Browse.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 8:              this.dirTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Missing Default,SlickUpdater,RepoGen_Options,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_Options.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.repoGenWindow = ((SlickUpdater.RepoGen_Options)(target));                            #line 4 "..\..\RepoGen_Options.xaml"              this.repoGenWindow.Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_Options.xaml"              this.repoGenWindow.Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.outputDir_textBox = ((System.Windows.Controls.TextBox)(target));                            #line 7 "..\..\RepoGen_Options.xaml"              this.outputDir_textBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.outputDir_textBox_TextChanged);                            #line default              #line hidden              return;              case 3:              this.inputDir_textBox = ((System.Windows.Controls.TextBox)(target));                            #line 9 "..\..\RepoGen_Options.xaml"              this.inputDir_textBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.inputDir_textBox_TextChanged);                            #line default              #line hidden              return;              case 4:              this.inputDir_Button = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_Options.xaml"              this.inputDir_Button.Click += new System.Windows.RoutedEventHandler(this.inputDir_Button_Click);                            #line default              #line hidden              return;              case 5:              this.outputDir_Button = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_Options.xaml"              this.outputDir_Button.Click += new System.Windows.RoutedEventHandler(this.outputDir_Button_Click);                            #line default              #line hidden              return;              }
Missing Default,SlickUpdater,RepoGen_OutputDir_Browse,C:\repos\wigumen_SlickUpdater\SlickUpdater\RepoGen_OutputDir_Browse.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 4 "..\..\RepoGen_OutputDir_Browse.xaml"              ((SlickUpdater.RepoGen_OutputDir_Browse)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 4 "..\..\RepoGen_OutputDir_Browse.xaml"              ((SlickUpdater.RepoGen_OutputDir_Browse)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.Browser = ((System.Windows.Controls.WebBrowser)(target));                            #line 7 "..\..\RepoGen_OutputDir_Browse.xaml"              this.Browser.Navigated += new System.Windows.Navigation.NavigatedEventHandler(this.Browser_Navigated);                            #line default              #line hidden              return;              case 3:              this.cancelButton = ((System.Windows.Controls.Button)(target));                            #line 8 "..\..\RepoGen_OutputDir_Browse.xaml"              this.cancelButton.Click += new System.Windows.RoutedEventHandler(this.cancelButton_Click);                            #line default              #line hidden              return;              case 4:              this.setDirectoryButton = ((System.Windows.Controls.Button)(target));                            #line 9 "..\..\RepoGen_OutputDir_Browse.xaml"              this.setDirectoryButton.Click += new System.Windows.RoutedEventHandler(this.setDirectoryButton_Click);                            #line default              #line hidden              return;              case 5:              this.backButton = ((System.Windows.Controls.Button)(target));                            #line 10 "..\..\RepoGen_OutputDir_Browse.xaml"              this.backButton.Click += new System.Windows.RoutedEventHandler(this.backButton_Click);                            #line default              #line hidden              return;              case 6:              this.forwardButton = ((System.Windows.Controls.Button)(target));                            #line 11 "..\..\RepoGen_OutputDir_Browse.xaml"              this.forwardButton.Click += new System.Windows.RoutedEventHandler(this.forwardButton_Click);                            #line default              #line hidden              return;              case 7:              this.upButton = ((System.Windows.Controls.Button)(target));                            #line 12 "..\..\RepoGen_OutputDir_Browse.xaml"              this.upButton.Click += new System.Windows.RoutedEventHandler(this.upButton_Click);                            #line default              #line hidden              return;              case 8:              this.dirTextBox = ((System.Windows.Controls.TextBox)(target));              return;              }
Missing Default,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following switch statement is missing a default case: switch (result)                      {                          case MessageBoxResult.Yes:                              Process.Start("SlickAutoUpdate.exe");                              Process.GetCurrentProcess().Kill();                              break;                          case MessageBoxResult.No:                              break;                      }
Missing Default,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,MainWindow,The following switch statement is missing a default case: switch (e.ProgressPercentage)              {                  case -1:                      MessageBox.Show(e.UserState as String);                      break;                  case 1:                      arma3Button.Content = e.UserState as String;                      break;                  case 2:                      a3ModList.ItemsSource = e.UserState as List<Mod>;                      break;              }
Missing Default,SlickUpdater,MainWindow,C:\repos\wigumen_SlickUpdater\SlickUpdater\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.mainWindow = ((SlickUpdater.MainWindow)(target));                            #line 12 "..\..\MainWindow.xaml"              this.mainWindow.Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.MainWindow_Loaded);                            #line default              #line hidden                            #line 13 "..\..\MainWindow.xaml"              this.mainWindow.SizeChanged += new System.Windows.SizeChangedEventHandler(this.UpdateSettings);                            #line default              #line hidden              return;              case 2:              this.tabs = ((System.Windows.Controls.TabControl)(target));              return;              case 3:              this.mainTab = ((System.Windows.Controls.TabItem)(target));              return;              case 4:              this.a3ModList = ((System.Windows.Controls.ListView)(target));              return;              case 5:              this.version = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 6:              this.servVersion = ((System.Windows.Controls.GridViewColumn)(target));              return;              case 7:              this.logo_image = ((System.Windows.Controls.Image)(target));                            #line 41 "..\..\MainWindow.xaml"              this.logo_image.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.showrepo);                            #line default              #line hidden              return;              case 8:              this.a3RefreshButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\MainWindow.xaml"              this.a3RefreshButton.Click += new System.Windows.RoutedEventHandler(this.a3RefreshButton_Click);                            #line default              #line hidden              return;              case 9:              this.refreshImage = ((System.Windows.Controls.Image)(target));                            #line 44 "..\..\MainWindow.xaml"              this.refreshImage.MouseEnter += new System.Windows.Input.MouseEventHandler(this.a3RefreshImageEnter);                            #line default              #line hidden              return;              case 10:              this.launchOptionsButton = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\MainWindow.xaml"              this.launchOptionsButton.Click += new System.Windows.RoutedEventHandler(this.launchOptionsButton_Click);                            #line default              #line hidden              return;              case 11:              this.joinButton = ((System.Windows.Controls.Button)(target));                            #line 54 "..\..\MainWindow.xaml"              this.joinButton.Click += new System.Windows.RoutedEventHandler(this.LaunchAndJoin);                            #line default              #line hidden              return;              case 12:              this.arma3Button = ((System.Windows.Controls.Button)(target));                            #line 55 "..\..\MainWindow.xaml"              this.arma3Button.Click += new System.Windows.RoutedEventHandler(this.OnArma3Clicked);                            #line default              #line hidden              return;              case 13:              this.progressBarGrid = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.indivProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.indivProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 16:              this.midProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.midProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 18:              this.totalProgressTxt = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.totalProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 20:              this.eventbox = ((System.Windows.Controls.ListBox)(target));              return;              case 21:              this.eventbutton = ((System.Windows.Controls.Button)(target));                            #line 70 "..\..\MainWindow.xaml"              this.eventbutton.Click += new System.Windows.RoutedEventHandler(this.refreshEvents);                            #line default              #line hidden              return;              case 22:              this.Guidebox = ((System.Windows.Controls.ListBox)(target));              return;              case 23:              this.va2dirbox = ((System.Windows.Controls.Grid)(target));              return;              case 24:              this.a3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 98 "..\..\MainWindow.xaml"              this.a3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3DirText_TextChanged);                            #line default              #line hidden              return;              case 25:              this.ts3DirText = ((System.Windows.Controls.TextBox)(target));                            #line 100 "..\..\MainWindow.xaml"              this.ts3DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a3Ts3Text_TextChanged);                            #line default              #line hidden              return;              case 26:                            #line 102 "..\..\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.logging_click);                            #line default              #line hidden              return;              case 27:              this.repomenu = ((System.Windows.Controls.ComboBox)(target));                            #line 105 "..\..\MainWindow.xaml"              this.repomenu.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.setActiveRepo);                            #line default              #line hidden              return;              case 28:              this.a2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 107 "..\..\MainWindow.xaml"              this.a2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.a2DirText_TextChanged);                            #line default              #line hidden              return;              case 29:              this.va2DirText = ((System.Windows.Controls.TextBox)(target));                            #line 108 "..\..\MainWindow.xaml"              this.va2DirText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.va2DirText_TextChanged);                            #line default              #line hidden              return;              case 30:              this.A3ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 111 "..\..\MainWindow.xaml"              this.A3ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A3ModPath_TextChanged);                            #line default              #line hidden              return;              case 31:              this.A2ModPath = ((System.Windows.Controls.TextBox)(target));                            #line 113 "..\..\MainWindow.xaml"              this.A2ModPath.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.A2ModPath_TextChanged);                            #line default              #line hidden              return;              case 32:              this.verifyButton = ((System.Windows.Controls.Button)(target));                            #line 115 "..\..\MainWindow.xaml"              this.verifyButton.Click += new System.Windows.RoutedEventHandler(this.verify_click);                            #line default              #line hidden              return;              case 33:              this.suIcon = ((System.Windows.Controls.Image)(target));                            #line 121 "..\..\MainWindow.xaml"              this.suIcon.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.nyanEgg);                            #line default              #line hidden              return;              case 34:              this.nyan = ((System.Windows.Controls.WebBrowser)(target));              return;              case 35:              this.repoGen = ((System.Windows.Controls.TabItem)(target));              return;              case 36:              this.outputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.outputDirListBox_DragEnter);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.Drop += new System.Windows.DragEventHandler(this.outputDirListBox_Drop);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.outputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 135 "..\..\MainWindow.xaml"              this.outputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.outputDirListBox_PreviewMouseMove);                            #line default              #line hidden              return;              case 37:              this.repoGen_Options = ((System.Windows.Controls.Button)(target));                            #line 142 "..\..\MainWindow.xaml"              this.repoGen_Options.Click += new System.Windows.RoutedEventHandler(this.repoGen_Options_Click);                            #line default              #line hidden              return;              case 38:              this.repoGen_Refresh = ((System.Windows.Controls.Button)(target));                            #line 143 "..\..\MainWindow.xaml"              this.repoGen_Refresh.Click += new System.Windows.RoutedEventHandler(this.repoGen_Refresh_Click);                            #line default              #line hidden              return;              case 39:              this.inputDirListBox = ((System.Windows.Controls.DataGrid)(target));                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.inputDirListBox_PreviewMouseLeftButtonDown);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.inputDirListBox_PreviewMouseMove);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.DragEnter += new System.Windows.DragEventHandler(this.inputDirListBox_DragEnter);                            #line default              #line hidden                            #line 145 "..\..\MainWindow.xaml"              this.inputDirListBox.Drop += new System.Windows.DragEventHandler(this.inputDirListBox_Drop);                            #line default              #line hidden              return;              case 40:              this.repoGenButton = ((System.Windows.Controls.Button)(target));                            #line 152 "..\..\MainWindow.xaml"              this.repoGenButton.Click += new System.Windows.RoutedEventHandler(this.repoGenButton_Click);                            #line default              #line hidden              return;              case 41:              this.helpButton = ((System.Windows.Controls.Button)(target));                            #line 153 "..\..\MainWindow.xaml"              this.helpButton.Click += new System.Windows.RoutedEventHandler(this.helpButton_Click);                            #line default              #line hidden              return;              }
