Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NuGet.Common,Console,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Console.cs,Log,Cyclomatic complexity of the method is 9
Complex Method,NuGet,RequestHelper,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\RequestHelper.cs,GetResponse,Cyclomatic complexity of the method is 9
Long Parameter List,NuGet,RequestHelper,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\RequestHelper.cs,GetResponse,The method has 5 parameters.
Long Statement,NuGet.Common,Console,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Console.cs,Write,The length of the statement  "		// Don't try to format strings that do not have arguments. We end up throwing if the original string was not meant to be a format token  " is 135.
Long Statement,NuGet.Common,Console,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Console.cs,WriteWarning,The length of the statement  "	string message = prependWarningText ? String.Format (CultureInfo.CurrentCulture' LocalizedResourceManager.GetString ("CommandLine_Warning")' value) : value; " is 156.
Long Statement,NuGet.Common,Console,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Console.cs,Confirm,The length of the statement  "		System.Console.Write (String.Format (CultureInfo.CurrentCulture' LocalizedResourceManager.GetString ("ConsoleConfirmMessage")' description)); " is 141.
Long Statement,NuGet.Common,Console,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Console.cs,Confirm,The length of the statement  "		return result.StartsWith (LocalizedResourceManager.GetString ("ConsoleConfirmMessageAccept")' StringComparison.OrdinalIgnoreCase); " is 130.
Long Statement,NuGet,ConsoleCredentialProvider,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\ConsoleCredentialProvider.cs,GetCredentials,The length of the statement  "	string message = credentialType == CredentialType.ProxyCredentials ? LocalizedResourceManager.GetString ("Credentials_ProxyCredentials") : LocalizedResourceManager.GetString ("Credentials_RequestCredentials"); " is 209.
Long Statement,NuGet,HttpClient,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\HttpClient.cs,CreateWebRequest,The length of the statement  "	httpRequest.UserAgent = String.Format (CultureInfo.InvariantCulture' "NuGet Bootstrapper/{0} ({1})"' typeof(HttpClient).Assembly.GetName ().Version' Environment.OSVersion); " is 172.
Long Statement,NuGet,ProxyCache,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\ProxyCache.cs,GetUserConfiguredProxy,The length of the statement  "	// Try reading from the settings. The values are stored as 3 config values http_proxy' http_proxy_user' http_proxy_password " is 123.
Long Statement,NuGet,ProxyCache,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\ProxyCache.cs,GetUserConfiguredProxy,The length of the statement  "	// Next try reading from the environment variable http_proxy. This would be specified as http://<username>:<password>@proxy.com " is 127.
Long Statement,NuGet,RequestHelper,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\RequestHelper.cs,GetResponse,The length of the statement  "			request.Proxy.Credentials = credentialProvider.GetCredentials (request' CredentialType.ProxyCredentials' retrying: proxyCredentialsRetryCount > 0); " is 147.
Long Statement,NuGet,RequestHelper,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\RequestHelper.cs,GetResponse,The length of the statement  "			// If we are using STS' the auth's being performed by a request header. We do not need to ask the user for credentials at this point. " is 133.
Long Statement,NuGet,RequestHelper,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\RequestHelper.cs,GetResponse,The length of the statement  "			request.Credentials = credentialProvider.GetCredentials (request' CredentialType.RequestCredentials' retrying: credentialsRetryCount > 0); " is 138.
Long Statement,NuGet,RequestHelper,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\RequestHelper.cs,GetResponse,The length of the statement  "				if (previousStatusCode == HttpStatusCode.ProxyAuthenticationRequired && response.StatusCode != HttpStatusCode.ProxyAuthenticationRequired) { " is 140.
Long Statement,NuGet,RequestHelper,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\RequestHelper.cs,IsAuthenticationResponse,The length of the statement  "	return response.StatusCode == HttpStatusCode.Unauthorized || response.StatusCode == HttpStatusCode.ProxyAuthenticationRequired; " is 127.
Long Statement,NuGet,RequestHelper,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\RequestHelper.cs,SetKeepAliveHeaders,The length of the statement  "	// KeepAlive is required for NTLM and Kerberos authentication. If we've never been authenticated or are using a different auth' we  " is 130.
Long Statement,NuGet,RequestHelper,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\RequestHelper.cs,IsNtlmOrKerberos,The length of the statement  "	return authType.IndexOf ("NTLM"' StringComparison.OrdinalIgnoreCase) != -1 || authType.IndexOf ("Kerberos"' StringComparison.OrdinalIgnoreCase) != -1; " is 150.
Long Statement,Bootstrapper,Program,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Program.cs,Main,The length of the statement  "	string exePath = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' @"NuGet\NuGet.exe"); " is 127.
Long Statement,Bootstrapper,Program,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Program.cs,DownloadExe,The length of the statement  "			// If multiple instances of the bootstrapper and launched' and the exe does not exist' it would cause things to go messy. This code is identical to the  " is 151.
Long Statement,Bootstrapper,Program,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Program.cs,GetConfigDocument,The length of the statement  "	var configPath = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData)' "NuGet"' "NuGet.config"); " is 127.
Long Statement,Bootstrapper,Program,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Program.cs,EnsurePackageRestoreConsent,The length of the statement  "	var node = document != null ? document.SelectSingleNode (@"configuration/packageRestore/add[@key='enabled']/@value") : null; " is 124.
Long Statement,Bootstrapper,Program,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Program.cs,EnsurePackageRestoreConsent,The length of the statement  "	bool consent = settingsValue.Equals ("true"' StringComparison.OrdinalIgnoreCase) || settingsValue == "1" || envValue.Equals ("true"' StringComparison.OrdinalIgnoreCase) || envValue == "1"; " is 188.
Magic Number,Bootstrapper,Program,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Program.cs,Main,The following statement contains a magic number: try {  	var processInfo = new ProcessStartInfo (exePath) {  		UseShellExecute = false'  		WorkingDirectory = Environment.CurrentDirectory  	};  	if (!File.Exists (exePath)) {  		var document = GetConfigDocument ();  		EnsurePackageRestoreConsent (document);  		ProxyCache.Instance = new ProxyCache (document);  		if (!Directory.Exists (Path.GetDirectoryName (exePath))) {  			Directory.CreateDirectory (Path.GetDirectoryName (exePath));  		}  		DownloadExe (exePath);  	}  	else if ((DateTime.UtcNow - File.GetLastWriteTimeUtc (exePath)).TotalDays > 10) {  		// Check for updates to the exe every 10 days  		processInfo.Arguments = "update -self";  		RunProcess (processInfo);  		File.SetLastWriteTimeUtc (exePath' DateTime.UtcNow);  	}  	processInfo.Arguments = ParseArgs ();  	return RunProcess (processInfo);  }  catch (Exception e) {  	WriteError (e);  }  
Magic Number,Bootstrapper,Program,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Program.cs,Main,The following statement contains a magic number: if (!File.Exists (exePath)) {  	var document = GetConfigDocument ();  	EnsurePackageRestoreConsent (document);  	ProxyCache.Instance = new ProxyCache (document);  	if (!Directory.Exists (Path.GetDirectoryName (exePath))) {  		Directory.CreateDirectory (Path.GetDirectoryName (exePath));  	}  	DownloadExe (exePath);  }  else if ((DateTime.UtcNow - File.GetLastWriteTimeUtc (exePath)).TotalDays > 10) {  	// Check for updates to the exe every 10 days  	processInfo.Arguments = "update -self";  	RunProcess (processInfo);  	File.SetLastWriteTimeUtc (exePath' DateTime.UtcNow);  }  
Magic Number,Bootstrapper,Program,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Program.cs,Main,The following statement contains a magic number: if ((DateTime.UtcNow - File.GetLastWriteTimeUtc (exePath)).TotalDays > 10) {  	// Check for updates to the exe every 10 days  	processInfo.Arguments = "update -self";  	RunProcess (processInfo);  	File.SetLastWriteTimeUtc (exePath' DateTime.UtcNow);  }  
Magic Number,Bootstrapper,Program,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Program.cs,DownloadExe,The following statement contains a magic number: using (var mutex = new Mutex (initiallyOwned: true' name: "NuGet.Bootstrapper"' createdNew: out created)) {  	try {  		// If multiple instances of the bootstrapper and launched' and the exe does not exist' it would cause things to go messy. This code is identical to the   		// way we handle concurrent installation of a package by multiple instances of NuGet.exe.  		if (created) {  			new HttpClient ().DownloadData (exePath);  		}  		else {  			// If a different instance of Bootstrapper created the mutex' wait for a minute to download the exe.  			mutex.WaitOne (6000);  		}  	}  	finally {  		mutex.ReleaseMutex ();  	}  }  
Magic Number,Bootstrapper,Program,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Program.cs,DownloadExe,The following statement contains a magic number: try {  	// If multiple instances of the bootstrapper and launched' and the exe does not exist' it would cause things to go messy. This code is identical to the   	// way we handle concurrent installation of a package by multiple instances of NuGet.exe.  	if (created) {  		new HttpClient ().DownloadData (exePath);  	}  	else {  		// If a different instance of Bootstrapper created the mutex' wait for a minute to download the exe.  		mutex.WaitOne (6000);  	}  }  finally {  	mutex.ReleaseMutex ();  }  
Magic Number,Bootstrapper,Program,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Program.cs,DownloadExe,The following statement contains a magic number: if (created) {  	new HttpClient ().DownloadData (exePath);  }  else {  	// If a different instance of Bootstrapper created the mutex' wait for a minute to download the exe.  	mutex.WaitOne (6000);  }  
Magic Number,Bootstrapper,Program,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Program.cs,DownloadExe,The following statement contains a magic number: mutex.WaitOne (6000);  
Missing Default,NuGet.Common,Console,C:\repos\imazen_Nuget.Bootstrapper\src\Nuget.Bootstrapper\Console.cs,Log,The following switch statement is missing a default case: switch (level) {  case MessageLevel.Info:  	WriteLine (message' args);  	break;  case MessageLevel.Warning:  	WriteWarning (message' args);  	break;  case MessageLevel.Debug:  	WriteColor (Out' ConsoleColor.Gray' message' args);  	break;  }  
