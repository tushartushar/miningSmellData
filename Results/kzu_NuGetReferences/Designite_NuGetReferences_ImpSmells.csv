Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Dynamic,DynamicReflectionObject,C:\repos\kzu_NuGetReferences\NuGetReferences\netfx\System\Dynamic\DynamicReflection.cs,Invoke,Cyclomatic complexity of the method is 8
Long Parameter List,Kzu.NuGetReferences,ReferencesGraphProvider,C:\repos\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,OnSelectionChanged,The method has 8 parameters. Parameters: pHierOld' itemidOld' pMISOld' pSCOld' pHierNew' itemidNew' pMISNew' pSCNew
Long Parameter List,System.Dynamic,DynamicReflectionObject,C:\repos\kzu_NuGetReferences\NuGetReferences\netfx\System\Dynamic\DynamicReflection.cs,FindBestMatchImpl,The method has 5 parameters. Parameters: binder' args' genericArgs' candidates' assignableFrom
Long Statement,Kzu.NuGetReferences,ReferencesGraphProvider,C:\repos\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,GetInstalledPackages,The length of the statement  "            var allPackages = packageInstaller.GetInstalledPackages().Where(x => projectPackages.Contains(Tuple.Create(x.Id' x.VersionString))); " is 132.
Long Statement,System.Dynamic,DynamicReflectionObject,C:\repos\kzu_NuGetReferences\NuGetReferences\netfx\System\Dynamic\DynamicReflection.cs,UnboxDynamic,The length of the statement  "                var binder = (ConvertBinder)Microsoft.CSharp.RuntimeBinder.Binder.Convert(CSharpBinderFlags.ConvertExplicit' typeof(object)' typeof(DynamicReflectionObject)); " is 158.
Empty Catch Block,Kzu.NuGetReferences,ReferencesGraphProvider,C:\repos\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,OnSelectionChanged,The method has an empty catch block.
Empty Catch Block,System.Dynamic,DynamicReflectionObject,C:\repos\kzu_NuGetReferences\NuGetReferences\netfx\System\Dynamic\DynamicReflection.cs,TryConvert,The method has an empty catch block.
Empty Catch Block,System.Dynamic,DynamicReflectionObject,C:\repos\kzu_NuGetReferences\NuGetReferences\netfx\System\Dynamic\DynamicReflection.cs,TryConvert,The method has an empty catch block.
Magic Number,Kzu.NuGetReferences,ReferencesGraphProvider,C:\repos\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,AddPackageNodes,The following statement contains a magic number: foreach (var nugetPackage in allPackages)              {                  var node = GetOrCreatePackageNode(context' parentNode()' nugetPackage);                  context.ReportProgress(++progress' count' null);                    if (context.CancelToken.IsCancellationRequested)                      break;                    context.CancelToken.ThrowIfCancellationRequested();                  System.Threading.Thread.Sleep(100);              }
Magic Number,Kzu.NuGetReferences,ReferencesGraphProvider,C:\repos\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,OnSelectionChanged,The following statement contains a magic number: if (pSCNew != null)              {                  try                  {                      uint c;                      pSCNew.CountObjects((uint)Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED' out c);                        if (c == 1)                      {                          object[] objects = new object[c];                          pSCNew.GetObjects((uint)Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED' c' objects);                            var selectedGraphNode = objects.FirstOrDefault() as ISelectedGraphNode;                          if (selectedGraphNode != null)                          {                              package.SelectedNode = selectedGraphNode;                              var selectedPackage = selectedGraphNode.Node.GetValue<IVsPackageMetadata>(ReferencesGraphSchema.PackageProperty);                              if (selectedPackage != null)                              {                                  var selection = new NuGetPackage                                  {                                      Id = selectedPackage.Id'                                      Title = selectedPackage.Title'                                      Version = selectedPackage.VersionString'                                      Authors = string.Join("' "' selectedPackage.Authors)'                                      InstallPath = selectedPackage.InstallPath'                                  };                                    if (this.selectionService == null)                                  {                                      // Get the service provider form Microsoft.VisualStudio.PlatformUI.HierarchyPivotNavigator                                      IServiceProvider serviceProvider = pSCNew.AsDynamicReflection()._navigator.ServiceProvider;                                      this.selectionService = new SelectionService(serviceProvider);                                  }                                    this.selectionService.Select(selection);                                    System.Threading.Tasks.Task.Factory.StartNew(() =>                                  {                                      System.Threading.Thread.Sleep(10);                                        object selected = selection;                                      var browsable = ((object)selectedPackage) as IBrowsablePattern;                                      if (browsable != null)                                          selected = browsable.GetBrowseObject();                                        ThreadHelper.Generic.Invoke(() => this.selectionService.Select(selected));                                  });                              }                            }                      }                  }                  catch { }              }
