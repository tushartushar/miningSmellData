Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,BeginGetGraphData,Cyclomatic complexity of the method is 9
Long Parameter List,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,OnSelectionChanged,The method has 8 parameters.
Long Statement,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,BeginGetGraphData,The length of the statement  "	if (context.Direction == GraphContextDirection.Self && context.RequestedProperties.Contains (DgmlNodeProperties.ContainsChildren)) { " is 132.
Long Statement,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,AddPackageNodes,The length of the statement  "	var filePath = parentNode.Properties.Where (pair => pair.Key.Id == "FilePath").Select (pair => pair.Value).OfType<string> ().FirstOrDefault (); " is 143.
Long Statement,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,GetOrCreateConfigNode,The length of the statement  "			fileNode = context.Graph.Nodes.GetOrCreate (nodeId' Path.GetFileName (packagesConfig.PhysicalPath)' CodeNodeCategories.ProjectItem); " is 132.
Long Statement,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,GetOrCreatePackageNode,The length of the statement  "	var nodeId = GraphNodeId.GetNested (parentId' GraphNodeId.GetPartial (CodeGraphNodeIdName.Member' package.Id)' GraphNodeId.GetPartial (CodeGraphNodeIdName.Parameter' package.VersionString)); " is 190.
Long Statement,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,GetInstalledPackages,The length of the statement  "	var projectPackages = new HashSet<Tuple<string' string>> (from package in XDocument.Load (packagesConfig).Root.Elements () " is 122.
Long Statement,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,GetInstalledPackages,The length of the statement  "	var allPackages = packageInstaller.GetInstalledPackages ().Where (x => projectPackages.Contains (Tuple.Create (x.Id' x.VersionString))); " is 136.
Long Statement,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,StartSearch,The length of the statement  "		var items = package.DevEnv.SolutionExplorer ().Solution.Traverse ().OfType<IItemNode> ().Where (item => item.DisplayName == "packages.config"); " is 143.
Long Statement,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,SearchNextItem,The length of the statement  "		var installedPackages = GetInstalledPackages (item.PhysicalPath).Where (x => x.Id.ToLowerInvariant ().Contains (normalizedTerm)).ToList (); " is 139.
Long Statement,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,SearchNextItem,The length of the statement  "		tracer.Info ("Found {0} packages installed matching {1} on package file {2}"' installedPackages.Count' normalizedTerm' item.PhysicalPath); " is 138.
Long Statement,Kzu.NuGetReferences,SolutionExtensions,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\SolutionExtensions.cs,GetId,The length of the statement  "	return GraphNodeId.GetNested (GraphNodeId.GetPartial (CodeGraphNodeIdName.Assembly' GetProjectFileUri (node.OwningProject.As<Project> ()))' GraphNodeId.GetPartial (CodeGraphNodeIdName.File' new Uri (node.PhysicalPath' UriKind.RelativeOrAbsolute))); " is 248.
Long Statement,Kzu.NuGetReferences,NuGetReferencesPackage,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\NuGetReferencesPackage.cs,Initialize,The length of the statement  "		var version = AppDomain.CurrentDomain.GetAssemblies ().Select (asm => asm.GetName ()).Where (name => name.Name.StartsWith ("NuGet.Tools")).Select (name => name.Version).FirstOrDefault (); " is 187.
Long Statement,Kzu.NuGetReferences,NuGetReferencesPackage,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\NuGetReferencesPackage.cs,Initialize,The length of the statement  "			DevEnv.MessageBoxService.Show (Strings.IncompatibleNuGet (version' Constants.ProductName' Constants.NuGetBuildVersion)' title: Constants.ProductName' icon: System.Windows.MessageBoxImage.Error); " is 194.
Long Statement,Kzu.NuGetReferences,NuGetReferencesPackage,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\NuGetReferencesPackage.cs,Initialize,The length of the statement  "		DevEnv.MessageBoxService.Show (Strings.FailedToLoadNuGetPackage' title: Constants.ProductName' icon: System.Windows.MessageBoxImage.Error); " is 139.
Empty Catch Block,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,OnSelectionChanged,The method has an empty catch block.
Magic Number,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,AddPackageNodes,The following statement contains a magic number: foreach (var nugetPackage in allPackages) {  	var node = GetOrCreatePackageNode (context' parentNode ()' nugetPackage);  	context.ReportProgress (++progress' count' null);  	if (context.CancelToken.IsCancellationRequested)  		break;  	context.CancelToken.ThrowIfCancellationRequested ();  	System.Threading.Thread.Sleep (100);  }  
Magic Number,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,AddPackageNodes,The following statement contains a magic number: System.Threading.Thread.Sleep (100);  
Magic Number,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,OnSelectionChanged,The following statement contains a magic number: if (pSCNew != null) {  	try {  		uint c;  		pSCNew.CountObjects ((uint)Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED' out c);  		if (c == 1) {  			object[] objects = new object[c];  			pSCNew.GetObjects ((uint)Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED' c' objects);  			var selectedGraphNode = objects.FirstOrDefault () as ISelectedGraphNode;  			if (selectedGraphNode != null) {  				package.SelectedNode = selectedGraphNode;  				var selectedPackage = selectedGraphNode.Node.GetValue<IVsPackageMetadata> (ReferencesGraphSchema.PackageProperty);  				if (selectedPackage != null) {  					var selection = new NuGetPackage {  						Id = selectedPackage.Id'  						Title = selectedPackage.Title'  						Version = selectedPackage.VersionString'  						Authors = string.Join ("' "' selectedPackage.Authors)'  						InstallPath = selectedPackage.InstallPath'  					};  					if (this.selectionService == null) {  						// Get the service provider form Microsoft.VisualStudio.PlatformUI.HierarchyPivotNavigator  						IServiceProvider serviceProvider = pSCNew.AsDynamicReflection ()._navigator.ServiceProvider;  						this.selectionService = new SelectionService (serviceProvider);  					}  					this.selectionService.Select (selection);  					System.Threading.Tasks.Task.Factory.StartNew (() => {  						System.Threading.Thread.Sleep (10);  						object selected = selection;  						var browsable = ((object)selectedPackage) as IBrowsablePattern;  						if (browsable != null)  							selected = browsable.GetBrowseObject ();  						ThreadHelper.Generic.Invoke (() => this.selectionService.Select (selected));  					});  				}  			}  		}  	} catch {  	}  }  
Magic Number,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,OnSelectionChanged,The following statement contains a magic number: try {  	uint c;  	pSCNew.CountObjects ((uint)Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED' out c);  	if (c == 1) {  		object[] objects = new object[c];  		pSCNew.GetObjects ((uint)Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED' c' objects);  		var selectedGraphNode = objects.FirstOrDefault () as ISelectedGraphNode;  		if (selectedGraphNode != null) {  			package.SelectedNode = selectedGraphNode;  			var selectedPackage = selectedGraphNode.Node.GetValue<IVsPackageMetadata> (ReferencesGraphSchema.PackageProperty);  			if (selectedPackage != null) {  				var selection = new NuGetPackage {  					Id = selectedPackage.Id'  					Title = selectedPackage.Title'  					Version = selectedPackage.VersionString'  					Authors = string.Join ("' "' selectedPackage.Authors)'  					InstallPath = selectedPackage.InstallPath'  				};  				if (this.selectionService == null) {  					// Get the service provider form Microsoft.VisualStudio.PlatformUI.HierarchyPivotNavigator  					IServiceProvider serviceProvider = pSCNew.AsDynamicReflection ()._navigator.ServiceProvider;  					this.selectionService = new SelectionService (serviceProvider);  				}  				this.selectionService.Select (selection);  				System.Threading.Tasks.Task.Factory.StartNew (() => {  					System.Threading.Thread.Sleep (10);  					object selected = selection;  					var browsable = ((object)selectedPackage) as IBrowsablePattern;  					if (browsable != null)  						selected = browsable.GetBrowseObject ();  					ThreadHelper.Generic.Invoke (() => this.selectionService.Select (selected));  				});  			}  		}  	}  } catch {  }  
Magic Number,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,OnSelectionChanged,The following statement contains a magic number: if (c == 1) {  	object[] objects = new object[c];  	pSCNew.GetObjects ((uint)Microsoft.VisualStudio.Shell.Interop.Constants.GETOBJS_SELECTED' c' objects);  	var selectedGraphNode = objects.FirstOrDefault () as ISelectedGraphNode;  	if (selectedGraphNode != null) {  		package.SelectedNode = selectedGraphNode;  		var selectedPackage = selectedGraphNode.Node.GetValue<IVsPackageMetadata> (ReferencesGraphSchema.PackageProperty);  		if (selectedPackage != null) {  			var selection = new NuGetPackage {  				Id = selectedPackage.Id'  				Title = selectedPackage.Title'  				Version = selectedPackage.VersionString'  				Authors = string.Join ("' "' selectedPackage.Authors)'  				InstallPath = selectedPackage.InstallPath'  			};  			if (this.selectionService == null) {  				// Get the service provider form Microsoft.VisualStudio.PlatformUI.HierarchyPivotNavigator  				IServiceProvider serviceProvider = pSCNew.AsDynamicReflection ()._navigator.ServiceProvider;  				this.selectionService = new SelectionService (serviceProvider);  			}  			this.selectionService.Select (selection);  			System.Threading.Tasks.Task.Factory.StartNew (() => {  				System.Threading.Thread.Sleep (10);  				object selected = selection;  				var browsable = ((object)selectedPackage) as IBrowsablePattern;  				if (browsable != null)  					selected = browsable.GetBrowseObject ();  				ThreadHelper.Generic.Invoke (() => this.selectionService.Select (selected));  			});  		}  	}  }  
Magic Number,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,OnSelectionChanged,The following statement contains a magic number: if (selectedGraphNode != null) {  	package.SelectedNode = selectedGraphNode;  	var selectedPackage = selectedGraphNode.Node.GetValue<IVsPackageMetadata> (ReferencesGraphSchema.PackageProperty);  	if (selectedPackage != null) {  		var selection = new NuGetPackage {  			Id = selectedPackage.Id'  			Title = selectedPackage.Title'  			Version = selectedPackage.VersionString'  			Authors = string.Join ("' "' selectedPackage.Authors)'  			InstallPath = selectedPackage.InstallPath'  		};  		if (this.selectionService == null) {  			// Get the service provider form Microsoft.VisualStudio.PlatformUI.HierarchyPivotNavigator  			IServiceProvider serviceProvider = pSCNew.AsDynamicReflection ()._navigator.ServiceProvider;  			this.selectionService = new SelectionService (serviceProvider);  		}  		this.selectionService.Select (selection);  		System.Threading.Tasks.Task.Factory.StartNew (() => {  			System.Threading.Thread.Sleep (10);  			object selected = selection;  			var browsable = ((object)selectedPackage) as IBrowsablePattern;  			if (browsable != null)  				selected = browsable.GetBrowseObject ();  			ThreadHelper.Generic.Invoke (() => this.selectionService.Select (selected));  		});  	}  }  
Magic Number,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,OnSelectionChanged,The following statement contains a magic number: if (selectedPackage != null) {  	var selection = new NuGetPackage {  		Id = selectedPackage.Id'  		Title = selectedPackage.Title'  		Version = selectedPackage.VersionString'  		Authors = string.Join ("' "' selectedPackage.Authors)'  		InstallPath = selectedPackage.InstallPath'  	};  	if (this.selectionService == null) {  		// Get the service provider form Microsoft.VisualStudio.PlatformUI.HierarchyPivotNavigator  		IServiceProvider serviceProvider = pSCNew.AsDynamicReflection ()._navigator.ServiceProvider;  		this.selectionService = new SelectionService (serviceProvider);  	}  	this.selectionService.Select (selection);  	System.Threading.Tasks.Task.Factory.StartNew (() => {  		System.Threading.Thread.Sleep (10);  		object selected = selection;  		var browsable = ((object)selectedPackage) as IBrowsablePattern;  		if (browsable != null)  			selected = browsable.GetBrowseObject ();  		ThreadHelper.Generic.Invoke (() => this.selectionService.Select (selected));  	});  }  
Magic Number,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,OnSelectionChanged,The following statement contains a magic number: System.Threading.Tasks.Task.Factory.StartNew (() => {  	System.Threading.Thread.Sleep (10);  	object selected = selection;  	var browsable = ((object)selectedPackage) as IBrowsablePattern;  	if (browsable != null)  		selected = browsable.GetBrowseObject ();  	ThreadHelper.Generic.Invoke (() => this.selectionService.Select (selected));  });  
Magic Number,Kzu.NuGetReferences,ReferencesGraphProvider,F:\newReposMay17\kzu_NuGetReferences\NuGetReferences\SolutionExplorer\ReferencesGraphProvider.cs,OnSelectionChanged,The following statement contains a magic number: System.Threading.Thread.Sleep (10);  
